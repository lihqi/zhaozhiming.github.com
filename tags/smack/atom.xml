<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: smack | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/tags/smack/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2016-12-13T11:25:35+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Openfire和Smack进行即时通讯消息开发]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/04/20/openfire-smack-useage/"/>
    <updated>2015-04-20T09:41:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/04/20/openfire-smack-useage</id>
    <content type="html"><![CDATA[<p>{% img /images/post/2015-4/openfire.png %}</p>

<p><a href="http://www.igniterealtime.org/index.jsp">Openfire</a>是由Ignite Realtime公司用Java开发的一个开源即时通讯服务器，基于XMPP协议（Jabber）进行消息交互，最新版本是3.9.3。该公司旗下有多个Java客户端可供使用，较常使用的是<a href="http://www.igniterealtime.org/projects/smack/index.jsp">Smack</a>，最新的版本是4.1.0，最新的版本与以前的版本相比有较大改动，下面我们就来介绍一下Openfire和Smack的使用。</p>

<!--more-->


<p></p>

<h2>Openfire安装</h2>

<p>Openfire的安装非常简单，你可以通过下面几种方式进行安装。</p>

<h4>docker镜像</h4>

<p>最简单的方式你可以通过docker下载<a href="https://registry.hub.docker.com/u/sameersbn/openfire/dockerfile/">Openfire的镜像</a>，然后执行下面的命令启动openfire容器。</p>

<p>{% codeblock lang:sh %}
docker run &mdash;name=myopenfire -d \</p>

<pre><code>-p 9090:9090 -p 5222:5222 -p 5223:5223 \ 
-p 7777:7777 -p 7070:7070 -p 7443:7443 \ 
-p 5229:5229 -p 5269:5269 sameersbn/openfire:3.9.3-2
</code></pre>

<p>{% endcodeblock %}</p>

<h4>直接安装</h4>

<p>这里是openfire的<a href="http://www.igniterealtime.org/builds/openfire/docs/latest/documentation/install-guide.html">安装向导</a>，有各个平台的指南，不过首先要安装JDK1.5+，然后按照指南进行安装即可。</p>

<h2>Smack</h2>

<p>最新的Smack版本是4.1.0，跟之前版本的API有很大区别，据说4.2.0的API差别会更大，<a href="https://www.igniterealtime.org/builds/smack/docs/latest/documentation/">这里</a>是Smack4.1.0的代码使用示例。</p>

<h4>创建连接</h4>

<p>不同于以前版本的是ConnectionConfig不再是new出来的，而是通过builder来创建。这个导致Spring的integration-xmpp组件不支持使用，只能自己写连接的类了。</p>

<p>{% codeblock lang:java %}</p>

<pre><code>public XMPPTCPConnection createConnection() throws Exception {
    XMPPTCPConnectionConfiguration connectionConfig = XMPPTCPConnectionConfiguration.builder()
            .setUsernameAndPassword("username", "password")
            .setServiceName("your.server.name")
            .setHost("your.server.ip")
            .setConnectTimeout(3000)
            .setSendPresence(false) // 设置用户是否上线
            .setSecurityMode(ConnectionConfiguration.SecurityMode.disabled) //不使用安全模式
            .build();

    XMPPTCPConnection connection = new XMPPTCPConnection(connectionConfig);
    connection.connect().login(); 
    //这里的login方法如果没传username和password，就是以之前set的用户登录，传了的话就是以传入的用户登录
    return  connection;
}
</code></pre>

<p>{% endcodeblock %}</p>

<h4>创建用户</h4>

<p>像AccountManager这类对象也不再是new出来的，而是通过getInstance传入connection对象得到。</p>

<p>{% codeblock lang:java %}</p>

<pre><code>public void createUser(XMPPTCPConnectionConfiguration connection) throws Exception {
    AccountManager accountManager = AccountManager.getInstance(connection);
    accountManager.createAccount("username", "password");
}
</code></pre>

<p>{% endcodeblock %}</p>

<h4>发送消息</h4>

<p>{% codeblock lang:java %}</p>

<pre><code>public void sendMessage(XMPPTCPConnectionConfiguration connection) throws Exception {
    ChatManager chatManager = ChatManager.getInstanceFor(connection);
    Chat chat = chatManager.createChat("jid like username@your.server.name");
    chat.sendMessage("Hello word1!");
}
</code></pre>

<p>{% endcodeblock %}</p>

<h4>获取离线消息</h4>

<p>注意在创建连接时如果setSendPresence没有设为false，那么在获取离线消息时是始终获取不到的，因为setSendPresence表示已上线，一旦用户上线离线消息就没有了。</p>

<p>{% codeblock lang:java %}</p>

<pre><code>public void receiveOfflineMessages(XMPPTCPConnectionConfiguration connection) throws Exception {
    OfflineMessageManager offlineMessageManager = new OfflineMessageManager(connection);
    List&lt;Message&gt; messages = offlineMessageManager.getMessages();
    for (Message message : messages) {
        System.out.println(message);
    }
}
</code></pre>

<p>{% endcodeblock %}</p>

<h4>删除离线消息</h4>

<p>离线消息是根据时间来删除的，我们可以在header中获取到消息的时间戳。</p>

<p>{% codeblock lang:java %}</p>

<pre><code>public void deleteOfflineMessages(XMPPTCPConnectionConfiguration connection) throws Exception {
    OfflineMessageManager offlineMessageManager = new OfflineMessageManager(connection);
    List&lt;OfflineMessageHeader&gt; headers = offlineMessageManager.getHeaders();
    List&lt;String&gt; stamps = new ArrayList&lt;&gt;();
    for (OfflineMessageHeader header : headers) {
        stamps.add(header.getStamp());
    }

    offlineMessageManager.deleteMessages(stamps);
}
</code></pre>

<p>{% endcodeblock %}</p>

<p>消息的时间我们还可以通过这种方式获取，这里获取到的时间是一个Date对象，而上面的方式是获取一个时间的String。</p>

<p>{% codeblock lang:java %}</p>

<pre><code>public long getMessageTime(Message message) {
    DelayInformation delay = message.getExtension(DelayInformation.ELEMENT, DelayInformation.NAMESPACE);
    if (delay == null) return 0;
    if (delay.getStamp() == null) return 0;

    return delay.getStamp().getTime();
}
</code></pre>

<p>{% endcodeblock %}</p>

<h4>创建聊天室</h4>

<p>Smack还可以创建多人聊天，openfire服务器搭建好后会默认创建一个名为conference的分组聊天服务，我们可以在上面创建聊天室。</p>

<p>{% codeblock lang:java %}</p>

<pre><code>public void createRoom(XMPPTCPConnectionConfiguration connection) throws Exception {
    MultiUserChatManager multiUserChatManager = MultiUserChatManager.getInstanceFor(connection);
    MultiUserChat muc = multiUserChatManager.getMultiUserChat("room jid like roomname@conference.your.server.name");
    muc.createOrJoin("nickname");

    Form form = muc.getConfigurationForm();
    Form submitForm = form.createAnswerForm();
    List&lt;FormField&gt; fields = form.getFields();
    for (FormField field : fields) {
        if (!FormField.Type.hidden.equals(field.getType()) &amp;&amp; field.getVariable() != null) {
            submitForm.setDefaultAnswer(field.getVariable());
        }
    }
    // 这里设置聊天室为公共聊天室
    submitForm.setAnswer("muc#roomconfig_publicroom", true);
    // 这里设置聊天室是永久存在的
    submitForm.setAnswer("muc#roomconfig_persistentroom", true);
    muc.sendConfigurationForm(submitForm);
}
</code></pre>

<p>{% endcodeblock %}</p>

<h4>发送多人聊天消息</h4>

<p>注意: 在发送聊天室消息之前，必须先加入聊天室(调用join方法)，否则发送的消息实际上是没有发送成功的。</p>

<p>{% codeblock lang:java %}</p>

<pre><code>public void sendRoomMessage(XMPPTCPConnectionConfiguration connection) throws Exception {
    MultiUserChatManager multiUserChatManager = MultiUserChatManager.getInstanceFor(connection);
    MultiUserChat muc = multiUserChatManager.getMultiUserChat("room jid like roomname@conference.your.server.name");
    muc.createOrJoin("nickname");
    muc.sendMessage("hello world");
}
</code></pre>

<p>{% endcodeblock %}</p>

<h4>获取聊天室消息</h4>

<p>获取聊天室消息，是在加入聊天室时传入一个DiscussionHistory对象，这个对象可以设置需要获取多少条聊天记录，或者从什么时候开始的聊天记录等。<br/>
注意: nextMessage方法如果不带超时参数，会使用默认的连接超时时间，一般是5S，加入时间参数可以缩短整个方法的执行时间。</p>

<p>{% codeblock lang:java %}</p>

<pre><code>public List&lt;Message&gt; getRoomChat(XMPPTCPConnectionConfiguration connection) throws Exception {
    MultiUserChatManager multiUserChatManager = MultiUserChatManager.getInstanceFor(connection);
    MultiUserChat muc = multiUserChatManager.getMultiUserChat("room jid like roomname@conference.your.server.name");
    DiscussionHistory discussionHistory = new DiscussionHistory();
    //取某个时间点开始的聊天室消息
    discussionHistory.setSince(new Date(1427090003460L));
    muc.createOrJoin("nick", null, discussionHistory, connection.getPacketReplyTimeout());
    List&lt;Message&gt; messages = new ArrayList&lt;&gt;();
    while (true) {
        //这里超时时间设置为100毫秒
        Message message = muc.nextMessage(100);
        if (message == null) break;

        System.out.println(message);
        messages.add(message);
    }
    return messages;
}
</code></pre>

<p>{% endcodeblock %}</p>

<h2>保存聊天消息</h2>

<p>Openfire一般是不保存历史消息的，包括P2P(个人对个人)或MUC(多人聊天)的都不保存，离线消息会暂时保存在<code>ofOffline</code>这张表中，如果离线消息已读就会从该表中删除。</p>

<p>如果我们需要保存历史消息可以通过添加插件的方式来记录。</p>

<ul>
<li>在Openfire控制台，进入<code>插件</code>页面，选择<code>有效的插件</code>，在里面选择Monitoring Service进行添加。</li>
</ul>


<p>{% img /images/post/2015-4/monitoring_service.png %}</p>

<ul>
<li>安装完成后可以在<code>插件</code>页面看到已经安装好的插件。</li>
</ul>


<p>{% img /images/post/2015-4/openfire_plugin.png %}</p>

<ul>
<li>在<code>服务器</code>页面会看到新增了2个子页面，<code>归档文件</code>和<code>统计表</code>，进入<code>归档文件</code>页面的存档设置勾上<code>Archive one-to-one chats</code>和<code>Archive group chats</code>选项。</li>
</ul>


<p>{% img /images/post/2015-4/openfire_archive.png %}</p>

<ul>
<li>设置好后以后不管是个人聊天还是聊天室的聊天记录都会记录到数据库的<code>ofMessageArchive</code>表中，不过消息是异步保存的，大概会在消息发送后1分钟左右再存到数据库。</li>
</ul>

]]></content>
  </entry>
  
</feed>
