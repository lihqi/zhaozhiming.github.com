<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: lean | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/tags/lean/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2016-05-17T13:59:19+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[读书笔记——沸腾十五年，看板方法，精益创业]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/05/09/read-book-note-2014-4/"/>
    <updated>2014-05-09T06:43:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/05/09/read-book-note-2014-4</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2014-5/april_book.jpg"></p>

<!--more-->


<p></p>

<h2>沸腾十五年</h2>

<p><img class="right" src="/images/post/2014-5/china-15-year.jpg"></p>

<p>沸腾十五年这本书介绍了中国互联网1995～2010这15年间，中国互联网公司从无到有，从小到大，各种兴衰成败的故事。</p>

<p>里面有一个比较好玩的段子，讲的是联众（大家应该都知道，就是以前做休闲游戏平台的，后来被腾讯无情超越）刚开始把游戏平台做出来的时候，用户非常少，经常找不到人可以开一桌麻将或者斗地主，用户等着等着不耐烦就走了。联众的几位创始开发看到这种情况急得不得了，本来上线的人就少，经过招呼亲朋好友卖广告什么的好不容易来了点人吧，还经常因为凑不到一桌游戏而让人给跑了。后来他们想了个办法，看到有上线的用户凑不到一桌开不了游戏的，就几个开发人员一起点进去陪用户玩，这样来把用户留住，甚至有的开发一人开了好几个账号同时陪用户玩游戏。靠着这种打不死的精神，后来联众就慢慢做大了。</p>

<p>看完书会让人热血沸腾，恨不得马上投身互联网浪潮，但仔细一想书中介绍的都是成功的互联网企业，在这些光彩夺目的互联网公司的光芒照耀下，让人看不到那些同期出生但又失败的互联网公司，这些公司的数量应该是成功者的N倍。我们要时刻充满激情来对待工作和生活，但在这个浮躁的社会也需要时刻保持一颗冷静的心。</p>

<h2>看板方法</h2>

<p><img class="right" src="/images/post/2014-5/kanban.jpg"></p>

<p>有幸参加了David Anderson关于看板方法的培训，回来后把看板方法的书认真研读了一遍，对其中的观点很是赞同。</p>

<h3>缩短范围</h3>

<p><code>在项目过程中需要舍弃一些东西进行权衡时，传统的项目经理会选择延期交付、增加资源投入、缩短范围或三者不同程度兼而有之;敏捷项目的明确共识是缩短范围，保障交付时间。</code><br/>
在有些东西要权衡时，为什么敏捷项目只选择缩短范围呢？<br/>
* 首先看如果选择延期交付会造成什么后果。由于你无法兑现之前的交付承诺，导致了与业务之间的不信任关系，业务无法相信你下次是否还能按时完成交付。<br/>
* 再看增加资源投入。在软件开发中，增加资源投入就意味着加人，但在《人月神话》里面已经说过了，<code>在一个已经延迟的项目里面增加人手，只会导致这个项目更加延迟</code>。<br/>
* 最后是缩短范围。缩小范围不是将业务的需求全部去掉，而是保留其中业务认为最主要的一部分，缩减业务认为优先级不是特别高的一部分，这样也可以让业务对需求有更清晰的认识。</p>

<p>项目的三要素：时间、金钱和质量，我觉得是三者是一个能量守恒的关系，如果提高其中的两项，那另外一项是要降低的，不可能三者同时提高。业务经常要求功能要多（金钱），上线时间要早（时间），传统项目迫于业务的压力，经常会选择降低质量（质量）来达到业务的前面两个要求，而敏捷项目首先会保持质量这一高标准，然后在保证按时交付的前提下，和业务PK交付的需求。</p>

<h3>降低变异性</h3>

<p>变异性是导致任务堆积，项目不能按时交付等的风险因素。降低变异性有如下好处：
* 降低变异性可以减少WIP，使得平均前置时间下降。
* 降低变异性能够减少对富余时间的需要（富余时间我理解就是预估工作量的buffer）。
* 降低变异性有利于实现资源平衡，潜在地降低对人数的需求。
什么地方可以体现变异性？<br/>
比如手工测试就存在变异性，手工测试会因为某些人为因素而认为测试是失败的，但实际上测试是成功的，结果就造成了开发过程中的浪费，乃至阻碍。可以通过自动化测试消除手工测试的变异性，自动化测试稳定而且准确。<br/>
还有比如在编写story的时候，如果story使用不同的方式来描述也会存在变异性，会让开发需要经常切换不同的思维或者角度去理解需求，出错率较高。可以通过编写一套团队认为合适的story模板来消除这种变异性。</p>

<h3>其他</h3>

<ul>
<li>敏捷开发中有很多对业务没有实际价值的成本，有这么几种：事务成本（搭建环境），协调成本（各种会议），破坏负载（软件缺陷）。敏捷中的会议是协调成本，以精益的角度来将要消除这种浪费。</li>
<li>虽然看板中强调前置时间少，交付速率高，但也不能以牺牲可预测性来换取这些指标。可预测在敏捷中很关键，可预测的交付会与用户建立信任关系，牺牲可预测性来提高短期的前置时间和交付速率是不可取的。</li>
</ul>


<h2>精益创业</h2>

<p><img class="right" src="/images/post/2014-5/lean.jpg"></p>

<h3>MVP(最小化可行产品)</h3>

<p>MVP是指一个最小化的可以获得用户反馈的产品，可以帮助创业者尽早开启学习认知的历程，它不一定是实实在在的产品，它是用最快的方式，以最少的精力完成'开发-测量-认知'的反馈循环。比如Dropbox在他们还未开发出产品之前，把一段幽默风趣的产品介绍视频作为他们的MVP放到网上，从而吸引了大量公测用户，为他们指明产品的正确方向。</p>

<h2>低质量</h2>

<p>质量低下的产品可能会造成重新返工、交付延期、用户的流失，每个做产品的人，包括设计、开发、测试，每个人都会以高质量为标准，在敏捷开发中更是要求产品质量必须是高标准，但坚持高质量的前提是我们已经知道产品的哪些功能是用户需要的，如果在用户需要的功能上偷工减料势必会造成用户流失。<br/>
但在创业的时候，很多东西都是未知的，用户不知道自己想要什么，创业者可能连哪些人是用户都不知道，在不知道产品有哪些功能的情况下，坚持产品质量的高标准就没有什么必要了。<br/>
创业阶段更需要是快速推出一个MVP产品，获得用户反馈，即使质量低下也未必不受用户欢迎。</p>

<h3>其他</h3>

<p>精益创业的常规工作是对比测试、持续部署和顾客测试，精益创业的技巧包括快速迭代/基于数据制定决策，以及早期顾客介入。</p>

<p>自己写的读书笔记不咋的，这里看到了另外一篇关于《精益创业》的读书笔记，非常完整地概括了这本书的观点，是前JavaEye的创始人范凯写的，点击<a href="http://robbinfan.com/blog/27/lean-startup">这里</a>查看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读《丰田生产方式》——联系敏捷开发的思考]]></title>
    <link href="http://zhaozhiming.github.io/blog/2012/08/06/read-toyota-product-method/"/>
    <updated>2012-08-06T10:16:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2012/08/06/read-toyota-product-method</id>
    <content type="html"><![CDATA[<p>平时工作和同事讨论敏捷，曾多次听到丰田的精益思想，说是很多敏捷的想法都是从丰田的精益思想中得来的，后来在Kent Beck的《解析极限编程》里看到有这样一本书是讲丰田的精益思想的，找来看了一下，发现书中讲的一些思想或者实践和敏捷开发很相似，下面我就讲讲我对于丰田生产方式和敏捷开发的一些联系。</p>

<!--more-->


<p></p>

<h2>一、逆向思维，由生产的最后一道工序为起点，从后往前推进。</h2>

<p>丰田生产方式的两大支柱是准时化和自动化。准时化（Just In Time）是指通过流水作业装配一辆汽车的过程中，所需零部件在需要的时刻，以需要的数量，不多不少的送到生产线的旁边。如何达到这种不多不少的状态呢？丰田的做法是由生产的最后一道工序为起点，从后往前推进。这样以最后要生产的汽车数量，就可以推测所需的零部件各是多少，从而达到降低浪费的目的。</p>

<p>在敏捷开发中，我们如何做到准时化？从相关的敏捷实践来看，测试驱动开发（TDD）就是达到这一目的的过程。先从原始需求上面得到一个个的Story，Story规定了需求的入口和出口，然后再驱动出测试案例，最后由测试案例驱动出产品代码，这样就能保证产品代码的功能是包括了原始需求所要求的功能，但又避免产生过渡设计。这个也是减少浪费的一种过程。</p>

<h2>二、每个工人都有一根警报线，在生产过程中发现产品有问题，随时拉线让整个生产线停止，等待解决问题后再恢复生产。</h2>

<p>丰田生产方式的另外一个支柱是自动化。丰田使用了很多自动化机器，但自动化的标准不是简单的去使用机器，而是实现人的自动化。丰田几乎所有的机器设备都装有自动停止装置，平时机器自动运转的时候用不到人，如果生产过程中发现问题，人会去停止机器，然后修复问题，重新启动机器。如果在生产过程中发现问题没有及时停止生产，那就可能生产出大量的残次品，这些残次品无法装配到汽车上，是一种很大的浪费。</p>

<p>在敏捷开发中，持续集成体现的就是这种自动化思想。在持续集成的过程中，一旦发现问题（比如单元测试跑失败了），服务器就会马上停止构建，并通知相关的开发人员进行问题修复，等问题修复完成后，再重新进行构建。这样每当问题出现，我们就可以以最小的代价找到问题的根源，然后修复它。如果等问题遗留到后面的测试阶段或者生产阶段，再去找问题的根源，所需的代价就要大的多得多。</p>

<p>光有持续集成的服务器还不行，服务器不会自己去编译、测试、部署，所有这些行为都需要人去开发出相应的脚本，然后在服务器上运行，这就是所谓的“人的自动化”。开发人员应该将所有可以自动化的东西都做成自动化，让单元测试自动化，集成测试自动化，部署自动化，总之一个目的，减少浪费，这也是丰田生产一直追求的目标之一。</p>

<h2>三、看板</h2>

<p>看板在丰田生产中是一种工具，在生产中起到一个传递情报和指令的作用。</p>

<p>敏捷开发很好的运用了看板。有过敏捷开发经验的同学应该知道，敏捷中的看板就是整天摆在你跟前的那块白板，白板上将开发过程分成好几个阶段，每个阶段上面贴着该阶段下的开发任务，通过白板可以随时了解项目的进展。</p>

<h2>其他思想和实践</h2>

<p>除了和敏捷开发有这些联系外，丰田生产方式还有一些思想和实践适合软件开发。</p>

<h4>一人掌握多种技能，每个人都是多面手。</h4>

<p>由于历史和文化的原因，美国的的制度是，车工始终是车工，焊工永远是焊工；日本的制度是，工人既能操作车床，也能开钻床，而且能焊接，能够学会和掌握多种技能。</p>

<p>两种制度孰优孰劣很难确定，但个人认为，在软件开发高速发展的今天，开发人员应该要有更高的要求。开发人员所掌握的技能不仅仅是会编写产品代码，还要会写单元测试，会部署，会搭建环境等等。比如在缺少测试人员的情况下，开发人员可以自己测试，依靠开发的编程技能可以写出更好的测试代码。要能够快速学会和掌握多种技能。</p>

<h4>反复问5个为什么</h4>

<p>比如一台机器不转动了，你就要问：</p>

<ol>
<li>为什么机器停了？——“因为超负荷，保险丝断了。”</li>
<li>“为什么超负荷了呢？”——“因为轴承部分的润滑不够。"</li>
<li>&ldquo;为什么润滑不够？”——“因为润滑泵吸不上油来。”</li>
<li>“为什么吸不上油来呢？”——“因为油泵轴磨损，松动了。”</li>
<li>“为什么磨损了呢？”——因为没有安装过滤器，混进了铁屑。”</li>
</ol>


<p>通过问5个为什么就可以知道需要安装过滤器了。如果问题问的不彻底，可能是加上润滑油，或者换上油泵轴了事，这样等过了一段时间后问题还是会出现。丰田生产方式可以说是丰田人反复问5个为什么才创造出来的。</p>

<h4>拥抱小团队，不要大块头</h4>

<p>团队合作高于一切，由于合作或其他种种原因，人少的团队反而容易取胜。小船容易转舵，大船步履阑珊，小团队的灵活性更强，这也符合敏捷开发的原则——要做到简洁。</p>
]]></content>
  </entry>
  
</feed>
