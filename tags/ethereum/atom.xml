<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: ethereum | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/tags/ethereum/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2018-04-29T17:13:57+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[以太坊工具包 Ethers.js 使用介绍]]></title>
    <link href="http://zhaozhiming.github.io/blog/2018/04/25/how-to-use-ethers-dot-js/"/>
    <updated>2018-04-25T20:18:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2018/04/25/how-to-use-ethers-dot-js</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2018/04/ethers.png" width="400" height="300"></p>

<p>在之前的文章介绍过，以太坊提供了两种形式的 API，一种是 <a href="https://github.com/ethereum/wiki/wiki/JSON-RPC">JSON RPC</a>，另外一种是 <a href="https://github.com/ethereum/wiki/wiki/JavaScript-API">Javascript API</a> —— 通过 Web3 这个工具包进行 API 调用，Web3 功能强大但缺点就是账号相关的 API 比较少，而且它底层用到了一些 Node 原生库的依赖，导致其在 React Native（以下简称 RN） 中使用会有一些问题，因为 Node 和 RN 是 2 个不同的环境。</p>

<p>所以今天给大家介绍另外一个功能强大的 JS 以太坊工具库——<a href="https://github.com/ethers-io/ethers.js/">Ethers.js</a>。</p>

<!--more-->


<h2>简介</h2>

<p>Ethers.js 的官方介绍是这样的——针对以太坊钱包功能完整实现的工具包，其 API 文档也十分详尽，感兴趣的同学可以看<a href="https://docs.ethers.io/ethers.js/html/">这里</a>。</p>

<p>在仓库维护上作者比较用心，issue 都能及时解答，更新也比较频繁，如果觉得这个库还不错的可以考虑给作者一些 Eth 捐赠，这是作者的以太坊账户地址：<code>0xEA517D5a070e6705Cc5467858681Ed953d285Eb9</code>。</p>

<h2>创建 / 导入钱包</h2>

<p>与 Web3 相比 Ethers.js 的账号相关 API 比较丰富，在文档介绍中，这一类 API 叫<code>钱包</code>API，钱包就是账户的意思，创建钱包有以下方式：</p>

<h3>创建随机地址的钱包</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wallet</span> <span class="o">=</span> <span class="nx">Wallet</span><span class="p">.</span><span class="nx">createRandom</span><span class="p">();</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Address</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
</span><span class='line'><span class="c1">// &amp;ldquo;每次都会生成不一样的钱包地址&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>通过明文私钥创建钱包</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">privateKey</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="mh">0x0123456789012345678901234567890123456789012345678901234567890123</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">wallet</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Wallet</span><span class="p">(</span><span class="nx">privateKey</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Address</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
</span><span class='line'><span class="c1">// &amp;ldquo;Address: 0x14791697260E4c9A71f18484C9f997B308e59325&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>通过助记词创建钱包</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">mnemonic</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">radar</span> <span class="nx">blur</span> <span class="nx">cabbage</span> <span class="nx">chef</span> <span class="nx">fix</span> <span class="nx">engine</span> <span class="nx">embark</span> <span class="nx">joy</span> <span class="nx">scheme</span> <span class="nx">fiction</span> <span class="nx">master</span> <span class="nx">release</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">wallet</span> <span class="o">=</span> <span class="nx">Wallet</span><span class="p">.</span><span class="nx">fromMnemonic</span><span class="p">(</span><span class="nx">mnemonic</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Address</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
</span><span class='line'><span class="c1">// &amp;ldquo;Address: 0xaC39b311DCEb2A4b2f5d8461c1cdaF756F4F7Ae9&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>通过 keystore 创建钱包</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// keystore 是一个 json</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">json</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">keystore</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">password</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">foo</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'><span class="nx">Wallet</span><span class="p">.</span><span class="nx">fromEncryptedWallet</span><span class="p">(</span><span class="nx">json</span><span class="p">,</span> <span class="nx">password</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">wallet</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Address: &quot;</span> <span class="o">+</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
</span><span class='line'><span class="c1">// &quot;Address: 0x88a5C2d9919e46F883EB62F7b8Dd9d0CC45bc290&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>注意：这种方式在 RN 环境中执行效率非常低，在电脑上执行只要 5 秒不到，但在 RN 上要执行差不多 5 分钟。</p>

<h3>创建脑记忆的钱包</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">username</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;&amp;#109;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x73;&amp;#117;&amp;#112;&amp;#x70;&amp;#x6f;&amp;#114;&amp;#116;&amp;#64;&amp;#x65;&amp;#116;&amp;#x68;&amp;#101;&amp;#114;&amp;#115;&amp;#46;&amp;#x69;&amp;#111;&quot;</span><span class="o">&gt;&amp;</span><span class="err">#</span><span class="mi">115</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">117</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="nx">x70</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">112</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">111</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">114</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="nx">x74</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">64</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">101</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">116</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="nx">x68</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">101</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="nx">x72</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="nx">x73</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="nx">x2e</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="nx">x69</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="nx">x6f</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/a&gt;&amp;rdquo;;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">password</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">password123</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'><span class="nx">Wallet</span><span class="p">.</span><span class="nx">fromBrainWallet</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">wallet</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Address: &quot;</span> <span class="o">+</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
</span><span class='line'><span class="c1">// &quot;Address: 0x7Ee9AE2a2eAF3F0df8D323d555479be562ac4905&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>脑记忆方式其实就是用户名和密码的方法，同样这种方式在 RN 环境执行效率也很差。</p>

<h2>导出钱包</h2>

<p>导出钱包也是钱包应用的一个主要业务场景，分别有以下几种方式：</p>

<h3>导出明文私钥</h3>

<p>因为每个钱包对象都有一个<code>privateKey</code>属性，所以导出私钥只要直接获取这个属性就可以了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wallet</span> <span class="o">=</span> <span class="nx">Wallet</span><span class="p">.</span><span class="nx">createRandom</span><span class="p">();</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">导出私钥：</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">privateKey</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>导出助记词</h3>

<p>跟私钥不同，不是每个钱包对象都有助记词属性，只有通过助记词导入的钱包对象有助记词<code>mnemonic</code>属性。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">mnemonic</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">radar</span> <span class="nx">blur</span> <span class="nx">cabbage</span> <span class="nx">chef</span> <span class="nx">fix</span> <span class="nx">engine</span> <span class="nx">embark</span> <span class="nx">joy</span> <span class="nx">scheme</span> <span class="nx">fiction</span> <span class="nx">master</span> <span class="nx">release</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">wallet</span> <span class="o">=</span> <span class="nx">Wallet</span><span class="p">.</span><span class="nx">fromMnemonic</span><span class="p">(</span><span class="nx">mnemonic</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">导出助记词：</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">mnemonic</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>导出 keystore</h3>

<p>钱包对象有一个<code>encrypt</code>方法可以导出钱包的 keystore，但该方法在 RN 环境中同样存在效率低下的问题。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">password</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">password123</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'><span class="c1">// 回调函数可以获取导出进度</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">percent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Encrypting</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">percent</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">%</span> <span class="nx">complete</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">keystore</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">encrypt</span><span class="p">(</span><span class="nx">password</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">导出</span> <span class="nx">keystore</span><span class="err">：</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">keystore</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Provider</h2>

<p>钱包的创建是离线的，不需要依赖网络即可创建钱包地址，但如果想获取钱包的相关信息，比如金额、交易记录，又或者想广播交易的话，就需要让钱包连上以太坊的网络了。</p>

<p>在 Web3 中是用 provider 来进行网络连接的，Ethers.js 也是一样，而且 Ethers.js 提供了集成多种 Provider 的方式。</p>

<h3>Provider 类型</h3>

<ul>
<li>Etherscan Provider：连接 Etherscan API 的 provider，需要 2 个参数，一个是网络名称，一个查询 API 所需的 token（之前的文章有讲过，查询 Etherscan 的 API 时 apitoken 不是必须的，但如果没有的话会受到每秒 5 次的调用限制）。</li>
<li>Json Rpc Provider：连接本地以太坊网点的 Provider。</li>
<li>Infura Provider：连接 Infura 网络的 Provider，Infura 是一套以太坊的基础设施服务，同样有以太坊的主网络和测试网络。</li>
<li>Web3 Provider：连接已有 web3 对象的 provider。</li>
<li>Fallback Provider：连接一个可以是多种类型的 provider 集合，如果前面的 provider 有问题，会自动去连接后面的。</li>
</ul>


<h3>Provider network</h3>

<p>在 Provider 创建方法中都有一个参数<code>network</code>，它是一个字符串，代表网络名称，有如下值：</p>

<ul>
<li>homestead/mainnet：以太坊主网络</li>
<li>morden: morden 测试网络（现在已经退役了）</li>
<li>ropsten/testnet: ropsten 测试网络</li>
<li>rinkeby：rinkeby 测试网络</li>
<li>kovan：kovan 测试网络</li>
</ul>


<h3>与钱包集成</h3>

<p>在通过私钥创建钱包的方法中，除了第一个参数私钥外，还有一个可选参数就是 provider，所以我们可以这样将 provider 集成到钱包中：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">provider</span> <span class="o">=</span> <span class="nx">providers</span><span class="p">.</span><span class="nx">getDefaultProvider</span><span class="p">();</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">wallet</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Wallet</span><span class="p">(</span><span class="nx">privateKey</span><span class="p">,</span> <span class="nx">provider</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>也可以直接通过给钱包对象的 provider 属性赋值来集成 provider。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">provider</span> <span class="o">=</span> <span class="nx">providers</span><span class="p">.</span><span class="nx">getDefaultProvider</span><span class="p">();</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">wallet</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Wallet</span><span class="p">(</span><span class="nx">privateKey</span><span class="p">);</span>
</span><span class='line'><span class="nx">wallet</span><span class="p">.</span><span class="nx">provider</span> <span class="o">=</span> <span class="nx">provider</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>智能合约</h2>

<p>关于智能合约后面我会另外写一篇文章来介绍怎么使用 Ethers.js 来实现以太坊代币的业务操作，包括获取金额和交易等。</p>

<h2>交易</h2>

<p>交易功能比较简单，在钱包对象有对应的方法：<code>sendTransaction ( transaction )</code>和<code>send ( addressOrName, amountWei [ , options ] )</code>，大家可以自行查阅文档。</p>

<h2>生成助记词</h2>

<p>还有一个比较常见的业务场景是生成助记词，Ethers.js 也很贴心地提供了这个功能：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">entropy</span> <span class="o">=</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">randomBytes</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">mnemonicTemp</span> <span class="o">=</span> <span class="nx">HDNode</span><span class="p">.</span><span class="nx">entropyToMnemonic</span><span class="p">(</span><span class="nx">entropy</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">walelt</span> <span class="o">=</span> <span class="nx">Wallet</span><span class="p">.</span><span class="nx">fromMnemonic</span><span class="p">(</span><span class="nx">mnemonicTemp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>工具类</h2>

<p>Ethers.js 还提供了一些比较常用的工具方法，比如对 BigNumber 的操作。</p>

<h3>BigNumber 计算</h3>

<p>有人可能会问为什么需要操作 BigNumber？因为以太坊的计量单位是<code>Wei</code>，一个以太币是 10<sup>18</sup> Wei，如果用普通的 JS number 对象来存储操作的话，可能会因为数据溢出而导致结果异常。</p>

<p>比如常见的业务场景是：获取钱包账户金额（以太币数量）并乘以货币单位汇率（美元或者人民币）得到最终结果。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 汇率，截止 2018-04-29，ETH 价格为 693.01 USD</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">USD_RATE</span> <span class="o">=</span> <span class="mf">693.01</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 钱包金额</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">balance</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">getBalance</span><span class="p">();</span>
</span><span class='line'><span class="c1">// bigNumber 不能和小数进行计算，所以要先将汇率变成整数</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">rate</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">USD_RATE</span> <span class="o">*</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">balance</span><span class="p">.</span><span class="nx">mul</span><span class="p">(</span><span class="nx">rate</span><span class="p">).</span><span class="nx">div</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>BigNumber 格式化</h3>

<p>计算好了结果后，我们需要将其转换成正常的数量单位并展示到前台，还好 Ethers.js 提供了相关的方法，还可以通过不同参数展示不同格式的结果。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wei</span> <span class="o">=</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">bigNumberify</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="mi">1000000000000000000000</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">formatEther</span><span class="p">(</span><span class="nx">wei</span><span class="p">));</span>
</span><span class='line'><span class="c1">// &amp;ldquo;1000.0&amp;rdquo;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">formatEther</span><span class="p">(</span><span class="nx">wei</span><span class="p">,</span> <span class="p">{</span><span class="nx">commify</span><span class="o">:</span> <span class="kc">true</span><span class="p">}));</span>
</span><span class='line'><span class="c1">// &amp;ldquo;1,000.0&amp;rdquo;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">formatEther</span><span class="p">(</span><span class="nx">wei</span><span class="p">,</span> <span class="p">{</span><span class="nx">pad</span><span class="o">:</span> <span class="kc">true</span><span class="p">}));</span>
</span><span class='line'><span class="c1">// &amp;ldquo;1000.000000000000000000&amp;rdquo;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">formatEther</span><span class="p">(</span><span class="nx">wei</span><span class="p">,</span> <span class="p">{</span><span class="nx">commify</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">pad</span><span class="o">:</span> <span class="kc">true</span><span class="p">}));</span>
</span><span class='line'><span class="c1">// &amp;ldquo;1,000.000000000000000000&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>其他</h3>

<p>其他工具方法还有 UTF8 字符串转换，地址 icap 转换等，感兴趣的同学可以自行参考文档。</p>

<h2>总结</h2>

<p>Ethers.js 是一个非常适合开发以太坊钱包应用的工具库，这里介绍的功能只是仓库功能的冰山一角，如果需要了解其更多功能的话，还请参阅官方文档。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用 Etherscan 的 API]]></title>
    <link href="http://zhaozhiming.github.io/blog/2018/04/20/how-to-use-etherscan-api/"/>
    <updated>2018-04-20T20:51:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2018/04/20/how-to-use-etherscan-api</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2018/04/etherscan.png" width="400" height="300"></p>

<p>虽然以太坊提供了 <a href="https://github.com/ethereum/wiki/wiki/JavaScript-API">Web3</a> 和 <a href="https://github.com/ethereum/wiki/wiki/JSON-RPC">Json Rpc</a> 这 2 种 API，geth 也额外提供了一些 <a href="https://github.com/ethereum/go-ethereum/wiki/Management-APIs">API</a>，但是对于开发以太坊应用来说还是显得有些不足，比如说获取交易记录的时间，需要先通过交易的 hash 找到该交易对应的区块 id，然后才能找到对应的时间，查询起来相当不方便。</p>

<p>好在<code>Etherscan</code>对外提供了一些公共的 API，给我们提供了额外的能力来处理更多的业务场景。</p>

<!--more-->


<h2>Etherscan api</h2>

<p>为了方便开发人员更好地使用<code>ethersacn.io</code>，网站提供了<a href="https://etherscan.io/apis">一系列 API</a> 供开发人员使用。</p>

<h3>使用方法</h3>

<p>API 的使用非常简单，基本上都是 get 方法，通过 http 请求就可以直接调用，在每个 Api 的说明文档都有对应的例子可以查看。</p>

<h3>模块介绍</h3>

<p>API 主要包含以下模块：账号、智能合约、交易、区块、事件日志、代币及工具等。</p>

<h3>账号 API</h3>

<p>账号相关的 API，有获取账号金额，获取交易记录等，该模块提供的 API 最多。</p>

<h4>获取单个账号金额</h4>

<p><em>API 示例</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://api.etherscan.io/api?module=account&amp;amp;action=balance&amp;amp;address=0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a&amp;amp;tag=latest&amp;amp;apikey=YourApiKeyToken&quot;</span>&gt;https://api.etherscan.io/api?module<span class="o">=</span>account&amp;amp;action<span class="o">=</span>balance&amp;amp;address<span class="o">=</span>0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a&amp;amp;tag<span class="o">=</span>latest&amp;amp;apikey<span class="o">=</span>YourApiKeyToken&lt;/a&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>参数说明</em></p>

<ul>
<li>module：对应的模块名称，这里是账户模块，所以是<code>moudle=account</code></li>
<li>action：对应的操作，这里是<code>balance</code>，即获取金额。</li>
<li>address：要查询金额的账号地址。</li>
<li>tag：之前在介绍 geth 的 API 时讲过获取账号金额需要 2 个参数，一个是账号地址，另外一个就是 tag，一般写<code>latest</code>就可以了。</li>
<li>apikey：你在<code>Etherscan</code>上创建的 apikey，带上没有请求的限制，也可以不带，下面会介绍 API 的请求限制。</li>
</ul>


<p>其中<code>module、action、apikey</code>是每个 API 都有的参数，其他的参数则因不同 API 而不同。</p>

<p><em>返回结果</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span>&amp;ldquo;status&amp;rdquo;:&amp;ldquo;1&amp;rdquo;,&amp;ldquo;message&amp;rdquo;:&amp;ldquo;OK&amp;rdquo;,&amp;ldquo;result&amp;rdquo;:&amp;ldquo;670456215218885498951364&amp;rdquo;<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>获取多个账号金额</h4>

<p><em>API 示例</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://api.etherscan.io/api?module=account&amp;amp;action=balancemulti&amp;amp;address=0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a,0x63a9975ba31b0b9626b34300f7f627147df1f526,0x198ef1ec325a96cc354c7266a038be8b5c558f67&amp;amp;tag=latest&amp;amp;apikey=YourApiKeyToken&quot;</span>&gt;https://api.etherscan.io/api?module<span class="o">=</span>account&amp;amp;action<span class="o">=</span>balancemulti&amp;amp;address<span class="o">=</span>0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a,0x63a9975ba31b0b9626b34300f7f627147df1f526,0x198ef1ec325a96cc354c7266a038be8b5c558f67&amp;amp;tag<span class="o">=</span>latest&amp;amp;apikey<span class="o">=</span>YourApiKeyToken&lt;/a&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>参数说明</em></p>

<p>（前面有讲过的参数就不讲了，下同）</p>

<p>与单个账号金额 API 相比，参数<code>address</code>用<code>,</code>号分隔多个账号，最多可支持 20 个账号的金额查询。</p>

<p><em>返回结果</em>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;OK&quot;</span>,
</span><span class='line'><span class="s2">&quot;result&quot;</span>: <span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;account&quot;</span>: <span class="s2">&quot;0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;balance&quot;</span>: <span class="s2">&quot;40807168564070000000000&quot;</span>
</span><span class='line'>    <span class="o">}</span>,
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;account&quot;</span>: <span class="s2">&quot;0x63a9975ba31b0b9626b34300f7f627147df1f526&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;balance&quot;</span>: <span class="s2">&quot;332567136222827062478&quot;</span>
</span><span class='line'>    <span class="o">}</span>,
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;account&quot;</span>: <span class="s2">&quot;0x198ef1ec325a96cc354c7266a038be8b5c558f67&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;balance&quot;</span>: <span class="s2">&quot;0&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">]</span>,
</span><span class='line'><span class="s2">&quot;status&quot;</span>: <span class="s2">&quot;1&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>获取"正常"交易记录</h4>

<p><em>API 示例</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://api.etherscan.io/api?module=account&amp;amp;action=txlist&amp;amp;address=0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a&amp;amp;startblock=0&amp;amp;endblock=99999999&amp;amp;page=1&amp;amp;offset=10&amp;amp;sort=asc&amp;amp;apikey=YourApiKeyToken&quot;</span>&gt;https://api.etherscan.io/api?module<span class="o">=</span>account&amp;amp;action<span class="o">=</span>txlist&amp;amp;address<span class="o">=</span>0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a&amp;amp;startblock<span class="o">=</span>0&amp;amp;endblock<span class="o">=</span>99999999&amp;amp;page<span class="o">=</span>1&amp;amp;offset<span class="o">=</span>10&amp;amp;sort<span class="o">=</span>asc&amp;amp;apikey<span class="o">=</span>YourApiKeyToken&lt;/a&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>参数说明</em></p>

<ul>
<li>action：为<code>txlist</code>，表示列出交易记录。</li>
<li>address：要查询交易记录的账号地址。</li>
<li>startblock：起始查询块 id，可选，默认值为 0。</li>
<li>endblock：结束查询块 id，可选，默认值为最后一个区块。</li>
<li>page: 页数（没错，这个 API 还支持分页），可选。</li>
<li>offset: 查询到记录数，可选，默认是查询 10000 条记录。</li>
<li>sort: 排序规则，可以正序<code>asc</code>和倒序<code>desc</code>。</li>
</ul>


<p><em>返回结果</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;OK&quot;</span>,
</span><span class='line'><span class="s2">&quot;result&quot;</span>: <span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;blockHash&quot;</span>: <span class="s2">&quot;0x2d0a9228f22fe85596d246040d4fd7dc6b1a55920bae02b68e731d55a890b315&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;blockNumber&quot;</span>: <span class="s2">&quot;47894&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;confirmations&quot;</span>: <span class="s2">&quot;5435815&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;contractAddress&quot;</span>: <span class="s2">&quot;&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;cumulativeGasUsed&quot;</span>: <span class="s2">&quot;21612&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;from&quot;</span>: <span class="s2">&quot;0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;gas&quot;</span>: <span class="s2">&quot;23000&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;gasPrice&quot;</span>: <span class="s2">&quot;400000000000&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;gasUsed&quot;</span>: <span class="s2">&quot;21612&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;hash&quot;</span>: <span class="s2">&quot;0x7e1503d2001cab2f432b56a62a3ee874782c8e33cbd79a664d155a758c1784a2&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;input&quot;</span>: <span class="s2">&quot;0x454e34354139455138&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;isError&quot;</span>: <span class="s2">&quot;0&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;nonce&quot;</span>: <span class="s2">&quot;1&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;timeStamp&quot;</span>: <span class="s2">&quot;1438948043&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;to&quot;</span>: <span class="s2">&quot;0x2910543af39aba0cd09dbb2d50200b3e800a63d2&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;transactionIndex&quot;</span>: <span class="s2">&quot;0&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;txreceipt_status&quot;</span>: <span class="s2">&quot;&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;value&quot;</span>: <span class="s2">&quot;9001000000000000000000&quot;</span>
</span><span class='line'>    <span class="o">}</span>,
</span><span class='line'><span class="o">]</span>,
</span><span class='line'><span class="s2">&quot;status&quot;</span>: <span class="s2">&quot;1&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>获取"内部"交易记录</h4>

<p><em>API 示例</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://api.etherscan.io/api?module=account&amp;amp;action=txlistinternal&amp;amp;address=0x2c1ba59d6f58433fb1eaee7d20b26ed83bda51a3&amp;amp;startblock=0&amp;amp;endblock=2702578&amp;amp;page=1&amp;amp;offset=10&amp;amp;sort=asc&amp;amp;apikey=YourApiKeyToken&quot;</span>&gt;https://api.etherscan.io/api?module<span class="o">=</span>account&amp;amp;action<span class="o">=</span>txlistinternal&amp;amp;address<span class="o">=</span>0x2c1ba59d6f58433fb1eaee7d20b26ed83bda51a3&amp;amp;startblock<span class="o">=</span>0&amp;amp;endblock<span class="o">=</span>2702578&amp;amp;page<span class="o">=</span>1&amp;amp;offset<span class="o">=</span>10&amp;amp;sort<span class="o">=</span>asc&amp;amp;apikey<span class="o">=</span>YourApiKeyToken&lt;/a&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>参数说明</em></p>

<p>参数与上一个 API 基本相同，只有<code>action</code>是<code>txlistinternal</code>这一点不同，这 2 种交易的区别是什么呢？简单的理解就是“正常”的交易是会记录到区块链上的，而“内部”交易是指不会记录到区块链上的记录，比如交易失败的记录。</p>

<p>另外这个 API 还可以通过交易 hash 查看交易的详情。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://api.etherscan.io/api?module=account&amp;amp;action=txlistinternal&amp;amp;txhash=0x40eb908387324f2b575b4879cd9d7188f69c8fc9d87c901b9e2daaea4b442170&amp;amp;apikey=YourApiKeyToken&quot;</span>&gt;https://api.etherscan.io/api?module<span class="o">=</span>account&amp;amp;action<span class="o">=</span>txlistinternal&amp;amp;txhash<span class="o">=</span>0x40eb908387324f2b575b4879cd9d7188f69c8fc9d87c901b9e2daaea4b442170&amp;amp;apikey<span class="o">=</span>YourApiKeyToken&lt;/a&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>返回结果</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;OK&quot;</span>,
</span><span class='line'><span class="s2">&quot;result&quot;</span>: <span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;blockNumber&quot;</span>: <span class="s2">&quot;2547619&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;contractAddress&quot;</span>: <span class="s2">&quot;&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;errCode&quot;</span>: <span class="s2">&quot;Bad jump destination&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;from&quot;</span>: <span class="s2">&quot;0x2c1ba59d6f58433fb1eaee7d20b26ed83bda51a3&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;gas&quot;</span>: <span class="s2">&quot;346878&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;gasUsed&quot;</span>: <span class="s2">&quot;0&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;hash&quot;</span>: <span class="s2">&quot;0x2896441f9d1f167b4a3f987d82233e7d238e6a50a227c4b612dbc82f34bb533d&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;input&quot;</span>: <span class="s2">&quot;&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;isError&quot;</span>: <span class="s2">&quot;1&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;timeStamp&quot;</span>: <span class="s2">&quot;1478013203&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;to&quot;</span>: <span class="s2">&quot;0x20d42f2e99a421147acf198d775395cac2e8b03d&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;traceId&quot;</span>: <span class="s2">&quot;0&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;type&quot;</span>: <span class="s2">&quot;call&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;value&quot;</span>: <span class="s2">&quot;71000000000000000000&quot;</span>
</span><span class='line'>    <span class="o">}</span>,
</span><span class='line'><span class="o">]</span>,
</span><span class='line'><span class="s2">&quot;status&quot;</span>: <span class="s2">&quot;1&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>获取 ERC20 代币交易事件记录</h4>

<p><em>API 示例</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://api.etherscan.io/api?module=account&amp;amp;action=tokentx&amp;amp;contractaddress=0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2&amp;amp;address=0x4e83362442b8d1bec281594cea3050c8eb01311c&amp;amp;page=1&amp;amp;offset=100&amp;amp;sort=asc&amp;amp;apikey=YourApiKeyToken&quot;</span>&gt;https://api.etherscan.io/api?module<span class="o">=</span>account&amp;amp;action<span class="o">=</span>tokentx&amp;amp;contractaddress<span class="o">=</span>0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2&amp;amp;address<span class="o">=</span>0x4e83362442b8d1bec281594cea3050c8eb01311c&amp;amp;page<span class="o">=</span>1&amp;amp;offset<span class="o">=</span>100&amp;amp;sort<span class="o">=</span>asc&amp;amp;apikey<span class="o">=</span>YourApiKeyToken&lt;/a&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>参数说明</em></p>

<ul>
<li>action: 值为<code>tokentx</code>，表示查询代币交易记录。</li>
<li>contractaddress: 代币的智能合约地址。</li>
<li>address: 只查询和该账户地址相关的记录，可选。</li>
</ul>


<p><em>返回结果</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;OK&quot;</span>,
</span><span class='line'><span class="s2">&quot;result&quot;</span>: <span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;blockHash&quot;</span>: <span class="s2">&quot;0xb3ff25909ae9ae5b65baecab1114dff885fbd5a1607081229ea50b6a2db13ae8&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;blockNumber&quot;</span>: <span class="s2">&quot;5278009&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;confirmations&quot;</span>: <span class="s2">&quot;205861&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;contractAddress&quot;</span>: <span class="s2">&quot;0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;cumulativeGasUsed&quot;</span>: <span class="s2">&quot;1050219&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;from&quot;</span>: <span class="s2">&quot;0x4e83362442b8d1bec281594cea3050c8eb01311c&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;gas&quot;</span>: <span class="s2">&quot;191157&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;gasPrice&quot;</span>: <span class="s2">&quot;4000000000&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;gasUsed&quot;</span>: <span class="s2">&quot;97646&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;hash&quot;</span>: <span class="s2">&quot;0x497f15095877bc06b9e0f422673c1e0f13a2b4224b615ef29ce8c46e249364d1&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;input&quot;</span>: <span class="s2">&quot;0x73b38101000000000000000000000000000000000000000000000000000000000000003d0000000000000000000000000000000000000000000046aefaa28844d7d839d7&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;nonce&quot;</span>: <span class="s2">&quot;730&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;timeStamp&quot;</span>: <span class="s2">&quot;1521386734&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;to&quot;</span>: <span class="s2">&quot;0x69076e44a9c70a67d5b79d95795aba299083c275&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;tokenDecimal&quot;</span>: <span class="s2">&quot;18&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;tokenName&quot;</span>: <span class="s2">&quot;Maker&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;tokenSymbol&quot;</span>: <span class="s2">&quot;MKR&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;transactionIndex&quot;</span>: <span class="s2">&quot;28&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;value&quot;</span>: <span class="s2">&quot;553365126770755906&quot;</span>
</span><span class='line'>    <span class="o">}</span>,
</span><span class='line'><span class="o">]</span>,
</span><span class='line'><span class="s2">&quot;status&quot;</span>: <span class="s2">&quot;1&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>获取已开采的区块列表</h4>

<p><em>API 示例</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://api.etherscan.io/api?module=account&amp;amp;action=getminedblocks&amp;amp;address=0x9dd134d14d1e65f84b706d6f205cd5b1cd03a46b&amp;amp;blocktype=blocks&amp;amp;page=1&amp;amp;offset=10&amp;amp;apikey=YourApiKeyToken&quot;</span>&gt;https://api.etherscan.io/api?module<span class="o">=</span>account&amp;amp;action<span class="o">=</span>getminedblocks&amp;amp;address<span class="o">=</span>0x9dd134d14d1e65f84b706d6f205cd5b1cd03a46b&amp;amp;blocktype<span class="o">=</span>blocks&amp;amp;page<span class="o">=</span>1&amp;amp;offset<span class="o">=</span>10&amp;amp;apikey<span class="o">=</span>YourApiKeyToken&lt;/a&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>参数说明</em></p>

<ul>
<li>action: 值为<code>getminedblocks</code>。</li>
<li>blocktype：区块类型，可以选区块<code>blocks</code>和叔块<code>uncles</code>，不了解叔块的可以查看<a href="https://www.bixuncn.com/baike/block/1141.html">这里</a>。</li>
</ul>


<p><em>返回结果</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;OK&quot;</span>,
</span><span class='line'><span class="s2">&quot;result&quot;</span>: <span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;blockNumber&quot;</span>: <span class="s2">&quot;3462296&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;blockReward&quot;</span>: <span class="s2">&quot;5194770940000000000&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;timeStamp&quot;</span>: <span class="s2">&quot;1491118514&quot;</span>
</span><span class='line'>    <span class="o">}</span>,
</span><span class='line'><span class="o">]</span>,
</span><span class='line'><span class="s2">&quot;status&quot;</span>: <span class="s2">&quot;1&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>合同 API</h3>

<p>智能合约相关的 API，其实只有一个获取智能合约接口的 API，但是这个 API 非常有用。</p>

<h4>获取智能合约接口</h4>

<p><em>API 示例</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://api.etherscan.io/api?module=contract&amp;amp;action=getabi&amp;amp;address=0xBB9bc244D798123fDe783fCc1C72d3Bb8C189413&amp;amp;apikey=YourApiKeyToken&quot;</span>&gt;https://api.etherscan.io/api?module<span class="o">=</span>contract&amp;amp;action<span class="o">=</span>getabi&amp;amp;address<span class="o">=</span>0xBB9bc244D798123fDe783fCc1C72d3Bb8C189413&amp;amp;apikey<span class="o">=</span>YourApiKeyToken&lt;/a&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>参数说明</em></p>

<ul>
<li>module: 值为<code>contract</code>。</li>
<li>action: 值为<code>getabi</code>。</li>
<li>address: 智能合约地址。</li>
</ul>


<p>智能合约的 abi 就是一个 json 对象，通过这个对象我们可以调用其接口方法，后面会写一篇文章介绍如何操作 abi 对象，敬请期待。</p>

<p><em>返回结果</em></p>

<p>返回结果内容比较长，这里省略，就是一个 json 对象，感兴趣的可以自行调用该 API 看结果。</p>

<h3>使用限制</h3>

<p>账号和智能合约的 API 已经能满足大部分的业务需求了，其他模块的 API 感觉没什么太大的作用，这里就不介绍了，感兴趣的读者可以自行查阅。</p>

<p>这里再说下 API 的使用限制，刚才提到每个 API 都有一个<code>apikey</code>参数，如果 API 没加上这个参数的话，每个 API 的请求次数不能超过 5 次每秒。</p>

<h2>总结</h2>

<p><code>Etherscan</code>提供的这些 API 有些是和以太坊提供的 API 有重复的，比如说获取账号金额，获取事件日志记录等，但有一些 API 给我们带来了很大的便利性，比如获取账号交易记录，有了这个 API 就不用使用几个原生 API 进行各种数据拼接了。</p>

<p>另外<code>Etherscan</code>的这套 API 在 Rinkeby 测试网络也有一套一模一样的，区别只是前面的 url 不同，Rinkeby 的是：<code>api-rinkeby.etherscan.io</code>，感兴趣的同学可以去试试。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[geth 环境搭建及使用说明]]></title>
    <link href="http://zhaozhiming.github.io/blog/2018/04/13/setup-geth-env/"/>
    <updated>2018-04-13T09:09:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2018/04/13/setup-geth-env</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2018/04/geth.png" width="400" height="300"></p>

<p><a href="https://geth.ethereum.org/">Geth</a> 全称是<strong>Go Ethereum</strong>，是使用 Go 语言实现的一个以太坊环境搭建工具，其实也可以用其他语言来搭建以太坊，比如 C++，Python 等，但 Geth 是使用最广泛的。下面就来介绍一下 Geth 环境的搭建和使用。</p>

<!--more-->


<h2>安装方法</h2>

<p>在 Geth 的<a href="https://geth.ethereum.org/">官方网站</a> 上提供了自动安装和手动下载安装两种方式，还有一种安装方式是源码构建，这种方式大部分人都不需要，这里就不介绍了。</p>

<h3>自动安装</h3>

<p>自动安装涵盖了各主流操作系统的安装方法。</p>

<p><img src="/images/post/2018/04/geth_install.png" width="400" height="300"></p>

<p>以 Mac 为例，最简单的方式就是通过 <a href="https://brew.sh/">Homebrew</a> 进行安装。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>brew install geth
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>安装完成后，执行命令<code>geth version</code>看到 geth 的版本信息就算安装成功了。</p>

<h3>手动安装</h3>

<p>手动安装其实也很简单，就是下载一个压缩包，然后将其解压就可以了，在官网的下载页面上有各大系统的安装包链接。</p>

<p><img src="/images/post/2018/04/geth_download.png" width="400" height="300"></p>

<p>解压后执行命令<code>./geth version</code>同样可以得到 geth 的版本信息。</p>

<h2>快速开始</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>geth &amp;mdash;datadir &amp;ldquo;dev&amp;rdquo; &amp;mdash;dev &amp;mdash;rpcapi eth,web3,penersonal &amp;mdash;rpc &amp;mdash;rpcaddr<span class="o">=</span>0.0.0.0 &amp;mdash;rpccorsdomain &amp;ldquo;*&amp;rdquo; console 2&gt;&gt;geth.log
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>通过执行以上命令可以快速启动一个开发环境的服务，下面会提到各个参数的作用，最后是将 console 控制台的日志打印到一个 log 文件中。</p>

<h2>命令行参数说明</h2>

<h3>服务启动</h3>

<p>最快速启动 geth 的方式就是创建一个全节点的以太坊主网络，使用命令如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>geth console
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其中 console 是指开启交互式命令控制台，我们可以在控制台上输入各种 geth 的命令，比如调用查看账号信息，查看账号金额，转账交易等。</p>

<p>服务启动后过一会就会开始同步主网络的信息，主网络的信息是非常庞大的，以前有人同步了十几天都没有同步完成，如果只是本地测试，可以用下面的方式搭建测试网络。</p>

<h3>文件存储</h3>

<p>geth 的默认存储路径是<code>~/.ethereum</code>，当然你也可以通过<code>--datadir 文件路径</code> 这个命令来改变存储的位置。</p>

<h3>http rpc 参数</h3>

<p>使用 Geth 搭建服务最大的好处就是可以通过 http 请求进行以太坊的 API 调用，下面这些参数就是让 geth 启动 http 服务的。</p>

<h4>rpc</h4>

<p>设置启动 http-rpc 服务，让开发人员可以发 http 请求调用以太坊 API。</p>

<h4>rpcaddr</h4>

<p>设置 http 服务的地址，默认是<code>localhost</code>，如果想让其他机器可以访问你的 geth 服务，需要将其设置为<code>0.0.0.0</code>。</p>

<h4>rpcport</h4>

<p>设置 http 服务的端口，默认值是<code>8545</code>，一般这个选项可以不修改，除非端口被占用了。</p>

<h4>rpcapi</h4>

<p>设置 http 服务可以调用的 API 方法，默认值是<code>eth,net,web3</code>，如果想启用更多的 API 方法，可以通过这个选项进行设置，比如要启用账户管理服务可以添加<code>personal</code>，这样就可以调用账号创建等 API 了。</p>

<h4>rpccorsdomain</h4>

<p>设置 http 服务的跨域域名，如果想别的机器访问你的 geth 服务，通过<code>--rpcaddr</code>将地址设置为<code>0.0.0.0</code>是不够的，还需将<code>--rpccorsdomain</code>设置为<code>*</code>。</p>

<h2>测试节点 Rinkeby 的搭建</h2>

<p>如果你想开发以太坊程序，但是手头上又没有以太币怎么办？其实以太坊有很多测试网络可以用，在上面获取以太币是不需要花钱的（后面再写一篇文章介绍怎么获取测试网络的以太币，敬请期待）。比较常用的有 Rinkeby、Ropsten、Kovan, 这些是以太坊官方或者第三方维护的测试网络。</p>

<p>geth 提供了对 Rinkeby 测试网络的支持，想要搭建一个全节点的 Rinkeby 网络，只要执行以下命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>geth &amp;mdash;rinkeby console
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>服务启动后同样会去同步 Rinkeby 网络的数据到本地，但测试网络的数据相对主网络来说是非常少的，截止 2018 年 4 月，同步完 Rinkeyby 的信息大概需要 5G 的磁盘空间，时间取决于网络速度，我本地机器大概同步了 4~5 个小时。可能有人在网上看到过这篇文章——<a href="https://gist.github.com/cryptogoth/10a98e8078cfd69f7ca892ddbdcf26bc">如何在 10 分钟内搭建 Rinkeby 测试网络</a>，这篇文章是写于 2017 年 6 月，当时 Rinkeby 的数据没有多少，要同步完所有数据当然很快了。</p>

<h2>API 的使用</h2>

<p>geth 不仅提供了以太坊的标准 API，另外还提供了 geth 自己的 API。以太坊的标准 API 可以在<a href="https://github.com/ethereum/wiki/wiki/JSON-RPC">这里</a> 查看，分别有<code>web3、eth、db、shh</code>这些 API，比如可以用来执行查询本地节点的账号信息，查询账号金额等操作。</p>

<p>geth 的专属 API 可以查询<a href="https://github.com/ethereum/go-ethereum/wiki/Management-APIs">这里</a>，分别有<code>admin、debug、miner、personal、txpool</code>等 API，比较常用的是 personal 这个 API，可以通过其创建账号，因为标准的 web3
API 暂时还没有实现创建账号这个功能（有个 <a href="https://github.com/ethereum/wiki/wiki/JavaScript-API#web3ethregister">register</a> 方法但还未实现，而且它还是 JS 的 API，需要使用 web3 的 JS 库才能用），所以一般可以 personal 来创建账号。</p>

<h3>调用方式</h3>

<p>geth API 的调用方式有 2 种，分别是控制台输入和发 http 请求。</p>

<h4>控制台</h4>

<p>通过 console 交互命令控制台进行调用：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;eth.accounts&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;blockquote&gt;&lt;p&gt;<span class="o">[</span>&amp;ldquo;0xab123b7d83af73b873d58eb898828287b08c4d8f&amp;rdquo;, &amp;ldquo;0x8e153bae6d1cd5a2e3438dda89c6ad6d25fbe9a5&amp;rdquo;<span class="o">]</span>
</span><span class='line'>eth.getBalance<span class="o">(</span>&amp;lsquo;0xab123b7d83af73b873d58eb898828287b08c4d8f&amp;rsquo;<span class="o">)</span>
</span><span class='line'>6000000000000000000
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>

<p>注意示例里面的账号金额是 6 个以太币，但以太坊的单位是<code>Wei</code>，一个以太币是 10<sup>18</sup> Wei，具体单位的介绍可以查看<a href="https://www.jianshu.com/p/b56552b1d1a0">这篇文章</a>。</p>

<h4>http 请求</h4>

<p>另一种方式通过 http 请求进行调用：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>http POST :8545 <span class="nv">jsonrpc</span><span class="o">=</span>2.0 <span class="nv">method</span><span class="o">=</span>eth_getBalance params:<span class="o">=</span>&amp;lsquo;<span class="o">[</span>&amp;ldquo;0x643551033ae00eb4b62cd41c1cbb98a752e4575d&amp;rdquo;, &amp;ldquo;latest&amp;rdquo;<span class="o">]</span>&amp;rsquo; <span class="nv">id</span><span class="o">=</span>1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;HTTP/1.1 200 OK
</span><span class='line'>Content-Length: 57
</span><span class='line'>Content-Type: application/json
</span><span class='line'>Date: Tue, 17 Apr 2018 13:54:26 GMT
</span><span class='line'>Vary: Origin
</span><span class='line'><span class="o">{</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;1&quot;</span>,
</span><span class='line'><span class="s2">&quot;jsonrpc&quot;</span>: <span class="s2">&quot;2.0&quot;</span>,
</span><span class='line'><span class="s2">&quot;result&quot;</span>: <span class="s2">&quot;0x6128f15c6c13cbf6&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里要推荐一个类似<code>curl</code>的工具——<a href="https://httpie.org/">httpie</a>，主要是它的用法简单，需要的命令行代码更少，最重要的是返回结果更加清晰好看。</p>

<p>从上面可以看到我们对本地 8545 的端口服务发起 http 请求，需要带上几个请求参数，<code>jsonrpc</code>和<code>id</code>这 2 个参数的值是固定的，<code>method</code>和<code>params</code>分别指要调用的 API 方法以及该方法所需的参数。</p>

<p>需要注意的是<code>method</code>中的方法是<code>eth_getBalance</code>，而在控制台中我们输入的是<code>eth.getBalance</code>，中间的符号有所不同。另外<code>params</code>的值是一个 json 格式的数组，里面不仅包含了账号地址还有<code>latest</code>这个参数，而在控制台调用该命令只需要输入账号地址就足够了，后面这个参数在方法调用时会默认加上。</p>

<p>可以看到返回的结果是有<code>id</code>和<code>jsonrpc</code>这 2 个固定返回值，跟请求参数那 2 个参数一致，另外一个就是方法的返回结果了，注意返回的方法结果是 16 进制的数字。</p>

<h3>常用 API</h3>

<h4>personal.newAccount</h4>

<p>创建 geth 节点的账号，创建完成后会在服务的<code>datadir</code>目录的<code>keystore</code>里面新建一个文件，文件名大概是这个样子：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>UTC&amp;mdash;2018-03-24T07-18-26.741872893Z&amp;mdash;f58397f67c6c148f9f5b816126425fe93cab0f18
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>文件名分别由创建时间和账号地址组成，这个就是账号的<code>keystore</code>，通过这个文件可以在其他节点导入账号的信息。</p>

<p>可能有人担心在自己节点生成的账号导入到其他节点时发生地址冲突怎么办，其实完全不用担心，以太坊账号地址是通过一系列算法生成的，绝对不会有冲突的情况，想了解钱包地址更多内容可以参考<a href="https://ethfans.org/flfq/articles/142">这篇文章</a>。</p>

<p>而这个文件里面的内容是这样的：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">&amp;ldquo;address&amp;rdquo;:&amp;ldquo;9f49f0736655c87c7d26edebcfd2407ebccdff65&amp;rdquo;,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;id&amp;rdquo;:&amp;ldquo;9b1a1f3b-fb17-44ba-8ab0-9d1fa8badef4&amp;rdquo;,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;version&amp;rdquo;:3,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;Crypto&amp;rdquo;:{&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;pre&gt;&lt;code&gt;</span><span class="nt">&quot;cipher&quot;</span><span class="p">:</span><span class="s2">&quot;aes-128-ctr&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nt">&quot;cipherparams&quot;</span><span class="p">:{</span>
</span><span class='line'>  <span class="nt">&quot;iv&quot;</span><span class="p">:</span><span class="s2">&quot;3d921b20e735f27f888a6ed682d4ffdb&quot;</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nt">&quot;ciphertext&quot;</span><span class="p">:</span><span class="s2">&quot;bfc78805cef944baf46fce6d710c0de02aef07ab2b1fada26564c3efd83f5d20&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nt">&quot;kdf&quot;</span><span class="p">:</span><span class="s2">&quot;scrypt&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nt">&quot;kdfparams&quot;</span><span class="p">:{</span>
</span><span class='line'>  <span class="nt">&quot;salt&quot;</span><span class="p">:</span><span class="s2">&quot;e913c11f19a644f8fa68c6d661973d106c721b710ff2a78b9bb741037d56431b&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;n&quot;</span><span class="p">:</span><span class="mi">131072</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dklen&quot;</span><span class="p">:</span><span class="mi">32</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;p&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;r&quot;</span><span class="p">:</span><span class="mi">8</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nt">&quot;mac&quot;</span><span class="p">:</span><span class="s2">&quot;5750c5865d53977c941945925c76911420dbf6c56930c5ffd62f9d9c022a9720&quot;</span>
</span><span class='line'><span class="err">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>里面分别记录和账号的地址和加密信息，包括加密算法、参数以及其他信息，想了解更多内容可以参考<a href="https://medium.com/@julien.m./what-is-an-ethereum-keystore-file-86c8c5917b97">这篇文章</a>。</p>

<h4>eth.accounts 或者 personal.listAccounts</h4>

<p>列出 geth 阶段创建的所有账号。</p>

<h4>eth.getBalance</h4>

<p>查询账号的金额，需要输入账号地址。</p>

<h4>eth.gasPrice</h4>

<p>查询矿工"工作量"价格，想了解更多关于<code>gas</code>的内容请参考<a href="https://www.jianshu.com/p/bc1a27adeaa4">这篇文章</a>。</p>

<h4>eth.sendTransaction 或者 personal.sendTransaction</h4>

<p>进行转账交易，需要输入转账的账号地址和转账金额。</p>

<h2>总结</h2>

<p>你的开发环境可以访问互联网的话，其实可以不用搭建自己的以太坊节点服务，直接使用以太坊的测试网络就可以了，在测试网络上可以调用和主网络同等功能的 API，并且测试数据更加接近主网络的真实数据。除非你的服务还需要包含一些自己的定制功能，那就要考虑搭建自己的以太坊节点了。</p>

<p>以上就是 Geth 的搭建及使用介绍，本人水平有限文章中有不对的地方还请指正。</p>
]]></content>
  </entry>
  
</feed>
