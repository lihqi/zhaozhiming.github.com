<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: junit | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/tags/junit/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2017-10-22T11:05:03+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[junit里面Test case的执行顺序]]></title>
    <link href="http://zhaozhiming.github.io/blog/2012/05/21/the-execute-order-of-junit-test-case/"/>
    <updated>2012-05-21T16:02:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2012/05/21/the-execute-order-of-junit-test-case</id>
    <content type="html"><![CDATA[<p>这里讨论的是junit在ant运行的情况，其他build工具应该也适用，但具体没试验过。</p>

<p>首先运行junit时是按照脚本中文件夹的顺序执行，如下脚本会先执行test1目录下的测试，其实是test2目录的，最后是test3目录的。</p>

<!--more-->


<p>
{% codeblock build.xml lang:xml %}
<batchtest todir="${junit.dir}"></p>

<pre><code>&lt;fileset dir="${test1.dir}"&gt;
    &lt;include name="**/*Test.java"/&gt;
&lt;/fileset&gt;
&lt;fileset dir="${test2.dir}"&gt;
    &lt;include name="**/*Test.java"/&gt;
&lt;/fileset&gt;
&lt;fileset dir="${test3.dir}"&gt;
    &lt;include name="**/*Test.java"/&gt;
&lt;/fileset&gt;
</code></pre>

<p></batchtest>
{% endcodeblock %}</p>

<p>其次在同一个目录下，test case 的运行顺序是根据包名的顺序来执行的。比如：a.a.a这个包名里面的test case会比a.a.b这个包名的test case先跑。</p>

<p>再次如果是同一个目录，且在同一个包名下的，会根据类名的顺序来执行test case。比如：a.a.a.A.java会比a.a.a.B.java先执行。</p>

<p>最后如果是同个类的test case，则依照TestClass里面test case的顺序从上往下执行。</p>

<p>Junit Test case 的执行顺序有时候比较重要，可能一些test case会依赖与其他test case产生的结果才能执行，这个时候把要先执行的类按照上面的规则放在前面即可保证整个测试执行正确。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[junit4与junt3并存时产生的问题]]></title>
    <link href="http://zhaozhiming.github.io/blog/2012/04/16/some-problems-when-use-junit3-and-junt4-at-the-same-time/"/>
    <updated>2012-04-16T15:54:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2012/04/16/some-problems-when-use-junit3-and-junt4-at-the-same-time</id>
    <content type="html"><![CDATA[<p>目前的项目里用junit写单元测试，使用的是junit4，由于大部分开发之前使用的都是junit3，对junit4还不是很熟悉，所以出现了junit3和4混合使用的情况，导致发生了一些问题，这里列举一下。</p>

<!--more-->


<p>
<strong>1.测试类继承了TestCase，方法名是test开头，加Ignore标签，这时Ignore标签失效。错误代码示例：</strong></p>

<p>{% codeblock test.java lang:java %}
public MyClassTest extends TestCase {</p>

<pre><code>@Test
@Ignore
public void testMyMethod() throws Exception {
    // some code
}
</code></pre>

<p>}
{% endcodeblock %}<br/>
在junit3里，测试类必须继承TestCase，方法必须是以test开头；而在junit4里面，无需继承TestCase类，方法名也不需要test开头，只需要在每个方法前加上@Test标签即可。如果是继承TestCase，方法名以test开头，则junit会认为是junt3的写法，而使得junit4的标签失效。</p>

<p><strong>2.测试类继承了TestCase，方法前加上@Test标签，方法名不以test开头，该方法不会被junit执行。</strong></p>

<p>{% codeblock test.java lang:java %}
public MyClassTest extends TestCase {</p>

<pre><code>@Test
public void should_test_my_method() throws Exception {
    // some code
}
</code></pre>

<p>}
{% endcodeblock %}  <br/>
用于使用了@Test标签，则方法名可以不需以test开头，但该测试类由于继承了TestCase，所以默认是使用了junit3的契约，所以方法名必须以test开头，否则junit不认，即使是加上了@Test标签。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Mockito时遇到的一些问题]]></title>
    <link href="http://zhaozhiming.github.io/blog/2012/03/02/some-problems-when-use-mockito/"/>
    <updated>2012-03-02T17:44:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2012/03/02/some-problems-when-use-mockito</id>
    <content type="html"><![CDATA[<p>最近在使用Mockito时遇到了几个比较tricking的问题，在这里记录一下。</p>

<!--more-->


<p>1.如果方法的参数或者返回类型是泛型通配符相关的（如&lt;?>，&lt;? extends XXX>），不管你定义的对象类型是否正确匹配，用any(match)方法时都会编译出错。</p>

<p>解决办法：修改方法的参数类型，去掉泛型通配符。我遇到的相关代码去掉通配符之后也是运行正常的，如果去掉后运行不正常，可能需要寻找其他解决办法，具体没有研究。</p>

<p>2.mock对象的方法有多个参数，如果对第一个参数使用any()方法匹配，则后面的所有参数都需要使用any匹配，而不能使用真实对象作为参数。<br/>
{% codeblock error info &ndash; test.java lang:java %}
This exception may occur if matchers are combined with raw values:</p>

<pre><code>//incorrect:
someMethod(anyObject(), "raw String");
</code></pre>

<p>When using matchers, all arguments have to be provided by matchers.
For example:</p>

<pre><code>//correct:
someMethod(anyObject(), eq("String by matcher"));
</code></pre>

<p>{% endcodeblock %}</p>

<p>3.在setUp方法里面进行方法mock，直接在IDE里面运行junit成功，但用ant运行则会报错，其实这是另外一个测试类里面verify方法使用错误，如下：</p>

<p>{% codeblock code &ndash; test.java lang:java %}</p>

<pre><code>//错误
verify(packageBuildContext.getPackageBuilder());

//正确
verify(packageBuildContext).getPackageBuilder()
</code></pre>

<p>{% endcodeblock %}</p>

<p>很奇怪，在用ant跑单元测试的时候，这个测试类的错误不是在这个类的测试报告里体现，而是出现在另外一个类的测试报告里，而且直接在IDE里面运行junit不会报错。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在junit中添加fail--有test失败即build failed]]></title>
    <link href="http://zhaozhiming.github.io/blog/2012/02/24/zai-junitzhong-tian-jia-fail-you-testshi-bai-ji-build-failed/"/>
    <updated>2012-02-24T11:28:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2012/02/24/zai-junitzhong-tian-jia-fail-you-testshi-bai-ji-build-failed</id>
    <content type="html"><![CDATA[<p>项目使用jenkins做持续集成，ant来构建，发现在跑junit单元测试的时候，如果有test case失败了，ci的状态是黄色的unstable，而不是红色的failed，看起来很不爽。个人觉得build只有两种状态最好，绿色stable和红色failed，黄色让人看起来很困惑，是要fix好呢还是不fix也可以呢？</p>

<!--more-->


<p>
  在网上查到解决方案，就是在ant的build文件里面，加上这样一段：</p>

<p>{% codeblock demo &ndash; build.xml lang:xml %}
　　<target name="unitTest" depends="runCompileTest">
　　　　<junit printsummary="on" failureproperty="junit.failure">
　　　　　　<!-- some code here-->
　　　　</junit></p>

<p>　　　　<fail message="Some tests failed - Build failed" status="2">
　　　　    <condition>
　　　　        <isset property="junit.failure" />
　　　　    </condition>
　　　　</fail></p>

<pre><code>&lt;/target&gt;
</code></pre>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
