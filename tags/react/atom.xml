<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: react | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/tags/react/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2017-11-29T21:54:32+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何运行 react16 之后测试]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/11/08/run-react-test-with-react-version-16/"/>
    <updated>2017-11-08T20:36:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/11/08/run-react-test-with-react-version-16</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2017/11/react-test.png" width="400" height="300"></p>

<p>React 升级到版本 16 之后，各方面都有不少改进，最重要的是完全向后兼容，功能代码几乎不用怎么修改就可以使用新版本。但是测试代码就不一定了，如果你是使用 <code>enzyme</code> 跑测试的话，以前的测试可能会跑不起来，那么需要如何修改呢？下面我们就来看一下吧。</p>

<!--more-->


<h2>一个简单的测试用例</h2>

<p>让我们来看一个简单的测试，这里面用到了测试 React 组件时常用的 <code>enzyme</code> 包和一个将 <code>enzyme</code> 对象转成 json 的工具<code>enzyme-to-json</code>。</p>

<p>可以暂时不管该测试对应的功能代码是怎么样的，因为校验的结果是组件快照。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Demo.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">react</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kr">export</span> <span class="k">default</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">World</span><span class="o">&lt;</span><span class="err">/div&gt;;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// Demo.test.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">react</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">shallow</span> <span class="p">}</span> <span class="nx">from</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">enzyme</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">toJson</span> <span class="nx">from</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">enzyme</span><span class="o">-</span><span class="nx">to</span><span class="o">-</span><span class="nx">json</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Demo</span> <span class="nx">from</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;.</span><span class="o">/</span><span class="nx">Demo</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">describe</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Demo</span> <span class="nx">Component</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">should</span> <span class="nx">render</span> <span class="nx">correctly</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">Demo</span> <span class="o">/&amp;</span><span class="nx">gt</span><span class="p">;);</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">toJson</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">)).</span><span class="nx">toMatchSnapshot</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>React16 之前</h2>

<p>在升级 React16 之前，我们依赖的第三方库版本如下，跑这个测试是完全没有问题的。</p>

<ul>
<li>react: 15.4.2</li>
<li>react-dom: 15.4.2</li>
<li>enzyme: 2.8.2</li>
<li>enzyme-to-json: 1.5.1</li>
<li>react-addons-test-utils: 15.4.2</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>PASS  src/Demo.test.js
</span><span class='line'>  Demo Component&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;✓ should render correctly <span class="o">(</span>12ms<span class="o">)</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Test Suites: 1 passed, 1 total
</span><span class='line'>Tests:       1 passed, 1 total
</span><span class='line'>Snapshots:   1 passed, 1 total
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>React16 之后</h2>

<p>但是升级 React16 之后，这个测试就跑不过了，报以下的错误：</p>

<ul>
<li>react: 15.4.2 => 16.0.0</li>
<li>react-dom: 15.4.2 => 16.0.0</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>FAIL  src/Demo.test.js
</span><span class='line'>  ● Test suite failed to run&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;Cannot find module <span class="s1">&#39;react-dom/lib/ReactTestUtils&#39;</span> from <span class="s1">&#39;index.js&#39;</span>
</span><span class='line'>
</span><span class='line'>  at Resolver.resolveModule <span class="o">(</span>node_modules/jest-resolve/build/index.js:179:17<span class="o">)</span>
</span><span class='line'>  at Object.&amp;lt;anonymous&amp;gt; <span class="o">(</span>node_modules/react-addons-test-utils/index.js:1:107<span class="o">)</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Test Suites: 1 failed, 1 total
</span><span class='line'>Tests:       0 total
</span><span class='line'>Snapshots:   0 total
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>enzyme 的版本升级</h2>

<p>通过报错信息可以发现 React 的一些测试 API 发生了变化，那要如何修正呢？其实在 React 升级到版本 16 以后，<code>enzyme</code> 也对自身做了一次大的重构，我们来看看要怎么使用重构后的<code>enzyme</code>。</p>

<ul>
<li>首先升级 <code>enzyme</code> 的版本到最新版本</li>
<li>然后再安装 <code>enzyme-adapter-react-16</code> 这个包（待会讲这个包是做什么的），原来的 <code>react-addons-test-utils</code> 包可以删掉，新版的 <code>enzyme</code> 已经不需要了</li>
<li>最后在测试的全局配置中增加以下代码（如果是用 <code>create-react-app</code> 创建项目的话，可以在 <code>src/setupTests.js</code>里面修改）</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Enzyme</span> <span class="nx">from</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">enzyme</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Adapter</span> <span class="nx">from</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">enzyme</span><span class="o">-</span><span class="nx">adapter</span><span class="o">-</span><span class="nx">react</span><span class="o">-</span><span class="mi">16</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Enzyme</span><span class="p">.</span><span class="nx">configure</span><span class="p">({</span> <span class="nx">adapter</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Adapter</span><span class="p">()</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>OK！原来的测试通过了！</p>

<p>新版的<code>enzyme</code> 拆分出来了多个 adapter 包，用来支持多种 React 版本，下面是版本对照表：</p>

<table>
<thead>
<tr>
<th></th>
<th align="center"> Enzyme Adapter Package </th>
<th align="center"> React semver compatibility </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center"> <code>enzyme-adapter-react-16</code> </td>
<td align="center"> <code>^16.0.0</code></td>
</tr>
<tr>
<td></td>
<td align="center"> <code>enzyme-adapter-react-15</code> </td>
<td align="center"> <code>^15.5.0</code></td>
</tr>
<tr>
<td></td>
<td align="center"> <code>enzyme-adapter-react-15.4</code> </td>
<td align="center"> <code>15.0.0-0 - 15.4.x</code></td>
</tr>
<tr>
<td></td>
<td align="center"> <code>enzyme-adapter-react-14</code> </td>
<td align="center"> <code>^0.14.0</code></td>
</tr>
<tr>
<td></td>
<td align="center"> <code>enzyme-adapter-react-13</code> </td>
<td align="center"> <code>^0.13.0</code></td>
</tr>
</tbody>
</table>


<h2>疑难问题</h2>

<p>虽然测试现在已经跑通了，但是你可能会遇到下面这个警告：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>console.error node_modules/fbjs/lib/warning.js:33&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;Warning: React depends on requestAnimationFrame. Make sure that you load a polyfill in older browsers. http://fb.me/react-polyfills
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; PASS  src/Demo.test.js
</span><span class='line'>  Demo Component&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;✓ should render correctly <span class="o">(</span>8ms<span class="o">)</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Test Suites: 1 passed, 1 total
</span><span class='line'>Tests:       1 passed, 1 total
</span><span class='line'>Snapshots:   1 passed, 1 total
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>原因是测试用到的<code>jsdom</code> 包还没有提供<code>requestAnimationFrame</code>，所以会报这个警告。</p>

<p>具体内容可以看<a href="https://github.com/facebookincubator/create-react-app/issues/3199">这个 ISSUE</a>，<code>create-react-app</code>已经做了相应的修复，修改内容可以看看<a href="https://github.com/facebookincubator/create-react-app/pull/3340">这个 PR</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何安全地使用 React 的 context]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/02/19/how-to-safely-use-react-context-zh-cn/"/>
    <updated>2017-02-19T19:38:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/02/19/how-to-safely-use-react-context-zh-cn</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2017/02/react-context.jpeg"></p>

<p>在自己的 React 项目中使用了大量的 context，虽然知道这是一个不推荐使用的特性，但还是用了很多，想看看别人是怎么使用 context，所以翻译了下面这篇文章，注意文章中引用了嵌套的twitter内容，所以访问时最好是翻墙访问，以免影响阅读。</p>

<!--more-->


<h2>如何安全地使用 React 的 context</h2>

<p>Context 是 React 里面一个有着很多免费声明的、非常强大的特性，就像乐园里面的禁果一样。</p>

<p><img class="<a" src="href="https://cdn-images-1.medium.com/max/1600/1*rbUZNOyFC64KmJaRhF2Kww.png">https://cdn-images-1.medium.com/max/1600/1*rbUZNOyFC64KmJaRhF2Kww.png</a>"></p>

<p>这应该可以让你远离 context 了对吧？当然不是，它虽然是一个被禁用的 React 特性，但它的存在是一个不争的事实！context 可以把数据传递给组件树底层的组件，无需中间组件的参与。context 的经典用法是定制主题，本地化和路由这些方面。</p>

<p><a href="https://medium.com/@dan_abramov">Dan Abramov</a> 设计了一些明智的规则让你知道什么时候不该使用 context：</p>

<p><img class="<a" src="href="https://cdn-images-1.medium.com/max/1600/1*b6Ev2SZ8SBlqhKVrOGDZaA.jpeg">https://cdn-images-1.medium.com/max/1600/1*b6Ev2SZ8SBlqhKVrOGDZaA.jpeg</a>"></p>

<p>现在你可能已经按照这个明智的建议来做，但同时，使用一些使用了 context 的库，比如 <a href="https://github.com/ReactTraining/react-router">react-router</a>，当它和其他库像 <a href="https://github.com/reactjs/react-redux">react-redux</a> 或 <a href="https://github.com/mobxjs/mobx-react">mbox-react</a>组合时，甚至是和你自己的 shouldeComponentUpdate，又或者是由 React.PureComponent 提供的这个方法组合时，都仍然可能让你有陷入困境。长期存在的<a href="https://github.com/facebook/react/issues/2517">问题</a> 可以在 React 或 React 相关的第三方库的问题跟踪列中找到。</p>

<blockquote class="twitter-tweet" data-lang="zh-cn"><p lang="en" dir="ltr">Redux implements sCU, making setState + context break, forces &quot;subscribe&quot; on everybody else. Seems like React needs a generic solution.</p>&mdash; Ryan Florence (@ryanflorence) <a href="https://twitter.com/ryanflorence/status/779320581678174208">2016 年 9 月 23 日</a></blockquote>


<script async src="http://zhaozhiming.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>所以，为什么这篇博客跟你有关？这是因为：</p>

<ul>
<li>你是一个库的作者</li>
<li>你使用的库使用了 context，或者你自己使用 context，然后你想安全地使用 shouldComponentUpdate (SCU)，或者一些基于此的已有实现（比如 PureComponent, Redux 的 connect, 或者 MobX 的 observer）。</li>
</ul>


<h3>为什么 Context + ShouldComponentUpdate 有问题？</h3>

<p>Context 用来和嵌套很深的组件交流，例如，一个根组件定义了一个主题，然后这个组件树中的任何组件可能（也可能不）对这个信息感兴趣，就像<a href="https://facebook.github.io/react/docs/context.html#passing-info-automatically-through-a-tree">官方的 context 示例</a>。</p>

<p>shouldComponentUpdate (SCU) 另一方面在重新渲染组件树（包括子组件）的一部分中起到短路作用，例如如果 props 或者组件的 state 没有被明确的修改，组件就不会重新渲染，但这可能意外中断 context 的传播。</p>

<blockquote class="twitter-tweet" data-lang="zh-cn"><p lang="en" dir="ltr"><a href="https://twitter.com/dan_abramov">@dan_abramov</a> <a href="https://twitter.com/iammerrick">@iammerrick</a> <a href="https://twitter.com/ryanflorence">@ryanflorence</a> specifically, anything that uses context will break. Seems unfair to the rest of us :(</p>&mdash; MICHAEL JACKSON (@mjackson) <a href="https://twitter.com/mjackson/status/779329979741904896">2016 年 9 月 23 日</a></blockquote>


<p></p>

<script async src="http://zhaozhiming.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p></p>

<blockquote class="twitter-tweet" data-lang="zh-cn"><p lang="en" dir="ltr"><a href="https://twitter.com/mjackson">@mjackson</a> <a href="https://twitter.com/iammerrick">@iammerrick</a> <a href="https://twitter.com/ryanflorence">@ryanflorence</a> The thing here is that React Redux doesn’t rely on context updating correctly. It knows React is broken.</p>&mdash; Dan Abramov (@dan_abramov) <a href="https://twitter.com/dan_abramov/status/779335426377183232">2016 年 9 月 23 日</a></blockquote>


<script async src="http://zhaozhiming.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>让我们通过一个简单的 app 来模拟这个有冲突的问题：</p>

<script async src="http://zhaozhiming.github.io//jsfiddle.net/mweststrate/3ay25feh/embed/"></script>


<p>在 context 和 SCU 中产生问题的地方显而易见，当你按了“Red please!”按钮（在“Result”栏上面）时，按钮本身的颜色刷新了，但待办列表没有被更新。原因很简单，我们的 TodoList 组件是智能的，它知道当它没有接收到新的待办子项它就不需要重新渲染（最聪明的地方是继承了 PureCompnent，其重新实现了 shouldComponentUpdate方法）。</p>

<p>尽管如此，正因为这个最智能的地方（指继承了 PureCompnent，这个在大型应用是非常有必要的，因为它可以提供更好的性能），让 TodoList 中的 ThemedText 组件没有接收到更新了颜色的新 context！因为不管是 TodoList 或它的后代更新了，SCU 都返回 false。</p>

<p><img class="<a" src="href="https://cdn-images-1.medium.com/max/1600/1*pnkWX7uEzCeY-7r5Ii_Y-A.png">https://cdn-images-1.medium.com/max/1600/1*pnkWX7uEzCeY-7r5Ii_Y-A.png</a>"></p>

<p>更糟的是，我们不能在 TodoList 中手工修改 SCU，因为它是固定了的一个方法。因为 SCU 不能接收相关的 context 数据（颜色），它不能（也不该）被订阅到指定的context数据中，毕竟它本身不是一个theme-aware的组件。</p>

<p>总的来说，shouldComponentUpdate 返回 false 导致任何 context 更新不再传播到子组件中去，非常糟不是吗？我们可以修复这个问题吗？</p>

<h3>ShouldComponentUpdate 和 Context 可以一起工作！</h3>

<p>你注意到了问题只发生在我们更新 context 的时候吗？这个是解决问题的关键所在，只要确保你一直不更新 context就可以了，换句话说：</p>

<ul>
<li>Context 不应该改变，它应该不可变</li>
<li>组件应该在其构造时只接收 context 一次</li>
</ul>


<p><blockquote><p>或者，为了使其不同，我们不应该直接把 state 保存到 context 中，取而代之，我们应该像依赖注入系统一样使用 conext。</p></blockquote></p>

<p>这意味着 SCU 不再干涉 context 需要传什么，因为不再需要传递新的 context 给子组件。棒极了！这解决了我们所有问题！</p>

<h3>通过基于 context 的依赖注入来和变更进行交流</h3>

<p>如果我们想要改变主题颜色，很简单，我们在适当的地方有一个依赖注入系统（DI），所以我们可以向下传递一个仓库来管理我们的主题并订阅它，我们绝不会传递一个新的仓库，但要确保仓库本身是有状态的，并且可以观察到组件的变化：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Theme 组件存储当前的主题状态，并允许组件订阅将来变化（的数据）</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">Theme</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">color</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">color</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">subscriptions</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">setColor</span><span class="p">(</span><span class="nx">color</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">color</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">f</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">f</span><span class="p">())</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">subscribe</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kr">class</span> <span class="nx">ThemeProvider</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kr">super</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
</span><span class='line'><span class="c1">// 主题提供者在它的整个生命周期中使用同样的主题对象</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">theme</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Theme</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// 必要时更新主题，更新的内容会传播给订阅的主键</span>
</span><span class='line'>  <span class="nx">componentWillReceiveProps</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">theme</span><span class="p">.</span><span class="nx">setColor</span><span class="p">(</span><span class="nx">next</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">getChildContext</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="p">{</span><span class="nx">theme</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">theme</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">div</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">}</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="err">/div&amp;gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">ThemeProvider</span><span class="p">.</span><span class="nx">childContextTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">theme</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">object</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kr">class</span> <span class="nx">ThemedText</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// 订阅未来改变的主题</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="p">.</span><span class="nx">theme</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(()</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">forceUpdate</span><span class="p">())</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">}</span>
</span><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="err">/div&amp;gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">ThemedText</span><span class="p">.</span><span class="nx">contextTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">theme</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">object</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>完整的可运行列表：</p>

<script async src="http://zhaozhiming.github.io//jsfiddle.net/mweststrate/pc327358/embed/"></script>


<p>注意到在这个示例里面颜色的改变已经正确了，但它仍然使用 PureComponent，而且重要组件 TodoList 和 ThemedText 的 API 并没有改变。</p>

<p>虽然我们的 ThemeProvider 的实现变得更复杂了，它创建了一个Theme 对象来保持了我们主题的状态，Theme对象同时也是一个事件发射器，这可以让像 ThemeText 一样的组件来订阅未来的变化，Theme 对象通过 ThemeProvider 在组件树中传递。context 仍然是用来做这个的，但只有刚开始的时候传递了 context，后面的更新都通过 Theme 自己来传播，并没有重新创建一个 context。</p>

<p><img class="<a" src="href="https://cdn-images-1.medium.com/max/1600/1*ul_3UcymigXysL-JzgF8dQ.png">https://cdn-images-1.medium.com/max/1600/1*ul_3UcymigXysL-JzgF8dQ.png</a>"></p>

<p>这个实现有点过于简单，更好的实现方式是需要在 componentWillUnmount 中清理事件监听器，并且应该使用 setState 来代替 forceUpdate，但好消息是你关注的内容已经有第三方库在开发了，它不会影响库的使用者，以后中间组件意外的 shouldComponentUpdate 实现将不再破坏库的行为。</p>

<h3>总结</h3>

<p>通过依赖注入系统而不是状态的容器来限制使用 context，我们可以同时构造基于 context 的库和正确行为的 shouldComponentUpdate，而不会被干涉和破坏消费者的 API，还有非常重要的一点是，在当前受限的 React context 系统中可以正常工作，只要你遵守这条简单的规则：</p>

<p><blockquote><p>Context 在每个组件中应该只被接收一次。</p></blockquote></p>

<blockquote class="twitter-tweet" data-lang="zh-cn"><p lang="en" dir="ltr"><a href="https://twitter.com/ryanflorence">@ryanflorence</a> <a href="https://twitter.com/mweststrate">@mweststrate</a> <a href="https://twitter.com/dan_abramov">@dan_abramov</a> <a href="https://twitter.com/sebmarkbage">@sebmarkbage</a> huh. i never thought of context as a &quot;dependency&quot; before. i guess it is.</p>&mdash; MICHAEL JACKSON (@mjackson) <a href="https://twitter.com/mjackson/status/779375007579287552">2016 年 9 月 23 日</a></blockquote>


<script async src="http://zhaozhiming.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>最后的提醒：context 仍然是实验性的特性，你应该避免直接使用 context（看上面 Dan Abramov 的规则），作为代替使用抽象过的 context 库（看下面的一些例子），但如果你是一个库的作者，或者如果你在写一些很好的高阶组件来处理 context，坚持上面的解决方案将避免一些令人讨厌的意外。</p>

<p><strong>更新于 2016-9-29：</strong> <a href="https://medium.com/@ryanflorence">Ryan Florence</a> 刚发布了一个通用包，包含了上面讲的这个模式，所以你可以不用自己写这些代码了 <a href="https://github.com/ReactTraining/react-context-emission">react-context-emission</a>。</p>

<h3>奖励：使用 MobX observables 作为 context 来简化事情</h3>

<p>（如果你在使用或对 MobX 感兴趣那你对这一章也会感兴趣）</p>

<p>如果你使用 MobX，你完全可以跳过整个事件触发器这个东西，并且作为替代在 context 中使用仓库 observables，并通过使用 observer decorator 或高阶组件来订阅他们，这使得你不必自己管理数据的订阅。</p>

<script async src="http://zhaozhiming.github.io//jsfiddle.net/mweststrate/xpw6a5Ld/embed/"></script>


<p>实际上，更简单的方法是使用 MobX 中的 <a href="https://github.com/mobxjs/mobx-react#provider-and-inject">Provider / inject</a> 的机制，它是对 React conext 机制的一个抽象化后的结果。它移除了 contextTypes 声明和类似其他东西的代码，注意这个类似的概念可以在一些库比如 <a href="https://github.com/acdlite/recompose/blob/master/docs/API.md#withcontext">recompose</a> 或 <a href="https://github.com/gnoff/react-tunnel">react-tunnel</a> 中找到。</p>

<script async src="http://zhaozhiming.github.io//jsfiddle.net/mweststrate/b537yvcj/embed/"></script>


<p>它是很值得尝试的，注意看，虽然我们初始基于依赖注入解决方案的代码量是原始代码的 1.5 倍，但最终的解决方案的代码和原来有问题的实现方案代码一样多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用AVA和Enzyme测试React组件（三）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/03/29/use-ava-and-enzyme-to-test-react-component-part3/"/>
    <updated>2016-03-29T20:42:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/03/29/use-ava-and-enzyme-to-test-react-component-part3</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2016/03/react.png"></p>

<p><strong>React组件的测试要点</strong>：React组件要怎么测试，有哪些需要注意的地方，今天我们通过一些例子来说明。</p>

<!--more-->


<p></p>

<h2>render逻辑的测试</h2>

<p>React中存在逻辑的地方有一部分是在render方法中，React通过props或state的值可以render出不同的页面，所以我们可以通过设置不同的props值来测试是否能render出我们期望的页面。比如有下面这样的一个组件：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">Footer</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">renderFooterButtons</span><span class="p">(</span><span class="nx">completedCount</span><span class="p">,</span> <span class="nx">clearCompleted</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// 测试点1</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">completedCount</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">button</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;clear-completed&quot;</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span> <span class="p">()</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">clearCompleted</span><span class="p">()</span> <span class="p">}</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">Clear</span> <span class="nx">completed</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="err">/button&amp;gt;</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kr">const</span> <span class="p">{</span> <span class="nx">todos</span><span class="p">,</span> <span class="nx">actions</span><span class="p">,</span> <span class="nx">onShow</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="p">{</span> <span class="nx">clearCompleted</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">actions</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">activeCount</span> <span class="o">=</span> <span class="nx">todos</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">count</span><span class="p">,</span> <span class="nx">todo</span><span class="p">)</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">completed</span> <span class="o">?</span> <span class="nx">count</span> <span class="o">:</span> <span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">completedCount</span> <span class="o">=</span> <span class="nx">todos</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">activeCount</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">footer</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;footer&quot;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;todo-count&quot;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">strong</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;{</span><span class="nx">activeCount</span><span class="p">}</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="err">/strong&amp;gt; item left&amp;lt;/span&amp;gt;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">ul</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;filters&quot;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">// 测试点2</span>
</span><span class='line'>      <span class="p">{[</span><span class="nx">SHOW_ALL</span><span class="p">,</span> <span class="nx">SHOW_ACTIVE</span><span class="p">,</span> <span class="nx">SHOW_COMPLETED</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="nx">filter</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span>
</span><span class='line'>        <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">li</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">filter</span><span class="p">}</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span>
</span><span class='line'>          <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">a</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">classnames</span><span class="p">({</span> <span class="nx">selected</span><span class="o">:</span> <span class="nx">filter</span> <span class="o">===</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">filter</span> <span class="p">})}</span>
</span><span class='line'>            <span class="nx">style</span><span class="o">=</span>
</span><span class='line'>            <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span> <span class="p">()</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">onShow</span><span class="p">(</span><span class="nx">filter</span><span class="p">)</span> <span class="p">}</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;{</span><span class="nx">FILTER_TITLES</span><span class="p">[</span><span class="nx">filter</span><span class="p">]}</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="err">/a&amp;gt;</span>
</span><span class='line'>        <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="err">/li&amp;gt;</span>
</span><span class='line'>      <span class="p">)}</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="err">/ul&amp;gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">renderFooterButtons</span><span class="p">(</span><span class="nx">completedCount</span><span class="p">,</span> <span class="nx">clearCompleted</span><span class="p">)}</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="err">/footer&amp;gt;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>可以看到这个组件其实是比较简单的，在一个<code>footer</code>标签里面有个<code>span</code>和一个<code>ul</code>，<code>ul</code>里面有一些<code>li</code>，最下面是个<code>button</code>。</p>

<ul>
<li>在最上面有一个render button的方法，这个方法存在逻辑判断，如果completedCount大于0，则render一个button出来，否则不render button，这里是我们第一个测试点。测试代码如下，分别测试render和不render的情况：</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">props</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">todos</span><span class="o">:</span> <span class="p">[],</span> <span class="c1">// 空的数组</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">clearCompleted</span><span class="o">:</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">(),</span> <span class="c1">// mock方法</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">onShow</span><span class="o">:</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">(),</span> <span class="c1">// mock方法</span>
</span><span class='line'>  <span class="nx">filter</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">SHOW_ALL</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">test</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="k">do</span> <span class="nx">not</span> <span class="nx">render</span> <span class="nx">button</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Footer</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">button</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">test</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">render</span> <span class="nx">button</span> <span class="nx">correctly</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Footer</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">wrapper</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span> <span class="nx">todos</span><span class="o">:</span> <span class="p">[{</span> <span class="nx">completed</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}]</span> <span class="p">});</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">button</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>要让completedCount不大于0，只要给个空的todos集合就可以了，如果要大于0的话，则需要在todos里面添加一个<code>completed</code>为true的对象，这里需要搞清楚completedCount的声明逻辑。</p>

<ul>
<li>第二个测试点是map方法里面的逻辑，因为是从一个有3个元素的数组里面做map，所以可以校验是否确实render出来3个<code>li</code>，以及其中某个<code>li</code>链接的class和文本内容。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">render</span> <span class="mi">3</span> <span class="nx">li</span> <span class="nx">correctly</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Footer</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">wrapper</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span> <span class="nx">todos</span><span class="o">:</span> <span class="p">[{</span> <span class="nx">completed</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}]</span> <span class="p">});</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">li</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">selected</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">selected</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">text</span><span class="p">(),</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">All</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>可以看到通过enzyme的text方法可以很方便地得到<code>a</code>标签的文本内容。</p>

<p>这个组件其实还继续做测试，比如<code>span</code>里面的render逻辑等，但这里就不详细举例了。</p>

<h2>组件的事件逻辑</h2>

<p>除了在render方法中有逻辑以外，在组件的事件中也会存在逻辑，要测试这部分代码，我们需要模拟触发组件的事件。请看下面这个组件：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">TodoInput</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">,</span> <span class="nx">context</span><span class="p">);</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">text</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">text</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">handleChange</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span> <span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">handleBlur</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">newTodo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onSave</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">trim</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="nx">input</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>    <span class="nx">classnames</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">edit</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">editing</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;new-todo&#39;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">newTodo</span><span class="p">,</span>
</span><span class='line'>    <span class="p">})}</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span>
</span><span class='line'>    <span class="nx">placeholder</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">placeholder</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">autoFocus</span><span class="o">=</span><span class="s2">&quot;true&quot;</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">onBlur</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleBlur</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span>
</span><span class='line'>    <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleChange</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span>
</span><span class='line'>  <span class="o">/&amp;</span><span class="nx">gt</span><span class="p">;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>可以看到这个组件的render方法里面没有什么逻辑，只有一个<code>input</code>标签，但是在标签中存在了<code>change</code>和<code>blur</code>事件，组件的逻辑隐藏在对应的事件方法中。</p>

<ul>
<li>首先是对<code>change</code>事件的测试，我们可以看到<code>handleChange</code>方法其实是修改state里面text的值，所以测试代码可以这样写：</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">props</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">text</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">foo</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="nx">placeholder</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">foo</span> <span class="nx">placeholder</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="nx">editing</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">newTodo</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">onSave</span><span class="o">:</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">(),</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">test</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">input</span> <span class="nx">change</span> <span class="nx">value</span> <span class="nx">correctly</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">TodoInput</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">input</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">simulate</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">change</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="p">{</span> <span class="nx">target</span><span class="o">:</span> <span class="p">{</span> <span class="nx">value</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">bar</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="p">}</span> <span class="p">});</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">text</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;),</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">bar</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>通过调用<code>simulate</code>方法对<code>change</code>事件进行模拟，然后调用<code>state</code>方法对组件的state进行校验。</p>

<ul>
<li>接着我们测试<code>blur</code>事件，<code>handleBlur</code>方法先做判断，如果为真则调用props中的<code>onSave</code>方法，我们可以用sinon来mock onSave方法，校验其调用次数。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">input</span> <span class="nx">blur</span> <span class="nx">correctly</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">TodoInput</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">input</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">simulate</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">blur</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="p">{</span> <span class="nx">target</span><span class="o">:</span> <span class="p">{</span> <span class="nx">value</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">bar</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="p">}</span> <span class="p">});</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">onSave</span><span class="p">.</span><span class="nx">callCount</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>模拟事件触发的方法差不多，都是传入事件名和所需的方法对象就可以了，这里校验<code>onSave</code>是否被调用了1次。</p>

<p>在写单元测试的时候，有一点要注意的是要避免过度测试，因为测试代码也是需要维护的，如果测试过多过细，那一旦生产代码有所改变，就可能会修改很多测试代码，需要开发人员需要在质量和开发效率上面做好均衡。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用AVA和Enzyme测试React组件（二）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/03/29/use-ava-and-enzyme-to-test-react-component-part2/"/>
    <updated>2016-03-29T20:42:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/03/29/use-ava-and-enzyme-to-test-react-component-part2</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2016/03/airbnb.png" width="400" height="300"></p>

<p>Enzyme是<a href="http://www.airbnb.com/">Airbnb</a>公司推出的一个针对React组件的测试工具。Airbnb我觉得是国外继Google和Facebook之后技术实力十分强大的一家科技公司，有很多开源项目获得广大开发人员的认可，Enzyme就是其中的一个。</p>

<!--more-->


<p></p>

<h2>React的测试方式</h2>

<p>Facebook在推出React的时候也推出一个测试套件，可以使用shallow render（浅渲染）和renderIntoDocument（完整渲染）的方式对React组件进行渲染，然后通过查找DOM来做测试结果校验。两者的主要区别是shallow render只渲染出组件的第一层DOM，其嵌套的DOM不会渲染出来，这样渲染的效率更高，单元测试的速度更快，在做单元测试的时候建议使用shallow render的方式。</p>

<p>Enzyme对Facebook的测试套件做了封装，并提供了一套API来让开发者做React单元测试的时候更加方便，下面的例子可以对比使用了Enzyme前后的区别。</p>

<p>使用Enzyme前：<br/>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">setup</span><span class="p">({</span><span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="nx">props</span><span class="p">});</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">ul</span> <span class="o">=</span> <span class="nx">output</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">li</span> <span class="o">=</span> <span class="nx">ul</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">li</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span>
</span><span class='line'><span class="nx">express</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">size</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>使用Enzyme后：<br/>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Foo</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'><span class="nx">express</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">a</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">length</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>最明显的变化是测试代码变少了，原来需要逐层查找DOM，现在只需要一个<code>find()</code>方法就可以搞定。</p>

<h2>Shallow Rendering &amp; Full DOM Rendering</h2>

<p>Enzyme针对这两种渲染方式都提供了各自一套API方法，但其实这2套API的方法差不多相同，只有个别方法不一样。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">children</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">parent</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">closest</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">unmount</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">text</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span>
</span><span class='line'><span class="p">.</span><span class="nx">state</span><span class="p">([</span><span class="nx">key</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="nx">Any</span>
</span><span class='line'><span class="p">.</span><span class="nx">simulate</span><span class="p">(</span><span class="nx">event</span><span class="p">[,</span> <span class="nx">data</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="nx">nextState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">setProps</span><span class="p">(</span><span class="nx">nextProps</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">debug</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里只列出了一小部分API，不但可以通过find方法查找DOM元素，还可以模拟DOM的事件，比如Click，Change等。</p>

<h2>常用的方法</h2>

<ul>
<li>find方法</li>
</ul>


<p>find方法可以让你方便的查找到DOM元素，支持通过class名称查找，html标签查找，id查找，甚至是自定义组件的查找等。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MyComponent</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;.</span><span class="nx">foo</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="c1">// compound selector</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">div</span><span class="p">.</span><span class="nx">some</span><span class="o">-</span><span class="kr">class</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="c1">// CSS id selector</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">#</span><span class="nx">foo</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Component</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">Foo</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>simulate方法</li>
</ul>


<p>simulate方法让你可以模拟DOM元素的事件，传入参数是事件名和事件参数。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MyComponent</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">a</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">simulate</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">click</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">a</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">simulate</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">change</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="p">{</span> <span class="nx">target</span><span class="o">:</span> <span class="p">{</span> <span class="nx">value</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">foo</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="p">}</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>debug方法</li>
</ul>


<p>debug方法可以让你打印出组件的DOM信息，方便测试遇到问题进行调试。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Book</span> <span class="nx">title</span><span class="o">=</span><span class="s2">&quot;Huckleberry Finn&quot;</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">debug</span><span class="p">());</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Outputs</span> <span class="nx">to</span> <span class="nx">console</span><span class="o">:&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;title&quot;</span><span class="o">&gt;</span><span class="nx">Huckleberry</span> <span class="nx">Finn</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>props和state等方法</li>
</ul>


<p>对应React组件的props和state，Enzyme也有一些方法可以让你set和get其中的值，对于重置React组件的状态非常有用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用AVA和Enzyme测试React组件（一）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/03/28/use-ava-and-enzyme-to-test-react-component-part1/"/>
    <updated>2016-03-28T20:20:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/03/28/use-ava-and-enzyme-to-test-react-component-part1</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2016/03/ava.png" width="400" height="300"></p>

<p>React的出现让页面的测试发生了变化，原来一些耗时耗性能的自动化测试可以转化成快速的单元测试，今天介绍一下如何做React的单元测试，以及AVA和Enzyme的使用。</p>

<!--more-->


<p></p>

<h2><a href="https://github.com/sindresorhus/ava">AVA</a>是什么</h2>

<p>AVA是一个JS的单元测试框架，与其他测试框架相比最大的特点是可以并发运行测试，并行地执行每个测试文件，让CPU的利用率达到最大化。有个项目使用AVA让单元测试的执行时间从31秒（原来是用Mocha）下降到11秒。另外AVA的团队也是几个开源社区的大神，为首的<a href="https://github.com/sindresorhus">sindresorhus</a>是github上获得星星最多的人。</p>

<h2>为什么选择AVA</h2>

<p>前端也有很多不错的测试框架，比如<a href="https://github.com/mochajs/mocha">Mocha</a>、<a href="https://testanything.org/">Tap</a>和<a href="https://github.com/substack/tape">Tape</a>等，但AVA这个后起之秀是青出于蓝而胜于蓝，除了上面说的并发测试这个优点外，还有配置简单，多种报告，环境隔离等优点。Mocha的作者<a href="https://github.com/tj">TJ</a>也是个牛人，他对AVA推崇有加，说如果让他来重新开发Mocha的话他也会按照AVA这种思路来做。</p>

<h2>AVA的语法</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">test</span> <span class="nx">from</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">ava</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">test</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">my</span> <span class="nx">first</span> <span class="nx">test</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">same</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>test方法可以带一个字符串的标题和一个回调函数，这个回调函数就是你的测试代码，使用过其他测试框架的开发人员可以很快熟悉它的API并写出自己的测试。</p>

<h2>AVA的配置</h2>

<p>AVA的配置也十分简单，虽然Mocha的配置也不复杂，但相对于后者AVA的配置特点是灵活和集中，你可以用多种方式来配置AVA，就拿配置Babel来说，你可以将Babel配置一起写在<code>package.json</code>里面，也可以将Babel配置写在原来的Babel配置文件中，而在<code>package.json</code>文件里面写上<code>babel: inherit</code>的配置就可以了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">&amp;ldquo;babel&amp;rdquo;:</span> <span class="err">{&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;pre&gt;&lt;code&gt;</span><span class="nt">&quot;presets&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="s2">&quot;es2015&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;stage-0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;react&quot;</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="err">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>  <span class="p">}</span><span class="err">,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;ava&amp;rdquo;:</span> <span class="p">{</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;pre&gt;&lt;code&gt;</span><span class="nt">&quot;babel&quot;</span><span class="p">:</span> <span class="s2">&quot;inherit&quot;</span><span class="p">,</span>
</span><span class='line'><span class="err">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>  <span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>AVA的断言</h2>

<p>AVA内置了断言库，几个常用的断言方法已经可以满足大部分的断言需求，无需再用其他的断言库。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">.</span><span class="nx">pass</span><span class="p">([</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">fail</span><span class="p">([</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">ok</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">notOk</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="kc">true</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="kc">false</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">not</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">same</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">notSame</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="kr">throws</span><span class="p">(</span><span class="kd">function</span><span class="o">|</span><span class="nx">promise</span><span class="p">,</span> <span class="p">[</span><span class="nx">error</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">]])</span>
</span><span class='line'><span class="p">.</span><span class="nx">notThrows</span><span class="p">(</span><span class="kd">function</span><span class="o">|</span><span class="nx">promise</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">regex</span><span class="p">(</span><span class="nx">contents</span><span class="p">,</span> <span class="nx">regex</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">ifError</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>当然你也可以集成其他的第三方断言库，比如<a href="http://chaijs.com/">chai</a>，但这样的话你可能就使用不到测试方法中<code>t</code>这个测试对象了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">exppect</span> <span class="p">}</span> <span class="nx">from</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">chai</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">test</span> <span class="nx">from</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">ava</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">test</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">my</span> <span class="nx">first</span> <span class="nx">test</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">expect</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]).</span><span class="nx">to</span><span class="p">.</span><span class="nx">deep</span><span class="p">.</span><span class="nx">equal</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>AVA的多种支持</h2>

<ul>
<li>支持Promise</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">somePromise</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="s1">&#39;unicorn&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>支持Async</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="nx">async</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">promiseFn</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="kc">true</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>支持Callback</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">.</span><span class="nx">cb</span><span class="p">(</span><span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">data</span><span class="p">.</span><span class="nx">txt</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">t</span><span class="p">.</span><span class="nx">end</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>现在有了async和promise一般不推荐再使用callback，AVA的callback支持是为了方便测试使用了callback的遗留代码。<br/>
<strong>注意，测试callback需要调用<code>t.end</code>方法来结束测试。</strong></p>

<h2>隔离环境</h2>

<p>AVA会为每个测试环境单独启动一个进程来跑测试，这样的好处就保证了每个测试文件的环境不会受到其他测试文件的影响，也要求你写测试的时候更注重原子性，要求测试不依赖其他测试的运行结果或者测试数据，让测试具有独立性。</p>

<p>但并发测试也会带来一些测试方法上的改变，比如说以前串行测试要测试文件的IO操作，可能会临时创建一个文件来进行读写，串行测试时由于每个测试都是顺序进行的，所以只需要一个文件就可以满足需求。但如果是并发测试，一个临时文件可能会被多个测试同时进行读写，这样就会导致冲突，最好的做法是为每个测试都单独创建一个临时文件来做测试。</p>
]]></content>
  </entry>
  
</feed>
