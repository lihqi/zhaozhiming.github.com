<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: vagrant | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/tags/vagrant/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2016-05-31T21:00:13+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何用iso文件创建Vagrant的Box]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/11/29/use-veewee-to-create-vagrant-box/"/>
    <updated>2014-11-29T08:06:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/11/29/use-veewee-to-create-vagrant-box</id>
    <content type="html"><![CDATA[<p>{% img /images/post/2014-11/iso_to_box.jpg %}</p>

<p>虽然<a href="https://www.vagrantup.com/">Vagrant</a>官网上已经有了很多OS的box，比如Ubuntu，CentOS，Debian等，但像RHEL这种不免费的OS，Vagrant上面就没有它的box，如果需要用到RHEL的box，我们就需要自己来制作。下面讲下从iso文件到box文件的一个制作过程。</p>

<!--more-->


<h2>准备</h2>

<p>在制作box文件之前，我们需要安装下面的软件:</p>

<ul>
<li><a href="https://www.vagrantup.com/">Vagrant</a>: 这个没必要说了，我们就是要制作它的box文件。</li>
<li><a href="https://www.virtualbox.org/">VirtualBox</a>: 跟VMWare一样的虚拟机软件，不过它是免费的。</li>
<li><a href="https://github.com/jedi4ever/veewee">Veewee</a>: 这是一款可以轻松创建Vagrant的box文件的工具，它还可以创建KVM和其他虚拟机镜像。</li>
</ul>


<p>这些软件的安装我就不介绍了，请到软件网站自行了解。</p>

<h2>使用Veewee创建Box</h2>

<ul>
<li>首先查找Veewee下面有哪些VirtualBox的模板，下面的vbox表示VirtualBox，当然你也可以换成其他的虚拟机工具。</li>
</ul>


<p>{% codeblock lang:sh %}
$ veewee vbox templates
{% endcodeblock %}</p>

<ul>
<li>命令会列出veewee可以用的模板，如果我们要制作RHEL6.5的Box，可以找CentOS6.5的模板来制作。</li>
</ul>


<p>{% codeblock lang:sh %}
$ veewee vbox define rhel65-64bit &lsquo;CentOS-6.5-x86_64-netboot&rsquo;
{% endcodeblock %}</p>

<ul>
<li>命令执行完后，会在当前目录下产生一个<code>definitions</code>的文件夹，这时我们需要修改下面的一些文件。</li>
</ul>


<p>{% codeblock lang:sh %}
$ vi definitions/rhel65-64bit/definition.rb
{% endcodeblock %}</p>

<p><code>definition.rb</code>是Veewee的创建脚本，我们将其中的<code>iso-file</code>的值修改为iso的文件名，比如<code>rhel-server-6.5-x86_64-dvd.iso</code>，其他iso开头的选项可以不修改或删除。</p>

<p>{% codeblock definition.rb lang:ruby %}
Veewee::Session.declare({
  &hellip;
  &hellip;
  :iso_file => &ldquo;rhel-server-6.5-x86_64-dvd.iso&rdquo;,
  &hellip;
  &hellip;
  })
{% endcodeblock %}</p>

<ul>
<li>然后下载rhel6.5的iso文件，上网查一下资源还是比较多的，这里就不贴iso文件的链接了，怕链接以后会失效，请自行搜索。</li>
<li>在当前目录下创建iso的子文件夹，将下载的iso文件放到这个文件夹中。</li>
</ul>


<p>{% codeblock lang:sh %}
$ mkdir iso
$ mv /your/iso/path/rhel-server-6.5-x86_64-dvd.iso iso
{% endcodeblock %}</p>

<ul>
<li>执行命令创建Box，然后去喝杯咖啡，等一会儿回来看看RHEL6.5的VM应该就创建好了。</li>
</ul>


<p>{% codeblock lang:sh %}
$ veewee vbox build &lsquo;rhel65-64bit&rsquo;
{% endcodeblock %}</p>

<ul>
<li>进到VirtualBox的虚拟机目录(比如在OSX下是<code>~/VirtualBox VMs</code>)，进行vagrant创建box文件操作。</li>
</ul>


<p>{% codeblock lang:sh %}
$ cd ~/VirtualBox\ VMs/rhel65-64bit/
$ vagrant package &mdash;base rhel65-64bit &mdash;output rhel65-64bit.box
{% endcodeblock %}</p>

<ul>
<li>最后使用vagrant启动vm，正常启动证明我们的box已经正确创建了。</li>
</ul>


<p>{% codeblock lang:sh %}
$ vagrant box add &mdash;name rhel65-64bit rhel65-64bit.box
$ vagrant init rhel65-64bit
$ vagrant up
{% endcodeblock %}</p>

<h2>手动创建Box</h2>

<p>如果想手动创建Box也是可以的，不过比较麻烦，下面是手动创建Box的一些注意事项，注意以下命令都是在你的VM进行操作，所以首先要能ssh到VM，没有ssh的话需要先安装ssh。</p>

<ul>
<li>安装一些基本的软件，比如ssh, wget, curl等。</li>
<li>设置root用户密码为<code>vagrant</code>。</li>
<li>新增用户<code>vagrant</code>，密码也是设置为<code>vagrant</code>。</li>
<li>修改visudo的配置，让vagrant用户使用sudo时不需要输入密码。</li>
</ul>


<p>{% codeblock lang:sh %}
$ visudo
{% endcodeblock %}</p>

<p>在最后一行增加以下内容:</p>

<p>{% codeblock visudo lang:sh %}
vagrant ALL=(ALL) NOPASSWD:ALL
{% endcodeblock %}</p>

<ul>
<li>安装Guset Additions，这个是为了可以使用vagrant来创建共享文件夹。</li>
</ul>


<p>{% codeblock lang:sh %}
$ wget <a href="http://download.virtualbox.org/virtualbox/4.3.18/VBoxGuestAdditions_4.3.18.iso">http://download.virtualbox.org/virtualbox/4.3.18/VBoxGuestAdditions_4.3.18.iso</a>
$ sudo mkdir -p /media/VBoxGuestAdditions
$ sudo mount -o loop,ro VBoxGuestAdditions_4.3.8.iso /media/VBoxGuestAdditions
$ sudo /media/VBoxGuestAdditions/VBoxLinuxAdditions.run
{% endcodeblock %}</p>

<ul>
<li>修改ssh配置，让vagrant可以无密码ssh登陆VM。</li>
</ul>


<p>{% codeblock lang:sh %}
$ cd /home/vagrant
$ mkdir .ssh
$ wget <a href="https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant.pub">https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant.pub</a> -O .ssh/authorized_keys
$ chmod 700 .ssh
$ chmod 600 .ssh/authorized_keys
$ chown -R vagrant:vagrant .ssh
{% endcodeblock %}</p>

<p>上面这些做好以后，就可以退出VM，后面的步骤就跟Veewee创建Box一样了，就是使用vagrant来生成box文件，添加box，启动VM。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Vagrant和Ansible搭建Ceph环境]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/10/02/ceph-install-with-vagrant-and-ansible/"/>
    <updated>2014-10-02T22:03:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/10/02/ceph-install-with-vagrant-and-ansible</id>
    <content type="html"><![CDATA[<p>{% img /images/post/2014-9/ceph-install.jpg %}</p>

<h2><a href="http://ceph.com/">Ceph</a>简介</h2>

<p>Ceph是一个高性能，高可用，高扩展的分布式对象存储框架和文件系统，而且是一个免费开源的项目。</p>

<p>但是Ceph的环境搭建起来比较麻烦，最简单的环境也需要2台VM(虚拟机，1台做mon和osd，另外一台做gateway)，而且按照官方文档上面的指南进行安装，经常报各种莫名其妙的问题，现在给大家介绍一个简单的方法来进行Ceph环境的搭建。下面先介绍几个要用到的工具。</p>

<!--more-->


<h2><a href="https://www.vagrantup.com/">Vagrant</a></h2>

<p>{% img /images/post/2014-9/vagrant.png %}</p>

<p>以前使用VM情况是这样的:</p>

<ul>
<li>下载操作系统的iso镜像</li>
<li>通过VM管理工具(VMWare，VirtualBox等)将iso镜像转换为VM</li>
<li>登陆到VM进行操作</li>
</ul>


<p>整个过程复杂而且漫长，但是使用了Vagrant之后就非常方便了，一个命令就可以搞定VM的安装，ssh到VM也无需输入用户名密码，还可以查看所有VM的状态等。</p>

<h3>Box</h3>

<p>vagrant通过box来生成VM，box可以理解是一个制作好的VM，这意味着你搭建完自己的开发环境后，也可以将其制作成一个box，供团队其他成员使用。</p>

<p>box的容量非常小，比如Ubuntu12.04的一个iso镜像一般要500多M，制作成VM可能要10G左右，而一个ubuntu12.04的box只有300多M。Vagrant的box可以在<a href="https://vagrantcloud.com/discover/featured">这里</a>下载，除了有各种OS(ubuntu, windosw, CentOS等)的VM外，还有Virtualbox和VMWare各自对应的box，不过要使用VMWare的box，需要安装插件和到购买相关的<a href="https://www.vagrantup.com/VMware">License</a>，毕竟VMWare不是免费的软件。</p>

<p>下载了box后，执行下面命令就可以添加box了，如果直接输入box名称并发现本地没有box的话，会自动下载box文件。(<code>PS: Vagrant默认使用Virtualbox作为虚拟器软件，所以在安装Vagrant还需要先安装Virtualbox。</code>)</p>

<p>{% codeblock lang:sh %}
//添加本地box文件
$ vagrant box add /your/box/path/xxx.box
//添加指定名称的box，没有的话会自动下载box文件
$ vagrant box add hashicorp/precise32
//列出所有的box
$ vagrant box list
{% endcodeblock %}</p>

<h3>Vagrant基本操作</h3>

<p>Vagrant的操作非常简单，现在介绍几个常用的操作指令。(<code>PS: 下面的大部分命令后面可以跟VM名称，不跟的话是对所有的VM进行操作。</code>)</p>

<ul>
<li>vagrant status: 展示VM的信息。</li>
<li>vagrant up: 启动VM。</li>
<li>vagrant ssh [VM]: ssh到某个VM上，无需输入用户名和密码。</li>
<li>vagrant halt: 关闭VM。</li>
<li>vagrant destroy: 销毁VM，如果你的VM被你玩残了，销毁它然后重新启动一个就可以了，很方便。</li>
</ul>


<h3>Vagrant共享</h3>

<p>使用<code>vagrant ssh</code>到VM后，可以看到根目录下有个<code>/vagrant</code>文件夹，这个是VM和工程间的共享目录，在这个文件夹里面存放东西，可以在存放Vagrantfile的目录里面看到，反之亦然，在VM里面也可以读取到工程下的文件。</p>

<h3>Vagrantfile</h3>

<p>初始化vagrant工程后可以看到一个<code>Vagrantfile</code>的文件，这个是配置VM的文件，可以看下面的例子:</p>

<p>{% codeblock lang:ruby %}
VAGRANTFILE_API_VERSION = &ldquo;2&rdquo;</p>

<p>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.VM.box = &ldquo;hashicorp/precise64&rdquo;</p>

<p>  config.VM.define :rgw do |rgw|</p>

<pre><code>rgw.VM.network :private_network, ip: "192.168.42.2"
rgw.VM.host_name = "ceph-rgw"
rgw.VM.provider :virtualbox do |vb|
  vb.customize ["modifyVM", :id, "--memory", "192"]
end
rgw.VM.provider :VMware_fusion do |v|
  v.VMx['memsize'] = '192'
end
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>这个Vagrantfile指定了box的名称，然后创建了一个名称为<code>rgw</code>的VM，指定了VM的ip、hostname、内存大小。</p>

<p>关于vagrant就介绍到这里，想要了解更多信息可以查看<a href="https://www.vagrantup.com/">vagrant官网</a>。</p>

<h2><a href="http://www.ansible.com/home">Ansible</a></h2>

<p>{% img /images/post/2014-9/ansible.jpg %}</p>

<p>Ansible是一个开源的远程机器管理软件，可以批量操作多台远程服务器。(<code>PS: Ansible只适合操作Linux和Unix机器，如果是Windows系统是不可以的。</code>)</p>

<h3>安装</h3>

<p>要安装Ansible需要先安装Python2.6/7，然后可以通过easy_install或pip进行下载安装。</p>

<p>{% codeblock lang:sh %}
sudo esay_install ansible</p>

<h1>or</h1>

<p>sudo pip install ansible
{% endcodeblock %}</p>

<h3>使用示例</h3>

<p>创建一个文件夹，在文件夹里面创建一个hosts文件，hosts格式如下:</p>

<p>{% codeblock lang:sh %}</p>

<h1>hosts</h1>

<p><a href="http://ceph.com/">ceph</a>
192.168.42.2
192.168.42.101
192.168.42.201
{% endcodeblock %}</p>

<p>可以看到hosts文件里面有几个远程机器的ip(这里是虚拟机)，远程机器可以分组，通过中括号里面的组名来划分。</p>

<p>然后执行下面的命令执行简单的命令。</p>

<p>{% codeblock lang:sh %}
$ ansible all -a &lsquo;who&rsquo;
ceph-mon0 | success | rc=0 >>
ceph     pts/0        2014-10-02 08:54 (192.168.42.60)</p>

<p>ceph-osd0 | success | rc=0 >>
ceph     pts/0        2014-10-02 08:54 (192.168.42.60)</p>

<p>ceph-osd1 | success | rc=0 >>
ceph     pts/0        2014-10-02 08:54 (192.168.42.60)
{% endcodeblock %}</p>

<p>从输出信息上可以看到这几台远程机器都成功执行了<code>who</code>命令，不过如果要成功执行上面的命令，还需要先在执行机和远程机上面设置无密码ssh连接。</p>

<h3>无密码ssh连接</h3>

<p>假设有2台机器，机器A和机器B，现在想让机器A<code>ssh</code>机器B的时候不需要输入用户和密码，操作如下。</p>

<ul>
<li>在机器B上创建一个用户，并配置好，下面命令的<code>username</code>指自己要创建的用户名。</li>
</ul>


<p>{% codeblock lang:sh %}
$ sudo useradd -d /home/{username} -m {username}
$ sudo passwd {username}</p>

<h1>输入密码</h1>

<p>$ echo &ldquo;{username} ALL = (root) NOPASSWD:ALL&rdquo; | sudo tee /etc/sudoers.d/{username}
$ sudo chmod 0440 /etc/sudoers.d/{username}
{% endcodeblock %}</p>

<ul>
<li>在机器A上生成密钥，并发送给机器B。</li>
</ul>


<p>{% codeblock lang:sh %}
$ ssh-keygen</p>

<p>Generating public/private key pair.
Enter file in which to save the key (/ceph-admin/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /ceph-admin/.ssh/id_rsa.
Your public key has been saved in /ceph-admin/.ssh/id_rsa.pub.</p>

<p>$ ssh-copy-id {username}@{机器B}
{% endcodeblock %}</p>

<ul>
<li>到这里就可以不用输入密码进行ssh了，如果想连用户名也不想输入的话，需要机器A在<code>.ssh</code>文件下创建一个<code>config</code>文件，在里面添加如下内容。</li>
</ul>


<p>{% codeblock lang:sh %}
Host 机器B
   Hostname 机器B
   User {username}
{% endcodeblock %}</p>

<h3>playbook</h3>

<p>ansible还可以通过一个playbook脚本进行远程机器的操作，playbook的示例如下:</p>

<p>{% codeblock playbook.yml lang:yaml %}</p>

<h1>playbook.yml</h1>

<hr />

<ul>
<li>hosts: all
remote_user: ceph
tasks:

<ul>
<li>name: whoami
shell: &lsquo;whoami > whoami.rst&rsquo;
{% endcodeblock %}</li>
</ul>
</li>
</ul>


<p>创建完playbook文件后执行如下命令可以看到执行结果。</p>

<p>{% codeblock lang:sh %}
$ ansible-playbook playbook.yml</p>

<p>PLAY [all] ********************************************************************</p>

<p>GATHERING FACTS ***************************************************************
ok: [ceph-mon0]
ok: [ceph-osd1]
ok: [ceph-osd0]</p>

<p>TASK: [whoami] ****************************************************************
changed: [ceph-mon0]
changed: [ceph-osd0]
changed: [ceph-osd1]</p>

<p>PLAY RECAP ********************************************************************
ceph-mon0                  : ok=2    changed=1    unreachable=0    failed=0 <br/>
ceph-osd0                  : ok=2    changed=1    unreachable=0    failed=0 <br/>
ceph-osd1                  : ok=2    changed=1    unreachable=0    failed=0 <br/>
{% endcodeblock %}</p>

<p>这时可以在远程机器的用户目录上可以看到新产生了一个<code>whoami.rst</code>的文件。</p>

<p>关于ansible就介绍到这里，想要了解更多信息可以查看<a href="http://docs.ansible.com/">ansible的文档</a>。</p>

<h2><a href="https://github.com/ceph/ceph-ansible">Ceph-ansible</a></h2>

<p>这个github项目主要是利用了上面介绍的2个工具，使用vagrant来创建ceph需要的服务器VM，然后将ceph的环境搭建通过ansible的playbook脚本执行。</p>

<h3>执行步骤</h3>

<ul>
<li>下载ceph-ansible项目;</li>
</ul>


<p>{% codeblock lang:sh %}
$ git clone <a href="https://github.com/ceph/ceph-ansible.git">https://github.com/ceph/ceph-ansible.git</a>
{% endcodeblock %}</p>

<ul>
<li>一行命令就可以完成环境搭建，完成后ceph的环境是: 3个mon，3个osd，1个rgw;</li>
</ul>


<p>{% codeblock lang:sh %}
$ vagrant up
&hellip;
&hellip;
&hellip;
mon0                       : ok=16   changed=11   unreachable=0    failed=0
mon1                       : ok=16   changed=10   unreachable=0    failed=0
mon2                       : ok=16   changed=11   unreachable=0    failed=0
osd0                       : ok=19   changed=7    unreachable=0    failed=0
osd1                       : ok=19   changed=7    unreachable=0    failed=0
osd2                       : ok=19   changed=7    unreachable=0    failed=0
rgw                        : ok=20   changed=17   unreachable=0    failed=0
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
