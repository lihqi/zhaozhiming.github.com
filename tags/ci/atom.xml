<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: CI | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/tags/ci/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2018-04-18T08:44:40+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[gitlab CI runner的创建和配置]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/11/30/gitlab-ci-runner-create-and-config/"/>
    <updated>2015-11-30T22:13:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/11/30/gitlab-ci-runner-create-and-config</id>
    <content type="html"><![CDATA[<p>{% img /images/post/2015-11/gitlab-ci-runner.png 400 350 %}</p>

<p><a href="https://gitlab.com/">gitlab</a>不仅是一个代码托管的开源框架，同时它还集成了CI的功能，可以方便地为gitlab上的项目添加CI功能。</p>

<!--more-->


<p></p>

<h2>创建Runner</h2>

<ul>
<li>Runner服务器</li>
</ul>


<p>首先要找一台服务器来创建Runner，因为是要跟你的gitlab服务关联，所以服务器要可以访问你的gitlab服务。</p>

<ul>
<li>安装gitlab-CI-multi-runner</li>
</ul>


<p>gitlab-ci-multi-runner是CI runner的运行程序，这里有多种安装方式（<a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner#installation/">见这里</a>），这里我们使用了第一种：在linux中安装软件。</p>

<h2>gitlab-ci-multi-runner命令介绍</h2>

<p>执行<code>gitlab-ci-multi-runner help</code>可以看到所有命令的简介，在每个命令加<code>--help</code>可以看到更加具体的参数，比如<code>gitlab-ci-multi-runner start --help</code>，命令的执行顺序为：<code>register(注册runner)--&gt;install(安装服务)--&gt;start(运行服务)</code>。</p>

<p>{% codeblock lang:sh %}
COMMANDS:
   run          run multi runner service
   register     register a new runner
   install      install service
   uninstall    uninstall service
   start        start service
   stop         stop service
   restart      restart service
   run-single   start single runner
   unregister   unregister specific runner
   verify       verify all registered runners
   help, h      Shows a list of commands or help for one command</p>

<p>GLOBAL OPTIONS:
   &mdash;debug                      debug mode [$DEBUG]
   &mdash;log-level, -l &ldquo;info&rdquo;       Log level (options: debug, info, warn, error, fatal, panic)
   &mdash;help, -h                   show help
   &mdash;version, -v                print the version
{% endcodeblock %}</p>

<h2>gitlab CI配置</h2>

<ul>
<li>打开网址（比如你的gitlab服务地址是：<code>http://gitlab.your.company/</code>，那gitlab CI的地址就是：<code>http://gitlab.your.company/ci</code>），找到想要配置CI的项目，点击后面的按钮<code>Add project to CI</code>，给项目配置CI功能。</li>
<li>进入CI项目，进入<code>Runners</code>标签页面，可以看到CI的url和token，这2个值是待会用命令注册runner时所需要的。</li>
</ul>


<p>{% codeblock lang:sh %}
How to setup a new project specific runner
Install GitLab Runner software. Checkout the GitLab Runner section to install it
Specify following URL during runner setup:
<a href="http://gitlab.your.company/ci">http://gitlab.your.company/ci</a>
Use the following registration token during setup:
7c92da80317b5f5e1fe1c62a1b0767
Start runner!
{% endcodeblock %}</p>

<ul>
<li>在runner的服务器上注册runner，执行命令<code>gitlab-ci-multi-runner register</code>，下面是执行命令后的交互信息。<br/>
<code>PS：如果你用的是docker的执行方式，可以先把对应的docker的image下载下来，不然第一次执行CI会比较慢。</code></li>
</ul>


<p>{% codeblock lang:sh %}
root@cloudeye:~# gitlab-ci-multi-runner register
Please enter the gitlab-ci coordinator URL (e.g. <a href="https://gitlab.com/ci">https://gitlab.com/ci</a>): ## 输入你CI服务器的地址
<a href="http://gitlab.your.company/ci">http://gitlab.your.company/ci</a>
Please enter the gitlab-ci token for this runner: ## 输入你CI项目的token
7c92da80317b5f5e1fe1c62a1b0767
Please enter the gitlab-ci description for this runner: ## 描述信息，只是表述不是很重要
Please enter the gitlab-ci tags for this runner (comma separated): ## runner的标签
dev
INFO[0032] fc6e1ee6 Registering runner&hellip; succeeded
Please enter the executor: docker-ssh, ssh, shell, parallels, docker: ## runner的执行方式，有5种，这里我选择了docker
docker
Please enter the Docker image (eg. ruby:2.1): ## docker镜像
node:0.12.7
If you want to enable mysql please enter version (X.Y) or enter latest? ## 不需要的话直接空格就可以了</p>

<p>If you want to enable postgres please enter version (X.Y) or enter latest? ## 不需要的话直接空格就可以了</p>

<p>If you want to enable redis please enter version (X.Y) or enter latest? ## 不需要的话直接空格就可以了</p>

<p>If you want to enable mongo please enter version (X.Y) or enter latest? ## 不需要的话直接空格就可以了</p>

<p>INFO[0043] Runner registered successfully. Feel free to start it, but if it&rsquo;s running already the config should be automatically reloaded!
{% endcodeblock %}</p>

<ul>
<li>注册完成后，打开runner的配置文件：<code>vi /etc/gitlab-runner/config.toml</code>，可以看到配置文件里面增加了刚才注册的相关信息，更多参数的信息可以看<a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/configuration/advanced-configuration.md">官方文档</a>。</li>
</ul>


<p>{% codeblock lang:sh %}
root@cloudeye:~# gitlab-ci-multi-runner register
concurrent = 2</p>

<p>[[runners]]
  url = &ldquo;<a href="http://gitlab.your.company/ci">http://gitlab.your.company/ci</a>&rdquo;
  token = &ldquo;79bf814ac37a52427345b01e135a78&rdquo;
  name = &ldquo;your-project&rdquo;
  executor = &ldquo;docker&rdquo;
  [runners.docker]</p>

<pre><code>image = "node:0.12.7"
privileged = false
disable_cache = true
volumes = ["/cache:/cache:rw"]
</code></pre>

<p>{% endcodeblock %}</p>

<ul>
<li>安装服务，执行命令<code>gitlab-ci-multi-runner install -n "服务名"</code>，后面的服务名是自己定义的名称，用来后面启动命名使用，与其相对的命令是<code>uninstall</code>。</li>
<li>启动服务，执行命令<code>gitlab-ci-multi-runner start -n "服务名"</code>，与其相类似的命令有<code>stop</code>和<code>restart</code>。</li>
<li>验证runner，执行<code>gitlab-ci-multi-runner verify</code>，可以看到runner的运行情况。</li>
</ul>


<p>{% codeblock lang:sh %}
root@cloudeye:~# gitlab-ci-multi-runner verify
INFO[0000] 79bf814a Veryfing runner&hellip; is alive
INFO[0000] 207a4b34 Veryfing runner&hellip; is alive
INFO[0000] 20f849f7 Veryfing runner&hellip; is alive
INFO[0000] 6e07e13a Veryfing runner&hellip; is alive
INFO[0000] 23be6deb Veryfing runner&hellip; is alive
INFO[0000] 4e348964 Veryfing runner&hellip; is alive
{% endcodeblock %}</p>

<ul>
<li>启动服务后，可以在刚才的CI runners页面看到已经有runner出现了。</li>
</ul>


<h2>gitlab-ci.yaml文件</h2>

<p>配置好了runner，要让CI跑起来，还需要在项目根目录放一个<code>.gitlab-ci.yaml</code>文件，在这个文件里面可以定制CI的任务，下面是简单的示例文件，更多的用法可以看<a href="http://doc.gitlab.com/ci/yaml/README.html">官方文档</a>。</p>

<p>{% codeblock lang:yaml %}
efore_script:
  &ndash; bundle_install
job1:
  script:</p>

<pre><code>- execute-script-for-job1
</code></pre>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
