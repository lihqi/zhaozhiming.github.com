<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: spring-security | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/tags/spring-security/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2015-09-23T11:54:46+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Spring Security进行LDAP认证]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/12/18/use-spring-security-to-ldap-authentication/"/>
    <updated>2014-12-18T08:56:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/12/18/use-spring-security-to-ldap-authentication</id>
    <content type="html"><![CDATA[<p>{% img /images/post/2014-12/spring-security.jpeg %}</p>

<p>这里介绍一下如何是用Spring Security来做LDAP的认证，LDAP服务器只存放了用户的用户名和密码，没有角色等其他权限，所以这里介绍的是最简单的用户名密码认证。</p>

<!--more-->


<h2>下载spring-security相关JAR包</h2>

<p>下面是gradle的脚本配置，需要下载spring-security和ldap相关的JAR包。</p>

<p>{% codeblock build.gradle lang:groovy %}
String springSecurityVersion = &ldquo;3.2.5.RELEASE&rdquo;</p>

<p>dependencies {</p>

<pre><code>...//other spring jars

//security
compile "org.springframework.security:spring-security-core:" + springSecurityVersion
compile "org.springframework.security:spring-security-web:" + springSecurityVersion
compile "org.springframework.security:spring-security-config:" + springSecurityVersion
compile "org.springframework.security:spring-security-ldap:" + springSecurityVersion
compile "org.springframework.ldap:spring-ldap-core:2.0.2.RELEASE"
</code></pre>

<p>}
{% endcodeblock %}</p>

<h2>配置web.xml</h2>

<p>在web.xml配置<code>filter</code>，修改内容如下。</p>

<p>{% codeblock web.xml lang:xml %}
<filter>
   &lt;filter-name>springSecurityFilterChain&lt;/filter-name>
  &lt;filter-class>org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class>
</filter>
&lt;filter-mapping>
   &lt;filter-name>springSecurityFilterChain&lt;/filter-name>
   &lt;url-pattern>/*&lt;/url-pattern>
&lt;/filter-mapping></p>

<p><listener>
   &lt;listener-class>org.springframework.web.context.ContextLoaderListener&lt;/listener-class>
</listener></p>

<p>&lt;context-param>
   &lt;param-name>contextConfigLocation&lt;/param-name>
   &lt;param-value>classpath:spring-security.xml&lt;/param-value>
&lt;/context-param>
{% endcodeblock %}</p>

<h2>创建spring-security.xml</h2>

<p>在web.xml里面指定了Application启动时需要加载spring-security.xml文件，我们的LDAP认证主要就配置在这个文件里面。</p>

<p>{% codeblock spring-security.xml lang:xml %}
&lt;beans xmlns=&ldquo;<a href="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</a>&rdquo;
   xmlns:s=&ldquo;<a href="http://www.springframework.org/schema/security">http://www.springframework.org/schema/security</a>&rdquo; xmlns:context=&ldquo;<a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a>&rdquo;
   xmlns:xsi=&ldquo;<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>&rdquo;
   xsi:schemaLocation=&ldquo;<a href="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</a> <a href="http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</a></p>

<pre><code>   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd"&gt;
</code></pre>

<p>   &lt;context:property-placeholder location=&ldquo;classpath:app.properties&rdquo; />  //1</p>

<p>   &lt;s:http pattern=&ldquo;/resources/**&rdquo; security=&ldquo;none&rdquo; />  //2
   &lt;s:http pattern=&ldquo;/login.html&rdquo; security=&ldquo;none&rdquo; />    //2</p>

<p>   &lt;s:http use-expressions=&ldquo;true&rdquo;></p>

<pre><code>  &lt;s:intercept-url pattern="/**" access="isAuthenticated()" /&gt;  //3
  &lt;s:form-login login-page="/login.html"                        //4
     authentication-failure-url="/login.html?error=true"        //5   
     username-parameter="j_username" password-parameter="j_password"/&gt; //6
  &lt;s:anonymous /&gt;
  &lt;s:logout logout-success-url="/login.html?logout=true" /&gt;  //7
</code></pre>

<p>   &lt;/s:http></p>

<p>   &lt;s:ldap-server url=&ldquo;${ldap_server}&rdquo; manager-dn=&ldquo;${ldap_user}&rdquo;//8</p>

<pre><code>  manager-password="${ldap_password}" /&gt;
</code></pre>

<p>   &lt;s:authentication-manager></p>

<pre><code>  &lt;s:ldap-authentication-provider
     user-dn-pattern="${ldap_user_dn_pattern}" /&gt;  //9
</code></pre>

<p>   &lt;/s:authentication-manager></p>

<p></beans>
{% endcodeblock %}</p>

<ol>
<li>指定properties文件，下面的ldap信息都是从properties文件里面取得。</li>
<li>配置哪些资源和url不需要做认证，比如一些图片，js和css文件等，还有我们的login页面，如果把login页面也拦截的话，就做不了认证了。</li>
<li>指定其他url(<code>/**</code>)都需要做认证，isAuthenticated方法表示认证通过了才能访问该url。</li>
<li>指定登陆页面的地址，这里是相对路径，如果不指定login-page，认证时会自动调用spring-security的一个默认登陆页面。</li>
<li>指定认证失败后的url，这里我们使用同一个login页面，只是在url后面加上查询参数作为认证失败的标示。</li>
<li>指定login页面2个作用域，用户名和密码，需要和页面录入框的name相同。</li>
<li>指定登出/注销成功后的页面，这里我们还是使用login页面，在url后面加上logout参数作为标示。</li>
<li>ldap服务器的配置信息，包括url, manager-dn和manager-password。</li>
<li>配置ldap的user-dn-pattern。</li>
</ol>


<p>下面是app.properties的内容。</p>

<p>{% codeblock app.properties lang:properties %}</p>

<h1>Ldap</h1>

<p>ldap_server=ldap://your.ldap.server.com.:12356
ldap_user=cn=yourname,cn=Users,dc=ldap,dc=server,dc=com
ldap_password=123456
ldap_user_dn_pattern=uid={0},ou=staff,ou=people,o=ldap.server.com
{% endcodeblock %}</p>

<h2>创建登陆页面</h2>

<p>创建用户登陆的Form，method为<code>post</code>，action为<code>j_spring_security_check</code>，用户录入框的name为<code>j_username</code>，密码录入框的name为<code>j_password</code>，这2个值与之前spring-security.xml里面配置的要保持一致。</p>

<p>{% codeblock login.html lang:html %}
<form name="LoginForm" method="post" action="j_spring_security_check"></p>

<pre><code>&lt;div style="display: block;"&gt;
    &lt;div&gt;
        &lt;h1&gt;
            &lt;span class="ui-icon add"&gt;&lt;/span&gt;用户登录
        &lt;/h1&gt;
    &lt;/div&gt;
    &lt;div class="content"&gt;
        &lt;div id="error" style="display: none; color: #c9302c" align="center"&gt;
            &lt;h3&gt;认证失败，请重新登录&lt;/h3&gt;
        &lt;/div&gt;
        &lt;div id="logout" style="display: none; color: #02547f" align="center"&gt;
            &lt;h3&gt;已成功登出&lt;/h3&gt;
        &lt;/div&gt;

        &lt;ul&gt;
            &lt;li&gt;&lt;label&gt;
                &lt;span&gt;用户名&lt;/span&gt;
                &lt;input type="text" name="j_username"&gt;
            &lt;/label&gt;&lt;/li&gt;
            &lt;li&gt;&lt;label&gt;
                &lt;span&gt;密码&lt;/span&gt;
                &lt;input type="password" name="j_password"&gt;
            &lt;/label&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;button type="submit" name="logon" value="Logon"&gt;登录&lt;/button&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p></form>
{% endcodeblock %}</p>

<p>相关的js代码如下:
{% codeblock lang:js %}
function getParameterByName(name) {</p>

<pre><code>name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
var regex = new RegExp("[\\?&amp;]" + name + "=([^&amp;#]*)"),
    results = regex.exec(location.search);
return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
</code></pre>

<p>}</p>

<p>if(getParameterByName(&ldquo;error&rdquo;)) {</p>

<pre><code>$("#error").show();
</code></pre>

<p>}</p>

<p>if(getParameterByName(&ldquo;logout&rdquo;)) {</p>

<pre><code>$("#logout").show();
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>如果需要的话，可以配置自己的logout页面，只需要一个Form就可以了，方法为<code>post</code>，action为<code>j_spring_security_logout</code>，只要提交了这个Form就可以成功登出了。</p>

<p>{% codeblock logout.html lang:html %}
<form action="j_spring_security_logout" method="post" id="logoutForm"></form>
{% endcodeblock %}</p>

<p>更多Spring Security的信息请查阅: <a href="http://docs.spring.io/spring-security/site/docs/3.2.x/reference/htmlsingle/">Spring Security Reference</a>。</p>
]]></content>
  </entry>
  
</feed>
