<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: maven | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/tags/maven/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2015-09-23T11:45:18+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[快速找到你想要的jar包]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/09/14/find-your-jar-quickly/"/>
    <updated>2014-09-14T17:41:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/09/14/find-your-jar-quickly</id>
    <content type="html"><![CDATA[<p>{% img /images/post/2014-9/class-not-found.jpeg %}</p>

<p>在做Java开发时，经常遇到<code>Class not found</code>的错误，一般的做法就是在google上搜索class名字，然后再搜索这个class所在的jar包是哪个，最后才找到可以下载jar包的链接。过程比较繁琐，有没有更好的方法可以快速的找到缺少的class所在的jar包呢？答案是肯定的。</p>

<!--more-->


<h2><a href="http://grepcode.com/">Grepcode</a></h2>

<p>这个网站可以通过class名称直接搜索到拥有这个class的所有的jar包，比如说我们运行Java程序时报下面的错误，发现<code>cn/com/starit/io/SystemDemo02</code>找不到。</p>

<p>{% codeblock lang:sh %}
java.lang.NoClassDefFoundError: cn/com/starit/io/SystemDemo02
Caused by: java.lang.ClassNotFoundException: cn.com.starit.io.SystemDemo02</p>

<pre><code>at java.net.URLClassLoader$1.run(URLClassLoader.java:200)
at java.security.AccessController.doPrivileged(Native Method)
at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
at java.lang.ClassLoader.loadClass(ClassLoader.java:252)
at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320)
</code></pre>

<p>Exception in thread &ldquo;main&rdquo;
{% endcodeblock %}</p>

<ul>
<li>进入grepcode首页，输入<code>cn/com/starit/io/SystemDemo02</code>进行查询。</li>
</ul>


<p>{% img /images/post/2014-9/grepcode-1.png %}</p>

<ul>
<li>可以看到查询结果涵盖了所有可能包含这个class的jar包，最前面的是相似度最接近的jar包名称，点开版本号还可以看到具体的源码。</li>
</ul>


<p>{% img /images/post/2014-9/grepcode-2.png %}</p>

<h2><a href="http://mvnrepository.com/">mvnrepository</a></h2>

<p>知道Jar包的名称后，我们就可以通过mvnrepository这个网站来下载对应的jar包了，操作也很简单，输入jar名称就可以查询到相关的jar版本信息，里面还有maven，gradle等构建工具的配置脚本信息。</p>

<p>{% img /images/post/2014-9/mvn-repository-1.png %}</p>

<p>{% img /images/post/2014-9/mvn-repository-2.png %}</p>

<p>{% img /images/post/2014-9/mvn-repository-3.png %}</p>

<p>结合这两个网站就可以很方便的找到缺失的Jar包了。</p>
]]></content>
  </entry>
  
</feed>
