<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: mongodb | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/tags/mongodb/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2017-01-17T22:18:15+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MongoDB简介]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/02/26/hello-mongodb/"/>
    <updated>2015-02-26T16:42:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/02/26/hello-mongodb</id>
    <content type="html"><![CDATA[<p>{% img /images/post/2015-2/mongodb.jpeg %}</p>

<p><a href="http://www.mongodb.org/">MongoDB</a>是一个<a href="http://en.wikipedia.org/wiki/NoSQL">NoSQL</a>(Not only SQL)数据库，使用C++语言编写，当前最新版本为3.0(beta)。</p>

<!--more-->


<p></p>

<h2>安装</h2>

<p>在MongoDB官网上有各个OS的安装指导，但在docker横行的时代，使用docker来安装无疑是最方便的，这里是<a href="https://registry.hub.docker.com/_/mongo/">MongoDB的docker镜像地址</a>，使用非常简单，执行以下命令，docker就会自动下载镜像并启动MongoDB容器了。</p>

<p>{% codeblock lang:sh %}
docker run &mdash;name somename -d -p 27017:27017 mongo:tag
{% endcodeblock %}</p>

<h2>客户端</h2>

<p>对比了几个MongoDB的GUI客户端，发现一个比较好用的客户端<a href="http://robomongo.org/">Robomongo</a>，而且是跨平台的，安装完成后点击添加连接，输入ip和端口号就可以连接到你的MongoDB服务器了。</p>

<p>{% img /images/post/2015-2/robomongo.png %}</p>

<p>PS:因为我是OS系统，用boot2docker来启动docker的，所以我的ip不是<code>localhost</code>，而是<code>192.168.59.103</code>。</p>

<h2>sql查询</h2>

<p>MongoDB是用表达式语言进行数据库操作的，这里<a href="http://www.cnblogs.com/hoojo/archive/2011/06/01/2066426.html">有一篇blog</a>介绍了MongoDB的一些简单操作，并有SQL语句与之对应，下面简单介绍几个命令。</p>

<h4>关系型数据库 vs NoSQL</h4>

<p>在介绍命令之前，需要先理解与关系型数据库两者概念上的区别。</p>

<ul>
<li>表：table vs collection</li>
<li>行：view/row(s) vs json document</li>
<li>索引：index vs index</li>
</ul>


<h4>简单命令</h4>

<p>{% codeblock lang:sh %}</p>

<h1>创建一个聚集集合（table）</h1>

<p>db.createCollection(“collName”, {size: 20, capped: 5, max: 100});</p>

<h1>查询集合所有记录</h1>

<p>db.userInfo.find();
相当于: select * from userInfo;</p>

<h1>查询age = 22的记录</h1>

<p>db.userInfo.find({&ldquo;age&rdquo;: 22});
相当于: select * from userInfo where age = 22;</p>

<h1>查询name中包含 mongo的数据</h1>

<p>db.userInfo.find({name: /mongo/});
相当于: select * from userInfo where name like ‘%mongo%’;</p>

<h1>查询name = zhangsan, age = 22的数据</h1>

<p>db.userInfo.find({name: &lsquo;zhangsan&rsquo;, age: 22});
相当于: select * from userInfo where name = ‘zhangsan’ and age = ‘22’;</p>

<h1>更新记录</h1>

<p>db.users.update({age: 25}, {$set: {name: &lsquo;changeName&rsquo;}}, false, true);
相当于: update users set name = ‘changeName’ where age = 25;</p>

<h1>删除</h1>

<p>db.users.remove({age: 132});
相当于: delete from users where age = 132;
{% endcodeblock %}</p>

<h2>Java示例</h2>

<p>使用Java来操作MongoDB也比较简单，首先要下载Java驱动，在Maven库上可以查询到，下面是驱动的Gradle定义。</p>

<p>{% codeblock lang:sh %}
org.mongodb:mongo-java-driver:3.0.0-beta2
{% endcodeblock %}</p>

<p>驱动最新的版本是3.0，语法上跟2.x有一些差别，具体示例可以参考<a href="http://docs.mongodb.org/ecosystem/tutorial/getting-started-with-3.0-java-driver/">MongoDB官网的Java示例</a>。</p>

<h4>简单示例</h4>

<p>{% codeblock MyMongoDB.java lang:java %}
import com.mongodb.BasicDBObject;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;</p>

<p>public class MyMongoDb {</p>

<pre><code>public static void main(String[] args) {
    MongoClient mongo = new MongoClient("192.168.59.103", 27017);

    // 根据名称查找数据库
    MongoDatabase mydb = mongo.getDatabase("mydb");
    // 根据名称查找集合
    MongoCollection&lt;Document&gt; collection = mydb.getCollection("collectName");

    // 查询该集合的所有记录
    FindIterable&lt;Document&gt; documents = collection.find();
    for (Document document : documents) {
        System.out.println(document.toString());
    }

    // 插入一条记录
    Document t = new Document("name", "time")
            .append("age", 100)
            .append("sex", true)
            .append("address", new BasicDBObject("name", "china").append("province", "Sichuan"));
    collection.insertOne(t);

    // 更新一条记录
    collection.updateOne(new Document("name", "time"), new Document("$set", new Document("age", 101)));
}
</code></pre>

<p>{% endcodeblock %}</p>

<h2>数据库设计原则</h2>

<p>MongoDB的数据模式有2种结构：引用(References)和内嵌(Embedded)。</p>

<ul>
<li>引用和关系型数据库的表设计比较像，不同的对象放在不同的集合(表)中。</li>
</ul>


<p>{% img /images/post/2015-2/mongo-references.png %}</p>

<ul>
<li>内嵌比较特殊，是把对象的关联对象放到一个集合(表)中，这个恰恰是关系系数据库做不到的。</li>
</ul>


<p>{% img /images/post/2015-2/mongo-embedded.png %}</p>

<p>那问题来了，什么时候使用引用，什么时候使用内嵌呢？下面是官方给的一些建议，总结如下:</p>

<ul>
<li>顶级对象，一般使用独立的collection，区别于内嵌</li>
<li>线性明细对象如订单里的订单项，一般使用内嵌</li>
<li>包含关系的对象通常使用内嵌</li>
<li>多对多的关系通常采用引用，dbref</li>
<li>只有少量数据的可以单独作为一个collection，这样可以快速缓存到应用服务器内存</li>
<li>内嵌对象比顶级对象难引用，至少现在还不能对它使用dbref</li>
<li>内嵌对象的获取有时候会比较难，例如各科分数内嵌到学生对象，从所有学生中获取前100个高分，不内嵌会更简单</li>
<li>如果内嵌对象数量很多，可以限制其大小</li>
<li>性能存在问题（应是查询的性能），使用内嵌</li>
</ul>


<p>总而言之，数据库的设计需要考虑需求的使用场景，能一次查询到结果的尽量不要分多次进行查询，更多内容可以参考MongoDB官网<a href="http://docs.mongodb.org/manual/core/data-modeling-introduction/">Data Modeling</a>的章节。</p>
]]></content>
  </entry>
  
</feed>
