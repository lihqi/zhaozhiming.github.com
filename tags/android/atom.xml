<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: android | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/tags/android/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2016-05-31T21:00:13+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[让你的安卓开发更容易(三)——Picasso]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/10/07/make-your-android-dev-life-easy-part-3/"/>
    <updated>2014-10-07T23:48:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/10/07/make-your-android-dev-life-easy-part-3</id>
    <content type="html"><![CDATA[<p>{% img /images/post/2014-10/picasso.png %}</p>

<p><a href="http://square.github.io/picasso/">Picasso</a>是Android下一个强大的图片下载和缓存类库，代码借口简洁易懂，功能强大，Picasso有如下特性：</p>

<ul>
<li>处理Adapter中的ImageView回收和取消已经回收ImageView的下载进程</li>
<li>使用最少的内存完成复杂的图片转换，比如把下载的图片转换为圆角等</li>
<li>自动添加磁盘和内存缓存</li>
</ul>


<p>下面通过介绍Android原生的图片下载缓存功能和Picasso进行对比，看看使用Picasso有哪些好的地方。</p>

<!--more-->


<h2>Android原生的图片下载功能</h2>

<p>在没有使用Picasso的情况下，如果想做到图片下载以及缓存，需要编写大量代码。</p>

<h4>图片下载</h4>

<p>Android的图片下载是不能在主线程里面进行的，需要新创建一个线程进行操作。</p>

<ul>
<li>首先要继承AsyncTask类，Android的一个异步操作类。</li>
</ul>


<p>{% codeblock DownloadTask.java lang:java %}</p>

<p>import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.util.Log;
import android.widget.ImageView;
import com.github.zzm.bushu.app.model.LogTag;</p>

<p>import java.io.*;
import java.net.URL;</p>

<p>public class DownloadTask extends AsyncTask&lt;String, Void, String> {</p>

<pre><code>private File imageFile;
private ImageView imageView;

public DownloadTask(File imageFile, ImageView imageView) {
    this.imageFile = imageFile;
    this.imageView = imageView;
}
...
</code></pre>

<p>}
{% endcodeblock %}</p>

<ul>
<li>实现<code>doInBackground</code>方法。</li>
</ul>


<p>该方法接受一个可变String参数，表示可以进行多个url下载，但这url参数是从哪里传进来的呢？</p>

<p>我们后面在使用这个<code>DownloadTask</code>类时，会调用其<code>exexute(String... url)</code>的方法，url参数就是从这里传进去的。</p>

<p>下面的代码中通过<code>new URL(url).openStream()</code>进行图片下载，然后新建一个文件输出流，将图片写到输出文件中。</p>

<p>{% codeblock DownloadTask.java lang:java %}</p>

<pre><code>@Override
protected String doInBackground(String... urls) {
    storageImage(urls[0]);
    return null;
}

private void storageImage(String url) {
    FileOutputStream outputStream;
    try {
        outputStream = new FileOutputStream(imageFile);
        outputStream.write(getImageBytes(url));
        outputStream.close();
    } catch (Exception e) {
        Log.e(LogTag.DownloadTask.name(), "storage image error:" + e.getMessage());
    }
}

private byte[] getImageBytes(String url) throws IOException {
    InputStream in = new BufferedInputStream(new URL(url).openStream());
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    byte[] buf = new byte[1024];
    int n;
    while (-1 != (n = in.read(buf))) {
        out.write(buf, 0, n);
    }
    out.close();
    in.close();
    return out.toByteArray();
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<ul>
<li>实现<code>onPostExecute</code>方法，这个方法是在图片下载完成后调用的，我们可以将下载的图片指定显示到某个imageView中。</li>
</ul>


<p>{% codeblock DownloadTask.java lang:java %}</p>

<pre><code>@Override
protected void onPostExecute(String ignore) {
    imageView.setImageBitmap(BitmapFactory.decodeFile(imageFile.getAbsolutePath()));
}
</code></pre>

<p>{% endcodeblock %}</p>

<h4>图片缓存</h4>

<p>我们要自己实现图片缓存的功能也比较简单，代码如下。(但如果已经有Picasso这种强大的类库，我们又何必自己造轮子呢？)</p>

<ul>
<li>要找到下载的图片文件，我们要自己定义文件的命名规则和存放路径，这样才能方便我们找到文件。</li>
</ul>


<p>{% codeblock MyAdapter.java lang:java %}</p>

<pre><code>File imageFile = getImageFile(bookName);

private File getImageFile(String bookName) {
    File imageFile = new File(context.getFilesDir(), bookName + ".png");
    Log.d(LogTag.BooksAdapter.name(), "file path: " + imageFile.getAbsolutePath());
    return imageFile;
}
</code></pre>

<p>{% endcodeblock %}</p>

<ul>
<li>判断文件是否存在，如果不存在则进行首次下载，如果已经存在了则直接从磁盘上面加载文件。</li>
</ul>


<p>{% codeblock MyAdapter.java lang:java %}</p>

<pre><code>if (imageFileEmpty(imageFile)) {
        downloadImage(bookName, imageView);
    } else {
        imageView.setImageBitmap(BitmapFactory.decodeFile(imageFile.getAbsolutePath()));
    }
</code></pre>

<p>{% endcodeblock %}</p>

<ul>
<li>判断是否有网络，有的话进行图片下载，调用刚才介绍的<code>DownloadTask</code>类，然后调用<code>execute</code>的方法即可，这样后台就会异步帮你将图片下载下来，然后进行显示。</li>
</ul>


<p>{% codeblock MyAdapter.java lang:java %}</p>

<pre><code>private void downloadImage(String bookName, ImageView imageView) {
    if (networkOk()) {
        String url = format("%s%s/%s.png", STORAGE_BASE_URL, getScreenDensity(), bookName);
        Log.d(LogTag.BooksAdapter.name(), format("url: %s", url));
        new DownloadTask(getImageFile(bookName), imageView).execute(url);
    }
}

private boolean networkOk() {
    ConnectivityManager connMgr = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
    NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();
    return (networkInfo != null &amp;&amp; networkInfo.isConnected());
}
</code></pre>

<p>{% endcodeblock %}</p>

<h2>Picasso的图片下载功能</h2>

<p>看完Android的图片下载功能，发现我们写了不少代码，现在来看看Picasso是怎么实现的。</p>

<p>{% codeblock MyAdapter.java lang:java %}</p>

<pre><code>Picasso.with(getContext()).load(url).into((ImageView) viewImage);
</code></pre>

<p>{% endcodeblock %}</p>

<p>一句话就搞定了，就是这么简单，是不是觉得生活美好了很多。</p>

<p>Picasso会在应用的cache目录下新建一个<code>picasso-cache</code>文件夹，里面就是picasso的图片缓存文件。</p>

<p>{% img /images/post/2014-10/picasso-cache.png %}</p>

<h2>相关链接</h2>

<ul>
<li><a href="http://zhaozhiming.github.io/blog/2014/08/31/make-your-android-dev-life-easy-part-2/">让你的安卓开发更容易(二)——Genymotion</a></li>
<li><a href="http://zhaozhiming.github.io/blog/2014/08/31/make-your-android-dev-life-easy-part-1/">让你的安卓开发更容易(一)——Intellij IDEA</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让你的安卓开发更容易(二)——Genymotion]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/08/31/make-your-android-dev-life-easy-part-2/"/>
    <updated>2014-08-31T17:29:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/08/31/make-your-android-dev-life-easy-part-2</id>
    <content type="html"><![CDATA[<p>{% img /images/post/2014-8/genymotion-logo.jpg %}</p>

<p>以前听过一个笑话，说是一个App好不容易拿到100万的融资，但是没几天就花完了，问创始人这钱怎么花的？创始人说:没什么，就是每个型号的Android手机各买了一个来做测试，钱就花完了。</p>

<p>Android开发需要有强大的模拟器来避免这种尴尬，<a href="http://www.genymotion.com/">Genymotion</a>是一个Android模拟器，比起Google官方的AVD(Android Virtual Devices)，它有着启动快速，安装方便，简单上手的特点。</p>

<!--more-->


<h2>注册安装</h2>

<ul>
<li>进入官网首页，点击<code>GET GENYMOTION</code>按钮（官网需要翻墙访问，不过有genymotion的<a href="http://www.genymotion.cn/">中文网</a>也可以访问）;</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-install-2.png %}</p>

<ul>
<li>有3个套餐让你选择，我们当然选择免费的先试用一下，点击download按钮;</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-install-3.png %}</p>

<ul>
<li>下载要求你先注册一个账号，注册完成后需要到注册邮箱接收邮件，激活你的genymotion账号;</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-install-1.png %}</p>

<ul>
<li>激活账号后，可以看到网站提示你可以下载了;</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-install-4.png %}</p>

<ul>
<li>下载页面中，可以看到最上面的genymotion版本包含了Oracle VirtualBox4.2.12这个虚拟机工具，如果是选择下面的genymotion，则需要先下载<a href="https://www.virtualbox.org/">VirtualBox</a>并安装;</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-install-5.png %}</p>

<ul>
<li>下载页面的下方，还有流行的Java IDE——Intellij IDEA和Eclipse的插件，看你用的IDE是哪个就下载哪个插件，这个后面会用到;</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-install-6.png %}</p>

<ul>
<li>下载genymotion的安装文件后，安装安装提示进行安装即可。</li>
</ul>


<h2>使用说明</h2>

<ul>
<li>点击安装完成后的genymotion图标，下图的中间那个图标；</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-use-1.png %}</p>

<ul>
<li>启动后是genymotion客户端的主界面；</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-use-2.jpg %}</p>

<ul>
<li>初次启动会提示你没有虚拟设备，是否添加一个？选择yes；</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-use-3.jpg %}</p>

<ul>
<li>这时会弹出一个登陆框，输入注册的用户名（或邮箱）和密码，点击Connect按钮（这一步需要用VPN翻墙）；</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-use-4.jpg %}</p>

<ul>
<li>验证通过后就可以添加虚拟设备了，下图是虚拟设备列表，可以选择Android版本和设备型号进行过滤查询（有些比较老的手机型号会查不到），选择你需要的虚拟设备，点击Next；</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-use-6.png 150 250 %}<br/>
{% img /images/post/2014-9/genymotion-use-7.png 150 250 %}
{% img /images/post/2014-9/genymotion-use-5.png %}</p>

<ul>
<li>genymotion会显示虚拟设备的详细信息，你确定无误后点击Next就会进行下载；</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-use-8.png %}</p>

<ul>
<li>虚拟机下载中；</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-use-9.png %}</p>

<ul>
<li>下载完成后回到主窗口，选择下载后的虚拟设备，点击Play按钮；</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-use-10.png %}</p>

<ul>
<li>你马上就可以看到你的虚拟设备已经启动，速度很快。</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-use-11.png 300 500 %}</p>

<h2>与Intellij IDEA集成</h2>

<p>现在我们来看看如何在IDE里面启动虚拟设备，这里以Intellij IDEA为例。</p>

<ul>
<li>刚才我们下载了genymotion的IDE插件，在IDEA中打开插件管理设置界面，选择<code>install plugin from disk...</code>进行安装，安装完后重启IDEA；</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-idea-1.png %}</p>

<ul>
<li>重启IDEA后看到工具栏里面多了一个红色手机状的图标，图中工具栏的最后面一个图标；</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-idea-2.png %}</p>

<ul>
<li>点击图标出现genymotion设备列表窗口，可以看到现在设备的状态都是关机的(off)；</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-idea-3.png %}</p>

<ul>
<li>选择一个设备点击Start按钮，设备和在genymotion客户端一样启动了；</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-idea-4.png %}</p>

<ul>
<li>关掉IDEA中的设备列表窗口，运行你的App，会提示你是否需要在刚才启动的设备里面运行，选择OK；</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-idea-5.png %}</p>

<ul>
<li>可以看到你的App已经在genymotion的虚拟设备中运行了；</li>
</ul>


<p>{% img /images/post/2014-9/genymotion-idea-6.png 300 500 %}</p>

<h2>相关链接</h2>

<ul>
<li><a href="http://zhaozhiming.github.io/blog/2014/08/31/make-your-android-dev-life-easy-part-1/">让你的安卓开发更容易(一)——Intellij IDEA</a></li>
<li><a href="http://zhaozhiming.github.io/blog/2014/10/07/make-your-android-dev-life-easy-part-3/">让你的安卓开发更容易(三)——Picasso</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让你的安卓开发更容易(一)——Intellij IDEA]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/08/31/make-your-android-dev-life-easy-part-1/"/>
    <updated>2014-08-31T10:59:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/08/31/make-your-android-dev-life-easy-part-1</id>
    <content type="html"><![CDATA[<p>{% img /images/post/2014-8/intellijidea_android.gif %}</p>

<p>{% blockquote 孔子 ——《春秋》 %}
工欲善其事，必先利其器
{% endblockquote %}</p>

<p>介绍一下安卓开发的一些好用工具，可以让你的开发事半功倍。如果你是一个安卓新手，那么准备一套高效率的开发工具，会让你从一开始就养成使用好工具的习惯，从开始就比别人更快；如果你是一名安卓开发高手，也可以看看这些工具，说不定你已经在使用其中的一些工具了。</p>

<!--more-->


<h2>Intellij IDEA</h2>

<p>虽然IntelliJ IDEA是一款收费的软件，但收费有它收费的道理，跟eclipse相比，它多了更多重构，代码错误提示，与更多工具集成的功能。IntelliJ IDEA被认为是当前Java开发效率最快的IDE工具，它集成了开发过程中实用的众多功能，几乎可以不用鼠标可以方便的完成你要做的任何事情，最大程度的加快开发的速度。简单而又功能强大。</p>

<p>从版本10开始，IntelliJ IDEA就集成了Android的开发功能，发展到现在版本13，不仅具备了流畅开发Android项目的能力，而且还集成了最新的构建工具Gradle，Android lint等工具。</p>

<h3>Android Hello World</h3>

<p>现在我们使用IntelliJ IDEA来创建一个使用Gradle构建的Android项目。</p>

<ul>
<li>首先点击创建新工程，在左边的项目类型栏中选择<code>Android</code>，可以看到右边有4个选项可以选，我们选择<code>Gradle: Android Mondule</code>，然后点击下面的Next;</li>
</ul>


<p>{% img /images/post/2014-8/idea-android-project-1.png %}</p>

<ul>
<li>进入项目信息配置页面，可以看到有如下的选项，填写后点击Next；

<ul>
<li>Application name: 应用名</li>
<li>Module name: 模块名</li>
<li>Package name: 包名</li>
<li>Minimum required SDK: 可支持的最小Android SDK版本</li>
<li>Target SDK: 可支持的最大Android SDK版本</li>
<li>Compile with: 用哪个Android SDK版本编译</li>
<li>Theme: app主题，全黑，全白，半黑半百，是否要GridLayou，是否要action bar等</li>
</ul>
</li>
</ul>


<p>{% img /images/post/2014-8/idea-android-project-2.png %}</p>

<ul>
<li>选择main_activity的样式，有9种可以选择，样式的效果在右边可以预览，我们可以选择最简单的<code>Blank Activity</code>，选择好了Next；</li>
</ul>


<p>{% img /images/post/2014-8/idea-android-project-3.png %}</p>

<ul>
<li>填写Activity名字和对应的展示层layout名字，填完Next；</li>
</ul>


<p>{% img /images/post/2014-8/idea-android-project-4.png %}</p>

<ul>
<li>填写工程名和选择工程文件路径，注意最下面的<code>Project format</code>，有2种格式，一种是<code>.idea</code>文件夹，一个是ipr文件，选择ipr文件的方式可以减少很多文件的生成，最后Finish；</li>
</ul>


<p>{% img /images/post/2014-8/idea-android-project-5.png %}</p>

<p>生成的代码如下:</p>

<p>{% codeblock MainActivity.java lang:java %}
public class MainActivity extends ActionBarActivity {</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
}


@Override
public boolean onCreateOptionsMenu(Menu menu) {
    // Inflate the menu; this adds items to the action bar if it is present.
    getMenuInflater().inflate(R.menu.main, menu);
    return true;
}

@Override
public boolean onOptionsItemSelected(MenuItem item) {
    // Handle action bar item clicks here. The action bar will
    // automatically handle clicks on the Home/Up button, so long
    // as you specify a parent activity in AndroidManifest.xml.
    int id = item.getItemId();
    if (id == R.id.action_settings) {
        return true;
    }
    return super.onOptionsItemSelected(item);
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>{% codeblock activity_main.xml lang:xml %}
&lt;RelativeLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:paddingLeft="@dimen/activity_horizontal_margin"
android:paddingRight="@dimen/activity_horizontal_margin"
android:paddingTop="@dimen/activity_vertical_margin"
android:paddingBottom="@dimen/activity_vertical_margin"
tools:context="com.github.zzm.myapplication1.app.MainActivity"&gt;

&lt;TextView
    android:text="@string/hello_world"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content" /&gt;
</code></pre>

<p></RelativeLayout>
{% endcodeblock %}</p>

<p>运行的效果如下:</p>

<p>{% img /images/post/2014-8/idea-android-project-6.png 250 350%}</p>

<h3>Gradle脚本</h3>

<p>可以看到工程目录下有2个build.gradle脚本，一个是根目录的构建文件(如下)，如果想提高构建速度，可以将脚本中的mavenCentral()改为<code>maven {url "http://maven.oschina.net/content/groups/public/"}</code>，就是将maven的国外镜像库改成国内的库。</p>

<p>{% codeblock root/build.gradle lang:groovy %}
// Top-level build file where you can add configuration options common to all sub-projects/modules.</p>

<p>buildscript {</p>

<pre><code>repositories {
    mavenCentral()
}
dependencies {
    classpath 'com.android.tools.build:gradle:0.9.+'
}
</code></pre>

<p>}</p>

<p>allprojects {</p>

<pre><code>repositories {
    mavenCentral()
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>另外一个是app目录下的构建文件，可以看到指定了sdk的最小最大版本，需要的依赖包等。<br/>
{% codeblock app/build.gradle lang:groovy %}
buildscript {</p>

<pre><code>repositories {
    mavenCentral()
}
dependencies {
    classpath 'com.android.tools.build:gradle:0.9.+'
}
</code></pre>

<p>}
apply plugin: &lsquo;android&rsquo;</p>

<p>repositories {</p>

<pre><code>mavenCentral()
</code></pre>

<p>}</p>

<p>android {</p>

<pre><code>compileSdkVersion 20
buildToolsVersion "20.0.0"

defaultConfig {
    minSdkVersion 8
    targetSdkVersion 20
    versionCode 1
    versionName "1.0"
}
buildTypes {
    release {
        runProguard false
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
    }
}
</code></pre>

<p>}</p>

<p>dependencies {</p>

<pre><code>compile fileTree(dir: 'libs', include: ['*.jar'])
compile 'com.android.support:appcompat-v7:20.0.0'
</code></pre>

<p>}</p>

<p>{% endcodeblock %}</p>

<h2>相关链接</h2>

<ul>
<li><a href="http://zhaozhiming.github.io/blog/2014/08/31/make-your-android-dev-life-easy-part-2/">让你的安卓开发更容易(二)——Genymotion</a></li>
<li><a href="http://zhaozhiming.github.io/blog/2014/10/07/make-your-android-dev-life-easy-part-3/">让你的安卓开发更容易(三)——Picasso</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
