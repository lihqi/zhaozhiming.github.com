<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: osgi | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/tags/osgi/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2016-05-31T21:00:13+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OSGi的简单代码示例]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/01/25/hello-osgi/"/>
    <updated>2015-01-25T20:35:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/01/25/hello-osgi</id>
    <content type="html"><![CDATA[<p>{% img /images/post/2015-1/osgi.gif %}</p>

<p>OSGi(Open Service Gateway Initiative)是面向Java的动态模型系统，使用OSGi可以进行模块的动态加载，无需停止重启服务器，而模块就是我们下面要开发的Bundle。OSGi在电信或其他大型企业里面用的比较多，Eclipse现在也是用osgi的方式来添加插件。</p>

<!--more-->


<p></p>

<h2>IntelliJ IDEA的OSGi环境搭建</h2>

<ul>
<li>我们使用<a href="http://felix.apache.org/">Felix</a>这个OSGi框架来进行OSGi代码的开发，首先我们下载最新版本的Felix包并解压</li>
</ul>


<p>{% img /images/post/2015-1/felix_download.png %}</p>

<ul>
<li>在IDEA进行OSGi的设置，选择刚才解压好的felix目录</li>
</ul>


<p>{% img /images/post/2015-1/felix_idea_setting_1.png %}</p>

<p>{% img /images/post/2015-1/felix_idea_setting_2.png %}</p>

<ul>
<li>写一个简单的Activator，下面要用到</li>
</ul>


<p>{% codeblock HelloActivator.java lang:java %}
package com.zzm.osgi;</p>

<p>import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;</p>

<p>public class HelloActivator implements BundleActivator {</p>

<pre><code>public void start(BundleContext bundleContext) throws Exception {
    System.out.println("Hello World Bundle started!");
}

public void stop(BundleContext bundleContext) throws Exception {
    System.out.println("Hello World Bundle stop!");
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<ul>
<li>在工程设置页面进行设置，写上bundle对应的Activator</li>
</ul>


<p>{% img /images/post/2015-1/idea_project_setting_1.png %}</p>

<p>{% img /images/post/2015-1/idea_project_setting_2.png %}</p>

<p>{% img /images/post/2015-1/idea_project_setting_3.png %}</p>

<ul>
<li>在Run菜单中添加osgi的运行配置，Run->Edit Configurations&hellip;</li>
</ul>


<p>{% img /images/post/2015-1/felix_idea_run_setting_1.png %}</p>

<p>{% img /images/post/2015-1/felix_idea_run_setting_2.png %}</p>

<p>{% img /images/post/2015-1/felix_idea_run_setting_3.png %}</p>

<p>{% img /images/post/2015-1/felix_idea_run_setting_4.png %}</p>

<p>{% img /images/post/2015-1/felix_idea_run_setting_5.png %}</p>

<ul>
<li>运行felix</li>
</ul>


<p>{% img /images/post/2015-1/felix_idea_running_1.png %}</p>

<p>可以看到IDEA已经帮我们自动启动了我们的Activator，打印了<code>Hello World Start</code>的语句。</p>

<p>{% img /images/post/2015-1/felix_idea_running_2.png %}</p>

<p>输入<code>lb</code>查看所有bundle的信息，可以看到最下面是我们的bundle，已经激活。</p>

<p>{% img /images/post/2015-1/felix_idea_running_3.png %}</p>

<p>我们停掉bundle，再显示所有bundle状态，可以看到我们的bundle的状态已经是<code>Resolved</code>了。</p>

<p>{% img /images/post/2015-1/felix_idea_running_4.png %}</p>

<h2>使用felix的Maven Bundle插件来创建bundle</h2>

<p>上面是通过IDE来启动和创建bundle，我们再来看下使用felix maven插件的方式创建bundle，这里是官网地址说明: <a href="http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html">http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html</a>。</p>

<ul>
<li>首先新建Maven的pom.xml文件

<ul>
<li>在dependencies加入felix的jar包，最新的版本是1.4.0</li>
<li>在plugin中定义我们的bundle，包括我们的Activator等信息。</li>
<li>packaging需要修改为<code>bundle</code></li>
</ul>
</li>
</ul>


<p>{% codeblock pom.xml lang:xml %}
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;project xmlns=&ldquo;<a href="http://maven.apache.org/POM/4.0.0">http://maven.apache.org/POM/4.0.0</a>&rdquo;</p>

<pre><code>     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

&lt;groupId&gt;com.zzm&lt;/groupId&gt;
&lt;artifactId&gt;osgi&lt;/artifactId&gt;
&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
&lt;packaging&gt;bundle&lt;/packaging&gt;

&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.felix&lt;/groupId&gt;
            &lt;artifactId&gt;maven-bundle-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.4.0&lt;/version&gt;
            &lt;extensions&gt;true&lt;/extensions&gt;

            &lt;configuration&gt;
                &lt;instructions&gt;
                    &lt;Bundle-SymbolicName&gt;${pom.groupId}.${pom.artifactId}&lt;/Bundle-SymbolicName&gt;
                    &lt;Bundle-Vendor&gt;Apache Felix&lt;/Bundle-Vendor&gt;
                    &lt;Bundle-Activator&gt;com.zzm.osgi.HelloActivator&lt;/Bundle-Activator&gt;
                    &lt;Private-Package&gt;com.zzm.osgi&lt;/Private-Package&gt;
                &lt;/instructions&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;

    &lt;/plugins&gt;
&lt;/build&gt;

&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.felix&lt;/groupId&gt;
        &lt;artifactId&gt;org.osgi.core&lt;/artifactId&gt;
        &lt;version&gt;1.4.0&lt;/version&gt;
        &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>

<p></project>
{% endcodeblock %}</p>

<ul>
<li>还是使用我们之前的Activator，在工程根目录下使用maven进行打包，打包完后可以在target目录下面看到打好的bundle包。</li>
</ul>


<p>{% codeblock lang:sh %}
$ mvn clean install
&hellip;balabala</p>

<p>[INFO]
[INFO] &mdash;&ndash; maven-bundle-plugin:2.4.0:bundle (default-bundle) @ osgi &mdash;&ndash;
[INFO]
[INFO] &mdash;&ndash; maven-install-plugin:2.5.2:install (default-install) @ osgi &mdash;&ndash;
[INFO] Installing /Users/zhaozhiming/projects/hello_osgi/bundles/osgi-1.0-SNAPSHOT.jar to /Users/zhaozhiming/.m2/repository/com/zzm/osgi/1.0-SNAPSHOT/osgi-1.0-SNAPSHOT.jar
[INFO] Installing /Users/zhaozhiming/projects/hello_osgi/pom.xml to /Users/zhaozhiming/.m2/repository/com/zzm/osgi/1.0-SNAPSHOT/osgi-1.0-SNAPSHOT.pom
[INFO]
[INFO] &mdash;&ndash; maven-bundle-plugin:2.4.0:install (default-install) @ osgi &mdash;&ndash;
[INFO] Installing com/zzm/osgi/1.0-SNAPSHOT/osgi-1.0-SNAPSHOT.jar
[INFO] Writing OBR metadata
[INFO] &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
[INFO] BUILD SUCCESS
[INFO] &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
[INFO] Total time: 3.898s
[INFO] Finished at: Sat Jan 31 10:44:49 HKT 2015
[INFO] Final Memory: 18M/216M
[INFO] &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</p>

<p>$ cd target
$ ls -l
total 8
drwxr-xr-x  4 zhaozhiming  staff   136 Jan 31 10:57 classes
drwxr-xr-x  3 zhaozhiming  staff   102 Jan 31 10:57 maven-status
-rw-r&mdash;r&mdash;  1 zhaozhiming  staff  2901 Jan 31 10:57 osgi-1.0-SNAPSHOT.jar
drwxr-xr-x  4 zhaozhiming  staff   136 Jan 31 10:57 surefire-reports
drwxr-xr-x  3 zhaozhiming  staff   102 Jan 31 10:57 test-classes</p>

<p>{% endcodeblock %}</p>

<ul>
<li>打完包后，在target/classes/META-INF目录下，可以看到maven会产生一个MANIFEST.MF文件，显示了bundle的具体信息。</li>
</ul>


<p>{% codeblock MANIFEST.MF lang:sh %}
Manifest-Version: 1.0
Bnd-LastModified: 1422673028905
Build-Jdk: 1.8.0_25
Built-By: zhaozhiming
Bundle-Activator: com.zzm.osgi.HelloActivator
Bundle-ManifestVersion: 2
Bundle-Name: osgi
Bundle-SymbolicName: com.zzm.osgi
Bundle-Vendor: Apache Felix
Bundle-Version: 1.0.0.SNAPSHOT
Created-By: Apache Maven Bundle Plugin
Export-Package: com.zzm.osgi;uses:=&ldquo;org.osgi.framework&rdquo;;version=&ldquo;1.0.0.S
 NAPSHOT&rdquo;
Import-Package: org.osgi.framework;version=&ldquo;[1.5,2)&rdquo;
Tool: Bnd-2.1.0.20130426-122213
{% endcodeblock %}</p>

<ul>
<li>在felix中运行bundle</li>
</ul>


<p>{% codeblock lang:sh %}</p>

<h1>拷贝bundle包</h1>

<p>$ cp osgi-1.0-SNAPSHOT.jar /your/felix/parent/folder
$ cd /your/felix/parent/folder
$ ls
drwxr-xr-x@ 12 zhaozhiming  staff   408 Jan 30 13:39 felix
-rw-r&mdash;r&mdash;   1 zhaozhiming  staff  2901 Jan 31 11:18 osgi-1.0-SNAPSHOT.jar</p>

<h1>启动felix</h1>

<p>$ cd felix
$ java -jar bin/felix.jar</p>

<hr />

<p>Welcome to Apache Felix Gogo</p>

<p>g!</p>

<h1>查看所有bundle</h1>

<p>g! lb
START LEVEL 1
   ID|State      |Level|Name</p>

<pre><code>0|Active     |    0|System Bundle (4.6.0)
1|Active     |    1|Apache Felix Bundle Repository (2.0.2)
2|Active     |    1|Apache Felix Gogo Command (0.14.0)
3|Active     |    1|Apache Felix Gogo Runtime (0.12.1)
4|Active     |    1|Apache Felix Gogo Shell (0.10.0)
5|Active     |    1|Sample01 (1.0.0.SNAPSHOT)
</code></pre>

<h1>安装我们的bundle</h1>

<p>g! install file:../osgi-1.0-SNAPSHOT.jar
Bundle ID: 253</p>

<h1>查看bundle信息</h1>

<p>g! lb
START LEVEL 1
   ID|State      |Level|Name
   &hellip;
  253|Installed  |    1|osgi (1.0.0.SNAPSHOT)</p>

<h1>启动我们的bundle</h1>

<p>g! start 253
Hello World Bundle start!
g! lb<br/>
START LEVEL 1
   ID|State      |Level|Name</p>

<pre><code>...
</code></pre>

<p>  253|Active     |    1|osgi (1.0.0.SNAPSHOT)</p>

<h1>停掉我们的bundle</h1>

<p>g! stop 253
Hello World Bundle stop!
g! lb
START LEVEL 1
   ID|State      |Level|Name
   &hellip;
  253|Resolved   |    1|osgi (1.0.0.SNAPSHOT)</p>

<h1>卸载我们的bundle，可以看到已经没有出现在所有bundle信息中了</h1>

<p>g! uninstall 253
g! lb
START LEVEL 1
   ID|State      |Level|Name</p>

<pre><code>0|Active     |    0|System Bundle (4.6.0)
1|Active     |    1|Apache Felix Bundle Repository (2.0.2)
2|Active     |    1|Apache Felix Gogo Command (0.14.0)
3|Active     |    1|Apache Felix Gogo Runtime (0.12.1)
4|Active     |    1|Apache Felix Gogo Shell (0.10.0)
5|Active     |    1|Sample01 (1.0.0.SNAPSHOT)
</code></pre>

<h1>最后<code>ctl+c</code>退出felix</h1>

<p>{% endcodeblock %}</p>

<h2>在bundle中添加第三方包</h2>

<p>在bundle中使用第三方包比较麻烦，查看了各方资料，只找到了把第三方jar包一起打进bundle的方法，我们以引入<a href="https://code.google.com/p/guava-libraries/"><code>guava</code></a>包为例，下面代码加注释的就是修改的地方。</p>

<p>{% codeblock pom.xml lang:xml %}
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;project xmlns=&ldquo;<a href="http://maven.apache.org/POM/4.0.0">http://maven.apache.org/POM/4.0.0</a>&rdquo;</p>

<pre><code>     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

&lt;groupId&gt;com.zzm&lt;/groupId&gt;
&lt;artifactId&gt;osgi&lt;/artifactId&gt;
&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
&lt;packaging&gt;bundle&lt;/packaging&gt;

&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.felix&lt;/groupId&gt;
            &lt;artifactId&gt;maven-bundle-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.4.0&lt;/version&gt;
            &lt;extensions&gt;true&lt;/extensions&gt;

            &lt;configuration&gt;
            &lt;!--修改bundle配置  --&gt;
                &lt;instructions&gt;
                    &lt;Bundle-SymbolicName&gt;${pom.groupId}.${pom.artifactId}&lt;/Bundle-SymbolicName&gt;
                    &lt;Bundle-Vendor&gt;Apache Felix&lt;/Bundle-Vendor&gt;
                    &lt;Bundle-Activator&gt;com.zzm.osgi.HelloActivator&lt;/Bundle-Activator&gt;
                    &lt;Private-Package&gt;com.zzm.osgi&lt;/Private-Package&gt;

                    &lt;Embed-Dependency&gt;
                        *;scope=compile|runtime;inline=false
                    &lt;/Embed-Dependency&gt;
                    &lt;_exportcontents&gt;*&lt;/_exportcontents&gt;
                    &lt;Bundle-ClassPath&gt;.,{maven-dependencies}&lt;/Bundle-ClassPath&gt;
                    &lt;Embed-Transitive&gt;true&lt;/Embed-Transitive&gt;
                    &lt;Embed-Directory&gt;jars&lt;/Embed-Directory&gt;
                    &lt;Embed-StripGroup&gt;true&lt;/Embed-StripGroup&gt;
                    &lt;_failok&gt;true&lt;/_failok&gt;
                    &lt;_nouses&gt;true&lt;/_nouses&gt;
                &lt;/instructions&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;

        &lt;!-- 添加依赖包copy插件 --&gt;
        &lt;plugin&gt;
            &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;copy-dependencies&lt;/id&gt;
                    &lt;phase&gt;package&lt;/phase&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;copy-dependencies&lt;/goal&gt;
                    &lt;/goals&gt;
                    &lt;configuration&gt;
                        &lt;outputDirectory&gt;jars&lt;/outputDirectory&gt;
                    &lt;/configuration&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;

&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.felix&lt;/groupId&gt;
        &lt;artifactId&gt;org.osgi.core&lt;/artifactId&gt;
        &lt;version&gt;1.4.0&lt;/version&gt;
        &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;!-- 在pom中添加guava依赖 --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.google.guava&lt;/groupId&gt;
        &lt;artifactId&gt;guava&lt;/artifactId&gt;
        &lt;version&gt;18.0&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>

<p></project>
{% endcodeblock %}</p>

<ul>
<li>在Activator中添加guava的代码</li>
</ul>


<p>{% codeblock HelloActivator.java lang:java %}
public class HelloActivator implements BundleActivator {</p>

<pre><code>public void start(BundleContext bundleContext) throws Exception {
    System.out.println("Hello World Bundle start!");
    List&lt;String&gt; strings = Lists.newArrayList("I", "use", "guava", "here");
    System.out.println(strings);
}
...
</code></pre>

<p>}  <br/>
{% endcodeblock %}</p>

<ul>
<li>打包运行我们的bundle</li>
</ul>


<p>{% codeblock lang:sh %}
$ mvn clean install
$ cp osgi-1.0-SNAPSHOT.jar /your/felix/parent/folder
$ cd /your/felix/parent/folder
$ java -jar bin/felix.jar</p>

<hr />

<p>Welcome to Apache Felix Gogo</p>

<p>g! install file:../osgi-1.0-SNAPSHOT.jar
Bundle ID: 258
g! start 258
Hello World Bundle start!
[I, use, guava, here]
{% endcodeblock %}</p>

<ul>
<li>可以解压我们的bundle jar包看一下结构</li>
</ul>


<p>{% codeblock lang:sh %}
$ mkdir jar_tar
$ cp osgi-1.0-SNAPSHOT.jar jar_tar/
$ cd jar_tar/
$ tar -xvf osgi-1.0-SNAPSHOT.jar
$ ls -l # 可以看到有个jars的文件夹
drwxr-xr-x  4 zhaozhiming  staff      136 Jan 31 11:56 META-INF
drwxr-xr-x  3 zhaozhiming  staff      102 Jan 31 11:44 com
drwxr-xr-x  3 zhaozhiming  staff      102 Jan 31 11:44 jars
-rw-r&mdash;r&mdash;  1 zhaozhiming  staff  1998876 Jan 31 11:55 osgi-1.0-SNAPSHOT.jar
$ ls -l jars # jars里面是我们的第三方包
-rwxr-xr-x  1 zhaozhiming  staff  2256213 Jan 30 10:07 guava-18.0.jar
{% endcodeblock %}</p>

<ul>
<li>再看一下MANIFEST.MF文件，如下所示。</li>
</ul>


<p>{% codeblock lang:sh %}
Manifest-Version: 1.0
Bnd-LastModified: 1422675843327
Build-Jdk: 1.8.0_25
Built-By: zhaozhiming
Bundle-Activator: com.zzm.osgi.HelloActivator
Bundle-ClassPath: .,jars/guava-18.0.jar
Bundle-ManifestVersion: 2
Bundle-Name: osgi
Bundle-SymbolicName: com.zzm.osgi
Bundle-Vendor: Apache Felix
Bundle-Version: 1.0.0.SNAPSHOT
Created-By: Apache Maven Bundle Plugin
Embed-Dependency: *;scope=compile|runtime;inline=false
Embed-Directory: jars
Embed-StripGroup: true
Embed-Transitive: true
Embedded-Artifacts: jars/guava-18.0.jar;g=&ldquo;com.google.guava&rdquo;;a=&ldquo;guava&rdquo;;v
 =&ldquo;18.0&rdquo;
Export-Package: com.google.common.annotations;version=&ldquo;18.0.0&rdquo;,com.googl
 e.common.base;version=&ldquo;18.0.0&rdquo;,com.google.common.base.internal;version=
 &ldquo;1.0.0.SNAPSHOT&rdquo;,com.google.common.cache;version=&ldquo;18.0.0&rdquo;,com.google.co
 mmon.collect;version=&ldquo;18.0.0&rdquo;,com.google.common.escape;version=&ldquo;18.0.0&rdquo;
 ,com.google.common.eventbus;version=&ldquo;18.0.0&rdquo;,com.google.common.hash;ver
 sion=&ldquo;18.0.0&rdquo;,com.google.common.html;version=&ldquo;18.0.0&rdquo;,com.google.common
 .io;version=&ldquo;18.0.0&rdquo;,com.google.common.math;version=&ldquo;18.0.0&rdquo;,com.google
 .common.net;version=&ldquo;18.0.0&rdquo;,com.google.common.primitives;version=&ldquo;18.0
 .0&rdquo;,com.google.common.reflect;version=&ldquo;18.0.0&rdquo;,com.google.common.util.c
 oncurrent;version=&ldquo;18.0.0&rdquo;,com.google.common.xml;version=&ldquo;18.0.0&rdquo;,com.g
 oogle.thirdparty.publicsuffix;version=&ldquo;1.0.0.SNAPSHOT&rdquo;,com.zzm.osgi;ver
 sion=&ldquo;1.0.0.SNAPSHOT&rdquo;,jars;version=&ldquo;1.0.0.SNAPSHOT&rdquo;
Import-Package: javax.annotation,org.osgi.framework;version=&ldquo;[1.5,2)&rdquo;,su
 n.misc
Tool: Bnd-2.1.0.20130426-122213
{% endcodeblock %}</p>

<p><code>PS</code>:在Import-Package中有sun.misc的字样，表示bundle引入了jdk的一些包，有时候在运行bundle的时候会看到下面的错误:</p>

<p>{% codeblock lang:sh %}
org.osgi.framework.BundleException: Unresolved constraint in bundle [8]: Unable to resolve 8.0: missing requirement [8.0] osgi.wiring.package; (osgi.wiring.package=sun.misc)
{% endcodeblock %}</p>

<p>解决办法有2个，执行解决办法意味着你清楚并明确运行bundle时可以缺少这些包:</p>

<p>way1:是在pom文件中的&lt;Import-Package>中加入!sum.misc，这样打出来的MANIFEST.MF的Import-Package就不会有sun.misc字样了。</p>

<p>{% codeblock pom.xml lang:xml %}</p>

<pre><code>&lt;Bundle-SymbolicName&gt;${project.groupId}.${project.artifactId}&lt;/Bundle-SymbolicName&gt;
&lt;Bundle-Vendor&gt;joyotime&lt;/Bundle-Vendor&gt;
&lt;Bundle-Version&gt;${project.version}&lt;/Bundle-Version&gt;
&lt;Bundle-Activator&gt;com.morewifi.chinatelecom.MoreWifiActivator&lt;/Bundle-Activator&gt;
&lt;Private-Package&gt;com.morewifi.chinatelecom&lt;/Private-Package&gt;
...
&lt;Import-Package&gt;
    !sun.misc,*
&lt;/Import-Package&gt;
</code></pre>

<p>{% endcodeblock %}</p>

<p>way2:在felix解压包下有个conf/config.properties文件，在里面配置缺少的包。</p>

<p>{% codeblock felix/conf/config.properties lang:properties %}
org.osgi.framework.system.packages.extra=sun.misc
{% endcodeblock %}</p>

<h2>在bundle中保存文件</h2>

<p>有时候在bundle中需要写一些数据到文件保存起来，可以使用<code>bundleContext</code>的<code>getDataFile</code>方法来获取文件，下面代码使用了guava的io方法。</p>

<p>{% codeblock HelloActivator.java lang:java %}
public class HelloActivator implements BundleActivator {</p>

<pre><code>public void start(BundleContext bundleContext) throws Exception {
    System.out.println("Hello World Bundle start!");
    List&lt;String&gt; strings = Lists.newArrayList("I", "use", "guava", "here");
    System.out.println(strings);

    //保存文件
    File dataFile = bundleContext.getDataFile("save.txt");
    Files.append(strings.toString(), dataFile, Charsets.UTF_8);

    // 读取文件
    String fileContent = Files.readFirstLine(dataFile, Charsets.UTF_8);
    System.out.println(fileContent);
}
...
</code></pre>

<p>}  <br/>
{% endcodeblock %}</p>

<p>打印结果如下:</p>

<p>{% codeblock lang:sh %}
g! start 263
Hello World Bundle start!
[I, use, guava, here]
[I, use, guava, here]
{% endcodeblock %}</p>

<p>在felix的目录下，有个felix-cache目录，下面是各个bundle对应的文件夹，我们的save.txt就存放在bundle的data文件夹里面。</p>

<p>{% codeblock lang:sh %}
$ cd felix-cache/bundle263/
$ ls -l
-rw-r&mdash;r&mdash;  1 zhaozhiming  staff   54 Jan 31 13:51 bundle.info
drwxr-xr-x  3 zhaozhiming  staff  102 Jan 31 13:50 data
drwxr-xr-x  5 zhaozhiming  staff  170 Jan 31 13:50 version0.0
$ ls -l data
-rw-r&mdash;r&mdash;  1 zhaozhiming  staff  21 Jan 31 13:50 save.txt
$ cat data/save.txt
[I, use, guava, here]
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
