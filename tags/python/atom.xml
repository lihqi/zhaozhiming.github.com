<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: python | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/tags/python/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2016-07-20T19:25:53+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何学习Python]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/09/05/how-to-learn-python/"/>
    <updated>2015-09-05T15:01:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/09/05/how-to-learn-python</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2015-9/python.jpg" width="400" height="300"></p>

<p>Python语言相对Java来说，最大的特点就是易用易学，基本上每个linux系统都有安装python，不像Java一样还需要自己下JVM、安装、设置环境变量等。有了其他编程语言的基础再来学习Python其实是非常简单的，因为Python语言是基于<a href="https://en.wikipedia.org/wiki/ABC_(programming_language)">ABC</a>语言开发出来的，ABC语言是以教学为目的的语言，其宗旨是让编程变得容易阅读和理解，所以Python语言也很容易理解和学习。</p>

<!--more-->


<p></p>

<h2>Pyhotn学习介绍</h2>

<p>关于Python的学习网上有很多介绍，我在这里介绍一下我的学习过程，包括书籍，网站和一些工具等。</p>

<h4>书籍</h4>

<p>关于Python的书我推荐<a href="http://book.douban.com/subject/3112503/">《Python核心编程（第二版）》</a>，这本书看起来很厚其实读起来非常浅显易懂，重点可以看看下面这几章。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>第4章 Python对象
</span><span class='line'>6.8 Unicode
</span><span class='line'>8.11 迭代器和iter<span class="o">()</span>函数
</span><span class='line'>第9章 文件的输入和输出
</span><span class='line'>第10章 错误和异常
</span><span class='line'>第11章 函数和函数式编程
</span><span class='line'>第12章 模块
</span><span class='line'>第13章 面向对象编程
</span><span class='line'>第14章 执行环境
</span><span class='line'>第15章 正则表达式
</span><span class='line'>第18章 多线程编程
</span><span class='line'>20.2 使用Python进行Web应用：创建一个简单的Web客户端
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>如果不想看这种太多理论的书的话，可以看这本实战的书<a href="http://learnpythonthehardway.org/">《Learn Python The Hard Way》</a>，里面的例子从浅到深让你一步步的学习Python，比较适合没有编程经验的新手。里面的例子不要只是把它们打出来，最好自己可以举一反三做一些关于知识点的挑战和扩展。</p>

<h4>网站</h4>

<p>除了看书编码外，平时业余时间可以订阅一些Python的blog和网站，下面是我最近收集的一些Python博客，分享一下:</p>

<ul>
<li><a href="http://planetpython.org/">Planet Python</a>: 这是最出名的python博客其中之一，快去看看，我希望你能找到对你有用的东西。</li>
<li><a href="http://lucumr.pocoo.org/">lucumr</a>: 博主是flask（一个python web框架）的创始人</li>
<li><a href="https://doughellmann.com">Doug Hellmann</a>: 博主是PYMOTW(Python Module Of the Week)成员之一，博客里面包含了很多python library的知识。如果你是在寻找一些实用的python库的话，你可以在这里找找。</li>
<li><a href="http://www.blog.pythonlibrary.org/">Mouse Vs Python</a>: 这个博客更新也比较频繁。</li>
<li><a href="http://www.pydanny.com/">pydanny</a>: 这是一个主要关注Django的博客，但也有很多关于Python的东西。</li>
</ul>


<h4>工具 &amp; 技巧</h4>

<p>pip和setuptools就不说了，Python开发必备，下载管理依赖包就靠他们了，其他最有用的Python工具要数<a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/">virtualenv</a>了，它可以创建一个虚拟的Python执行环境，因为Python的虚拟机不像JVM那么大，创建出来之后的文件夹非常小（大概只有10M），在这个虚拟环境里面安装执行Python程序不会污染你操作系统的主Python环境。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;安装virtualenv&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;pip install virtualenv&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;创建Python虚拟环境&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;virtualenv venv&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;让虚拟环境生效&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;source venv/bin/activate&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;取消虚拟环境&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;deactivate
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>另外Pyhton的调试也非常方便，只要在需要设置断点的地方添加代码<code>import pdb;pdb.set_trace()</code>即可，然后执行程序就会在断点出停止，你可以通过打印下面命令进行调试:</p>

<ul>
<li><code>c</code>: 让程序继续往下走，continue的意思</li>
<li><code>s</code>: 进入子方法内部，相当于step into</li>
<li><code>n</code>: 跳到下一句
这里介绍的只是一些基本的命令，更多的命令可以看<a href="https://docs.python.org/2/library/pdb.html">这里</a>，另外还可以打印断点处的各种变量和执行各种语句。</li>
</ul>


<h2>简洁的Python</h2>

<p>在Python中执行<code>import this</code>可以看到Python之禅。</p>

<p><blockquote><p>The Zen of Python, by Tim Peters</p></p><p><p>Beautiful is better than ugly.<br/>Explicit is better than implicit.<br/>Simple is better than complex.<br/>Complex is better than complicated.<br/>Flat is better than nested.<br/>Sparse is better than dense.<br/>Readability counts.<br/>Special cases aren&rsquo;t special enough to break the rules.<br/>Although practicality beats purity.<br/>Errors should never pass silently.<br/>Unless explicitly silenced.<br/>In the face of ambiguity, refuse the temptation to guess.<br/>There should be one&mdash; and preferably only one &mdash;obvious way to do it.<br/>Although that way may not be obvious at first unless you&rsquo;re Dutch.<br/>Now is better than never.<br/>Although never is often better than <em>right</em> now.<br/>If the implementation is hard to explain, it&rsquo;s a bad idea.<br/>If the implementation is easy to explain, it may be a good idea.<br/>Namespaces are one honking great idea &mdash; let&rsquo;s do more of those!</p></blockquote></p>

<p>从Python之禅中我们可以看到Python是一门追求简洁，追求优雅的语言，语言设计者对代码质量要求比较高，希望编写Python代码的开发人员也能写出高质量的代码。</p>

<p>由于Python简洁而强大的函数式编程，我们可以很方便的创建结构稍微复杂的对象，特别复杂的还是建议使用class来创建对象。</p>

<p>比如我们有这样的一个数据结构，一个字典里面包含多个集合，用Java来初始化大概是这个样子:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">list1</span><span class="o">.</span><span class="na">add</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">foo1</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'><span class="n">list1</span><span class="o">.</span><span class="na">add</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">bar1</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">list1</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="n">list1</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">list2</span><span class="o">.</span><span class="na">add</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">foo2</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'><span class="n">list2</span><span class="o">.</span><span class="na">add</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">bar2</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">list2</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="n">list2</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>而用Python一行代码就可以搞定:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">my_map</span> <span class="o">=</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">list1</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="p">[</span><span class="n">foo1</span><span class="p">,</span> <span class="n">bar1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">list2</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">foo2</span><span class="s">&#39;，&#39;</span><span class="n">bar2</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;]}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>所以说Java是一门很啰嗦的语言，虽然新版本的Java加了lambda，然而并不能减少多少Java语言本身的繁杂性。</p>

<h2>Djaogo学习介绍</h2>

<p>Python来实现一些小工具小应用是十分方便的，但Python也可以用来做Web开发，Python比较有名的Web框架有Django，Flask，Tormado等，其中Djaongo使用最为广泛，集成的东西也比较多，不管你是使用关系系数据库还是非关系数据库，是否使用缓存等都可以使用Django，其最好的一个特点是集成了管理员功能，可以省却开发者很大的一部分开发量。</p>

<p>有人可能会说Django比较重，对于新手来说学习成本比较高，对于这个我没有什么意见，因为工作需要使用Django，对于其他的框架还没有接触过，但我使用后的体验是Django虽然要配置的东西比较多，但只要配置好了，开发效率还是挺快的，也可能是我以前大部分时间使用Spring来开发，相对Spring来说Django的配置还算比较轻的，所以对我来说没有什么感觉:)</p>

<p>学习Django可以上Django的<a href="http//www.djangoproject.com">官网</a>，上面有startup的向导，通过向导一步步的操作可以让你快速了解一个web项目的开发，另外上面还有很多文档，可以知道Django的所有内容。</p>

<p>另外一个学习Django比较好的是《Django Book》这本书，这里有它的<a href="http://www.djangobook.com/en/2.0/index.html">网站</a>，书很浅显易读，详细讲解了Django各个部分的内容，有时候是先通过一个比较简单的实现方案实现需求，然后利用Django的特性让代码得到优化，更少的代码来实现更多的内容，这也体现了Django的思想，简洁优雅，复用性高。</p>

<p>理论知识学习的差不多了，最后当然是做项目练手了，可以自己动手做一个web项目来熟悉Python和Django，在实际操作的过程中遇到不懂的问题就google一下，然后记录下来，做过一两个项目之后你应该对Python和Django比较了解了:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终于等到你]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/08/02/new-company-where-i-actually-like-to/"/>
    <updated>2015-08-02T07:37:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/08/02/new-company-where-i-actually-like-to</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2015-8/company.jpg"></p>

<p>其实来到新环境已经有一个多月了，但为了尽快熟悉工作上的事情在学习其他东西而忽略了博客的更新，希望以后工作再忙也要保持写博客的习惯。</p>

<!--more-->


<p></p>

<h2>为什么要跳槽</h2>

<p>有人问过<a href="http://baike.baidu.com/link?url=lIGQtDsy-iWUmNrbzgvAWGe8jGGVoeyHtRJ5GR-xlgSciI5Z1U_rXO2NOGV6UVnyn-NMK_o0ykghus7Y4GY-gK">蔡学镛</a>为什么要离开上一家公司加入平安科技，是不是因为跟前公司有什么过节而离开，他反问道，如果你离开父母去到其他城市发展，你是因为不喜欢父母吗？当然不是，是因为要增长自己的见识，开阔自己的视野而选择离开。</p>

<p>其实在上一家公司呆的时间也比较长了，工作需掌握的技术早在开始的一两年就已经学会了，但因为同事和领导都比较nice所以迟迟没有选择离开。但是人总是需要成长，特别是在这种全民创业的互联网时代，不出来历练一下自己，见识一下外面的世界，以后老了肯定会后悔的。</p>

<h2>从传统到创新</h2>

<p>互联网浪潮现在达到了一个前所未有的高度，特别是在新的国家领导人上台之后对互联网持有的开放、鼓励和支持的态度，让我们对互联网行业的未来有了更大的期望。</p>

<p>从一个传统的金融行业进入到互联网安全行业，感觉就像从Windows切换到Linux，从以前的处处封闭到现在的开放自由，感觉非常棒。</p>

<p>对于程序员来说，多多少少都会有一种黑客情节，希望自己可以像《黑客帝国》里面的男猪脚一样在网络世界里叱诧风云，所向无敌，但殊不知获取这种能力的背后是要付出比别人多许多倍的艰苦。</p>

<p>随着互联网的发展，越来越多的互联网公司会被创立，而网络安全不是每家互联网公司，特别是创业公司可以做好的。在新的网络安全法律法规中，规定了以后企业要承担因网络安全原因导致的用户信息泄露的责任，而不是像现在一样，企业可以简单地道个歉了事，因此互联网安全在未来的互联网发展中将会扮演越来越重要的角色。</p>

<h2>从Java到Python</h2>

<p>其实不单只是编程语言的变化，包括语言涉及到的一些技术栈和工具也有很多变化。比如Java的web框架一般使用Spring，小部分使用Play Framework，而Python的web框架比较多，主流的有Django，Flask和Pyramid，现在我们主要使用Django开发。</p>

<p>用Java开发的时候，基本上都是使用IDE来进行编码，Java常用的IDE有IntelliJ IDEA或Eclipse，而在新的环境中需要掌握vi来进行编码，包括后端的python和前端的js和html。以前只是使用vi做过简单的liunx文件编辑，在使用的过程中总觉得没有IDE那么顺畅，从而崇拜那些能把vi用的很熟练的人，觉得他们都是高手。但自从真正接触vi后，觉得其实vi也没有想象中那么难，主要还是要多练习，后面会讲一篇关于vi的博文，讲下我的vi学习之路和环境配置，敬请期待。</p>

<p>其他方面比如DB、缓存等Java和Python都可以选择一样的东西，比如都可以选择Mysql、MongoDB、Redis等，只是对应的驱动、客户端和API不一样。</p>

<p>有的人会觉得现在招Java的互联网公司比较多，从Java转到Python是吃亏了，以后选择公司的范围变小了。在《程序员修炼之道：从小工到专家》中说道，好的程序员应该每年学习一门新的编程语言，如果你掌握的语言越多，其实可以选择的范围会越大，让自己更加有优势。</p>

<h2>人人都是高手</h2>

<p>在以前的工作环境，可能没有太多人关心代码的质量，实现方案是否优雅，代码的重构等，但在新的环境中，发现大家都很注重代码的质量，之前在学习Python的过程中就发现Python包括Django的设计很重视代码的复用，这个我们在<code>Python之禅</code>和Django的模块中就可以看出来，所以Python程序员对代码质量这一方面有更好的理解。</p>

<p>经常在代码review的时候看到其他人在讨论有没有更好的办法来优化这个方案，或者是如何更优雅的重构这段代码，没有人会觉得指出代码质量问题是吹毛求疵的行为。</p>

<p>除了开发人员，产品人员也很有互联网的思想，比如有次在讨论产品方案的时候，产品经理提的最多的是这次我们只上最少的功能，只开发最简单的版本，然后放到市场上看反馈再进行改进，这就是典型的精益创业思想。如果是以前的环境，一般都会把功能想的很齐全，很复杂，导致开发周期很长，从而错过产品上市的最佳时期。</p>

<p>在新的工作环境中，公司更看中人员的发展，而不是项目的成败，情愿项目做的慢一点，也要把项目人员的开发能力培养出来，这样以后可以做更多更好的项目，很符合互联网的思想：快速失败，快速迭代。</p>

<p>要做一个好的程序员，持续地学习是必不可少的，在新的工作环境里，大家都很喜欢学习，每次有部门分享时大家都很兴奋地讨论即将get的新技能，也经常看到有人分享一些新的学习网站，新的工具，因为大家对工作效率的提高也比较感兴趣。</p>

<p>最后，希望在新的环境中，学习到更多的东西，更多地提高自己的能力，创造更多的价值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在ubunut下使用pycharm和eclipse进行python远程调试]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/04/13/python-remote-debug-setting-by-pycharm-and-eclipse-in-ubuntu/"/>
    <updated>2014-04-13T15:54:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/04/13/python-remote-debug-setting-by-pycharm-and-eclipse-in-ubuntu</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2014-4/pycharm_and_eclipse.jpg"></p>

<p>我比较喜欢Pycharm，因为这个是JetBrains公司出的python IDE工具，该公司下的java IDE工具——IDEA，无论从界面还是操作上都甩eclipse几条街，但项目组里有些人使用eclipse比较久了，一时让他们转pycharm比较困难，所以还是两边的设置都介绍一下吧。</p>

<!--more-->


<p></p>

<h2>pycharm远程调试</h2>

<p>pycharmd的远程调试比eclipse的简单多了，而且调试程序也比较稳定，不像eclipse那样容易出一些莫名其妙的问题，步骤如下。</p>

<ol>
<li>将pycharm安装目录下的pycharm-debug.egg文件拷贝到远程机器上（如果是python3的话就拷贝pycharm-debug-py3k.egg文件）。</li>
<li>在远程机器上安装pycharm-debug.egg，安装命令： <code>easy_install pycharm-debug.egg</code>。</li>
<li><p>在pycharm中设置断点监听配置。<br/>
<img src="/images/post/2014-4/pycharm-debug/pycharm-1.png"><br/>
<img src="/images/post/2014-4/pycharm-debug/pycharm-2.png"><br/>
<img src="/images/post/2014-4/pycharm-debug/pycharm-3.png"></p></li>
<li><p>启动调试监听程序。<br/>
<img src="/images/post/2014-4/pycharm-debug/pycharm-4.png"><br/>
<img src="/images/post/2014-4/pycharm-debug/pycharm-5.png"></p></li>
<li><p>在远程机器上启动服务并发起http请求。<br/>
<img src="/images/post/2014-4/eclipse-debug/eclipse-10.png"></p></li>
<li><p>pycharm监听到请求会进入断点。
<img src="/images/post/2014-4/pycharm-debug/pycharm-6.png"></p></li>
</ol>


<p>更多关于pycharm远程调试的信息可以参阅<a href="http://www.jetbrains.com/pycharm/webhelp/remote-debugging.html">这里</a>。</p>

<h2>eclipse远程调试</h2>

<p>使用eclipse进行python远程调试，需要先在ubuntu下面安装eclipse和eclipse的python插件PyDev。</p>

<ul>
<li>Eclipse安装比较简单，直接解压下载后的eclipse包即可使用。</li>
<li><p>PyDev可以按照<a href="http://pydev.org/manual_101_install.html">官网的向导</a>进行安装。<br/>
安装完后按照下面的步骤进行远程调试。</p></li>
<li><p>在window->Preperences->PyDev->Debug中，设置debug端口，比如12306。<br/>
<img src="/images/post/2014-4/eclipse-debug/eclipse-1.png"></p></li>
<li><p>新增PyDev视图。<br/>
<img src="/images/post/2014-4/eclipse-debug/eclipse-2.png"><br/>
<img src="/images/post/2014-4/eclipse-debug/eclipse-3.png"></p></li>
<li><p>在Pydev试图中增加remote debug菜单。<br/>
<img src="/images/post/2014-4/eclipse-debug/eclipse-4.png"><br/>
<img src="/images/post/2014-4/eclipse-debug/eclipse-5.png"></p></li>
<li><p>在远程机器的源码里面添加调试代码和断点。<br/>
<img src="/images/post/2014-4/eclipse-debug/eclipse-6.png"></p></li>
<li><p>断点设置语句：<br/>
<code>pydevd.settrace('192.168.8.128', port=12306, stdoutToServer=True, stderrToServer=True)</code><br/>
注意：这里的ip是指设置了调试监听的机器ip。<br/>
<img src="/images/post/2014-4/eclipse-debug/eclipse-7.png"></p></li>
<li><p>通过Pydev菜单打开调试监听。<br/>
<img src="/images/post/2014-4/eclipse-debug/eclipse-8.png"><br/>
开始监听显示信息如下：<br/>
<img src="/images/post/2014-4/eclipse-debug/eclipse-9.png"></p></li>
<li><p>启动远程服务并发起http请求。
<img src="/images/post/2014-4/eclipse-debug/eclipse-10.png"></p></li>
<li><p>Pydev监听到请求后就会进入断点。
<img src="/images/post/2014-4/eclipse-debug/eclipse-11.png"></p></li>
</ul>


<p>更多远程调试的内容可以参照Pydev的<a href="http://pydev.org/manual_adv_remote_debugger.html">官网步骤</a>。</p>
]]></content>
  </entry>
  
</feed>
