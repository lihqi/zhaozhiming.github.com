<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: interview | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/tags/interview/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2018-04-23T11:29:01+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[研发面试官的面试指南（三）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part3/"/>
    <updated>2017-09-23T19:33:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part3</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2017/09/interview3.jpeg" width="400" height="300"></p>

<p>之前讲了面试流程和技术面试环节，最后讲一下技术面试中的注意事项，可以提高面试的效率和准确率。</p>

<!--more-->


<h2>注意事项</h2>

<h3>提前准备</h3>

<p>一般 HR 会在面试之前给你发送一份应聘者的简历，如果有笔试环节的话，会附带一份笔试题答题结果，这个时候需要提前对应聘者有所了解。</p>

<p>通过简历可以了解应聘者的技术背景，提前想好面试时要重点问哪一方面的问题。有笔试题的话可以通过笔试结果对应聘者掌握的知识点和代码规范有一定了解。</p>

<p>准备时间建议不超过 15 分钟，不要让应聘者等待太久。</p>

<h3>结对（组队）面试</h3>

<p>尽量避免一个人去面试，每个人的知识点都有盲区，一个人的主观因素会比较大，容易造成判断失误。</p>

<p>建议是两个人一起面试，面试完后沟通各自观点，如果面试官中有一个人觉得应聘者不合适，则不建议录用，要选择同时让两位面试官都满意的人。</p>

<p>如果对是否录用应聘者感到纠结的话，建议是按不录用来处理，宁可漏招一个牛人，也不错招一个不合适的人。</p>

<h3>提前结束</h3>

<p>如果在考察过程中发现应聘者不是合适的人，或者技能上有所欠缺，建议提前结束面试，以提高面试的效率，也为了节省双方的时间。</p>

<p>但不建议面试不到5分钟就停止面试，要站在应聘者的角度上考虑问题，可能应聘者费了很大的劲才过来面试，结果面试不到5分钟就结束了，这样对应聘者的体验是相当不好的。</p>

<p>建议多问几个不同方面的问题来考察应聘者，可能应聘者某个方面存在知识盲点，但其他方面却能力突出呢。</p>

<h3>控制时间</h3>

<p>有时候应聘者讲起话来会滔滔不绝，如果每问一个问题都要等10分钟的话，那整个面试过程要么很长，要么不能有效地从全方面了解应聘者。</p>

<p>这时候要注意控制时间，可以适当地打断应聘者，让其讲重点内容。</p>

<p>整个面试过程建议是不要超过 1 个小时。</p>

<h2>总结</h2>

<p>以上就是作为面试官的一些经验和总结，希望可以帮助到正在做面试官的同行，也希望大家可以招到自己满意和合适的人。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[研发面试官的面试指南（二）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part2/"/>
    <updated>2017-09-23T19:33:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part2</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2017/09/interview2.png" width="400" height="300"></p>

<p>除了面试流程，研发面试最关键的还是技术面试环节，这个环节要确认应聘者的技术基本功是否扎实，以及技术的深度和广度，与公司部门的技术栈是否匹配等等。</p>

<!--more-->


<p></p>

<h2>技能考察</h2>

<p>面试过程中除了通过项目了解应聘者外，还需要通过一些技术问题来了解应聘者的真实能力。</p>

<h3>技术基础</h3>

<p>这里以前端岗位为例，技术基础就是JS、CSS和HTML。这方面的问题网上都有很多人做过总结，所以尽量不要问一些烂大街的问题，可以结合平时工作遇到的问题来进行提问，或者内部团队专门设计一些巧妙的面试问题来考验应聘者。</p>

<p>技术问题可以结合公司的技术栈提问，比如公司用的<code>React</code>和<code>Nodejs</code>，就可以问一些这方面相关的问题。</p>

<h3>手写代码</h3>

<p>很多人讨厌 Google 公司的“白板面试”环节，我觉得讨厌的原因主要是要让应聘者手写二叉树查询算法这种太过困难的任务，在很多实际项目开发中很少涉及到复杂算法，更不要说手写了。<br/>
但是我觉得考察应聘者手写代码的能力还是有必要的，特别是没有笔试环节的情况下。可以出一道简单的编程题目，让应聘者通过编写实际代码或者伪代码来解答，主要考察的是编程思路，代码编写规范等。<br/>
有些应聘者在自己的项目上说的头头是道，但是一旦要实际写代码却困难重重，这个时候就要质疑应聘者的实际能力了，如果是天天和代码打交道的人是不会写不出代码的。</p>

<h3>项目管理（可选）</h3>

<p>如果面试的岗位需要带团队做项目，就可以提问一些项目管理相关的问题。可以从以下方面了解：</p>

<ul>
<li>如何把控项目进度</li>
<li>如何保证项目质量</li>
<li>如何汇报项目进展</li>
<li>如何让新人快速融入团队</li>
<li>等等</li>
</ul>


<h3>代码质量</h3>

<p>优秀的研发人员对代码是有要求甚至是有洁癖的，可以从以下方面了解：</p>

<ul>
<li>有没有做过code review？有的话是怎么做的？一般会对哪些代码提出建议？</li>
<li>最不能忍受的代码是什么样的？</li>
<li>项目中有没有做自动化代码检查？（比如前端的话是否有用Lint类的工具）</li>
<li>有没有写过单元测试？平时单元测试用的框架是什么？好的单元测试一般是什么样的？</li>
<li>等等</li>
</ul>


<h3>过程控制</h3>

<p>效率高的研发人员会对软件开发的流程有一定的了解和关注，并且有自己的一套方法方式，可以从以下方面了解：</p>

<ul>
<li>什么是持续集成和持续部署？持续集成用的哪些工具？</li>
<li>平时项目中的持续集成一般会做一些什么事情？</li>
<li>对敏捷开发是否了解？平时的开发流程是怎么样的？</li>
<li>拿到开发任务后有没有对任务进行拆解？有的话是如何拆分任务的？</li>
<li>等等</li>
</ul>


<h3>学习和分享</h3>

<p>爱分享的研发人员一般能力不会差，可以从以下方面了解：</p>

<ul>
<li>最近了解到的最新技术是哪些？</li>
<li>平时是通过什么渠道了解技术资讯的？</li>
<li>是否经常写博客？</li>
<li>是否参与开源项目？</li>
<li>等等</li>
</ul>


<h3>其他方面</h3>

<p>最后可以从其他方面了解应聘者的综合能力，可以从以下方面了解：</p>

<ul>
<li>感兴趣的技术方向（看是否与公司部门的技术方向匹配）</li>
<li>文档能力（具备良好的文档编写能力绝对是加分项）</li>
<li>沟通能力（是主动沟通还是被动沟通）</li>
<li>抗压能力（面对压力时如何应对）</li>
<li>等等</li>
</ul>


<h2>总结</h2>

<p>仅凭一次面试就想真正了解一个人是很难的，但通过以上方面可以把握一些正确的选人方向，后面再继续讨论面试过程应该注意的一些事项，以及如何提高面试的效率，敬请期待。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[研发面试官的面试指南（一）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part1/"/>
    <updated>2017-09-23T19:33:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part1</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2017/09/interview.jpg" width="400" height="300"></p>

<p>面试研发人员，如果面试过程处理地不好，不仅招不到合适的人，而且会给应聘者带来不好的体验，从而影响公司的整体形象。最近整理了一些面试官的经验，写出来和大家分享一下。</p>

<!--more-->


<h1>面试流程</h1>

<p>如果把面试比作软件开发，那面试流程就是系统架构，只有把架构设计好了，你才知道面试过程中的每一步要怎么走，才能更好地把握面试的节奏。</p>

<h2>自我介绍</h2>

<p>这里的自我介绍是指双方的自我介绍。</p>

<h3>面试官</h3>

<p>首先作为面试官，出于礼貌应该先介绍自己，可以介绍自己的<code>名字</code>和<code>职务</code>，并说明这次的面试是流程中的哪个环节（初试、复试或其他），这也是一个礼貌且友好的开场。</p>

<h3>简要问题</h3>

<p>介绍完自己后可以简单地问下应聘者的重要信息，这些信息可以帮助你快速判断这个人是否值得招聘，还可以了解到招募的可能性和招聘所需的代价等信息。</p>

<p>对于社招岗位，可以了解以下方面：</p>

<ul>
<li>是否在职？</li>
<li>在职的话要找工作的原因是什么？</li>
<li>离职的话离职原因是什么？</li>
</ul>


<p>对于实习岗位，可以了解以下方面：</p>

<ul>
<li>是大学 / 研究生几年级？</li>
<li>一周可以实习几天？</li>
<li>学习开发（前端）多长时间？</li>
</ul>


<h3>应聘者</h3>

<p>接着请应聘者开始做自我介绍，同时保持倾听。<br/>
注意这时候不要光顾看简历而不听应聘者讲话，提前了解简历内容是面试前就应该做的事情，而且一般应聘者讲的内容都会比简历上写的更详细。</p>

<h2>项目介绍</h2>

<p>应聘者在做完自我介绍后，如果对他的某个项目感兴趣，可以让他再详细讲下这个项目，比如：</p>

<ul>
<li>项目团队有多少人？</li>
<li>他在这个项目中主要负责什么工作？</li>
<li>在项目期间遇到过什么印象比较深刻的问题？</li>
<li>这些问题是如何解决的？</li>
<li>等等</li>
</ul>


<p>如果没有感兴趣的项目，也可以让应聘者挑一个他自己觉得印象深刻的项目来讲。</p>

<h2>让应聘者提问</h2>

<p>在流程的最后，在这个时候面试官已经问了一堆问题了，对应聘者也有一定了解，但应聘者对招聘方还不够了解，这时候需要给应聘者一个机会来进行了解，就是让应聘者提问问题，面试官进行解答。</p>

<p>如果是技术面试，而应聘者问道了薪酬或者福利相关的问题你又不方便回答，可以礼貌地回应说<code>这方面的信息后面 HR 会和你聊</code>。</p>

<p>这一环节结束后，就可以根据面试情况，看是安排应聘者进行复试呢，还是让应聘者先行回去。如果让应聘者先回去，需要告之多久时间（一般是一个星期）内会回复他。</p>

<p>最后把面试结果告诉 HR，整个面试过程结束。</p>

<p>上面介绍的是面试的一个通用流程，在下一篇文章会介绍面试的关键环节——技术考察，敬请期待。</p>
]]></content>
  </entry>
  
</feed>
