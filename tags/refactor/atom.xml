<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: refactor | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/tags/refactor/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2013-08-24T09:10:37+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[for循环重复代码的重构]]></title>
    <link href="http://zhaozhiming.github.io/blog/2012/06/16/refactor-code-in-loop-block/"/>
    <updated>2012-06-16T16:39:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2012/06/16/refactor-code-in-loop-block</id>
    <content type="html"><![CDATA[<p><strong>DRY（don&rsquo;t repeat yourself）</strong>，重复往往是代码腐烂的开始，我们一般的处理手法是将重复的代码提取成一个方法，然后用新方法替换掉原来的代码。</p>

<p>但是对于for循环里面的重复代码要如何处理呢？比如有下面2个方法：</p>

<p>{% codeblock A.class lang:java %}</p>

<pre><code>public boolean methodA(List&lt;String&gt; list) {
    for(String string : list) {
        if (string.startWith("A")) {
            return true;
        } 
    }
    return false;
}

public boolean methodB(List&lt;String&gt; list) {
    for(String string : list) {
        if (string.endWith("B")) {
            return true;
        } 
    }
    return false;
}
</code></pre>

<p>{% endcodeblock %}</p>

<p>2个方法极其相似，唯一不同的地方只有 if 里面的判断条件。要如何去除这里的重复呢？提取for里面的代码？虽然能去除一部分，但for这个循环体的代码不能一起去掉，而且要是for里面的代码复杂一点，这个方法就不适用了。我今天想介绍自己最近用的比较多的一种重构手法：<strong>用模板方法去除for循环的重复代码。</strong></p>

<p>模板方法大家都知道，我可以先建1个抽象类和2个子类要代替这2个方法，但在java1.5+以后，我们可以用enum（枚举）来轻易实现模板方法。重构后的代码如下：</p>

<p>{% codeblock For.class lang:java %}
enum For {</p>

<pre><code>    METHOD_A {
        @Override
        protected boolean match(String string) {
            return string.startsWith("A");
        }
    }, METHOD_B {
        @Override
        protected boolean match(String string) {
            return string.endsWith("B");
        }
    };

    public boolean method(List&lt;String&gt; list) {
        for(String string : list) {
            if(match(string)) {
                return true;
            }
        }
        return false;
    }

    protected abstract boolean match(String string);
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>这里将相同的代码写成一个公共方法，不同的代码提取成一个抽象方法，让子类去具体实现。这样就实现了相同代码和不同代码的分离了。由于使用了enum，使得我们的创建类的代价为最小，只需一个enum类就搞定整个模板方法。</p>

<p>这里只是抛砖引玉，我相信肯定其他人一定还有更好的方法，希望和大家一起共同探讨。</p>
]]></content>
  </entry>
  
</feed>
