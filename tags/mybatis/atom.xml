<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: mybatis | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/tags/mybatis/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2016-05-31T21:00:13+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何在Spring4中配置Mybatis]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/11/15/spring4-and-mybatis/"/>
    <updated>2014-11-15T21:09:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/11/15/spring4-and-mybatis</id>
    <content type="html"><![CDATA[<p>{% img /images/post/2014-11/mybatis-spring.png %}</p>

<p><a href="http://spring.io/">Spring4</a>已经不支持Ibatis了，但Ibatis的升级版<a href="http://mybatis.github.io/mybatis-3/zh/index.html">Mybatis</a>封装了支持Spring4的组件<a href="http://mybatis.github.io/spring/zh/">mybatis-spring</a>，通过使用它们可以让你在Spring4中轻松地使用Mybatis。</p>

<!--more-->


<h2>gradle 设置</h2>

<p>现在基本上新兴的java项目包括android都使用<a href="http://www.gradle.org/">gradle</a>来做构建工具，gradle相比<a href="http://ant.apache.org/">ant</a>来讲多了定义好的task，不需要每次都copy-paste相同的task到构建文件中，而相比<a href="http://maven.apache.org/">maven</a>来说gradle比较灵活，可以像ant那样写简单的命令来进行copy或者mv等操作，总的来讲，gradle是集ant和maven优点于一身的新时代的构建工具。</p>

<p>要在工程中引入Mybatis的组件，需要现在gradle的构建文件中增加Mybatis的依赖包。</p>

<p>{% codeblock build.gradle lang:groovy %}
dependencies {</p>

<pre><code>compile 'org.mybatis:mybatis:3.2.8'
compile 'org.mybatis:mybatis-spring:1.2.2'
</code></pre>

<p>}
{% endcodeblock %}</p>

<h2>在spring中配置Mybatis</h2>

<p>引入依赖包之后，需要在spring的配置文件中进行Mybatis的配置。</p>

<ul>
<li>首先我们定义一个datasource，使用C3PO数据库连接池来进行管理。</li>
</ul>


<p>{% codeblock spring.xml lang:xml %}</p>

<pre><code>&lt;bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource " destroy-method="close"&gt;
    &lt;property name="driverClass" value="com.mysql.jdbc.Driver"/&gt;
    &lt;property name="jdbcUrl" value="jdbc:mysql://192.168.36.10:3306/pebms"/&gt;
    &lt;property name="user" value="root"/&gt;
    &lt;property name="password" value="root"/&gt;
    &lt;property name="acquireIncrement" value="1"/&gt;
    &lt;property name="initialPoolSize" value="5"/&gt;
    &lt;property name="maxPoolSize" value="20"/&gt;
    &lt;property name="minPoolSize" value="5"/&gt;
    &lt;property name="maxStatements" value="100"/&gt;
    &lt;property name="testConnectionOnCheckout" value="true"/&gt;
&lt;/bean&gt;
</code></pre>

<p>{% endcodeblock %}</p>

<ul>
<li>接着定义Mybatis的SessionFactory。

<ul>
<li>dataSource: 我们之前定义的数据源</li>
<li>transactionFactory: 事务管理配置</li>
<li>configLocation: Mybatis的具体文件地址</li>
<li>mapperLocations: Mybatis的SQL映射文件</li>
</ul>
</li>
</ul>


<p>{% codeblock spring.xml lang:xml %}</p>

<pre><code>&lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt;
    &lt;property name="dataSource" ref="dataSource" /&gt;
    &lt;property name="transactionFactory"&gt;
        &lt;bean class="org.apache.ibatis.transaction.managed.ManagedTransactionFactory" /&gt;
    &lt;/property&gt;
    &lt;property name="configLocation" value="classpath:sql-map-config.xml"/&gt;
    &lt;property name="mapperLocations" value="classpath:sql-mapping/farmer.xml" /&gt;
&lt;/bean&gt;
</code></pre>

<p>{% endcodeblock %}</p>

<ul>
<li>sql-map-config.xml简单示例如下，设置了缓存，延迟加载，超时时间等属性，更多的配置可以参照<a href="http://mybatis.github.io/mybatis-3/zh/configuration.html#setting">这里</a>。</li>
</ul>


<p>{% codeblock sql-map-config.xml lang:xml %}
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;!DOCTYPE configuration PUBLIC &ldquo;&ndash;//mybatis.org//DTD Config 3.0//EN&rdquo; &ldquo;<a href="http://mybatis.org/dtd/mybatis-3-config.dtd">http://mybatis.org/dtd/mybatis-3-config.dtd</a>&rdquo;>
<configuration></p>

<pre><code>&lt;settings&gt;
    &lt;setting name="cacheEnabled" value="true" /&gt;
    &lt;setting name="lazyLoadingEnabled" value="true" /&gt;
    &lt;setting name="multipleResultSetsEnabled" value="true" /&gt;
    &lt;setting name="useColumnLabel" value="true" /&gt;
    &lt;setting name="defaultExecutorType" value="REUSE" /&gt;
    &lt;setting name="defaultStatementTimeout" value="25000" /&gt;
&lt;/settings&gt;
</code></pre>

<p></configuration>
{% endcodeblock %}</p>

<ul>
<li>sql的映射文件简单示例如下。</li>
</ul>


<p>{% codeblock farmer.xml lang:xml %}
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo; ?>
&lt;!DOCTYPE mapper PUBLIC &ldquo;&ndash;//mybatis.org//DTD Mapper 3.0//EN&rdquo; &ldquo;<a href="http://mybatis.org/dtd/mybatis-3-mapper.dtd">http://mybatis.org/dtd/mybatis-3-mapper.dtd</a>&rdquo; >
<mapper namespace="com.farmer.baton.repo.FarmerMapper"></p>

<pre><code>&lt;insert id="add-new-farmer" parameterType="com.farmer.baton.model.Farmer"&gt;
  insert into farmers(id, name, age) values (
    #{id},
    #{name},
    #{age}
  )
&lt;/insert&gt;
</code></pre>

<p></mapper>
{% endcodeblock %}</p>

<ul>
<li>继续在spring.xml文件里进行Mybatis的配置，定义Mybatis的DAO(数据库访问对象)和事务控制，这里配置了DAO的包路径。</li>
</ul>


<p>{% codeblock spring.xml lang:xml %}</p>

<pre><code>&lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt;
    &lt;property name="basePackage" value="com.farmer.baton.repo" /&gt;
    &lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" /&gt;
&lt;/bean&gt;

&lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;
    &lt;property name="dataSource" ref="dataSource" /&gt;
&lt;/bean&gt;
</code></pre>

<p>{% endcodeblock %}</p>

<h2>Mybatis responsitory编写</h2>

<p>在前面的spring里面配置了DAO的包路径，我们下面要做的东西就比较就简单了。</p>

<ul>
<li>先在DAO包路径下定义一个DAO接口，这里不需要实现具体的内容，具体的sql在我们的映射文件里面体现。</li>
</ul>


<p>{% codeblock FarmerRepository.java lang:java %}
package com.farmer.baton.repo;</p>

<p>import com.farmer.baton.model.Farmer;</p>

<p>import java.util.List;</p>

<p>public interface FarmerRepository {</p>

<pre><code>List&lt;Farmer&gt; findAll();
</code></pre>

<p>}</p>

<p>{% endcodeblock %}</p>

<ul>
<li>在xml映射文件里面实现findAll方法，这里要注意方法的签名必须和映射文件的sql的id一致，包括方法名和id一致，方法参数类型和sql的parameterType一致，方法返回类型和sql的resultType或resultMap类型一致。</li>
</ul>


<p>{% codeblock farmer.xml lang:xml %}
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo; ?>
&lt;!DOCTYPE mapper PUBLIC &ldquo;&ndash;//mybatis.org//DTD Mapper 3.0//EN&rdquo; &ldquo;<a href="http://mybatis.org/dtd/mybatis-3-mapper.dtd">http://mybatis.org/dtd/mybatis-3-mapper.dtd</a>&rdquo; >
<mapper namespace="com.farmer.baton.repo.FarmerRepository"></p>

<pre><code>&lt;resultMap id="baseResultMap" type="com.farmer.baton.model.Farmer"&gt;
    &lt;id column="id" property="id"/&gt;
    &lt;result column="name" property="name"/&gt;
    &lt;result column="age" property="age"/&gt;
&lt;/resultMap&gt;

&lt;select id="findAll" resultMap="baseResultMap"&gt;
    select id as id,
    name as name,
    age as age
    from farmers
&lt;/select&gt;
</code></pre>

<p></mapper>
{% endcodeblock %}</p>

<ul>
<li>写好Repository和映射SQL就可以了，程序在调用Repository方法的时候就会自动执行到相关的SQL。</li>
</ul>


<h2>事务控制</h2>

<ul>
<li>Mybatis的事务控制使用Spring的事务配置即可，配置如下:</li>
</ul>


<p>{% codeblock spring.xml lang:xml %}
&lt;beans xmlns:tx=&ldquo;<a href="http://www.springframework.org/schema/tx">http://www.springframework.org/schema/tx</a>&rdquo;</p>

<pre><code>    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"&gt;
...
&lt;tx:annotation-driven/&gt;
...
</code></pre>

<p>{% endcodeblock %}</p>

<ul>
<li>然后在调用Repository的方面前面加上Transactional标签，如下所示:</li>
</ul>


<p>{% codeblock FarmerService.java lang:java %}
@Service
public class FarmerService {</p>

<pre><code>@Autowired
private FarmerRepository farmerRepository;

@Transactional
public void updateTwoFarmers(Farmer farmer1, Farmer farmer2) {
    farmerRepository.updateZhangsan(farmer1);
    farmerRepository.updateWangwu(farmer2);
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<h2>Mybatis语法</h2>

<p>Mybatis的语法在功能上有了很大的改进，具体体现在SQL映射文件中。</p>

<ul>
<li>批量插入多条记录。</li>
</ul>


<p>{% codeblock lang:xml %}</p>

<pre><code>&lt;insert id="add-new-farmer" parameterType="com.farmer.baton.model.Farmer"&gt;
  insert into farmers(id, name, age) values 
  &lt;foreach collection="farmers" item="farmer" separator=","&gt;    
  (
    #{id},
    #{name},
    #{age}
  )
  &lt;/foreach&gt;
&lt;/insert&gt;
</code></pre>

<p>{% endcodeblock %}</p>

<p>{% codeblock FarmerRepository lang:java %}</p>

<pre><code>void addFarmers(@Param("farmers") List&lt;Farmer&gt; farmers);
</code></pre>

<p>{% endcodeblock %}</p>

<ul>
<li>多参数SQL映射</li>
</ul>


<p>{% codeblock lang:xml %}</p>

<pre><code>&lt;resultMap id="farmer" type="com.farmer.baton.model.Farmer"&gt;
    &lt;id column="id" property="id"/&gt;
    &lt;result column="name" property="name"/&gt;
    &lt;result column="age" property="age"/&gt;
&lt;/resultMap&gt;

&lt;select id="selectFarmersByNameAndAge" parameterType="map" resultMap="farmer"&gt;
  select id as id,
    name as name,
    age as age
    from farmers
    where name = #{name}
    and age = #{age}
&lt;/select&gt;
</code></pre>

<p>{% endcodeblock %}</p>

<p>{% codeblock FarmerRepository.java lang:java %}</p>

<pre><code>List&lt;Farmer&gt; selectFarmersByNameAndAge(@Param("name") String name, @Param("age") int age);
</code></pre>

<p>{% endcodeblock %}</p>

<ul>
<li>返回对象属性包含List</li>
</ul>


<p>{% codeblock lang:xml %}</p>

<pre><code>&lt;resultMap id="farmer" type="com.farmer.baton.model.Farmer"&gt;
    &lt;id column="id" property="id"/&gt;
    &lt;result column="name" property="name"/&gt;
    &lt;result column="age" property="age"/&gt;
    &lt;collection property="farmland" ofType="com.farmer.baton.model.Farmland"&gt;
        &lt;result column="size" property="size"/&gt;
    &lt;/collection&gt;
&lt;/resultMap&gt;

&lt;select id="selectFarmersAndFarmlands" resultMap="farmer"&gt;
  select id as id,
    name as name,
    age as age
    from farmers a 
    left outer join farmerlands b on a.id = b.farmer_id
&lt;/select&gt;
</code></pre>

<p>{% endcodeblock %}</p>

<p>{% codeblock FarmerRepository.java lang:java %}</p>

<pre><code>List&lt;Farmer&gt; selectFarmersAndFarmlands();
</code></pre>

<p>{% endcodeblock %}</p>

<p>{% codeblock Farmer.java lang:java %}</p>

<pre><code>private String name;
private int age;
private List&lt;Farmland&gt; farmlands;
</code></pre>

<p>{% endcodeblock %}</p>

<p>具体的Demo可以参考我的github工程<a href="https://github.com/zhaozhiming/spring4-mybatis">spring4-mybatis</a>。</p>
]]></content>
  </entry>
  
</feed>
