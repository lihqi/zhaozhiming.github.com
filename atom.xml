<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2017-01-10T22:09:57+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Grid 的完整介绍（三）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/01/10/complete-guide-grid-zhcn-part3/"/>
    <updated>2017-01-10T19:30:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/01/10/complete-guide-grid-zhcn-part3</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/01/css_grid3.jpeg" width="400" height="350"></p>

<p>接着上篇 blog，这篇继续介绍 Grid 的网格子项属性，内容没有那么长了。</p>

<p>原文地址见这里：<a href="https://css-tricks.com/snippets/css/complete-guide-grid/">A Complete Guide to Grid</a>。</p>

<ul>
<li><a href="http://zhaozhiming.github.io/blog/2017/01/08/complete-guide-grid-zhcn-part1/">Grid 的完整介绍（一）</a></li>
<li><a href="http://zhaozhiming.github.io/blog/2017/01/09/complete-guide-grid-zhcn-part2/">Grid 的完整介绍（二）</a></li>
</ul>


<!--more-->


<h2>Grid 的完整介绍（三）</h2>

<h3>网格子项的属性</h3>

<ul>
<li><a href="#grid-column-start">grid-column-start</a></li>
<li><a href="#grid-column-end">grid-column-end</a></li>
<li><a href="#grid-row-start">grid-row-start</a></li>
<li><a href="#grid-row-end">grid-row-end</a></li>
<li><a href="#grid-column">grid-column</a></li>
<li><a href="#grid-row">grid-row</a></li>
<li><a href="#grid-area">grid-area</a></li>
<li><a href="#justify-self">justify-self</a></li>
<li><a href="#align-self">align-self</a></li>
</ul>


<h4>grid-column-start</h4>

<h4>grid-column-end</h4>

<h4>grid-row-start</h4>

<h4>grid-row-end</h4>

<p>通过参考指定的网格线来决定网格中一个网格子项的位置，<code>grid-column-start/grid-row-start</code>是指网格子项开始的线，<code>grid-column-end/grid-row-end</code>是指网格子项结束的线。</p>

<p>值有：</p>

<ul>
<li><code>&lt;line&gt;</code> &ndash; 可以是一个数字以适用被标记了数字号的网格线，或者是一个名字以适用命名了的网格线</li>
<li>span <code>&lt;number&gt;</code> &ndash; 子项将跨越指定数字的网格轨迹</li>
<li>span <code>&lt;name&gt;</code> &ndash; 子项将跨越到指定名字之前的网格线</li>
<li>auto &ndash; 表示自动布局，自动跨越或者默认跨越一个</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">start</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="k">auto</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">end</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="k">auto</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">start</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="k">auto</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">end</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="k">auto</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举个例子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">start</span><span class="o">:</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">end</span><span class="o">:</span> <span class="n">five</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">start</span><span class="o">:</span> <span class="n">row1</span><span class="o">-</span><span class="n">start</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">end</span><span class="o">:</span> <span class="m">3</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-start-end-a.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-b</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">start</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">end</span><span class="o">:</span> <span class="n">span</span> <span class="n">col4</span><span class="o">-</span><span class="n">start</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">start</span><span class="o">:</span> <span class="m">2</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">end</span><span class="o">:</span> <span class="n">span</span> <span class="m">2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://chris.house/images/grid-start-end-b.png"></p>

<p>如果<code>grid-column-end/grid-row-end</code>没有生命，网格子项将默认跨越一个网格轨迹。</p>

<p>网格子项可以互相重叠，你可以使用<code>z-index</code>来控制他们的层叠顺序。</p>

<h4>grid-column</h4>

<h4>grid-row</h4>

<p><code>grid-column-start</code> + <code>grid-column-end</code>，和<code>grid-row-start</code> + <code>grid-row-end</code>的简写，分别独立。</p>

<p>值有：</p>

<ul>
<li>&lt;start-line> / &lt;end-line> &ndash; 每一个属性都可以接收普通模式的值，包括<code>span</code></li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">start</span><span class="o">-</span><span class="n">line</span><span class="o">&gt;</span> <span class="o">/</span> <span class="o">&lt;</span><span class="n">end</span><span class="o">-</span><span class="n">line</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">start</span><span class="o">-</span><span class="n">line</span><span class="o">&gt;</span> <span class="o">/</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">start</span><span class="o">-</span><span class="n">line</span><span class="o">&gt;</span> <span class="o">/</span> <span class="o">&lt;</span><span class="n">end</span><span class="o">-</span><span class="n">line</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">start</span><span class="o">-</span><span class="n">line</span><span class="o">&gt;</span> <span class="o">/</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-c</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">:</span> <span class="m">3</span> <span class="o">/</span> <span class="n">span</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">:</span> <span class="n">third</span><span class="o">-</span><span class="n">line</span> <span class="o">/</span> <span class="m">4</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-start-end-c.png"></p>

<p>如果没有声明结束网格线的值，那么网格子项将默认跨越 1 个网格轨迹。</p>

<h4>grid-area</h4>

<p>给网格子项取一个名字以让它被由<code>grid-template-areas</code>属性创建的模板引用。同时，这个属性也可以用来更简短地表示<code>grid-row-start</code>+ <code>grid-column-start</code> + <code>grid-row-end</code>+ <code>grid-column-end</code>。</p>

<p>值有：</p>

<ul>
<li><code>&lt;name&gt;</code> &ndash; 一个你选择的名字</li>
<li>&lt;row-start> / &lt;column-start> / &lt;row-end> / &lt;column-end> &ndash; 可以是网格线的数字或名字</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">area</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">row</span><span class="o">-</span><span class="n">start</span><span class="o">&gt;</span> <span class="o">/</span> <span class="o">&lt;</span><span class="n">column</span><span class="o">-</span><span class="n">start</span><span class="o">&gt;</span> <span class="o">/</span> <span class="o">&lt;</span><span class="n">row</span><span class="o">-</span><span class="n">end</span><span class="o">&gt;</span> <span class="o">/</span> <span class="o">&lt;</span><span class="n">column</span><span class="o">-</span><span class="n">end</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<p>作为分配一个名字给网格子项的一种方式：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span><span class="p">{</span>
</span><span class='line'><span class="o">.</span><span class="n">item</span><span class="o">-</span><span class="n">d</span><span class="err">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">area</span><span class="o">:</span> <span class="n">header</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>作为<code>grid-row-start</code>+ <code>grid-column-start</code> + <code>grid-row-end</code>+ <code>grid-column-end</code>的一种简写：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-d</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">area</span><span class="o">:</span> <span class="m">1</span> <span class="o">/</span> <span class="n">col4</span><span class="o">-</span><span class="n">start</span> <span class="o">/</span> <span class="n">last</span><span class="o">-</span><span class="n">line</span> <span class="o">/</span> <span class="m">6</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-start-end-d.png"></p>

<h4>justify-self</h4>

<p>让网格子项的内容以列轴对齐（与之相反<code>align-self</code>是跟行轴对齐），这个值可以应用在单个网格子项的内容中。</p>

<p>值有：</p>

<ul>
<li>start &ndash; 让内容在网格区域左对齐</li>
<li>end &ndash; 让内容在网格区域右对齐</li>
<li>center &ndash; 让内容在网格区域中间对齐</li>
<li>stretch &ndash; 填充着呢个网络区域的宽度（默认值）</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="k">center</span> <span class="o">|</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-start.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-end.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-center.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-stretch.png"></p>

<p>为了让网格中的所有子项都对齐，这个行为也可以通过设置网格容器中的<code>justify-items</code>属性来实现。</p>

<h4>align-self</h4>

<p>让网格子项的内容以行轴对齐（与之相反<code>justify-self</code>是跟列轴对齐），这个值可以应用在单个网格子项的内容中。</p>

<p>值有：</p>

<ul>
<li>start &ndash; 让内容在网格区域上对齐</li>
<li>end &ndash; 让内容在网格区域下对齐</li>
<li>center &ndash; 让内容在网格区域中间对齐</li>
<li>stretch &ndash; 填充着呢个网络区域的高度（默认值）</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="k">center</span> <span class="o">|</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-start.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-end.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-center.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-stretch.png"></p>

<p>为了让网格中的所有子项都对齐，这个行为也可以通过设置网格容器中的<code>align-items</code>属性来实现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grid 的完整介绍（二）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/01/09/complete-guide-grid-zhcn-part2/"/>
    <updated>2017-01-09T19:30:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/01/09/complete-guide-grid-zhcn-part2</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/01/css_grid2.png" width="400" height="350"></p>

<p>全篇 blog 太长，分成三篇文章分享。</p>

<p>原文地址见这里：<a href="https://css-tricks.com/snippets/css/complete-guide-grid/">A Complete Guide to Grid</a>。</p>

<ul>
<li><a href="http://zhaozhiming.github.io/blog/2017/01/08/complete-guide-grid-zhcn-part1/">Grid 的完整介绍（一）</a></li>
<li><a href="http://zhaozhiming.github.io/blog/2017/01/10/complete-guide-grid-zhcn-part3/">Grid 的完整介绍（三）</a></li>
</ul>


<!--more-->


<h2>Grid 的完整介绍（二）</h2>

<h3>网格容器的属性</h3>

<ul>
<li><a href="#display">display</a></li>
<li><a href="#grid-template-columns">grid-template-columns</a></li>
<li><a href="#grid-template-rows">grid-template-rows</a></li>
<li><a href="#grid-template-areas">grid-template-areas</a></li>
<li><a href="#grid-column-gap">grid-column-gap</a></li>
<li><a href="#grid-row-gap">grid-row-gap</a></li>
<li><a href="#grid-gap">grid-gap</a></li>
<li><a href="#justify-items">justify-items</a></li>
<li><a href="#align-items">align-items</a></li>
<li><a href="#justify-content">justify-content</a></li>
<li><a href="#align-content">align-content</a></li>
<li><a href="#grid-auto-columns">grid-auto-columns</a></li>
<li><a href="#grid-auto-rows">grid-auto-rows</a></li>
<li><a href="#grid-auto-flow">grid-auto-flow</a></li>
<li><a href="#grid">grid</a></li>
</ul>


<h4>display</h4>

<p>定义一个元素为网格容器并为其内容创建一个新的网格格式环境。</p>

<p>值有：</p>

<ul>
<li>grid &ndash; 生成一个块级别的网格</li>
<li>inline-grid &ndash; 生成一个内联级别的网格</li>
<li>subgrid &ndash; 如果你的网格容器是它自己的一个网格子项（比如内嵌的网格），你可以使用这个属性来表示你想要从其父级来获取行和列的大小而不是自己来指定它们。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="n">grid</span> <span class="o">|</span> <span class="k">inline</span><span class="o">-</span><span class="n">grid</span> <span class="o">|</span> <span class="n">subgrid</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：<code>column</code>, <code>float</code>, <code>clear</code>和<code>vertical-align</code>对网格容器没有效果。</p>

<h4>grid-template-columns</h4>

<h4>grid-template-rows</h4>

<p>通过空格分隔的一系列值来定义网格的行和列，这些值相当于轨迹大小，它们之间的距离相当于网格线。</p>

<p>值有：</p>

<ul>
<li>&lt;track-size> &ndash; 可以是一个长度，百分比或者是网格中自由空间的份数（使用<code>fr</code>这个单位）</li>
<li>&lt;line-name> &ndash; 一个你选择的任意名字</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">track</span><span class="o">-</span><span class="k">size</span><span class="o">&gt;</span> <span class="o">...</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">line</span><span class="o">-</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">track</span><span class="o">-</span><span class="k">size</span><span class="o">&gt;</span> <span class="o">...</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">track</span><span class="o">-</span><span class="k">size</span><span class="o">&gt;</span> <span class="o">...</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">line</span><span class="o">-</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">track</span><span class="o">-</span><span class="k">size</span><span class="o">&gt;</span> <span class="o">...</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<p>当你在轨迹值中间留空格，网格线将被自动以数字命名：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">40px</span> <span class="m">50px</span> <span class="k">auto</span> <span class="m">50px</span> <span class="m">40px</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="m">25</span><span class="o">%</span> <span class="m">100px</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-numbers.png"></p>

<p>但你可以给网格线指定一个名字，注意网格线命名时的中括号语法：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="p">[</span><span class="n">first</span><span class="p">]</span> <span class="m">40px</span> <span class="p">[</span><span class="n">line2</span><span class="p">]</span> <span class="m">50px</span> <span class="p">[</span><span class="n">line3</span><span class="p">]</span> <span class="k">auto</span> <span class="p">[</span><span class="n">col4</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="m">50px</span> <span class="p">[</span><span class="n">five</span><span class="p">]</span> <span class="m">40px</span> <span class="p">[</span><span class="n">end</span><span class="p">];</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="p">[</span><span class="n">row1</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="m">25</span><span class="o">%</span> <span class="p">[</span><span class="n">row1</span><span class="o">-</span><span class="n">end</span><span class="p">]</span> <span class="m">100px</span> <span class="p">[</span><span class="n">third</span><span class="o">-</span><span class="n">line</span><span class="p">]</span> <span class="k">auto</span> <span class="p">[</span><span class="n">last</span><span class="o">-</span><span class="n">line</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-names.png"></p>

<p>注意一根网格线可以有多个名字，例如在下面的例子中第二根线有两个名字：<code>row1-end</code> 和 <code>row2-start</code>。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="p">[</span><span class="n">row1</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="m">25</span><span class="o">%</span> <span class="p">[</span><span class="n">row1</span><span class="o">-</span><span class="n">end</span> <span class="n">row2</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="m">25</span><span class="o">%</span> <span class="p">[</span><span class="n">row2</span><span class="o">-</span><span class="n">end</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你定义了容器的重复部分，你可以使用<code>repeat()</code>方法来生成多个相同值：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="k">repeat</span><span class="p">(</span><span class="m">3</span><span class="o">,</span> <span class="m">20px</span> <span class="p">[</span><span class="n">col</span><span class="o">-</span><span class="n">start</span><span class="p">])</span> <span class="m">5</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>它等价于：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">20px</span> <span class="p">[</span><span class="n">col</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="m">20px</span> <span class="p">[</span><span class="n">col</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="m">20px</span> <span class="p">[</span><span class="n">col</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="m">5</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>fr</code>单元允许你将网格容器中的自由空间设置为一个份数，举个例子，下面的例子将把网格容器的每个子项设置为三分之一。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">1</span><span class="n">fr</span> <span class="m">1</span><span class="n">fr</span> <span class="m">1</span><span class="n">fr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>自由空间是在固定子项确定后开始计算的，在下面的例子中自由空间是<code>fr</code>单位的总和但不包括<code>50px</code>：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">1</span><span class="n">fr</span> <span class="m">50px</span> <span class="m">1</span><span class="n">fr</span> <span class="m">1</span><span class="n">fr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>grid-template-areas</h4>

<p>通过引用在<code>grid-area</code>属性中指定的网格区域名字来定义网格模板。重复网格区域的名字将让内容跨越那些单元。一个句点表示一个空单元，语法本身提供了一个可视化的结构网格。</p>

<p>值有：</p>

<ul>
<li>&lt;grid-area-name> &ndash; 在<code>grid-area</code>中指定的网格区域名字</li>
<li>. &ndash; 一个句点表示一个空的网格单元</li>
<li>none &ndash; 没有网格区域被定义</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">areas</span><span class="o">:</span> <span class="s2">&quot;&lt;grid-area-name&gt; | . | none | ...&quot;</span>
</span><span class='line'>                       <span class="s2">&quot;...&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举个例子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">area</span><span class="o">:</span> <span class="n">header</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.item-b</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">area</span><span class="o">:</span> <span class="n">main</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.item-c</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">area</span><span class="o">:</span> <span class="n">sidebar</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.item-d</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">area</span><span class="o">:</span> <span class="n">footer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">50px</span> <span class="m">50px</span> <span class="m">50px</span> <span class="m">50px</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">areas</span><span class="o">:</span> <span class="s2">&quot;header header header header&quot;</span>
</span><span class='line'>                       <span class="s2">&quot;main main . sidebar&quot;</span>
</span><span class='line'>                       <span class="s2">&quot;footer footer footer footer&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这将创建一个 4 乘以 3 的网格，第一行由<code>header</code>区域组成，中间一行由 2 个<code>main</code>区域和一个空单元和一个<code>sidebar</code>区域组成，最后一行由<code>footer</code>区域组成。</p>

<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-names.png"></p>

<p>在你定义的每一行都需要拥有相同的单元格。</p>

<p>你可以使用任意毗邻的阶段来声明一个单独的空单元，只要这些阶段中间没有空间都可以认为是一个单独的单元。</p>

<p>注意，在这里你的语法只是命名了区域但没有对网格线进行命名，当你使这种语法时，区域任意一边的线会被自动命名。如果你的网格区域的名字是<code>foo</code>，然么网格的开始行和开始列网格线的名字将会是<code>foo-start</code>，并且它的最后一行和最后一列的网格线名字是<code>foo-end</code>。这意味着一些网格线可能有多个名字，比如上面那个例子中最左边的线，它会有三个名字分别是：<code>header-start</code>，<code>main-start</code>，<code>footer-start</code>。</p>

<h4>grid-column-gap</h4>

<h4>grid-row-gap</h4>

<p>指定网格线的大小，你可以认为它就是设置行和列中间沟槽的宽度。</p>

<p>值有：</p>

<ul>
<li>&lt;line-size> &ndash; 一个长度值</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">gap</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">line</span><span class="o">-</span><span class="k">size</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">gap</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">line</span><span class="o">-</span><span class="k">size</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">100px</span> <span class="m">50px</span> <span class="m">100px</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="m">80px</span> <span class="k">auto</span> <span class="m">80px</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">gap</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">gap</span><span class="o">:</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-column-row-gap.png"></p>

<p>只会创建行和列的沟槽，不包括边缘。</p>

<h4>grid-gap</h4>

<p>一个<code>grid-column-gap</code> + <code>grid-row-gap</code>的简称。</p>

<p>值有：</p>

<ul>
<li>&lt;grid-column-gap> &lt;grid-row-gap> &ndash; 长度值</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">gap</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">gap</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">gap</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">100px</span> <span class="m">50px</span> <span class="m">100px</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="m">80px</span> <span class="k">auto</span> <span class="m">80px</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">gap</span><span class="o">:</span> <span class="m">10px</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果没有写<code>grid-row-gap</code>，那么它的值将和<code>grid-column-gap</code>的一样。</p>

<h4>justify-items</h4>

<p>让网格子项的内容和列轴对齐（<code>align-items</code>则相反，是和行轴对齐），这个值对容器里面的所有网格子项都有用。</p>

<p>值有：</p>

<ul>
<li>start &ndash; 内容和网格区域的左边对齐</li>
<li>end &ndash; 内容和网格区域的右边对齐</li>
<li>center &ndash; 内容和网格区域的中间对齐</li>
<li>stretch &ndash; 填充整个网格区域的宽度（默认值）</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="k">center</span> <span class="o">|</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-items-start.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-items-end.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-items-center.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-items-stretch.png"></p>

<p>可以通过<code>justify-self</code>属性把这个行为设置到单独的网格子项。</p>

<h5>align-items</h5>

<p>让网格子项的内容和行轴对齐（<code>justify-items</code>则相反，是和列轴对齐），这个值对容器里面的所有网格子项都有用。</p>

<p>值有：</p>

<ul>
<li>start &ndash; 内容和网格区域的上边对齐</li>
<li>end &ndash; 内容和网格区域的下边对齐</li>
<li>center &ndash; 内容和网格区域的中间对齐</li>
<li>stretch &ndash; 填充整个网格区域的高度（默认值）</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="k">center</span> <span class="o">|</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-items-start.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-items-end.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-items-center.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-items-stretch.png"></p>

<p>可以通过<code>align-self</code>属性把这个行为设置到单独的网格子项。</p>

<h4>justify-content</h4>

<p>有时候你的网格总大小可能会比它的网格容器的容量小，这可能是你的所有网格子项都使用了固定值比如<code>px</code>来确定大小，在这个情况下你可以在网格容器中设置网格的对齐方式。这个属性将网格和列轴对齐（和<code>align-content</code>相反，它是和行轴对齐）。</p>

<p>值有：</p>

<ul>
<li>start &ndash; 网格在网格容器左边对齐</li>
<li>end &ndash; 网格在网格容器右边对齐</li>
<li>center &ndash; 网格在网格容器中间对齐</li>
<li>stretch &ndash; 改变网格子项的容量让其填充整个网格容器宽度</li>
<li>space-around &ndash; 在每个网格子项中间放置均等的空间，在始末两端只有一半大小</li>
<li>space-between &ndash; 在每个网格子项中间放置均等的空间，在始末两端没有空间</li>
<li>space-evenly &ndash; 在每个网格子项中间放置均等的空间，包括始末两端</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="k">center</span> <span class="o">|</span> <span class="n">stretch</span> <span class="o">|</span> <span class="n">space</span><span class="o">-</span><span class="n">around</span> <span class="o">|</span> <span class="n">space</span><span class="o">-</span><span class="n">between</span> <span class="o">|</span> <span class="n">space</span><span class="o">-</span><span class="n">evenly</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-start.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-end.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-center.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-stretch.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">space</span><span class="o">-</span><span class="n">around</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-space-around.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">space</span><span class="o">-</span><span class="n">between</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-space-between.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">space</span><span class="o">-</span><span class="n">evenly</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-space-evenly.png"></p>

<h4>align-content</h4>

<p>有时候你的网格总大小可能会比它的网格容器的容量小，这可能是你的所有网格子项都使用了固定值比如<code>px</code>来确定大小，在这个情况下你可以在网格容器中设置网格的对齐方式。这个属性将网格和行轴对齐（和<code>justify-content</code>相反，它是和列轴对齐）。</p>

<p>值有：</p>

<ul>
<li>start &ndash; 网格在网格容器上边对齐</li>
<li>end &ndash; 网格在网格容器下边对齐</li>
<li>center &ndash; 网格在网格容器中间对齐</li>
<li>stretch &ndash; 改变网格子项的容量让其填充整个网格容器高度</li>
<li>space-around &ndash; 在每个网格子项中间放置均等的空间，在始末两端只有一半大小</li>
<li>space-between &ndash; 在每个网格子项中间放置均等的空间，在始末两端没有空间</li>
<li>space-evenly &ndash; 在每个网格子项中间放置均等的空间，包括始末两端</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="k">center</span> <span class="o">|</span> <span class="n">stretch</span> <span class="o">|</span> <span class="n">space</span><span class="o">-</span><span class="n">around</span> <span class="o">|</span> <span class="n">space</span><span class="o">-</span><span class="n">between</span> <span class="o">|</span> <span class="n">space</span><span class="o">-</span><span class="n">evenly</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-start.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-end.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-center.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-stretch.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">space</span><span class="o">-</span><span class="n">around</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-space-around.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">space</span><span class="o">-</span><span class="n">between</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-space-between.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">space</span><span class="o">-</span><span class="n">evenly</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-space-evenly.png"></p>

<h4>grid-auto-columns</h4>

<h4>grid-auto-rows</h4>

<p>指定自动生成的网格迹的大小（又叫隐式网格轨迹），当你精确指定行和列的位置大于定义的网格时（通过 grid-template-rows/grid-template-columns）时隐式网格轨迹会被创建。</p>

<p>值有：</p>

<p>&lt;track-size> &ndash; 可以是一个长度，百分比或者是一个网格中自由空间的份数（通过使用<code>fr</code>单位）。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">track</span><span class="o">-</span><span class="k">size</span><span class="o">&gt;</span> <span class="o">...</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">track</span><span class="o">-</span><span class="k">size</span><span class="o">&gt;</span> <span class="o">...</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了说明隐式网格轨迹如何被创建，思考一下这个：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">60px</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="m">90px</span> <span class="m">90px</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-auto.png"></p>

<p>这里创建了 2 x 2 的网格。</p>

<p>但现在想象你使用<code>grid-column</code>和<code>grid-row</code>来定位你的网格子项，就像这样：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">:</span> <span class="m">1</span> <span class="o">/</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">:</span> <span class="m">2</span> <span class="o">/</span> <span class="m">3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.item-b</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">:</span> <span class="m">5</span> <span class="o">/</span> <span class="m">6</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">:</span> <span class="m">2</span> <span class="o">/</span> <span class="m">3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/implicit-tracks.png"></p>

<p>我们告诉<code>.item-b</code>在第 5 列网格线开始第 6 列网格线结束，但我们还没有定义第 5 或者第 6 列。因为我们引用的线不存在，0 宽度的隐式网格轨迹将被创建来填充这些空缺。我们可以使用<code>grid-auto-columns</code>和<code>grid-auto-rows</code>来指定这些隐式网格轨迹的宽度：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/implicit-tracks-with-widths.png"></p>

<h4>grid-auto-flow</h4>

<p>如果你有网格子项没有明确地放置在网格中，自动布局算法会将网格子项自动放置起来，这个属性控制自动布局算法如何工作。</p>

<p>值有：</p>

<ul>
<li>row &ndash; 告诉自动布局算法在每一行中依次填充，必要时添加新行</li>
<li>column &ndash; 告诉自动布局算法在每一列中依次填充，必要时添加新列</li>
<li>dense &ndash; 告诉自动布局算法如果更小的子项出现时尝试在网格中填补漏洞</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">flow</span><span class="o">:</span> <span class="n">row</span> <span class="o">|</span> <span class="n">column</span> <span class="o">|</span> <span class="n">row</span> <span class="n">dense</span> <span class="o">|</span> <span class="n">column</span> <span class="n">dense</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意<code>dense</code>可能让你的网格子项出现错乱。</p>

<p>举个例子：</p>

<p>考虑一下这个 HTML：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item-a&quot;</span><span class="nt">&gt;</span>item-a<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item-b&quot;</span><span class="nt">&gt;</span>item-b<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item-c&quot;</span><span class="nt">&gt;</span>item-c<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item-d&quot;</span><span class="nt">&gt;</span>item-d<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item-e&quot;</span><span class="nt">&gt;</span>item-e<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>你定义一个 5 列 2 行的网格，并设置<code>grid-auto-flow</code>为<code>row</code>（这也是默认值）：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="n">grid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">60px</span> <span class="m">60px</span> <span class="m">60px</span> <span class="m">60px</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="m">30px</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">flow</span><span class="o">:</span> <span class="n">row</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当在网格中放置子项时，你只能为其中 2 个指定斑点：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">:</span> <span class="m">1</span> <span class="o">/</span> <span class="m">3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.item-e</span><span class="p">{</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">:</span> <span class="m">5</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">:</span> <span class="m">1</span> <span class="o">/</span> <span class="m">3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为我们设置<code>grid-auto-flow</code>为<code>row</code>，我们的网格看起来就像这样，注意这三个我们没有放置的子项（<code>item-b</code>，<code>item-c</code>，<code>item-d</code>) 将如何以行的方式流动的：</p>

<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-auto-flow-row.png"></p>

<p>如果我们将<code>grid-auto-flow</code>设为<code>column</code>，<code>item-b</code>，<code>item-c</code>和<code>item-d</code>以列的方式向下流动：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="n">grid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">60px</span> <span class="m">60px</span> <span class="m">60px</span> <span class="m">60px</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="m">30px</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">flow</span><span class="o">:</span> <span class="n">column</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-auto-flow-column.png"></p>

<h4>grid</h4>

<p>以下属性的简写方式：<code>grid-template-rows</code>，<code>grid-template-columns</code>，<code>grid-template-areas</code>，<code>grid-auto-rows</code>，<code>grid-auto-columns</code>，<code>grid-auto-flow</code>。它也可以设置<code>grid-column-gap</code>和<code>grid-row-gap</code>为它们的初始值，尽管它们不能通过这个属性来精确设置。
值有：</p>

<ul>
<li>none &ndash; 设置所有紫属性为它们的初始值</li>
<li>&lt;grid-template-rows> / &lt;grid-template-columns> &ndash; 分别设置<code>grid-template-rows</code>和<code>grid-template-columns</code>的指定值，以及设置其他所有子属性为初始值</li>
<li>&lt;grid-auto-flow> [&lt;grid-auto-rows> [ / &lt;grid-auto-columns>] ] &ndash; 分别接收所有像<code>grid-auto-flow</code>，<code>grid-auto-rows</code>和<code>grid-auto-columnsaccepts</code>的相同值。如果<code>grid-auto-columns</code>被省略了，那么它的值会通过<code>grid-auto-rows</code>来设置，如果两个都省略了，它们将被设置为默认值。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">:</span> <span class="k">none</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">&gt;</span> <span class="o">/</span> <span class="o">&lt;</span><span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">flow</span><span class="o">&gt;</span> <span class="p">[</span><span class="o">&lt;</span><span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">rows</span><span class="o">&gt;</span> <span class="p">[</span><span class="o">/</span> <span class="o">&lt;</span><span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">columns</span><span class="o">&gt;</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<p>下面 2 段代码是相等的：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">:</span> <span class="m">200px</span> <span class="k">auto</span> <span class="o">/</span> <span class="m">1</span><span class="n">fr</span> <span class="k">auto</span> <span class="m">1</span><span class="n">fr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="m">200px</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">1</span><span class="n">fr</span> <span class="k">auto</span> <span class="m">1</span><span class="n">fr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">areas</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面这 2 段代码也是等价的：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">:</span> <span class="n">column</span> <span class="m">1</span><span class="n">fr</span> <span class="o">/</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">flow</span><span class="o">:</span> <span class="n">column</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="m">1</span><span class="n">fr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>它也可以接收一个更复杂但又相当方便的语法来一次性设置所有属性，你可以指定<code>grid-template-areas</code>，<code>grid-auto-rows</code>和<code>grid-auto-columns</code>，并且所有其他紫属性被设置为它们的默认值。你需要做的是指定网格线的名称和网格轨迹的大小来生成它们的网格区域。最简单的表述方法就是举一个例子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">:</span> <span class="p">[</span><span class="n">row1</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="s2">&quot;header header header&quot;</span> <span class="m">1</span><span class="n">fr</span> <span class="p">[</span><span class="n">row1</span><span class="o">-</span><span class="n">end</span><span class="p">]</span>
</span><span class='line'>          <span class="p">[</span><span class="n">row2</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="s2">&quot;footer footer footer&quot;</span> <span class="m">25px</span> <span class="p">[</span><span class="n">row2</span><span class="o">-</span><span class="n">end</span><span class="p">]</span>
</span><span class='line'>          <span class="o">/</span> <span class="k">auto</span> <span class="m">50px</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面跟下面是等价的：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">areas</span><span class="o">:</span> <span class="s2">&quot;header header header&quot;</span>
</span><span class='line'>                         <span class="s2">&quot;footer footer footer&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="p">[</span><span class="n">row1</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="m">1</span><span class="n">fr</span> <span class="p">[</span><span class="n">row1</span><span class="o">-</span><span class="n">end</span> <span class="n">row2</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="m">25px</span> <span class="p">[</span><span class="n">row2</span><span class="o">-</span><span class="n">end</span><span class="p">];</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="k">auto</span> <span class="m">50px</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grid 的完整介绍（一）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/01/08/complete-guide-grid-zhcn-part1/"/>
    <updated>2017-01-08T19:30:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/01/08/complete-guide-grid-zhcn-part1</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/01/css_grid.png" width="400" height="350"></p>

<p>CSS 的 flex 特性刚推出不久，现在 grid 特性又快要出来了，感谢这些新特性，让前端开发者不用像以前那么痛苦地做页面布局了。为了更好的理解这篇博文，决定把它翻译出来。</p>

<p>原文地址见这里：<a href="https://css-tricks.com/snippets/css/complete-guide-grid/">A Complete Guide to Grid</a>。</p>

<ul>
<li><a href="http://zhaozhiming.github.io/blog/2017/01/09/complete-guide-grid-zhcn-part2/">Grid 的完整介绍（二）</a></li>
<li><a href="http://zhaozhiming.github.io/blog/2017/01/10/complete-guide-grid-zhcn-part3/">Grid 的完整介绍（三）</a></li>
</ul>


<!--more-->


<h2>Grid 的完整介绍（一）</h2>

<h3>介绍</h3>

<p>CSS Grid 布局（又叫“Grid”)，是一个基于网格的二维布局系统，目的是为了完全改变我们基于网格设计用户界面的方式。CSS 可以用来做我们的网页布局，但它在这一方面做的不是很好。开始的时候我们使用<code>tables</code>, 然后使用<code>floats</code>，<code>positioning</code>和<code>inline-block</code>，但这些方法本质上都是 hack 的方法并缺少一些重要功能（比如<code>垂直居中</code>）。<code>Flexbox</code>帮助我们解决了问题，但它是简单的一维布局，而不是复杂的二维布局（实际上 Flexbox 和 Grid 可以很好地组合起来使用）。Grid 是第一个专门为了解决那些我们一直使用 hack 手段而导致的页面布局问题而创建的 CSS 模块。</p>

<p>我写这篇文章主要收到两个事情启发，第一个是<code>Rachel Andrew</code>写的一本好书——《Get Ready for CSS Grid Layout》，这本书把对 Grid 全面而清晰的介绍作为全书的基调，我高度推荐大家去买这本书来读一下。我另外一件受启发的事情是<code>Chris Coyier</code>对 Flexbox 的完整介绍，这是我推荐学习 flexbox 的首选资源，它帮助了很多人，当你用 Google 搜索 flexbox 时可以从它的搜索结果看出其影响范围。你可以看到那篇文章跟我的文章有很多相似的地方，因为我这篇文章就是通过模仿那篇最好的文章来写的。（译者注：可以看到这两篇文章都是按照两列分布的方式来介绍 flexbox 和 Grid。）</p>

<p>我这篇文章的目的是为了介绍 Grid 在最新规范中的概念，所以我不会涵盖过时的 IE 语法，并且当规范更新时我将尽力更新这篇文章。</p>

<h3>基础和浏览器支持</h3>

<p>开始使用 Grid 非常简单，你只需要通过<code>display: grid</code>来定义一个容器元素作为网格，再通过<code>grid-template-columns</code>和<code>grid-templaet-rows</code>设置列和行的大小，然后通过<code>grid-column</code>和<code>grid-row</code>来设置网格的子元素，grid 元素的顺序对其实现的效果没有任何影响。你的 CSS 可以任意调节它们的顺序，这可以让你很方便地在媒体查询中重新编排你的网格。想象一下在你的整个页面中定义了一个布局，然后通过几行 CSS 代码就可以重新编排出另外一个布局来适应另外一个屏幕，所以说 Grid 是有史以来最强大一个的 CSS 模块。</p>

<p><strong>理解 Grid 最重要的一件事情是现在还不能把它用在生产环境。</strong>它现在还只是一个 W3C 的在制品草稿，还没有任何浏览器默认是支持它的。IE10 和 11 可以支持它，但它们是用过时的语法做的一个老旧的实现。最好地使用 Grid 的方式是设置 Chrome，Opera 或者 Firefox 的特殊标志来启用它。在 Chrome 中，在地址栏输入<code>chrome://flags</code>然后将<code>experimental web platform features</code>选项设置为<code>enable</code>，这个方法同样适用于 Opera(<code>opera://flags</code>)，在 Firefox 中，将<code>layout.css.grid</code>选项设置为可用。</p>

<p>这是一个支持的浏览器表格，我将及时更新它：</p>

<table class="browser-support-table">
<thead>
<tr>
<th class="chrome"><span>Chrome</span></th>
<th class="safari"><span>Safari</span></th>
<th class="firefox"><span>Firefox</span></th>
<th class="opera"><span>Opera</span></th>
<th class="ie"><span>IE</span></th>
<th class="android"><span>Android</span></th>
<th class="iOS"><span>iOS</span></th>
</tr>
</thead>
<tbody>
<tr>
<td class="yep" data-browser-name="Chrome">29+ (Behind flag)</td>
<td class="nope" data-browser-name="Safari">Not supported</td>
<td class="yep" data-browser-name="Firefox">40+ (Behind flag)</td>
<td class="yep" data-browser-name="Opera">28+ (Behind flag)</td>
<td class="yep" data-browser-name="IE">10+ (Old syntax)</td>
<td class="nope" data-browser-name="Android">Not supported</td>
<td class="nope" data-browser-name="iOS">Not supported</td>
</tr>
</tbody>
</table>


<p>除了微软，其他浏览器好像不想太早实现 Grid 直到规范完全成熟为止，这是一件好事，这意味着我们不用担心以后使用 Grid 要使用多种语法。
在生产环境使用 Grid 只是时间上的问题，但现在是时候可以学习它了。</p>

<h3>重要的术语</h3>

<p>在开始了解 Grid 的概念之前先理解其相关的术语是很重要的，因为这里涉及的概念都有点相似，所以如果你不记住它们在规范中的定义的话会很容易被搞混，但请不用担心，这里的术语并不多。</p>

<h4>网格容器</h4>

<p>网格容器是指这个元素使用了<code>display: grid</code>，它是所有网格元素的直接父级，在这个例子<code>container</code>的元素就是网格容器。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item item-1&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item item-2&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item item-3&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>网格子项</h4>

<p>网格子项是指网格容器的子元素（比如其后代），在下面的例子中<code>item</code>的元素是网格子项，但<code>sub-item</code>的元素不是。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;sub-item&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>网格线</h4>

<p>分隔的线组成了网格的结构。它们可以是垂直的（“列网格线”）或者水平的（“行网格线”），也可以在行或列的任一边。下面的例子中黄色的线是一个列网格线的例子。</p>

<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-line.png"></p>

<h4>网格轨迹</h4>

<p>网格轨迹是指两根毗邻线中间的位置，你可以认为是网格的行或者列，下面例子的中网格轨迹是第二和第三行网格线中间的位置。</p>

<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-track.png"></p>

<h4>网格单元</h4>

<p>网格单元是指两根毗邻的行网格线和列网格线中间的位置，它是一个单独的网格“单元”，下面的例子中网格单元是指第 1 和 2 根行网格线和第 2 和 3 根列网格线中间的位置。</p>

<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-cell.png"></p>

<h4>网格区域</h4>

<p>网格区域是指 4 根网格线包围的空间，一个网格空间可能由任意数量的网格单元构成。下面的例子中网格区域是指在第 1 和 3 的行网格线和第 1 和 3 列网格线中间的位置。</p>

<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-area.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发人员的业余项目]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/12/11/develpers-side-project-zh-cn/"/>
    <updated>2016-12-11T23:07:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/12/11/develpers-side-project-zh-cn</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/12/side-project.png" width="400" height="350"></p>

<p>看到Joel大神最近的一篇不错的博文，忍不住翻译了一下，水平有限翻译不好的地方请大家见谅。</p>

<p>看完博文想到了美剧《硅谷》里面的一个情节：男主角因为业余项目被原来的老板控告，结果虽然是老板因为一些低级错误而败诉了，但就业余项目这个事情上男主角是败诉了的（因为用了一次公司的电脑……）。所以在业余项目上作为员工其实并不占优势，但也不应该放弃写业余项目，我想如果是开明的公司，只要不和公司的利益有冲突，都会鼓励员工做业余项目的。</p>

<p>原文地址见这里：<a href="https://www.joelonsoftware.com/2016/12/09/developers-side-projects/">Developer&rsquo;s side project</a>。</p>

<!--more-->


<p></p>

<h2>开发人员的业余项目</h2>

<p>几乎100%的开发人员在为其他人工作时最终都会签署一种类似叫“专利发明协议”的东西，但几乎所有的开发人员都不太明白这份协议有什么作用。大部分开发人员认为在工作时间所作的工作属于他们的雇主，但其他时间在家里做的东西应该属于他们自己。这个想法错了，而且错的有点危险。</p>

<p>所以让我们思考一下这个问题：如果你是一家软件公司工作的开发人员，公司拥有你在业余时间做的东西吗？</p>

<p>在我开始讲之前我先说一下，在网上查询和获取法律咨询之前要小心，因为我看到的错误信息多得足以让你惹上麻烦。非美国的读者也应该注意自己国家的法律和法律事务可能与此完全不同。</p>

<p>这里有三段信息你需要先了解，然后才能回答这个问题：</p>

<p>1、你在哪个州（或国家）被雇佣？<br/>
州法律在州与州之间是不同的，可能会覆盖特定的合同。</p>

<p>2、你的雇主和合同怎么说？<br/>
在美国，一般来讲，法院对让人们签署任何他们想要的合同都会非常宽容，但有时候州法律会明确地说“即使你签署了这样和那样的一份合同，法律还是有权利覆盖它”。</p>

<p>3、你是一个合同工还是一个雇员？在美国这是两种不同的雇佣方式，法律对这两种情况也会有所区分。</p>

<p>但在我开始解释这些问题之前，我们先将其分解一下。</p>

<p>想象一下你创建了一个软件公司，你需要一个开发人员，所以你从街对面雇了Sarah并以每小时20美元的薪水和她达成了协议，然后她将为你的软件产品写代码。她写代码，你付给她20美元一个小时，事情很顺利，对吧？</p>

<p>顺利……可能吧，在美国，如果你以合同工的方式雇佣Sarah，她仍然拥有工作的版权。这有点奇怪，因为你可能会说，“好吧，我已经付薪水给她了”。虽然听起来很奇怪，但这是版权工作的默认方式。实际上，如果你请了一个摄影师为你的婚礼拍照片，你可以拿到照片和照片的所有备份，但摄影师仍然拥有照片的版权并且可以合法地复制更多照片的备份。是不是很惊喜？代码也是一样的。</p>

<p>每个软件公司都想拥有雇员编写的代码的版权，所以没有一家软件公司可以接收法律的“默认”方式。这就是为什么所有管理比较好的软件公司都会要求所有开发人员至少要签署这样一份协议：</p>

<ul>
<li>以接受薪水作为交换</li>
<li>开发人员同意将版权“赋予”（给）公司</li>
</ul>


<p>这份协议会出现在雇佣合同或单独的一份“发明专利协议”合同里面。这种方式经常理解为使用法律形式让雇佣生效，意味着“我们决定版权属于公司而不是员工”。</p>

<p>现在，我们仍然没有讲任何关于空闲时间工作的事情。假设你现在有一家小游戏公司，不是开发软件，而是你需要每几个月制作三到四个好玩的游戏作为公司的拳头产品。你自己不会制作游戏，所以你出去找了一个游戏设计师来制作游戏。你将付给游戏设计师一个月6000美元来制作新游戏。那些游戏是聪明和新奇的，并且它们可以申请专利，公司拥有游戏的专利这点非常重要。</p>

<p>你的游戏设计师工作了一年并制作了7款游戏，在年末的时候她起诉了你，声明她拥有全部游戏中的4个，因为那些特定的游戏是她在下午5点到上午9点的时间开发的，这段时间不是上班时间。</p>

<p>糟糕，这不是你想要的，你想要支付她所有发明的游戏，然后你意识到需要支付的实际发明过程可能发生在任何时间：节假日，周末，在公司，在卧室，在家，在洗澡，在假期攀岩。</p>

<p>所以在你雇佣开发人员之前，你要达成协议，“嘿听着，我知道任何时候都可以制作游戏，而且不可能证明你坐在卧室椅子上开发的东西就是我需要支持的，我不只是想要购买你在9:00-5:00间的发明，我想要全部，并且我将付给你一个让你满意的薪资来得到全部”，然后她同意了，所以现在你想要签署一些关于她在雇佣期间所有发明都属于公司的协议。</p>

<p>这就是默认方式，这是开发人员、发明者，研究人员的标准雇佣合同。</p>

<p>即使一个公司决定，“天哪，我们不想拥有5:00-9:00间的发明”，他们不久也会陷入困境。为什么呢？因为他们可能需要引入一些投资，然后投资人会说，“请给我证明一下你们不会被一些有怨念的前雇员起诉，说在你卖的东西里面他们有发明权”。这个公司可能会拿出一份包括当前和之前的雇员名单，指出每一份说明了将发明授权给公司的合同。这个预计会成为每一次高新技术融资，合并和收购尽职调查的一部分，所以软件公司如果在取得授权这方面不小心的话，将无法得到融资，或合并，或被收购。从1998年开始，一个人以前没有签署协议然后现在又想签署协议将被认为是一个真正的混蛋，因为他知道他个人持有350000000美元的收购，所以他可以在签字时要求很多钱。</p>

<p>所以，每个软件公司都尝试拥有它所有员工做的东西（他们不会强制拥有不相关的业务项目，但通过纸质协议他们可以要求这些）。</p>

<p>作为软件开发人员听到这个消息会比较沮丧，他们一直想象他们可以晚上在自己的房间里在自己电脑上写自己的代码，然后拥有这些东西的版权和专利。所以在州立委会，在某些州（比如加州）但不包括其他州（比如不包括纽约），这些州立委会一般会通过以下这些法律：</p>

<blockquote><p>任何在你的时间, 通过你的设备做的事情，这个事情跟你老板的工作无关，那这个东西是属于你自己的，即使你签署了相关的合同也没有关系。</p></blockquote>


<p>因为这是加州的法律，这个特殊条款被写入了标准的免责合同和加州律师事务所给他们的软件公司客户的大部分标准合同中，所以全国各地的程序员可以很好地在自己的合同中拥有他们，即使所在州没有要求这个东西。</p>

<p>让我们逐条分析一下。</p>

<p><strong>在你自己的时间里</strong>，我猜很容易理解。</p>

<p><strong>通过你自己的设备</strong>，这一条也不难理解。</p>

<p><strong>这个事情跟你老板的工作无关</strong>，额……等一下，无关的定义是什么？如果我的雇主是Google，他们什么都做，他们以前还搞了一个在该死的热气球上放网络路由器的事情，那么热气球是相关的吗？明显的，搜索引擎，邮件，网络应用和广告都和Google的工作相关，嗯……</p>

<p>好吧，如果我的雇主是一家给法律行业写软件的小公司，那么为会计行业写软件是“相关”的吗？</p>

<p>我不知道，这里的二义性大到你可以在中间开辆大卡车，这可能只有看法官或陪审团怎么决定了。</p>

<p>法官（或陪审团）对贫穷的雇员可能会比对大坏蛋Google更加友善，但你不能把赌注都压在这个上面。</p>

<p>二义性意味着在员工他们可以做任何事情的业余时间上产生了足够大的震慑效果，并且达到了老板想要的目的：员工不会被某天可以商业化的业余项目所打扰，然后老板可以看到每个员工早上漂亮、精神抖擞地来上班，即使员工昨天晚上看了一晚上的电视。</p>

<p>所以……来回答这个问题，在美国各个公司当程序员或适用的法律其实不大可能有特别大的差异，他们都需要握紧你的版权和专利而无需证明那是否在“上班时间”产生的，所以所有公司都会尝试做这个（译注：指签署协议），除非这家公司疏忽大意没有在适当的地方准备好合适的合同，这种情况下，这家公司可能缺乏管理并且这是一个不值得去那上班的理由。</p>

<p>唯一的不同是在管理的态度上，公司会对合同上的权利保持多强硬的态度，这可以有很多种不同：</p>

<ul>
<li>我们喜欢业余项目，玩得开心！</li>
<li>我们不是真正的喜欢业余项目，你应该为我们想想。</li>
<li>我们喜欢业余项目，我们太爱它们以致我们想拥有和出售它们！</li>
<li>我们其实不太关心，但如果你让我们不好受，我们会有很多方法让你更痛苦。如果你离开并开了一个和我们竞争的公司，或者是一个和我们半竞争的公司，我们将使用合同让你掉眼泪。但是，如果你没有让我们不好受，并且很忠诚地为我们服务，我们会在你的IPhone应用达到每月盈利40000美金时寻找一种合适的方式。</li>
</ul>


<p>这些都可能会变化，取决于跟你谈话的人，这个人在任何特定时间内都有强大的权利，或者取决于你是否跟你老板睡过觉。你能够获得独立的唯一方法就是自己独立。作为一个做智能产品的高技术公司员工，意味着你已经决定要出售自己的智力输出，这可能是好的，也可能是不好的，但这是一个自由的选择。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信小程序之槽点一二三]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/09/28/some-complain-about-weixin-mini-app/"/>
    <updated>2016-09-28T11:02:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/09/28/some-complain-about-weixin-mini-app</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/09/wechat.jpg"></p>

<p>微信小程序最近火爆IT界，抱着尝鲜的心理我也下载了<strong>微信web开发者工具</strong>并撸了一个Demo小程序，撸完之后发现微信小程序就开发过程而言，就像背影很美正面像鬼的女子，远没有外界所说的那么好，在实际开发过程中有各种不爽，下面我就来一一说下。</p>

<!--more-->


<p></p>

<h2>不能npm install</h2>

<p>微信小程序最大的一个痛点是不能使用第三方包，只能用原生的JavaScript的功能，虽然可以支持ES6了，但是像Lodash这种工具包要是能用的话，可以少写很多代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 用原生的JavaScript</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">todos</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">todo</span> <span class="o">=</span> <span class="nx">todos</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">Number</span><span class="p">(</span><span class="nx">todoId</span><span class="p">)</span> <span class="o">===</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">todo</span><span class="p">.</span><span class="nx">completed</span> <span class="o">=</span> <span class="o">!</span><span class="nx">todo</span><span class="p">.</span><span class="nx">completed</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">todos</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">todo</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setData</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">todos</span><span class="o">:</span> <span class="nx">todos</span><span class="p">,</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用了lodash</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">todos</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">todoId</span><span class="o">===</span> <span class="nx">x</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'><span class="nx">_</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">todos</span><span class="p">,</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">index</span><span class="p">}.</span><span class="nx">completed</span><span class="err">`</span><span class="p">,</span> <span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">todos</span><span class="p">,</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">index</span><span class="p">}.</span><span class="nx">completed</span><span class="err">`</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">setData</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">todos</span><span class="o">:</span> <span class="nx">todos</span><span class="p">,</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>不能使用第三方包的最大坏处是不能复用代码，想象一下我在一个项目有几个组件写的非常好，可以在提供给其他项目使用，但由于小程序不能使用第三方包，就只能把原来的代码拷贝到新项目里面去。这样导致的结果就是每个小程序项目充斥着重复的代码，一旦公共代码要改动会要牵扯到很多个地方的修改。</p>

<h2>css调试器不能自动补全</h2>

<p><img class="right" src="http://zhaozhiming.github.io/images/post/2016/09/chrome_css.png" width="400" height="300"></p>

<p>我们在调试页面样式时，很多时候会借助Chrome浏览器的开发者工具，在里面对某个元素添加样式非常方便，而且在输入css属性和值时工具会有自动补全的提示，这一点非常有用，即使你忘记了一些css也可以完成调试样式的工作。</p>

<p><img class="right" src="http://zhaozhiming.github.io/images/post/2016/09/wechat_css.png" width="400" height="300"></p>

<p>但是在微信开发者工具里面就不是这样了，工具不会自动补全css属性和值，作为开发者不可能记住每个css的属性，没有了自动补全让开发效率低了很多。</p>

<h2>UI组件不好用</h2>

<p>微信开发者工具提供了很多UI组件，基本上可以满足大部分的开发场景，但还是不得不吐槽里面一些组件的缺点。</p>

<h4><code>checkbox</code>不能单独使用</h4>

<p>开放的<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/component/checkbox.html?t=1474974357075"><code>checkbox</code></a>组件需要包含在<code>checkbox-group</code>里面才能使用，如果直接使用<code>checkbox</code>组件，一个是不能监听change事件，二个是通过tap事件不能获取到check值。</p>

<p>所以只能结合<code>checkbox-group</code>一起使用，而多个<code>checkbox</code>的场景又比较少，所以感觉这个UI组件很鸡肋。</p>

<h4>icon 太少</h4>

<p>还有要吐槽的一个组件是<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/component/icon.html?t=1475052051701">icon</a>，里面提供的icon非常非常的少，只有可怜的15个。可以预想到以后随着小程序逐渐复杂，开发者需要开发自己的icon组件，但开发出来的组件又不能复用（参见上面第一条），所以小程序项目会到处充斥着重复的代码。</p>

<h2>刷新没用，每次都要重新编译</h2>

<p>微信开发者工具的动作菜单有<code>项目重建</code>和<code>刷新</code>两个子菜单，把这两个菜单放在一起很容易给人这样一种错觉，<code>项目重建</code>是重新编译项目，而<code>刷新</code>是不重新编译项目只刷新页面。<code>项目重建</code>没有什么问题，但是<code>刷新</code>菜单就不知道有什么用了，按了之后页面有进度条加载，但是并没有发生变化，而且大部分时候会导致console报错，真心不知道这个菜单有什么鸟用。</p>

<h2>不能写测试</h2>

<p>测试是项目质量的保障，但在小程序里面没有示例代码和文档来指导你如何写测试代码，其实根本没法让你写单元测试。微信团队你们难道指望每个小程序都是靠手工测试来保证质量吗？我猜测微信开发者工具的开发团队（可能是腾讯的前端团队）平时也很少甚至不写单元测试，所以在开发者工具中就没有关于单元测试的考虑👎。</p>

<h2>总结</h2>

<p>微信小程序刚推出不久，有一些缺点毛病是正常的，但如果腾讯希望小程序以后能掀起一股开发热潮，就请在开发者工具上加强开发体验，让开发者开发爽了，才能做出让用户爽的小程序来。</p>

<p>最后附上我练手的小玩意儿，项目地址是：<a href="https://github.com/zhaozhiming/wechat-todolist">https://github.com/zhaozhiming/wechat-todolist</a></p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/09/wechat-todo.gif"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 GitHub Page 来发布属于你自己的网站]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/08/20/use-gitpage-to-publis-your-site-with-custom-domain/"/>
    <updated>2016-08-20T14:51:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/08/20/use-gitpage-to-publis-your-site-with-custom-domain</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/08/github-pages.jpg"></p>

<p>GitHub Page 是一个由 Github 公司推出的一个静态网站托管服务，可以结合 GitHub 中的用户或者项目来发布相关的静态网站，适用于发布项目 Demo，个人博客，产品介绍等，下面介绍一下 GitHub Page 的使用方法，并介绍如何绑定自定义域名，包括如何在 <a href="https://www.namesilo.com/">namesilo</a> 上购买域名，以及如何配置 DNS 解析服务等操作。</p>

<!--more-->


<h2>GitHub Page 的使用</h2>

<p>Github Page 的使用非常简单，在官网的首页里面就有图文并茂的操作介绍，<a href="https://pages.github.com/">官网请看这里</a>。创建静态网站有 2 种方式，一种是为用户或者组织创建网站，有些框架甚至集成了从编写博客到发布 GitHub Page 的功能，比如 <a href="http://octopress.org/">Octopress</a>；另外一种是为项目创建网站，下面着重介绍项目网站，其实跟用户网站差不多。</p>

<h3>创建网站的 2 种方法</h3>

<ul>
<li>通过 setting 配置</li>
</ul>


<p>为项目创建网站可以参照官网首页上面的那种方式，直接在项目 setting 里面进行配置（具体操作请看官网），但这种方式的缺点是只能添加一个 Markdown 的页面，虽然有网站模板可以选择，但自定义的功能还是十分有限。</p>

<ul>
<li>通过命令行方式</li>
</ul>


<p>创建网站的另外一种方法跟 GitHub Page 的个人网站比较类似，通过命令行的操作，包括创建分支，添加网站内容等来发布你的网站，这种方式可以定制的功能就比较多了，甚至可以制作出一些内容非常丰富的网站。具体操作如下：</p>

<pre><code>* 首先新建一个叫 gh-pages 的 git 分支，并且这个分支跟其他分支没有任何关系，`git checkout --orphan gh-pages`
* 在这个分支下面将原有的内容都去掉，`git rm -rf .`
* 添加网站内容比如 index.html，然后`git commit &amp;&amp; git push`
* 在 GitHbu 项目的 setting 中选择 GitHub Page 通过 gh-pages 分支来发布
* 在浏览器中访问你的网站，`http(s)://&lt;username&gt;.github.io/&lt;projectname&gt;`
</code></pre>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/gh-pages.png" width="200" height="300"></p>

<h3>发布的 3 种方式</h3>

<p>上面介绍的通过<code>gh-pages</code>分支来发布网站是老的发布方式，GitHub Page 最近推出新发布方式，可以通过<code>master</code>分支和 master 分支里面的<code>docs</code>文件夹来发布网站。</p>

<ul>
<li><p>通过 master 分支来发布跟之前介绍的通过 gh-pages 分支发布差不多，区别是不需要单独创建一个分支，直接在 master 分支里面添加网站内容即可，然后在项目 setting 里面选择通过 master 分支来发布。</p></li>
<li><p>通过 master 分支的 docs 文件夹发布，首先需要在 master 分支下面新建一个 docs 文件夹，然后在文件夹中添加网站内容，这样在项目 setting 里面就可以看到<code>master branch/docs folder</code>这个选项了。这种方式的好处是可以在项目中同时放置项目源码和生产代码，将打包后的生产文件放到 docs 里面就可以发布网站了。</p></li>
</ul>


<h2>自定义域名</h2>

<p>使用 GitHub Page 创建的网站域名一般是<code>http(s)://&lt;username&gt;.github.io/&lt;projectname&gt;</code>，但可以配置自己的域名，当然，首先你需要有一个自己的域名。</p>

<h3>namesilo</h3>

<p>之前准备使用 <a href="https://www.godaddy.com/">Godaddy</a> 这个域名注册商，但看了一下 Godaddy 的续费价格比较贵，而且网站不知道为什么老是卡在提交支付方式这一环节上，所以就放弃了。namesilo 是另外一个口碑较好的域名注册商，服务质量与 Godaddy 比有过之而不及，而且续费不加价，虽然界面丑了点但是不影响使用。</p>

<h3>折扣网站</h3>

<p>在购买域名之前，可以先到这个域名折扣网站 <a href="https://www.domcomp.com/">DomComp</a>看看，在上面可以看到各个域名注册商的最新优惠码，而且可以通过分享链接得到购买域名的返利。</p>

<p>比如下面这个截图是 DomComp 网站上的一个 namesilo 的优惠码信息，上面的是优惠码，下面的是有效截止时间。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/domcomp.png" width="300" height="300"></p>

<p>PS: 网站上面有很多<code>1&amp;1</code>这个域名注册商的优惠码，他们的域名价格比较便宜，但是口碑不是很好，图便宜的同学请谨慎考虑。</p>

<p>关于 DomComp 的返利功能可以看下知乎的<a href="://www.zhihu.com/question/19551906/answer/31986656">这个回答</a>，这里面的介绍比较详细，我也是从这个答案了解到相关信息的。</p>

<h2>GitHub Page 配置自定义域名</h2>

<p>购买完域名后，就可以配置到 GitHub 的项目中了。</p>

<h3>项目 setting 配置</h3>

<p>首先在项目的 setting 中，GitHub Pages 那一栏的 Custom domain 填写自己的域名，填写完成后因为域名的 DNS 信息还没有配置，所以会出现黄色的警告信息。</p>

<h3>namesilo DNS 配置</h3>

<p>登陆 namesilo 进到域名管理的界面，点击域名那一栏后面那个蓝色图标。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/namesilo_dns1.png" width="250" height="100"></p>

<p>下面有很多网站的 DNS 配置模板供你选择，我们选择 Github 这个模板。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/namesilo_dns2.png"></p>

<p>模板会为你添加一个类型为<code>A</code>，地址为<code>192.30.252.153</code>的记录和类型为 CNAME 的子域名记录，子域名那一行的地址要填上自己的 github 用户域名<code>&lt;username&gt;.github.io</code>。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/namesilo_dns3.png"></p>

<p>配置成功后，一般要等几个小时后才能生效，生效后 GitHub 项目 setting 里面的提示信息会变成绿色。</p>

<h2>国内 DNS 解析加速</h2>

<p>namesilo 是国外的域名注册商，国内访问速度会比较慢，这个时候可以加个 DNS 解析来提高域名的访问速度。这里当然要首选 <a href="https://www.dnspod.cn">DNSPod</a> 这个免费的 DNS 解析服务商，对于一些个人博客等非盈利的网站是免费使用的。</p>

<p>配置非常简单，还是进到 namesilo 的域名管理界面，选中域名那一栏最前面的勾选框，然后上面一排灰色的图标会显示出颜色，选择其中的<code>Change Namesevers</code>图标。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/namesilo_ns1.png"></p>

<p>在<code>NameServer1</code>和<code>NameServer2</code>中填写 DNSPod 的 nameserver 地址<code>f1g1ns1.dnspod.net</code>，<code>f1g1ns2.dnspod.net</code>。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/namesilo_ns2.png" width="300" height="100"></p>

<p>配置完成后网站的访问速度绝对是一个质的飞跃！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让你的 SQL 脚本自动升级]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/07/17/make-your-sql-script-auto-upgrade/"/>
    <updated>2016-07-17T17:12:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/07/17/make-your-sql-script-auto-upgrade</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/07/sql_upgrade.png" width="400" height="300"></p>

<p>以前的公司在部署 SQL 脚本的时候比较麻烦，需要写一份部署文档，上面写了这次部署需要执行的 SQL 脚本，然后由部署人员人工来执行这些脚本。现在发现一种比较简便的方法，可以让系统自己检查要执行哪些 SQL 脚本然后执行，减少了人力成本并提高了效率。</p>

<!--more-->


<h2>背景</h2>

<p>项目使用 <a href="https://www.sqlite.org/">sqlite</a> 来存储数据，因为还没上生产环境，开发人员在升级数据表结构时都是删掉数据库文件然后重新生成，这种方法一旦在生产环境执行的话就会将生产数据全部清除，所以需要使用增量升级数据库的方法来维护数据库。</p>

<h2>设计</h2>

<p>因为程序员都比较懒，加上又没有专职的部署人员，所以我们决定写个程序来让我们的数据库自动增量更新。大概的思路是这样的：</p>

<p><strong>在数据库中和系统文件中各记录一个版本号，系统启动时对比这 2 个版本号，如果数据库版本号小于等于系统文件版本号，则循环执行<code>数据库版本号 + 1</code>的脚本，每循环一次数据库版本号递增 1，直到数据库版本号大于系统文件版本号</strong></p>

<h2>步骤</h2>

<p>上面是概要设计，下面是具体的步骤：</p>

<ul>
<li>在数据库中记录一个版本号，然后在系统文件（比如<code>package.json</code>）也记录一个版本号</li>
<li>数据库版本号初始值为 0，系统文件版本号为部署 SQL 脚本的次数，比如还没执行过任何 SQL 脚本值为 0，执行了 1 次值为 1</li>
<li>系统启动时对比这 2 个版本号，如果数据库版本号小于等于系统文件版本号，则开始循环执行 SQL 脚本</li>
<li>每一次循环根据不同的版本号执行不同的 SQL 脚本，然后将数据库版本号值加 1</li>
<li>当数据库版本号大于系统文件版本号时，退出循环</li>
</ul>


<h2>流程</h2>

<p><img src="http://zhaozhiming.github.io/images/post/2016/07/flow_chart.png"></p>

<h2>结论</h2>

<p>这样实现后，以后如果有新的 SQL 脚本改动，只需要修改相应循环里面代码，增加新版本的 SQL 脚本的 if 分支，然后把系统文件版本加 1 即可，系统启动就会自动执行了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发团队里是否需要测试人员？]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/06/12/do-we-need-tester-in-our-team/"/>
    <updated>2016-06-12T20:06:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/06/12/do-we-need-tester-in-our-team</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/06/qa.png" width="400" height="300"></p>

<p>最近在看“<a href="https://book.douban.com/subject/4163938">软件随想录</a>”，里面有个非常有名的“<a href="http://www.joelonsoftware.com/articles/fog0000000043.html">乔尔测试</a>”，其中有一个问题是“你的团队里面是否有测试人员”，如果有的话就加分，表明团队对产品质量比较重视。</p>

<p>但是在现在的软件开发团队中是否真的需要测试人员呢？</p>

<!--more-->


<p></p>

<h2>如何替代测试人员的工作</h2>

<p>我们先来看一下测试人员的工作是什么？测试人员的工作是尽可能的找出bug，然后提交给开发人员进行修复。如果团队里面没有测试人员，开发人员要如何找bug呢？</p>

<p>首先我们来看测试人员做的最多的测试——功能测试，对于功能测试我们有什么办法可以来替代呢？</p>

<h4>单元测试</h4>

<p>单元测试是开发人员找出代码中潜在bug的自我救赎行为，相比手工测试功能，开发人员一般更倾向于写代码来测试功能代码，即所谓的单元测试。只要能想到相应的测试案例，就能写出单元测试，可以测试包括正常，异常，分支，边界等情况下的问题。</p>

<h4>集成测试</h4>

<p>单元测试虽然可以找到一些bug，但还不能完全替代测试人员的工作，单元测试只能测试细粒度级别的功能，比如某个方法的功能，如果需要对几个功能点一起测试的话，单元测试就满足不了了。但没有关系，开发同样可以用代码来写测试，这种粒度稍大的测试就是集成测试，比如测试一个后端的api，验证输入参数和输出结果，这个api的真正功能可能是后端调用数据库等一系列的操作，你一个测试方法就可以把这个api的各个功能点串起来一起验证。</p>

<h4>UI测试</h4>

<p>还有粒度更大的测试，一个页面上的按钮的点击可以看成是UI测试，相对于集成测试，这个测试的范围涉及了前端和后端，测试包括验证前端的页面是否正确，到点击按钮后触发的后端功能是否正确。现在市面上有很多端到端的测试框架，涵盖各种语言和浏览器。</p>

<h4>性能测试</h4>

<p>除了功能测试，测试人员还会做一些性能测试，同样地，开发可以通过代码或者脚本来调用性能测试工具来对系统进行性能测试。</p>

<h4>持续集成</h4>

<p>如果不想像测试人员一样每天做重复性的劳动，就可以将以上那些测试代码放到持续集成上面，让机器帮你运行，想象一下，几百上千个测试，如果手工跑的话可能要花不止一天的时间，而通过持续集成，可能在一天就能跑完好几轮所有测试。</p>

<h2>不能替代的测试工作</h2>

<p>如果我们做到了以上这些，是否就可以完全代替测试人员了呢？其实有些测试是机器无法测试的，比如网页的样式，机器只能判断是否有显示，但无法判断显示的是否好看。还有一些交互效果，也只有通过人工才能识别效果是否正确，还有其他各个领域的测试，目前是不能通过代码或者机器来替代的。</p>

<h2>高级测试工程师</h2>

<p>可能有人会说上面提到的用代码来执行测试的工作，高级测试工程师也能做。其实我觉得软件开发和软件测试到了越高的位置，技能重合的领域就越大，两者都同时会写代码，做测试，可能还会部署，会运维，这个时候我觉得不如就叫高级工程师好了，或者全栈工程师。</p>

<h2>结论</h2>

<p>说了这么多，所以结论是什么呢？</p>

<p>具体情况要具体分析，不能一概而论说完全不需要测试人员，团队不需要测试人员的条件是：</p>

<ul>
<li>团队的开发人员可以写的单元测试，集成测试和UI测试</li>
<li>没有太多需要人工测试的功能，比如团队开发的是常规的web系统或者纯后端应用等</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何写好办公室邮件]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/05/31/how-to-write-email-in-office/"/>
    <updated>2016-05-31T08:12:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/05/31/how-to-write-email-in-office</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/05/email.jpg" width="400" height="300"></p>

<p>一封电子邮件可以让人看出你的职业素养和专业水平，以前我在平安科技公司工作，在那里沟通主要是通过电子邮件的方式来进行，所以我也学到了一些关于电子邮件的规范和注意事项，在这里分享给大家。</p>

<!--more-->


<p></p>

<h2>收件人</h2>

<p>可能大家觉得收件人这一块没什么好注意的，把邮件地址放到收件人栏里不就可以了吗？我只能说：<code>图样图森破</code>。</p>

<h4>收件人的顺序很重要</h4>

<p>如果收件人中有本部门的同事和领导，应该先将领导的名字放在前面，其他同事的名字后面放在后面，已显示对领导的尊重。请注意，这不是拍马屁，而是一种职场礼仪，而且是每个行业都会有的规则，比如VIP总会被优先接待。</p>

<p>如果收件人中有本部门和其他部门的人，先将其他部门的人放在前面，后面才放本部门的人。不管其他部门的人职位高低，其顺序总是先于本部门的人，同一部门的人按照领导前同事后的顺序排列。</p>

<h3>抄送人 !== 收件人</h3>

<p>有些人发送邮件喜欢把邮件地址一股脑都放到收件人那一栏中，而没有真正想过收件人和抄送人的区别。收件人是你发邮件的主要接收方，而抄送人并不是，发邮件给抄送人起到的是一个知会的目的，将抄送人的邮件地址放到收件人里会给抄送人带来困扰。</p>

<h2>标题</h2>

<p>标题要体现邮件的主题和重点，有几点需要注意：</p>

<ul>
<li>如果要引起别人注意，可以用中括号<code>【】</code>或<code>[]</code>把主题括起来，比如：<code>【 XX 活动通知】</code></li>
<li>如果需要别人帮助或者反馈，可以在标题中加上<code>求助</code>或<code>请反馈</code>的字样，比如：<code>【请反馈】上周例会待办事项进展</code></li>
<li>如果是会议邀请，可以在标题上写上时间和地点等信息，比如：<code>【会议邀请】部门例会(本周二下午2点)</code></li>
</ul>


<h2>正文</h2>

<h3>开门见山</h3>

<p>邮件内容建议开门见山，直述主题，同时言简意赅，以免浪费大家的时间。在以邮件为主要沟通手段的公司里，每人每天可能要处理几十上百封邮件，如果你发的邮件又臭又长，那收件人会很快失去耐心。</p>

<h3>套用模板</h3>

<p>邮件内容建议分成3个部分：称呼，正文，结尾，比如：XXX 您好，正文&hellip;，谢谢。不管你的邮件内容有多少，即使只有一句话，也请按照这种方式发送邮件，这样会让人觉得你发的邮件更加正式和专业。</p>

<h3>善用分段</h3>

<p>如果你看到一封邮件里面有很长的一段文字，那么你有很大的可能不会读完整封邮件。要如何避免这种情况呢？其实最好的办法就是将一大段文字拆成几个小段，建议一段文字不要超过一行，这样阅读者会非常容易读懂你的邮件，并有耐心看完全部内容。</p>

<h3>吸引眼球</h3>

<p>如果邮件内容比较长，需要收件人了解的内容又比较多怎么办呢？这个时候可以适当地将一段文字标成<code>红色</code>或者将其<code>加粗字号加大</code>，这样阅读者在读邮件的时候就会被<code>重点</code>标注的地方所吸引了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『我』的产品说明书]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/05/17/use-my-product-manual-to-introduce-team/"/>
    <updated>2016-05-17T07:54:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/05/17/use-my-product-manual-to-introduce-team</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/05/product_manual.png" width="400" height="300"></p>

<p>最近使用引导者方法——<code>我</code>的产品说明书，为团队做了一次沟通交流，让大家彼此加深了了解，同时从中得到了团队成员的喜好、特长等信息，大家觉得这种方式挺有意思，所以今天在这里分享一下。</p>

<!--more-->


<p></p>

<h2>什么是<code>我</code>的产品说明书</h2>

<p>产品说明书大家应该都知道，比如家电的使用说明，软件的说明文档等，说明书主要介绍了产品的使用范围，注意事项，功能说明，保养事宜等。而<code>我</code>的产品说明书的方式呢，就是让团队每个人以产品说明书的方式来介绍自己，把自己当成一件很牛B的产品，说出自己的想法，比如自己有什么特长，使用<code>我</code>的时候有什么注意事项等，通过这样的一种方式介绍自己，会让人有种耳目一新的感觉。</p>

<p>下面是<code>我</code>的产品说明书的内容清单：</p>

<ul>
<li>规格： 专长，值得记录的经验，强项，卖点等</li>
<li>用途： 特别建议在 OO 时候 或 XX 场合 使用</li>
<li>我喜欢被委托的事与被委托的方式</li>
<li>会让我觉得开心的称赞或激发干劲的环境</li>
<li>偏爱的指正、斥责的方式</li>
<li>周围的人不能说的“禁忌字眼”和不能做的“NG行为”</li>
<li>状态不佳时，会有以下症状&hellip;&hellip;（症状、原因、处理方法）</li>
<li>周遭的人若能这样做，那就太好了</li>
<li>自己做得到的事</li>
</ul>


<h2>流程步骤</h2>

<p>作为一种会议引导方式，我们有必要了解会议的流程和步骤。</p>

<ul>
<li>首先为团队介绍会议的目的和流程，目的可能是为了让新团队成员互相了解，或者是改变团队现有的状态。</li>
<li>然后让团队成员填写一份产品说明书表格（右面有模板可以参考），时间大概为20~30分钟。</li>
<li>大家填写完后，让每个人逐一分享自己的说明书，如果人数比较多，可以分成几个小组，每个小组派代表发言</li>
<li>在成员分享的过程中，注意要引导分享者讲一些实际的例子，或者引导其讲出真正的原因，同时注意气氛的调节，保持轻松幽默的氛围可以更好地吸引其他成员倾听。每个人的分享大概控制在10分钟内为宜。</li>
<li>全部介绍完后，让大家总结一下今天的收获，感想等。</li>
</ul>


<h2>心得体会</h2>

<p>团队通过这次分享，我觉得有以下收获：</p>

<ul>
<li>加深彼此了解——平时大家上班沟通都比较少（不在同一个项目组），通过这次机会能更好的了解彼此。</li>
<li>搜集成员信息——除了表格中的信息外，还包括一些平时不为人知的<code>秘密</code>，比如有些人的特长还有<code>撩妹</code>这一项技能，让人颇感意外：）</li>
<li>创造发言环境——其实无论哪种引导方式，目的就是为了让大家能畅所欲言，说出心中的想法，通过这种特殊的方式，大家更愿意说出心理话。</li>
</ul>


<h2>说明书表格</h2>

<p>最后附上<code>我</code>的产品说明书模板，大家也可以在团队中尝试做一下哈。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/05/my_product_manual_1.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/05/my_product_manual_2.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用AVA和Enzyme测试React组件（三）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/03/29/use-ava-and-enzyme-to-test-react-component-part3/"/>
    <updated>2016-03-29T20:42:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/03/29/use-ava-and-enzyme-to-test-react-component-part3</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/03/react.png"></p>

<p><strong>React组件的测试要点</strong>：React组件要怎么测试，有哪些需要注意的地方，今天我们通过一些例子来说明。</p>

<!--more-->


<p></p>

<h2>render逻辑的测试</h2>

<p>React中存在逻辑的地方有一部分是在render方法中，React通过props或state的值可以render出不同的页面，所以我们可以通过设置不同的props值来测试是否能render出我们期望的页面。比如有下面这样的一个组件：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">Footer</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">renderFooterButtons</span><span class="p">(</span><span class="nx">completedCount</span><span class="p">,</span> <span class="nx">clearCompleted</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 测试点1</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">completedCount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;clear-completed&quot;</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">clearCompleted</span><span class="p">()</span> <span class="p">}</span><span class="o">&gt;</span><span class="nx">Clear</span> <span class="nx">completed</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="p">{</span> <span class="nx">todos</span><span class="p">,</span> <span class="nx">actions</span><span class="p">,</span> <span class="nx">onShow</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
</span><span class='line'>    <span class="kr">const</span> <span class="p">{</span> <span class="nx">clearCompleted</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">actions</span><span class="p">;</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">activeCount</span> <span class="o">=</span> <span class="nx">todos</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">count</span><span class="p">,</span> <span class="nx">todo</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">completed</span> <span class="o">?</span> <span class="nx">count</span> <span class="o">:</span> <span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">completedCount</span> <span class="o">=</span> <span class="nx">todos</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">activeCount</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">footer</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;footer&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;todo-count&quot;</span><span class="o">&gt;&lt;</span><span class="nx">strong</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">activeCount</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/strong&gt; item left&lt;/span&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;filters&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="c1">// 测试点2</span>
</span><span class='line'>          <span class="p">{[</span><span class="nx">SHOW_ALL</span><span class="p">,</span> <span class="nx">SHOW_ACTIVE</span><span class="p">,</span> <span class="nx">SHOW_COMPLETED</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="nx">filter</span> <span class="o">=&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">filter</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">classnames</span><span class="p">({</span> <span class="nx">selected</span><span class="o">:</span> <span class="nx">filter</span> <span class="o">===</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">filter</span> <span class="p">})}</span>
</span><span class='line'>                <span class="nx">style</span><span class="o">=</span>
</span><span class='line'>                <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">onShow</span><span class="p">(</span><span class="nx">filter</span><span class="p">)</span> <span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">FILTER_TITLES</span><span class="p">[</span><span class="nx">filter</span><span class="p">]}</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'>          <span class="p">)}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">renderFooterButtons</span><span class="p">(</span><span class="nx">completedCount</span><span class="p">,</span> <span class="nx">clearCompleted</span><span class="p">)}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/footer&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到这个组件其实是比较简单的，在一个<code>footer</code>标签里面有个<code>span</code>和一个<code>ul</code>，<code>ul</code>里面有一些<code>li</code>，最下面是个<code>button</code>。</p>

<ul>
<li>在最上面有一个render button的方法，这个方法存在逻辑判断，如果completedCount大于0，则render一个button出来，否则不render button，这里是我们第一个测试点。测试代码如下，分别测试render和不render的情况：</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">props</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">todos</span><span class="o">:</span> <span class="p">[],</span> <span class="c1">// 空的数组</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">clearCompleted</span><span class="o">:</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">(),</span> <span class="c1">// mock方法</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">onShow</span><span class="o">:</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">(),</span> <span class="c1">// mock方法</span>
</span><span class='line'>  <span class="nx">filter</span><span class="o">:</span> <span class="s1">&#39;SHOW_ALL&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;do not render button&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Footer</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;render button correctly&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Footer</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">wrapper</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span> <span class="nx">todos</span><span class="o">:</span> <span class="p">[{</span> <span class="nx">completed</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}]</span> <span class="p">});</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>要让completedCount不大于0，只要给个空的todos集合就可以了，如果要大于0的话，则需要在todos里面添加一个<code>completed</code>为true的对象，这里需要搞清楚completedCount的声明逻辑。</p>

<ul>
<li>第二个测试点是map方法里面的逻辑，因为是从一个有3个元素的数组里面做map，所以可以校验是否确实render出来3个<code>li</code>，以及其中某个<code>li</code>链接的class和文本内容。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;render 3 li correctly&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Footer</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">wrapper</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span> <span class="nx">todos</span><span class="o">:</span> <span class="p">[{</span> <span class="nx">completed</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}]</span> <span class="p">});</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;a.selected&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;a.selected&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(),</span> <span class="s1">&#39;All&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到通过enzyme的text方法可以很方便地得到<code>a</code>标签的文本内容。</p>

<p>这个组件其实还继续做测试，比如<code>span</code>里面的render逻辑等，但这里就不详细举例了。</p>

<h2>组件的事件逻辑</h2>

<p>除了在render方法中有逻辑以外，在组件的事件中也会存在逻辑，要测试这部分代码，我们需要模拟触发组件的事件。请看下面这个组件：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">TodoInput</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">,</span> <span class="nx">context</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">text</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">text</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">handleChange</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">handleBlur</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">newTodo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onSave</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">trim</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>        <span class="nx">classnames</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">edit</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">editing</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;new-todo&#39;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">newTodo</span><span class="p">,</span>
</span><span class='line'>        <span class="p">})}</span>
</span><span class='line'>        <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span>
</span><span class='line'>        <span class="nx">placeholder</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">placeholder</span><span class="p">}</span>
</span><span class='line'>        <span class="nx">autoFocus</span><span class="o">=</span><span class="s2">&quot;true&quot;</span>
</span><span class='line'>        <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span>
</span><span class='line'>        <span class="nx">onBlur</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleBlur</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span>
</span><span class='line'>        <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleChange</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span>
</span><span class='line'>      <span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到这个组件的render方法里面没有什么逻辑，只有一个<code>input</code>标签，但是在标签中存在了<code>change</code>和<code>blur</code>事件，组件的逻辑隐藏在对应的事件方法中。</p>

<ul>
<li>首先是对<code>change</code>事件的测试，我们可以看到<code>handleChange</code>方法其实是修改state里面text的值，所以测试代码可以这样写：</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">props</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">placeholder</span><span class="o">:</span> <span class="s1">&#39;foo placeholder&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">editing</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">newTodo</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">onSave</span><span class="o">:</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">(),</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;input change value correctly&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">TodoInput</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">).</span><span class="nx">simulate</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">target</span><span class="o">:</span> <span class="p">{</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}</span> <span class="p">});</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;text&#39;</span><span class="p">),</span> <span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过调用<code>simulate</code>方法对<code>change</code>事件进行模拟，然后调用<code>state</code>方法对组件的state进行校验。</p>

<ul>
<li>接着我们测试<code>blur</code>事件，<code>handleBlur</code>方法先做判断，如果为真则调用props中的<code>onSave</code>方法，我们可以用sinon来mock onSave方法，校验其调用次数。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;input blur correctly&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">TodoInput</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">).</span><span class="nx">simulate</span><span class="p">(</span><span class="s1">&#39;blur&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">target</span><span class="o">:</span> <span class="p">{</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}</span> <span class="p">});</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">onSave</span><span class="p">.</span><span class="nx">callCount</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>模拟事件触发的方法差不多，都是传入事件名和所需的方法对象就可以了，这里校验<code>onSave</code>是否被调用了1次。</p>

<p>在写单元测试的时候，有一点要注意的是要避免过度测试，因为测试代码也是需要维护的，如果测试过多过细，那一旦生产代码有所改变，就可能会修改很多测试代码，需要开发人员需要在质量和开发效率上面做好均衡。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用AVA和Enzyme测试React组件（二）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/03/29/use-ava-and-enzyme-to-test-react-component-part2/"/>
    <updated>2016-03-29T20:42:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/03/29/use-ava-and-enzyme-to-test-react-component-part2</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/03/airbnb.png" width="400" height="300"></p>

<p>Enzyme是<a href="http://www.airbnb.com/">Airbnb</a>公司推出的一个针对React组件的测试工具。Airbnb我觉得是国外继Google和Facebook之后技术实力十分强大的一家科技公司，有很多开源项目获得广大开发人员的认可，Enzyme就是其中的一个。</p>

<!--more-->


<p></p>

<h2>React的测试方式</h2>

<p>Facebook在推出React的时候也推出一个测试套件，可以使用shallow render（浅渲染）和renderIntoDocument（完整渲染）的方式对React组件进行渲染，然后通过查找DOM来做测试结果校验。两者的主要区别是shallow render只渲染出组件的第一层DOM，其嵌套的DOM不会渲染出来，这样渲染的效率更高，单元测试的速度更快，在做单元测试的时候建议使用shallow render的方式。</p>

<p>Enzyme对Facebook的测试套件做了封装，并提供了一套API来让开发者做React单元测试的时候更加方便，下面的例子可以对比使用了Enzyme前后的区别。</p>

<p>使用Enzyme前：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">setup</span><span class="p">({...</span><span class="nx">props</span><span class="p">});</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">ul</span> <span class="o">=</span> <span class="nx">output</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">li</span> <span class="o">=</span> <span class="nx">ul</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">li</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span>
</span><span class='line'><span class="nx">express</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">size</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用Enzyme后：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Foo</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'><span class="nx">express</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>最明显的变化是测试代码变少了，原来需要逐层查找DOM，现在只需要一个<code>find()</code>方法就可以搞定。</p>

<h2>Shallow Rendering &amp; Full DOM Rendering</h2>

<p>Enzyme针对这两种渲染方式都提供了各自一套API方法，但其实这2套API的方法差不多相同，只有个别方法不一样。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">children</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">parent</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">closest</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">unmount</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">text</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span>
</span><span class='line'><span class="p">.</span><span class="nx">state</span><span class="p">([</span><span class="nx">key</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="nx">Any</span>
</span><span class='line'><span class="p">.</span><span class="nx">simulate</span><span class="p">(</span><span class="nx">event</span><span class="p">[,</span> <span class="nx">data</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="nx">nextState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">setProps</span><span class="p">(</span><span class="nx">nextProps</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">debug</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里只列出了一小部分API，不但可以通过find方法查找DOM元素，还可以模拟DOM的事件，比如Click，Change等。</p>

<h2>常用的方法</h2>

<ul>
<li>find方法</li>
</ul>


<p>find方法可以让你方便的查找到DOM元素，支持通过class名称查找，html标签查找，id查找，甚至是自定义组件的查找等。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MyComponent</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="c1">// compound selector</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;div.some-class&#39;</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="c1">// CSS id selector</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;#foo&#39;</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Component</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">Foo</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>simulate方法</li>
</ul>


<p>simulate方法让你可以模拟DOM元素的事件，传入参数是事件名和事件参数。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MyComponent</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">simulate</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">simulate</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">target</span><span class="o">:</span> <span class="p">{</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span> <span class="p">}</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>debug方法</li>
</ul>


<p>debug方法可以让你打印出组件的DOM信息，方便测试遇到问题进行调试。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Book</span> <span class="nx">title</span><span class="o">=</span><span class="s2">&quot;Huckleberry Finn&quot;</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">debug</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Outputs</span> <span class="nx">to</span> <span class="nx">console</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;title&quot;</span><span class="o">&gt;</span><span class="nx">Huckleberry</span> <span class="nx">Finn</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>props和state等方法</li>
</ul>


<p>对应React组件的props和state，Enzyme也有一些方法可以让你set和get其中的值，对于重置React组件的状态非常有用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用AVA和Enzyme测试React组件（一）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/03/28/use-ava-and-enzyme-to-test-react-component-part1/"/>
    <updated>2016-03-28T20:20:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/03/28/use-ava-and-enzyme-to-test-react-component-part1</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/03/ava.png" width="400" height="300"></p>

<p>React的出现让页面的测试发生了变化，原来一些耗时耗性能的自动化测试可以转化成快速的单元测试，今天介绍一下如何做React的单元测试，以及AVA和Enzyme的使用。</p>

<!--more-->


<p></p>

<h2><a href="https://github.com/sindresorhus/ava">AVA</a>是什么</h2>

<p>AVA是一个JS的单元测试框架，与其他测试框架相比最大的特点是可以并发运行测试，并行地执行每个测试文件，让CPU的利用率达到最大化。有个项目使用AVA让单元测试的执行时间从31秒（原来是用Mocha）下降到11秒。另外AVA的团队也是几个开源社区的大神，为首的<a href="https://github.com/sindresorhus">sindresorhus</a>是github上获得星星最多的人。</p>

<h2>为什么选择AVA</h2>

<p>前端也有很多不错的测试框架，比如<a href="https://github.com/mochajs/mocha">Mocha</a>、<a href="https://testanything.org/">Tap</a>和<a href="https://github.com/substack/tape">Tape</a>等，但AVA这个后起之秀是青出于蓝而胜于蓝，除了上面说的并发测试这个优点外，还有配置简单，多种报告，环境隔离等优点。Mocha的作者<a href="https://github.com/tj">TJ</a>也是个牛人，他对AVA推崇有加，说如果让他来重新开发Mocha的话他也会按照AVA这种思路来做。</p>

<h2>AVA的语法</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">test</span> <span class="nx">from</span> <span class="s1">&#39;ava&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;my first test&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">same</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>test方法可以带一个字符串的标题和一个回调函数，这个回调函数就是你的测试代码，使用过其他测试框架的开发人员可以很快熟悉它的API并写出自己的测试。</p>

<h2>AVA的配置</h2>

<p>AVA的配置也十分简单，虽然Mocha的配置也不复杂，但相对于后者AVA的配置特点是灵活和集中，你可以用多种方式来配置AVA，就拿配置Babel来说，你可以将Babel配置一起写在<code>package.json</code>里面，也可以将Babel配置写在原来的Babel配置文件中，而在<code>package.json</code>文件里面写上<code>babel: inherit</code>的配置就可以了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;babel&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;presets&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;es2015&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;stage-0&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;react&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;ava&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;babel&quot;</span><span class="p">:</span> <span class="s2">&quot;inherit&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>AVA的断言</h2>

<p>AVA内置了断言库，几个常用的断言方法已经可以满足大部分的断言需求，无需再用其他的断言库。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">.</span><span class="nx">pass</span><span class="p">([</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">fail</span><span class="p">([</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">ok</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">notOk</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="kc">true</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="kc">false</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">not</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">same</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">notSame</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="kr">throws</span><span class="p">(</span><span class="kd">function</span><span class="o">|</span><span class="nx">promise</span><span class="p">,</span> <span class="p">[</span><span class="nx">error</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">]])</span>
</span><span class='line'><span class="p">.</span><span class="nx">notThrows</span><span class="p">(</span><span class="kd">function</span><span class="o">|</span><span class="nx">promise</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">regex</span><span class="p">(</span><span class="nx">contents</span><span class="p">,</span> <span class="nx">regex</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">ifError</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然你也可以集成其他的第三方断言库，比如<a href="http://chaijs.com/">chai</a>，但这样的话你可能就使用不到测试方法中<code>t</code>这个测试对象了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">exppect</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;chai&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">test</span> <span class="nx">from</span> <span class="s1">&#39;ava&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;my first test&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">expect</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]).</span><span class="nx">to</span><span class="p">.</span><span class="nx">deep</span><span class="p">.</span><span class="nx">equal</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>AVA的多种支持</h2>

<ul>
<li>支持Promise</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">somePromise</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="s1">&#39;unicorn&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>支持Async</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="nx">async</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">promiseFn</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="kc">true</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>支持Callback</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">.</span><span class="nx">cb</span><span class="p">(</span><span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">&#39;data.txt&#39;</span><span class="p">,</span> <span class="nx">t</span><span class="p">.</span><span class="nx">end</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在有了async和promise一般不推荐再使用callback，AVA的callback支持是为了方便测试使用了callback的遗留代码。<br/>
<strong>注意，测试callback需要调用<code>t.end</code>方法来结束测试。</strong></p>

<h2>隔离环境</h2>

<p>AVA会为每个测试环境单独启动一个进程来跑测试，这样的好处就保证了每个测试文件的环境不会受到其他测试文件的影响，也要求你写测试的时候更注重原子性，要求测试不依赖其他测试的运行结果或者测试数据，让测试具有独立性。</p>

<p>但并发测试也会带来一些测试方法上的改变，比如说以前串行测试要测试文件的IO操作，可能会临时创建一个文件来进行读写，串行测试时由于每个测试都是顺序进行的，所以只需要一个文件就可以满足需求。但如果是并发测试，一个临时文件可能会被多个测试同时进行读写，这样就会导致冲突，最好的做法是为每个测试都单独创建一个临时文件来做测试。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何快速熟悉新系统]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/02/28/how-to-know-well-new-project-quickly/"/>
    <updated>2016-02-28T17:05:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/02/28/how-to-know-well-new-project-quickly</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/02/new_guy.jpg"></p>

<p>很多工程师都会遇到这样一种情况：被指派到另外一个项目参与开发工作，这个项目已经开发了一段时间了，代码还比较多，作为一个项目的新人，要如何尽快地熟悉项目融入团队呢？</p>

<!--more-->


<p></p>

<h2>对系统进行测试</h2>

<p>作为一名新系统的小白，首先当然是要熟悉系统的功能，还有操作流程。</p>

<ul>
<li>如果有相关的系统说明文档（帮助手册）的话先阅读这些资料，了解系统是如何工作的，有哪些功能点。</li>
<li>了解了系统如何操作以后，对系统的各个功能点进行功能测试，通过手动操作来加深对系统的了解，并帮助系统找到bug。</li>
<li>发现bug后将bug记录起来，比如github（gitlab）上项目里的issue区域，并提醒其他开发人员关注这些问题。</li>
</ul>


<h2>尝试修复bug</h2>

<p>操作了一段时间系统后，可能你对系统功能已经有了一个大概的了解，但实际的代码可能还了解不多，这个时候你可以通过修复一些小bug来达到了解系统的目的。</p>

<ul>
<li>首先找到bug对应的页面或者文件，设置断点，运行程序，查看是什么原因导致发生bug。</li>
<li>搞清楚bug发生的原因后，动手修复这个bug。</li>
<li>修复bug后，如果有测试案例要保证不破坏其他测试案例，如果有测试案例失败了，这可能表示你修复的代码破坏了其他正常的功能。</li>
<li>对其他相关模块进行测试，保证没有其他副作用。</li>
<li>如果可以的话，让其他资深的开发人员给你review一下代码，看看你有没有改出问题，或者是有没有其他更好的解决方案。</li>
</ul>


<h2>为系统添加测试案例</h2>

<p>除了修复bug，还可以为系统添加测试案例。这里的测试案例是指单元测试、集成测试或者一些自动化测试。</p>

<ul>
<li>如果是写单元测试的话，要先读懂对应的功能代码，知道功能代码的逻辑是怎样的，有多少个分支需要写多少个测试案例才能覆盖完整。然后编写测试案例，并保证测试案例运行通过。</li>
<li>如果是集成测试或者自动化测试，先了解要测试的功能的流程是怎样的，是要读取数据库数据做校验，还是可以直接在页面上面校验等。然后编写测试案例，因为自动化测试可能由于网络延迟等原因会让你的测试有时成功有时失败，请记住要避免这种情况，确保测试是百分之百运行成功的。</li>
</ul>


<h2>对代码进行重构</h2>

<p>有时候系统开发久了，就会不知不觉产生一些烂代码，如果没有及时修复，整个系统可能就会慢慢腐烂，然后崩溃，最后维护都维护不了只能重做。所以如果你有一些代码重构的经验的话，可以在熟悉系统的过程中，通过代码重构的方式了解系统的代码。</p>

<ul>
<li>要重构代码，就要先熟悉你要改动的那一块代码，读懂它们并确保你做的重构不会影响到其他功能。</li>
<li>如果要重构的代码之前有单元测试那是最好的，你可以边重构边运行测试，只要不破坏测试就可以了，但如果没有单元测试的话，你最好是先加上单元测试，以保证你的重构不会破坏原来的功能。</li>
<li>这里的重构不是指哪种伤筋动骨的大改动，而是一些代码上的小修改，以让你的代码更具可读性和可维护性，比如变量名或方法名的重命名，相同代码的提取，长方法的分解等。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Mocha + chai + sinon 测试React + Redux的web应用]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/12/19/use-mocha-and-chai-and-sinon-to-test-react-and-redux-webapp/"/>
    <updated>2015-12-19T19:29:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/12/19/use-mocha-and-chai-and-sinon-to-test-react-and-redux-webapp</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-12/front_end_test.png"></p>

<p>今天来介绍一下如何使用Mocha + Chai + Sinon测试基于Redux + React的web应用，以及介绍一些在使用过程中遇到的问题和解决方法。</p>

<!--more-->


<p></p>

<h2>Mocha</h2>

<p><a href="https://mochajs.org">Mocha</a>是一个JS的测试框架，类似于Java中的Junit、Python中的nose。Mocha的使用非常简单，使用<code>describe</code>和<code>it</code>就可以写单元测试，下面是代码示例。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">expect</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;chai&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Array&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;#indexOf()&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should return -1 when the value is not present&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">5</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">0</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Chai</h2>

<p><a href="http://chaijs.com">Chai</a>是一个单元测试的验证框架，它有3种不同形式的校验：expect、should和assert。expect和should的方式让写出来的测试代码更像自然语言，让业务人员也可以看懂，而assert方式是传统单元测试断言的方式，如果以前习惯写Java的单元测试会对这种方式比较熟悉。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-12/chai.png"></p>

<h2>Sinon</h2>

<p><a href="http://sinonjs.org/">Sinon</a>是一个mock框架，类似Java的mockito。它可以对任何对象进行mock，更重要的是它提供了一些对mock对象的校验方法。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 创建mock对象</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">callback</span> <span class="o">=</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">();</span>
</span><span class='line'><span class="c1">// 调用测试方法</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">proxy</span> <span class="o">=</span> <span class="nx">once</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 校验mock对象是否被调用;</span>
</span><span class='line'><span class="nx">assert</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">called</span><span class="p">);</span>
</span><span class='line'><span class="c1">// 校验被调用了多少次</span>
</span><span class='line'><span class="nx">assert</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">calledOnce</span><span class="p">);</span>
</span><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">callCount</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="c1">// 校验被哪个对象调用</span>
</span><span class='line'> <span class="nx">assert</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">calledOn</span><span class="p">(</span><span class="nx">obj</span><span class="p">));</span>
</span><span class='line'><span class="c1">// 校验被调用时传入了哪些参数</span>
</span><span class='line'><span class="nx">assert</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">calledWith</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Redux + React</h2>

<p>React不用介绍了，今年最火的一个前端框架，而<a href="https://github.com/rackt/redux">Redux</a>是一个传递、处理state数据的JS框架，配合React可以很方便的处理staet数据，从而达到通过state控制渲染页面的目的。作者<code>Dan Abramov</code>自己拍了一个Redux的教学视频，里面通过一个个demo演示了如何写react和redux，视频可以见<a href="https://egghead.io/series/getting-started-with-redux">这里</a>。</p>

<p>对于Redux和React的应用，最主要的代码有3个部分，分别是actions，reducers，components。actions是发送一个状态到reducers，reducers根据状态返回修改后的state，components接收到state后刷新页面，所以我们的测试主要针对这3个部分。</p>

<h3>actons测试</h3>

<p>action的代码可能是这样的，接收从component传过来的一个参数，返回一个带有type属性的一个对象。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">export</span> <span class="kd">function</span> <span class="nx">addTodo</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="nx">ADD_TODO</span><span class="p">,</span> <span class="nx">text</span><span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>actions的测试比较简单，就是返回一个对象，测试代码可以这样写：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">expect</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;chai&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">actions</span> <span class="nx">from</span> <span class="s1">&#39;actions/todos&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;todo actions&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;add todo should create ADD_TODO action&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">actions</span><span class="p">.</span><span class="nx">addTodo</span><span class="p">(</span><span class="s1">&#39;Use Redux&#39;</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">deep</span><span class="p">.</span><span class="nx">equal</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;add_todo&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Use Redux&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里使用了chai的expect校验方式，传入一个字符串，验证是否返回正确的对象，这里使用了<code>to.deep.equal</code>这个校验方法，可以校验对象的属性是否相等，而对于number、bool等基本类型的校验可以使用<code>to.be.equal</code>这个校验方法。</p>

<h3>reducers测试</h3>

<p>reducers代码如下，在原来的state基础上加上一个新的todo对象。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">todos</span><span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">initState</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nx">ADD_TODO</span><span class="o">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nx">text</span><span class="o">:</span> <span class="nx">action</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">completed</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">id</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">(),</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>    <span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试代码可以这样写：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;reducers&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;todos&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should add todo correctly&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">todos</span><span class="p">({},</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="nx">ADD_TODO</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="p">});</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">length</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">state</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">text</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">state</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">completed</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试时传入一个空的state对象和一个action对象，验证返回的state是否增加了一个todo对象。</p>

<h3>components测试</h3>

<p>components的测试比较复杂，除了测试render后的页面，还需要测试一些component的DOM方法，比如click，change，doubleclick等。下面是一个Header组件，它有<code>h1</code>和另外一个自定义组件<code>TodoInput</code>，其中还有一个<code>handleSave</code>的自定义方法，所以我们要测试的就主要是render和这个方法。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">PropTypes</span><span class="p">,</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">TodoInput</span> <span class="nx">from</span> <span class="s1">&#39;./TodoInput&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">Header</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">handleSave</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">text</span> <span class="o">&amp;&amp;</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">addTodo</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">header</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;header&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Todo</span> <span class="nx">List</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">TodoInput</span> <span class="nx">newTodo</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s2">&quot;请录入...&quot;</span> <span class="nx">onSave</span><span class="o">=</span><span class="p">{(</span><span class="nx">text</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleSave</span><span class="p">(</span><span class="nx">text</span><span class="p">)}</span><span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/header&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Header</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Header</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试React的component，需要用到react的一个测试组件<a href="https://facebook.github.io/react/docs/test-utils.html">Test Utils</a>，在写测试代码之前，需要先构造组件render的页面，渲染页面的props参数和render页面的对象，这些在后面的测试中非常有用。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">sinon</span> <span class="nx">from</span> <span class="s1">&#39;sinon&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">expect</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;chai&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">TestUtils</span> <span class="nx">from</span> <span class="s1">&#39;react-addons-test-utils&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Header</span> <span class="nx">from</span> <span class="s1">&#39;components/Header&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">TodoInput</span> <span class="nx">from</span> <span class="s1">&#39;components/TodoInput&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">actions</span> <span class="o">=</span> <span class="p">{</span><span class="nx">addTodo</span><span class="o">:</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">()};</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">props</span> <span class="o">=</span> <span class="p">{</span><span class="nx">actions</span><span class="o">:</span> <span class="nx">actions</span><span class="p">};</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">renderer</span> <span class="o">=</span> <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">createRenderer</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">renderer</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Header</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">renderer</span><span class="p">.</span><span class="nx">getRenderOutput</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="nx">props</span><span class="p">,</span> <span class="nx">output</span><span class="p">,</span> <span class="nx">renderer</span><span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>构造完这些对象后，我们先对render方法进行测试。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Header&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should render correctly&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>     <span class="kr">const</span> <span class="p">{</span> <span class="nx">output</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">setup</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">output</span><span class="p">.</span><span class="nx">type</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;header&#39;</span><span class="p">);</span>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">output</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">className</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;header&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="kr">const</span> <span class="p">[</span> <span class="nx">h1</span><span class="p">,</span> <span class="nx">input</span> <span class="p">]</span> <span class="o">=</span> <span class="nx">output</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">h1</span><span class="p">.</span><span class="nx">type</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">);</span>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">h1</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;Todo List&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">type</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">TodoInput</span><span class="p">);</span>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">newTodo</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">placeholder</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;请录入...&#39;</span><span class="p">);</span>
</span><span class='line'>   <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先测试component的第一层——header，验证其type和className，然后通过children获取其下层组件<code>h1</code>和<code>TodoInput</code>，再对这2个组件进行校验。</p>

<p>接着测试TodoInput的onSave方法，它实际调用的是<code>handleSave</code>方法，方法会判断参数text的长度是否为0来决定是否调用actions的addTodo方法。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should call addTodo if length of text is greater than 0&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="p">{</span> <span class="nx">output</span><span class="p">,</span> <span class="nx">props</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">setup</span><span class="p">();</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">output</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">input</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onSave</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">addTodo</span><span class="p">.</span><span class="nx">callCount</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">input</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onSave</span><span class="p">(</span><span class="s1">&#39;Use Redux&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">addTodo</span><span class="p">.</span><span class="nx">callCount</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里使用sinon把action的addTodo方法mock掉了，然后再验证该方法是否有调用。</p>

<h2>React组件使用了CSS文件</h2>

<p>在写React的components时可能会加上自己定义的一些css文件（或者是less和sass等），这在mocha运行测试时会报错，报无法解析css语法的错误。我们可以通过编写自定义的mocha css编译器来解决这个问题。</p>

<figure class='code'><figcaption><span>css-null-compiler.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">noop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="s1">&#39;.styl&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">noop</span><span class="p">;</span>
</span><span class='line'><span class="c1">// you can add whatever you wanna handle</span>
</span><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="s1">&#39;.scss&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">noop</span><span class="p">;</span>
</span><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="s1">&#39;.css&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">noop</span><span class="p">;</span>
</span><span class='line'><span class="c1">// ..etc</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在运行mocha时加上刚写的编译器：<code>mocha /your/test.spec.js --compilers css:css-null-compiler.js</code>。</p>

<h2>webpack使用了alias</h2>

<p>在使用webpack时我们会通过别名（alias）的方法来简化我们import其他文件时的路径，比如原来import时需要这样写：</p>

<figure class='code'><figcaption><span>css-null-compiler.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Header</span> <span class="nx">from</span> <span class="s1">&#39;../../src/components/Header&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用了alias之后可以这样：</p>

<figure class='code'><figcaption><span>css-null-compiler.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Header</span> <span class="nx">from</span> <span class="s1">&#39;src/components/Header&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是这种路径在测试的时候就会报找不到文件路径的错误，因为直接使用Mocha运行测试时并没有设置路径别名。</p>

<p>因此我们需要使用几个工具来解决这个问题，分别是<a href="https://www.npmjs.com/package/mock-require">mock-require</a>和<a href="https://www.npmjs.com/package/proxyquire">proxyquire</a>。</p>

<p>首先在mocha的before方法中通过mock-require来替换别名路径，然后在mocha的beforeEach中用proxyquire来调用被测试的module，具体代码如下：</p>

<figure class='code'><figcaption><span>css-null-compiler.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">proxyquire</span> <span class="nx">from</span> <span class="s1">&#39;proxyquire&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">mockrequire</span> <span class="nx">from</span> <span class="s1">&#39;mock-require&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">before</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// mock the alias path, point to the actual path</span>
</span><span class='line'>  <span class="nx">mockrequire</span><span class="p">(</span><span class="s1">&#39;actions/youractions&#39;</span><span class="p">,</span> <span class="s1">&#39;your/actual/action/path/from/your/test/file&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// or mock with a function</span>
</span><span class='line'>  <span class="nx">mockrequire</span><span class="p">(</span><span class="s1">&#39;actions/youractions&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">actionMethod</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{...}));</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">app</span><span class="p">;</span>
</span><span class='line'><span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span> <span class="o">=</span> <span class="nx">proxyquire</span><span class="p">(</span><span class="s1">&#39;./app&#39;</span><span class="p">,</span> <span class="p">{});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//test code</span>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;xxxx&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>React的组件中使用了DOM变量</h2>

<p>在做components测试时还会遇到一个问题，比如在某些组件中使用了DOM的一些全局变量，比如<code>window</code>，<code>document</code>等，这些只有在浏览器中才会有，而mocha测试我们是在命令行中执行的，并没有浏览器的这些变量。</p>

<p>要解决这个问题有2种方法，一种是使用<a href="http://karma-runner.github.io/0.13/index.html">Karma</a>来做单元测试。Karma是一个测试运行器，它会启动一个浏览器来运行测试，比较适合端到端的页面测试。但单元测试要使用浏览器来运行就显得有点浪费了，而且会影响测试的速度。</p>

<p>所以我们使用第二种方法，使用<a href="https://github.com/tmpvar/jsdom">jsdom</a>来模拟DOM结构，首先我们要创建一个js文件来模拟DOM。</p>

<figure class='code'><figcaption><span>dom.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">jsdom</span> <span class="nx">from</span> <span class="s1">&#39;jsdom&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">mockrequire</span> <span class="nx">from</span> <span class="s1">&#39;mock-require&#39;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// setup the simplest document possible</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">jsdom</span><span class="p">(</span><span class="s1">&#39;&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// get the window object out of the document</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">win</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">defaultView</span><span class="p">;</span>
</span><span class='line'><span class="c1">// set globals for mocha that make access to document and window feel</span>
</span><span class='line'><span class="c1">// natural in the test environment</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nb">document</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">;</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nb">window</span> <span class="o">=</span> <span class="nx">win</span><span class="p">;</span>
</span><span class='line'><span class="c1">// from mocha-jsdom https://github.com/rstacruz/mocha-jsdom/blob/master/index.js#L80</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">propagateToGlobal</span><span class="p">(</span><span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">key</span> <span class="k">in</span> <span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">window</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">key</span><span class="p">))</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">key</span> <span class="k">in</span> <span class="nx">global</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">global</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span> <span class="o">||</span> <span class="kd">function</span> <span class="nx">matchMedia</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">matches</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">addListener</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{},</span>
</span><span class='line'>      <span class="nx">removeListener</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{},</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">propagateToGlobal</span><span class="p">(</span><span class="nx">win</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在<code>mocha.opts</code>文件中加入对这个文件的引用，<code>mocha.opts</code>文件是mocha的配置文件，一般放在test目录下面，通过配置该文件可以在调用mocha命令时少写一些参数。</p>

<figure class='code'><figcaption><span>dom.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">--</span><span class="nx">require</span> <span class="nx">test</span><span class="o">/</span><span class="nx">dom</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="o">--</span><span class="nx">reporter</span> <span class="nx">dot</span>
</span><span class='line'><span class="o">--</span><span class="nx">ui</span> <span class="nx">bdd</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样以后在运行mocha时就会自动加载<code>dom.js</code>文件了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端学习之道]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/12/06/how-to-learn-front-end/"/>
    <updated>2015-12-06T15:29:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/12/06/how-to-learn-front-end</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-12/front-end-learn.png" width="400" height="350"></p>

<p>最近一直在学习前端，今天看到一篇关于前端学习的文章，文中的观点深以为然，于是简单翻译了一下，文章是根据自己理解翻译的，不是直译，在翻译过程中会穿插介绍一些相关的学习资料。<br/>
原文地址见这里：<a href="https://medium.com/@djsmith42/what-web-framework-should-i-learn-a9285925ca1f#.g49ru17as">我应该学习什么web框架</a>。</p>

<!--more-->


<p></p>

<h2>我应该学习什么web框架</h2>

<p>很多人问我这个问题，以前我会反问你问这个问题的动机是什么，是想提高你收割offer的能力，还是对个人学习比较感兴趣？现在我已不再相信这些问题的答案了，因为我已经有了这个问题的“通用”答案。</p>

<p>在即将迈进2016年的今天，明显感觉web开发的技术更新步伐越来越快，现在已经没有一种“框架”可以终身使用，事实上现在已经没有任何一种“东西”（包括语言，工具等）可以使用终身。比如在今年我在工作中就使用了3种构建工具，3种web框架，3种编程语言（译者注：作者经历跟我有点相似，我今年web开发框架用了3种，前端框架用了2种，编程语言用了3种，构建工具用了3种）。</p>

<p><strong> 所以我觉得值得持续做的事情就是不断学习。</strong></p>

<p>新技术不断涌现，推陈出新的速度越来越快，特别是在前端开发这个生态体系里面。我不认为未来会长期依赖某一项技术，即使这门技术现在看来非常热门，甚至是现在火遍全球的<code>React</code>我也觉得不会。</p>

<p>如果你想学习一样以后可以长期使用的技能，那只有一样：提高你学习的能力。那么问题来了，你怎么学习如何学习？</p>

<p>因为我们讨论的是前端开发，所以我推荐最开始的时候应该学习JavaScript这门语言的基础知识，这方面的知识学习得越多越好，不管是书籍，博客，视频，练习还是其他，找到一种适合你的学习方式，然后<strong>深入学习</strong>（译者注：这里我推荐<a href="http://book.douban.com/subject/1232061/">《JavaScript权威指南》</a>和<a href="http://book.douban.com/subject/10546125/">《JavaScript高级程序设计》</a>）。这可能是一个长期的过程，但我推荐你花一个月的时间来专注学习它，这可能是你将来成功的基石。我的意思并不是说让你完全不管工作和家庭中的事情，而是说将除了工作和家庭之外用来学习的时间，全部花在学习JavaScript上。如果你已经是一个JavaScript大师的话可能用不到一个月的时间，但还是值得花些时间来学习，因为有时候你不知道有哪些知识是你不知道的（译者注：所谓‘温故而知新’嘛）。</p>

<p>下一个阶段就是学习前端的另外一样基础知识——<code>DOM</code>了，同样地持续学习直到你觉得自己能熟练地掌握它（译者注：推荐<a href="http://book.douban.com/subject/6038371/">JavaScript DOM编程艺术</a>）。</p>

<p>当你在这方面打好坚实的地基以后，你可能会了解到更多的框架，关于这一点我推荐尽可能地学习更多的框架和工具。我的意思不是说要把所有新框架都用到你的生产环境上，但你应该通过开发一个小应用来学会如何使用它。在学习这些框架的过程中你会发现你的学习速度越来越快，以前可能需要几天，现在只要几个小时就学会了。</p>

<p>这段时间的学习目的不是为了掌握所有你学过的框架，而是为了锻炼你<strong>快速掌握</strong>一种新技术的能力。我并不是说你不能专门研究某一个框架，你可以选择一两个框架来专门研究，然后在你的工作中使用它们，或者是在未来的工作中使用它们（除非它过时了，当然每个框架都会过时的）。这个阶段的练习是为了实践如何学习，持续地学习。</p>

<p>大部分人没办法在工作中保持这种学习，因为这需要占用工作之外的时间。可能在未来的某一天，我们的企业会完善到可以在工作中提供我们学习的时间，因为这种学习最终会让企业受益，但在今天，大部分公司还做不到。所以你只能通过自己的时间来学习，我推荐你通过一个好玩的小项目来学习，比如<a href="https://www.youtube.com/watch?v=m3jMWnrbUZA">watering your lawn</a>，你可以一遍又一遍的使用这个项目来学习新的框架和工具。</p>

<p>如果你把这些都做好了，你不仅仅是一个牛逼的前端工程师，而且你会得到快速进入其他领域的能力。想要进入移动端？没有问题！想要进入后端开发？没有问题！想要进入嵌入式设备？没有问题！你已经很擅长学习新知识了。</p>

<p>总的来说，在你的学习能力上面进行投资比对某一个框架，编程语言或者技术投资更为重要，在持续学习过程中学会如何学习。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitlab CI runner的创建和配置]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/11/30/gitlab-ci-runner-create-and-config/"/>
    <updated>2015-11-30T22:13:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/11/30/gitlab-ci-runner-create-and-config</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-11/gitlab-ci-runner.png" width="400" height="350"></p>

<p><a href="https://gitlab.com/">gitlab</a>不仅是一个代码托管的开源框架，同时它还集成了CI的功能，可以方便地为gitlab上的项目添加CI功能。</p>

<!--more-->


<p></p>

<h2>创建Runner</h2>

<ul>
<li>Runner服务器</li>
</ul>


<p>首先要找一台服务器来创建Runner，因为是要跟你的gitlab服务关联，所以服务器要可以访问你的gitlab服务。</p>

<ul>
<li>安装gitlab-CI-multi-runner</li>
</ul>


<p>gitlab-ci-multi-runner是CI runner的运行程序，这里有多种安装方式（<a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner#installation/">见这里</a>），这里我们使用了第一种：在linux中安装软件。</p>

<h2>gitlab-ci-multi-runner命令介绍</h2>

<p>执行<code>gitlab-ci-multi-runner help</code>可以看到所有命令的简介，在每个命令加<code>--help</code>可以看到更加具体的参数，比如<code>gitlab-ci-multi-runner start --help</code>，命令的执行顺序为：<code>register(注册runner)--&gt;install(安装服务)--&gt;start(运行服务)</code>。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>COMMANDS:
</span><span class='line'>   run          run multi runner service
</span><span class='line'>   register     register a new runner
</span><span class='line'>   install      install service
</span><span class='line'>   uninstall    uninstall service
</span><span class='line'>   start        start service
</span><span class='line'>   stop         stop service
</span><span class='line'>   restart      restart service
</span><span class='line'>   run-single   start single runner
</span><span class='line'>   unregister   unregister specific runner
</span><span class='line'>   verify       verify all registered runners
</span><span class='line'>   <span class="nb">help</span>, h      Shows a list of commands or <span class="nb">help </span><span class="k">for </span>one <span class="nb">command</span>
</span><span class='line'>
</span><span class='line'>GLOBAL OPTIONS:
</span><span class='line'>   --debug                      debug mode <span class="o">[</span><span class="nv">$DEBUG</span><span class="o">]</span>
</span><span class='line'>   --log-level, -l <span class="s2">&quot;info&quot;</span>       Log level <span class="o">(</span>options: debug, info, warn, error, fatal, panic<span class="o">)</span>
</span><span class='line'>   --help, -h                   show <span class="nb">help</span>
</span><span class='line'>   --version, -v                print the version
</span></code></pre></td></tr></table></div></figure>


<h2>gitlab CI配置</h2>

<ul>
<li>打开网址（比如你的gitlab服务地址是：<code>http://gitlab.your.company/</code>，那gitlab CI的地址就是：<code>http://gitlab.your.company/ci</code>），找到想要配置CI的项目，点击后面的按钮<code>Add project to CI</code>，给项目配置CI功能。</li>
<li>进入CI项目，进入<code>Runners</code>标签页面，可以看到CI的url和token，这2个值是待会用命令注册runner时所需要的。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>How to setup a new project specific runner
</span><span class='line'>Install GitLab Runner software. Checkout the GitLab Runner section to install it
</span><span class='line'>Specify following URL during runner setup:
</span><span class='line'>http://gitlab.your.company/ci
</span><span class='line'>Use the following registration token during setup:
</span><span class='line'>7c92da80317b5f5e1fe1c62a1b0767
</span><span class='line'>Start runner!
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在runner的服务器上注册runner，执行命令<code>gitlab-ci-multi-runner register</code>，下面是执行命令后的交互信息。<br/>
<code>PS：如果你用的是docker的执行方式，可以先把对应的docker的image下载下来，不然第一次执行CI会比较慢。</code></li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>root@cloudeye:~# gitlab-ci-multi-runner register
</span><span class='line'>Please enter the gitlab-ci coordinator URL <span class="o">(</span>e.g. https://gitlab.com/ci<span class="o">)</span>: <span class="c">## 输入你CI服务器的地址</span>
</span><span class='line'>http://gitlab.your.company/ci
</span><span class='line'>Please enter the gitlab-ci token <span class="k">for </span>this runner: <span class="c">## 输入你CI项目的token</span>
</span><span class='line'>7c92da80317b5f5e1fe1c62a1b0767
</span><span class='line'>Please enter the gitlab-ci description <span class="k">for </span>this runner: <span class="c">## 描述信息，只是表述不是很重要</span>
</span><span class='line'><span class="o">[</span>your-project<span class="o">]</span>: your-project
</span><span class='line'>Please enter the gitlab-ci tags <span class="k">for </span>this runner <span class="o">(</span>comma separated<span class="o">)</span>: <span class="c">## runner的标签</span>
</span><span class='line'>dev
</span><span class='line'>INFO<span class="o">[</span>0032<span class="o">]</span> fc6e1ee6 Registering runner... succeeded
</span><span class='line'>Please enter the executor: docker-ssh, ssh, shell, parallels, docker: <span class="c">## runner的执行方式，有5种，这里我选择了docker</span>
</span><span class='line'>docker
</span><span class='line'>Please enter the Docker image <span class="o">(</span>eg. ruby:2.1<span class="o">)</span>: <span class="c">## docker镜像</span>
</span><span class='line'>node:0.12.7
</span><span class='line'>If you want to <span class="nb">enable </span>mysql please enter version <span class="o">(</span>X.Y<span class="o">)</span> or enter latest? <span class="c">## 不需要的话直接空格就可以了 </span>
</span><span class='line'>
</span><span class='line'>If you want to <span class="nb">enable </span>postgres please enter version <span class="o">(</span>X.Y<span class="o">)</span> or enter latest? <span class="c">## 不需要的话直接空格就可以了 </span>
</span><span class='line'>
</span><span class='line'>If you want to <span class="nb">enable </span>redis please enter version <span class="o">(</span>X.Y<span class="o">)</span> or enter latest? <span class="c">## 不需要的话直接空格就可以了 </span>
</span><span class='line'>
</span><span class='line'>If you want to <span class="nb">enable </span>mongo please enter version <span class="o">(</span>X.Y<span class="o">)</span> or enter latest? <span class="c">## 不需要的话直接空格就可以了 </span>
</span><span class='line'>
</span><span class='line'>INFO<span class="o">[</span>0043<span class="o">]</span> Runner registered successfully. Feel free to start it, but <span class="k">if </span>it<span class="err">&#39;</span>s running already the config should be automatically reloaded!
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>注册完成后，打开runner的配置文件：<code>vi /etc/gitlab-runner/config.toml</code>，可以看到配置文件里面增加了刚才注册的相关信息，更多参数的信息可以看<a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/configuration/advanced-configuration.md">官方文档</a>。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>root@cloudeye:~# gitlab-ci-multi-runner register
</span><span class='line'><span class="nv">concurrent</span> <span class="o">=</span> 2
</span><span class='line'>
</span><span class='line'><span class="o">[[</span>runners<span class="o">]]</span>
</span><span class='line'>  <span class="nv">url</span> <span class="o">=</span> <span class="s2">&quot;http://gitlab.your.company/ci&quot;</span>
</span><span class='line'>  <span class="nv">token</span> <span class="o">=</span> <span class="s2">&quot;79bf814ac37a52427345b01e135a78&quot;</span>
</span><span class='line'>  <span class="nv">name</span> <span class="o">=</span> <span class="s2">&quot;your-project&quot;</span>
</span><span class='line'>  <span class="nv">executor</span> <span class="o">=</span> <span class="s2">&quot;docker&quot;</span>
</span><span class='line'>  <span class="o">[</span>runners.docker<span class="o">]</span>
</span><span class='line'>    <span class="nv">image</span> <span class="o">=</span> <span class="s2">&quot;node:0.12.7&quot;</span>
</span><span class='line'>    <span class="nv">privileged</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="nb">    </span><span class="nv">disable_cache</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">    </span><span class="nv">volumes</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;/cache:/cache:rw&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装服务，执行命令<code>gitlab-ci-multi-runner install -n "服务名"</code>，后面的服务名是自己定义的名称，用来后面启动命名使用，与其相对的命令是<code>uninstall</code>。</li>
<li>启动服务，执行命令<code>gitlab-ci-multi-runner start -n "服务名"</code>，与其相类似的命令有<code>stop</code>和<code>restart</code>。</li>
<li>验证runner，执行<code>gitlab-ci-multi-runner verify</code>，可以看到runner的运行情况。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>root@cloudeye:~# gitlab-ci-multi-runner verify
</span><span class='line'>INFO<span class="o">[</span>0000<span class="o">]</span> 79bf814a Veryfing runner... is alive
</span><span class='line'>INFO<span class="o">[</span>0000<span class="o">]</span> 207a4b34 Veryfing runner... is alive
</span><span class='line'>INFO<span class="o">[</span>0000<span class="o">]</span> 20f849f7 Veryfing runner... is alive
</span><span class='line'>INFO<span class="o">[</span>0000<span class="o">]</span> 6e07e13a Veryfing runner... is alive
</span><span class='line'>INFO<span class="o">[</span>0000<span class="o">]</span> 23be6deb Veryfing runner... is alive
</span><span class='line'>INFO<span class="o">[</span>0000<span class="o">]</span> 4e348964 Veryfing runner... is alive
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>启动服务后，可以在刚才的CI runners页面看到已经有runner出现了。</li>
</ul>


<h2>gitlab-ci.yaml文件</h2>

<p>配置好了runner，要让CI跑起来，还需要在项目根目录放一个<code>.gitlab-ci.yaml</code>文件，在这个文件里面可以定制CI的任务，下面是简单的示例文件，更多的用法可以看<a href="http://doc.gitlab.com/ci/yaml/README.html">官方文档</a>。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">efore_script</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bundle_install</span>
</span><span class='line'><span class="l-Scalar-Plain">job1</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">execute-script-for-job1</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[保存并恢复你的tmux]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/11/22/save-and-restore-your-tmux/"/>
    <updated>2015-11-22T19:11:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/11/22/save-and-restore-your-tmux</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-11/tmux.jpg" width="400" height="350"></p>

<p><a href="https://tmux.github.io/">Tmux</a>是一个终端下的工具，可以方便地在一个终端窗口下进行分屏，配合vim可以打造任何IDE所需要的窗口模式，让你的生产力大大提升。介绍Tmux的文章网上有很多，所以我就不赘述了，今天介绍Tmux的一款工具，可以方便的保存Tmux的状态并在任何时候进行恢复。</p>

<!--more-->


<p></p>

<h2>为什么需要恢复这个工具</h2>

<p>Tmux虽然功能十分强大，但却不能像IDE一样保存已经定制好的窗口模式，每次电脑重启后，你需要重新划分你的终端屏幕。程序员都是比较懒的，为了不用每次重启机器都要重新设置一遍Tmux，我们找到了<a href="https://github.com/tmux-plugins/tmux-resurrect">tmux-resurrect</a>这个工具。在介绍这个工具之前，我们先介绍tmux的插件管理工具，因为tmux-resurrect推荐使用它来进行安装。</p>

<h2>Tmux插件管理工具</h2>

<p>Tmux也像Vim等其他软件一样可以通过安装插件来扩充其强大的功能，推荐的方式是使用Tmux的插件管理工具<a href="https://github.com/tmux-plugins/tpm">TPM</a>（Tmux Plugin Manager）来安装插件。安装TPM非常简单，参考其github工程的README文档就可以了。</p>

<p>安装了TPM之后，以后要安装Tmux插件就很方便了，首先在<code>~/tmux.conf</code>中写入你要安装的插件名：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">set</span> -g @plugin <span class="s1">&#39;...&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在tmux中按<code>前缀键+大写I</code>就可以提示你进行插件安装了，安装过程如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Already installed <span class="s2">&quot;tpm&quot;</span>                                                                                                                                                         <span class="o">[</span>0/0<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>TMUX environment reloaded.
</span><span class='line'>
</span><span class='line'>Done, press ENTER to <span class="k">continue</span>.
</span></code></pre></td></tr></table></div></figure>


<h2>tmux-resurrect</h2>

<p>安装完TPM后，我们再来安装tmux-resurrect，跟安装其他插件一样，先在<code>~/tmux.conf</code>下录入tmux-resurrect：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">set</span> -g @plugin <span class="s1">&#39;tmux-plugins/tmux-resurrect&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后按<code>前缀键+I</code>就可以了。</p>

<p>tmux-resurrect的使用非常简单，在Tmux窗口中按<code>前缀键+ctrl+s</code>就是保存你的tmux窗口，按<code>前缀键+ctrl+r</code>是恢复你的tmux窗口。以后只要在开机后，进入Tmux，然后用<code>前缀键+ctrl+r</code>就可以一键恢复你之前的tmux窗口了:&ndash;)</p>

<h2>tmux-sessionist</h2>

<p>刚用tmux-resurrect的同学可能还以为它只是保存Tmux当前一个窗口，其实它保存的是Tmux的所有窗口。那要如何切换Tmux的窗口呢？那就要用到另外一个Tmux的插件——<a href="https://github.com/tmux-plugins/tmux-sessionist">tmux-sessionist</a>了，它可以快速的切换Tmux之间的seesion窗口，安装之后通过<code>前缀键+g</code>就可以了，感兴趣的小伙伴赶紧试一试吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD已死之论战]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/11/13/the-points-about-tdd-is-dead/"/>
    <updated>2015-11-13T20:11:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/11/13/the-points-about-tdd-is-dead</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-11/tdd_dead.png"></p>

<p>公司最近组织了一次关于TDD的培训，从而引发了同事关于TDD的一些讨论，这让我想起了一年前DHH（Ruby On Rails之父）那篇有名的文章<a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">《TDD is dead. Long live testing.》</a>，突然想聊一下关于TDD的一些事情。</p>

<!--more-->


<p></p>

<h2>DHH的观点</h2>

<p>如果不想费劲看英文的话，可以看一下台湾同胞翻译的这篇<a href="http://blog.littlelin.info/posts/2014/04/26/tdd-is-dead-long-live-testing">译文</a>，翻译得很好。其实在国内外早就有一些对TDD质疑的看法，比如<a href="http://coolshell.cn/articles/3649.html">《TDD并不是看上去的那么美》</a>，<a href="http://www.cnblogs.com/weidagang2046/archive/2011/02/23/1963277.html">《TDD到底美不美？》</a>等，这些都是对TDD的一些独立思考，是否软件开发过程是一定要使用TDD？使用了TDD是否就一定能让我们的开发变得更好更快？DHH在一开始也是觉得TDD挺好的，但在尝试TDD的过程中发现TDD并不是那么好实施且容易破坏设计，文章中有几个观点我是比较赞同的，下面我逐一说一下。</p>

<h2>TDD不是一个标准</h2>

<p>TDD是极限编程的一个工程实践，通过先写测试用例再写功能代码的方式来完成软件功能的开发，TDD的好处在网上一搜就可以找到很多，但是一些以敏捷布道为职业的人夸大了TDD的作用，他们会说如果不做TDD就不是敏捷开发，甚至以会不会TDD、用不用TDD来衡量是否一个工程师是否优秀。这种做法是不妥的，TDD就像一项技术、一种框架、一类语言一样，工程师有权利选择使用它也可以不使用。</p>

<p>大家在看Martin Flow、Kent Beck、Uncle Bob使用TDD的时候可能会觉得很厉害，但这并不是TDD很厉害，而是那3位大师很厉害，任何一种招式到了高手手里都是一件很厉害的武器，就像金庸小说下的虚竹用少林基本功就可以对抗鸠摩智这样的高手道理一样。所以我们不应该以会不会用不用TDD为标准来衡量工程师，术业有专攻，就算是在现在使用比较少的ASP、.NET开发工程师里面也有很多优秀的人，更不用说世界上最好的语言PHP了，虽然PHP网站的漏洞很多，但就是这些网站让人们对网络安全更加重视了不是吗:)</p>

<h2>系统测试越来越方便</h2>

<p>DHH还说道TDD让开发多了很多像Mock、Stub之类的东西，让代码更加不容易维护，其实可以使用更高粒度的系统测试来代替单元测试。对于这点我也是比较赞同的，在硬件效率越来越高，带宽越来越大，框架越来越轻量级的今天，一些系统级的测试（比如连接网络，读取数据库，访问第三方系统）的测试也会变得跟单元测试一样快。</p>

<p>在TDD中使用Mock技术也是有一些历史原因，在以前的企业级开发中，数据库用的是Oracle，web容器用的是Weblogic等比较重量级的中间件，使用这些中间件一个是速度慢，另外一个是配置困难，如果要在单元测试里面连接数据库启动web服务的话，一个测试用例的编写和运行都要耗费大量时间，所以就有了很多对中间件Mock的技术，让开发人员在测试中使用假冒的中间件服务，已达到快速测试的目的。</p>

<p>但在技术日新月异的这个时代，Nosql，内存数据库，轻量级web容器等慢慢成为开发的主流，而且硬件资源越来越好，网络速度也越来越快，这让一些系统测试可以运行得跟单元测试一样快，而写系统测试最大的好处就是不用写那么多Mock的代码，不需要把代码隔离的那么厉害，测试案例不会太多太杂。</p>

<h2>我自身的TDD体会</h2>

<p>我以前也是比较喜欢TDD的，并尽量要求自己在工作中使用TDD的方式来开发，但现在并没有要求自己一定必须使用TDD的方式开发，在大部分开发工作中我还是先写功能代码，然后再写单元测试。我觉得一个比较适合TDD的场景是修复BUG，当测试人员向你提交一个BUG的使用，你可以先写一个测试用例来让你的BUG重现，这样测试案例运行肯定会失败，然后在修复你的BUG让测试用例通过，然后再重构代码，这样就完成了一个TDD的过程，而且也保证了你的BUG以后不会再出现。</p>

<p>另外我觉得一个好技术的标准还包括其学习曲线要低，让人容易学会，如果花费大量时间还不能学好的技术可能本身就存在一些问题，抑或者是与人们的习惯相差太大而不能被普遍接受。但不管怎样，如果没有使用过TDD的人就说TDD不好也是不对的，“没有实践就没有发言权”，要证明TDD不够好还是先用TDD写写代码吧，或许能在使用TDD的过程中发现一些对自己有用的东西呢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[科学上网利器Shadowsocks]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/11/07/use-shadowsocks-and-vps/"/>
    <updated>2015-11-07T10:31:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/11/07/use-shadowsocks-and-vps</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-11/ss_vultr.jpg" width="400" height="350"></p>

<p>前段时间AppStore出了一款神器<a href="https://itunes.apple.com/cn/app/surge-web-developer-tool-proxy/id1040100637?ls=1&amp;mt=8">Surge</a>，可以让iOS像其他平台使用<a href="https://github.com/shadowsocks/shadowsocks/wiki">Shadowsocks</a>（以下简称ss）一样地轻松科学上网，因为以前都是用买的SSH或VPN科学上网，所以对自建的VPN服务这一块没有太多关注，甚至错过了ss这种成熟的工具。最近试用了过后觉得非常方便，所以在这里记录一下。</p>

<!--more-->


<p></p>

<h2>ss介绍</h2>

<p>简单的说，ss就是帮助你翻过伟大的GFW的一个工具，只要你有一台可以访问国外网站的服务器，你就可以建立自己的VPN服务。它的方案十分完备，有服务端和各种操作系统的客户端，而且还内置了一个路由列表，在访问网站时会自动识别该网站是否需要科学上网，如果需要的则走国外线路，否则走本地线路，非常智能。</p>

<h2>vps选择</h2>

<p>要搭建自己的VPN，首先需要一台国外的服务器。老牌的vps有<a href="http://www.linode.com">Linode</a>和<a href="https://www.digitalocean.com">DigitalOcean</a>，都是不错的选择，后起之秀有<a href="https://www.vultr.com/">vultr</a>，我选择vultr是因为它最近在做活动，每个新用户送50美元，但是50美元需要在2个月内使用完，相当于头2个月可以选择25美元/月的服务器，这种价位的服务器性能是很高的。</p>

<p>vultr50美元的活动链接是这个：<a href="https://www.vultr.com/freetrial/">50美元活动</a>，需点击页面中的<code>TRY VULTR CLOUD SERVERS FREE</code>按钮来注册用户，注册之后会要求绑定银行信用卡，绑定成功后vultr会在信用卡上预约扣款2.5美元，放心这个钱后面会退的。因为vultr需要24小时来审核你的账户，vultr要求每个人只能有一个账号，不允许一个人建立多个账号。</p>

<p>当过了2个月之后，还可以使用其他优惠码来对账户进行充值，优惠码链接请看这里：<a href="http://vultr.youhuima.cc/">vultr优惠码</a>。</p>

<h2>vps使用</h2>

<p>vps就是一台云服务器，创建的时候要选择机房的物理位置、对应的操作系统和服务器配置，vultr最低的配置是5美元/月，对普通的搭搭博客和搭建VPN的需求是绰绰有余了。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-11/vultr_size.png"></p>

<p>搭建完后就可以对机器进行相关的配置了，最常用的就是配置自己的访问电脑<code>SSH KEYS</code>，这样每次ssh登陆就可以不用输入密码了。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-11/vultr_ssh.png"></p>

<h2>ss服务端</h2>

<p>搭建ss服务器的说明请看这里：<a href="https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E">ss服务器搭建</a>，操作比较简单，先安装pip，然后再通过pip安装ss，pip是Python的下载包工具，现在的linux操作系统一般都默认安装了Python。</p>

<p>然后是设置端口、密码和加密算法，建议用后台方式启动服务，我是用配置文件的方式启动ss服务，这种方式可以将配置信息放在文件中维护。</p>

<p>如果连接有问题，可以通过查看日志文件来看是什么问题，文件路径：<code>/var/log/shadowsock.log</code>。</p>

<h2>ss客户端——android</h2>

<p>ss安卓客户端的下载地址在这里：<a href="https://github.com/shadowsocks/shadowsocks-android/releases">ss安卓客户端</a>。App中文名字叫<code>影梭</code>，安装完成后打开配置界面，填写服务器ip，远程端口，本地端口，密码和加密方法，这些都是和服务端的配置文件内容一致的，完了点击连接，然后你的手机就可以科学上网了，赶紧把Fackbook, Twitter这些下下来玩一下吧。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-11/ss_android.jpg" width="200" height="150"></p>

<h2>ss客户端——mac</h2>

<p>ss在Mac上的客户端在这里：<a href="https://github.com/shadowsocks/shadowsocks-iOS/wiki/Shadowsocks-for-OSX-%E5%B8%AE%E5%8A%A9">ssMac客户端</a>。下载后直接安装即可，安装完成后在右上角菜单栏有个箭头的Logo就是ss了。如下图所示，进入ss的Server来配置服务端的信息。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-11/ss_mac.png" width="200" height="150"></p>

<p>配置完成后，点击<code>Turn Shadowsocks On</code>就可以开启ss客户端了，然后在Chrome浏览器中安装SwitchySharp插件，配置信息如下，以后只要选择了这个代理就可以科学上网了。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-11/chrome_proxy.png" width="400" height="350"></p>

<h2>proxifier</h2>

<p>在Mac上安装了ss的客户端之后，虽然可以通过浏览器科学上网了，但是如果想让其他软件，比如邮箱，terminal等也能科学上网的话，就需要将你的ss代理全局化了。这里介绍一个软件<a href="https://www.proxifier.com/">proxifier</a>，它可以很方便地将ss的服务设置为全局服务。</p>

<ul>
<li>首先创建代理</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-11/proxy_create.png" width="400" height="350"></p>

<ul>
<li>然后再创建规则，注意这时要将Mac上的ss客户端ShadowsocksX设为<code>直连</code>，其他应用设为走ss代理。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-11/proxy_rule.png" width="400" height="350"></p>

<ul>
<li>最后观看proxifier的连接信息，就可以看到电脑上应用的网络连接信息了。</li>
</ul>

]]></content>
  </entry>
  
</feed>
