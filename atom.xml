<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2016-02-28T20:50:23+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何快速熟悉新系统]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/02/28/how-to-know-well-new-project-quickly/"/>
    <updated>2016-02-28T17:05:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/02/28/how-to-know-well-new-project-quickly</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/02/new_guy.jpg"></p>

<p>很多工程师都会遇到这样一种情况：被指派到另外一个项目参与开发工作，这个项目已经开发了一段时间了，代码还比较多，作为一个项目的新人，要如何尽快地熟悉项目融入团队呢？</p>

<!--more-->


<p></p>

<h2>对系统进行测试</h2>

<p>作为一名新系统的小白，首先当然是要熟悉系统的功能，还有操作流程。</p>

<ul>
<li>如果有相关的系统说明文档（帮助手册）的话先阅读这些资料，了解系统是如何工作的，有哪些功能点。</li>
<li>了解了系统如何操作以后，对系统的各个功能点进行功能测试，通过手动操作来加深对系统的了解，并帮助系统找到bug。</li>
<li>发现bug后将bug记录起来，比如github（gitlab）上项目里的issue区域，并提醒其他开发人员关注这些问题。</li>
</ul>


<h2>尝试修复bug</h2>

<p>操作了一段时间系统后，可能你对系统功能已经有了一个大概的了解，但实际的代码可能还了解不多，这个时候你可以通过修复一些小bug来达到了解系统的目的。</p>

<ul>
<li>首先找到bug对应的页面或者文件，设置断点，运行程序，查看是什么原因导致发生bug。</li>
<li>搞清楚bug发生的原因后，动手修复这个bug。</li>
<li>修复bug后，如果有测试案例要保证不破坏其他测试案例，如果有测试案例失败了，这可能表示你修复的代码破坏了其他正常的功能。</li>
<li>对其他相关模块进行测试，保证没有其他副作用。</li>
<li>如果可以的话，让其他资深的开发人员给你review一下代码，看看你有没有改出问题，或者是有没有其他更好的解决方案。</li>
</ul>


<h2>为系统添加测试案例</h2>

<p>除了修复bug，还可以为系统添加测试案例。这里的测试案例是指单元测试、集成测试或者一些自动化测试。</p>

<ul>
<li>如果是写单元测试的话，要先读懂对应的功能代码，知道功能代码的逻辑是怎样的，有多少个分支需要写多少个测试案例才能覆盖完整。然后编写测试案例，并保证测试案例运行通过。</li>
<li>如果是集成测试或者自动化测试，先了解要测试的功能的流程是怎样的，是要读取数据库数据做校验，还是可以直接在页面上面校验等。然后编写测试案例，因为自动化测试可能由于网络延迟等原因会让你的测试有时成功有时失败，请记住要避免这种情况，确保测试是百分之百运行成功的。</li>
</ul>


<h2>对代码进行重构</h2>

<p>有时候系统开发久了，就会不知不觉产生一些烂代码，如果没有及时修复，整个系统可能就会慢慢腐烂，然后崩溃，最后维护都维护不了只能重做。所以如果你有一些代码重构的经验的话，可以在熟悉系统的过程中，通过代码重构的方式了解系统的代码。</p>

<ul>
<li>要重构代码，就要先熟悉你要改动的那一块代码，读懂它们并确保你做的重构不会影响到其他功能。</li>
<li>如果要重构的代码之前有单元测试那是最好的，你可以边重构边运行测试，只要不破坏测试就可以了，但如果没有单元测试的话，你最好是先加上单元测试，以保证你的重构不会破坏原来的功能。</li>
<li>这里的重构不是指哪种伤筋动骨的大改动，而是一些代码上的小修改，以让你的代码更具可读性和可维护性，比如变量名或方法名的重命名，相同代码的提取，长方法的分解等。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Mocha + chai + sinon 测试React + Redux的web应用]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/12/19/use-mocha-and-chai-and-sinon-to-test-react-and-redux-webapp/"/>
    <updated>2015-12-19T19:29:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/12/19/use-mocha-and-chai-and-sinon-to-test-react-and-redux-webapp</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-12/front_end_test.png"></p>

<p>今天来介绍一下如何使用Mocha + Chai + Sinon测试基于Redux + React的web应用，以及介绍一些在使用过程中遇到的问题和解决方法。</p>

<!--more-->


<p></p>

<h2>Mocha</h2>

<p><a href="https://mochajs.org">Mocha</a>是一个JS的测试框架，类似于Java中的Junit、Python中的nose。Mocha的使用非常简单，使用<code>describe</code>和<code>it</code>就可以写单元测试，下面是代码示例。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">expect</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;chai&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Array&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;#indexOf()&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should return -1 when the value is not present&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">5</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">0</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Chai</h2>

<p><a href="http://chaijs.com">Chai</a>是一个单元测试的验证框架，它有3种不同形式的校验：expect、should和assert。expect和should的方式让写出来的测试代码更像自然语言，让业务人员也可以看懂，而assert方式是传统单元测试断言的方式，如果以前习惯写Java的单元测试会对这种方式比较熟悉。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-12/chai.png"></p>

<h2>Sinon</h2>

<p><a href="http://sinonjs.org/">Sinon</a>是一个mock框架，类似Java的mockito。它可以对任何对象进行mock，更重要的是它提供了一些对mock对象的校验方法。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 创建mock对象</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">callback</span> <span class="o">=</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">();</span>
</span><span class='line'><span class="c1">// 调用测试方法</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">proxy</span> <span class="o">=</span> <span class="nx">once</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 校验mock对象是否被调用;</span>
</span><span class='line'><span class="nx">assert</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">called</span><span class="p">);</span>
</span><span class='line'><span class="c1">// 校验被调用了多少次</span>
</span><span class='line'><span class="nx">assert</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">calledOnce</span><span class="p">);</span>
</span><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">callCount</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="c1">// 校验被哪个对象调用</span>
</span><span class='line'> <span class="nx">assert</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">calledOn</span><span class="p">(</span><span class="nx">obj</span><span class="p">));</span>
</span><span class='line'><span class="c1">// 校验被调用时传入了哪些参数</span>
</span><span class='line'><span class="nx">assert</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">calledWith</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Redux + React</h2>

<p>React不用介绍了，今年最火的一个前端框架，而<a href="https://github.com/rackt/redux">Redux</a>是一个传递、处理state数据的JS框架，配合React可以很方便的处理staet数据，从而达到通过state控制渲染页面的目的。作者<code>Dan Abramov</code>自己拍了一个Redux的教学视频，里面通过一个个demo演示了如何写react和redux，视频可以见<a href="https://egghead.io/series/getting-started-with-redux">这里</a>。</p>

<p>对于Redux和React的应用，最主要的代码有3个部分，分别是actions，reducers，components。actions是发送一个状态到reducers，reducers根据状态返回修改后的state，components接收到state后刷新页面，所以我们的测试主要针对这3个部分。</p>

<h3>actons测试</h3>

<p>action的代码可能是这样的，接收从component传过来的一个参数，返回一个带有type属性的一个对象。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">export</span> <span class="kd">function</span> <span class="nx">addTodo</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="nx">ADD_TODO</span><span class="p">,</span> <span class="nx">text</span><span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>actions的测试比较简单，就是返回一个对象，测试代码可以这样写：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">expect</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;chai&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">actions</span> <span class="nx">from</span> <span class="s1">&#39;actions/todos&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;todo actions&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;add todo should create ADD_TODO action&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">actions</span><span class="p">.</span><span class="nx">addTodo</span><span class="p">(</span><span class="s1">&#39;Use Redux&#39;</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">deep</span><span class="p">.</span><span class="nx">equal</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;add_todo&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Use Redux&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里使用了chai的expect校验方式，传入一个字符串，验证是否返回正确的对象，这里使用了<code>to.deep.equal</code>这个校验方法，可以校验对象的属性是否相等，而对于number、bool等基本类型的校验可以使用<code>to.be.equal</code>这个校验方法。</p>

<h3>reducers测试</h3>

<p>reducers代码如下，在原来的state基础上加上一个新的todo对象。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">todos</span><span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">initState</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nx">ADD_TODO</span><span class="o">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nx">text</span><span class="o">:</span> <span class="nx">action</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">completed</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">id</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">(),</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>    <span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试代码可以这样写：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;reducers&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;todos&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should add todo correctly&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">todos</span><span class="p">({},</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="nx">ADD_TODO</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="p">});</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">length</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">state</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">text</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">state</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">completed</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试时传入一个空的state对象和一个action对象，验证返回的state是否增加了一个todo对象。</p>

<h3>components测试</h3>

<p>components的测试比较复杂，除了测试render后的页面，还需要测试一些component的DOM方法，比如click，change，doubleclick等。下面是一个Header组件，它有<code>h1</code>和另外一个自定义组件<code>TodoInput</code>，其中还有一个<code>handleSave</code>的自定义方法，所以我们要测试的就主要是render和这个方法。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">PropTypes</span><span class="p">,</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">TodoInput</span> <span class="nx">from</span> <span class="s1">&#39;./TodoInput&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">Header</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">handleSave</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">text</span> <span class="o">&amp;&amp;</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">addTodo</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">header</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;header&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Todo</span> <span class="nx">List</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">TodoInput</span> <span class="nx">newTodo</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s2">&quot;请录入...&quot;</span> <span class="nx">onSave</span><span class="o">=</span><span class="p">{(</span><span class="nx">text</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleSave</span><span class="p">(</span><span class="nx">text</span><span class="p">)}</span><span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/header&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Header</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Header</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试React的component，需要用到react的一个测试组件<a href="https://facebook.github.io/react/docs/test-utils.html">Test Utils</a>，在写测试代码之前，需要先构造组件render的页面，渲染页面的props参数和render页面的对象，这些在后面的测试中非常有用。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">sinon</span> <span class="nx">from</span> <span class="s1">&#39;sinon&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">expect</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;chai&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">TestUtils</span> <span class="nx">from</span> <span class="s1">&#39;react-addons-test-utils&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Header</span> <span class="nx">from</span> <span class="s1">&#39;components/Header&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">TodoInput</span> <span class="nx">from</span> <span class="s1">&#39;components/TodoInput&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">actions</span> <span class="o">=</span> <span class="p">{</span><span class="nx">addTodo</span><span class="o">:</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">()};</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">props</span> <span class="o">=</span> <span class="p">{</span><span class="nx">actions</span><span class="o">:</span> <span class="nx">actions</span><span class="p">};</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">renderer</span> <span class="o">=</span> <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">createRenderer</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">renderer</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Header</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">renderer</span><span class="p">.</span><span class="nx">getRenderOutput</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="nx">props</span><span class="p">,</span> <span class="nx">output</span><span class="p">,</span> <span class="nx">renderer</span><span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>构造完这些对象后，我们先对render方法进行测试。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Header&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should render correctly&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>     <span class="kr">const</span> <span class="p">{</span> <span class="nx">output</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">setup</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">output</span><span class="p">.</span><span class="nx">type</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;header&#39;</span><span class="p">);</span>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">output</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">className</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;header&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="kr">const</span> <span class="p">[</span> <span class="nx">h1</span><span class="p">,</span> <span class="nx">input</span> <span class="p">]</span> <span class="o">=</span> <span class="nx">output</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">h1</span><span class="p">.</span><span class="nx">type</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">);</span>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">h1</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;Todo List&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">type</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">TodoInput</span><span class="p">);</span>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">newTodo</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">placeholder</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;请录入...&#39;</span><span class="p">);</span>
</span><span class='line'>   <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先测试component的第一层——header，验证其type和className，然后通过children获取其下层组件<code>h1</code>和<code>TodoInput</code>，再对这2个组件进行校验。</p>

<p>接着测试TodoInput的onSave方法，它实际调用的是<code>handleSave</code>方法，方法会判断参数text的长度是否为0来决定是否调用actions的addTodo方法。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should call addTodo if length of text is greater than 0&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="p">{</span> <span class="nx">output</span><span class="p">,</span> <span class="nx">props</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">setup</span><span class="p">();</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">output</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">input</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onSave</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">addTodo</span><span class="p">.</span><span class="nx">callCount</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">input</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onSave</span><span class="p">(</span><span class="s1">&#39;Use Redux&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">addTodo</span><span class="p">.</span><span class="nx">callCount</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里使用sinon把action的addTodo方法mock掉了，然后再验证该方法是否有调用。</p>

<h2>React组件使用了CSS文件</h2>

<p>在写React的components时可能会加上自己定义的一些css文件（或者是less和sass等），这在mocha运行测试时会报错，报无法解析css语法的错误。我们可以通过编写自定义的mocha css编译器来解决这个问题。</p>

<figure class='code'><figcaption><span>css-null-compiler.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">noop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="s1">&#39;.styl&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">noop</span><span class="p">;</span>
</span><span class='line'><span class="c1">// you can add whatever you wanna handle</span>
</span><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="s1">&#39;.scss&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">noop</span><span class="p">;</span>
</span><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="s1">&#39;.css&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">noop</span><span class="p">;</span>
</span><span class='line'><span class="c1">// ..etc</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在运行mocha时加上刚写的编译器：<code>mocha /your/test.spec.js --compilers css:css-null-compiler.js</code>。</p>

<h2>webpack使用了alias</h2>

<p>在使用webpack时我们会通过别名（alias）的方法来简化我们import其他文件时的路径，比如原来import时需要这样写：</p>

<figure class='code'><figcaption><span>css-null-compiler.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Header</span> <span class="nx">from</span> <span class="s1">&#39;../../src/components/Header&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用了alias之后可以这样：</p>

<figure class='code'><figcaption><span>css-null-compiler.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Header</span> <span class="nx">from</span> <span class="s1">&#39;src/components/Header&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是这种路径在测试的时候就会报找不到文件路径的错误，因为直接使用Mocha运行测试时并没有设置路径别名。</p>

<p>因此我们需要使用几个工具来解决这个问题，分别是<a href="https://www.npmjs.com/package/mock-require">mock-require</a>和<a href="https://www.npmjs.com/package/proxyquire">proxyquire</a>。</p>

<p>首先在mocha的before方法中通过mock-require来替换别名路径，然后在mocha的beforeEach中用proxyquire来调用被测试的module，具体代码如下：</p>

<figure class='code'><figcaption><span>css-null-compiler.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">proxyquire</span> <span class="nx">from</span> <span class="s1">&#39;proxyquire&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">mockrequire</span> <span class="nx">from</span> <span class="s1">&#39;mock-require&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">before</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// mock the alias path, point to the actual path</span>
</span><span class='line'>  <span class="nx">mockrequire</span><span class="p">(</span><span class="s1">&#39;actions/youractions&#39;</span><span class="p">,</span> <span class="s1">&#39;your/actual/action/path/from/your/test/file&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// or mock with a function</span>
</span><span class='line'>  <span class="nx">mockrequire</span><span class="p">(</span><span class="s1">&#39;actions/youractions&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">actionMethod</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{...}));</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">app</span><span class="p">;</span>
</span><span class='line'><span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span> <span class="o">=</span> <span class="nx">proxyquire</span><span class="p">(</span><span class="s1">&#39;./app&#39;</span><span class="p">,</span> <span class="p">{});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//test code</span>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;xxxx&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>React的组件中使用了DOM变量</h2>

<p>在做components测试时还会遇到一个问题，比如在某些组件中使用了DOM的一些全局变量，比如<code>window</code>，<code>document</code>等，这些只有在浏览器中才会有，而mocha测试我们是在命令行中执行的，并没有浏览器的这些变量。</p>

<p>要解决这个问题有2种方法，一种是使用<a href="http://karma-runner.github.io/0.13/index.html">Karma</a>来做单元测试。Karma是一个测试运行器，它会启动一个浏览器来运行测试，比较适合端到端的页面测试。但单元测试要使用浏览器来运行就显得有点浪费了，而且会影响测试的速度。</p>

<p>所以我们使用第二种方法，使用<a href="https://github.com/tmpvar/jsdom">jsdom</a>来模拟DOM结构，首先我们要创建一个js文件来模拟DOM。</p>

<figure class='code'><figcaption><span>dom.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">jsdom</span> <span class="nx">from</span> <span class="s1">&#39;jsdom&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">mockrequire</span> <span class="nx">from</span> <span class="s1">&#39;mock-require&#39;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// setup the simplest document possible</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">jsdom</span><span class="p">(</span><span class="s1">&#39;&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// get the window object out of the document</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">win</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">defaultView</span><span class="p">;</span>
</span><span class='line'><span class="c1">// set globals for mocha that make access to document and window feel</span>
</span><span class='line'><span class="c1">// natural in the test environment</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nb">document</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">;</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nb">window</span> <span class="o">=</span> <span class="nx">win</span><span class="p">;</span>
</span><span class='line'><span class="c1">// from mocha-jsdom https://github.com/rstacruz/mocha-jsdom/blob/master/index.js#L80</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">propagateToGlobal</span><span class="p">(</span><span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">key</span> <span class="k">in</span> <span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">window</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">key</span><span class="p">))</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">key</span> <span class="k">in</span> <span class="nx">global</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">global</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span> <span class="o">||</span> <span class="kd">function</span> <span class="nx">matchMedia</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">matches</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">addListener</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{},</span>
</span><span class='line'>      <span class="nx">removeListener</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{},</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">propagateToGlobal</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在<code>mocha.opts</code>文件中加入对这个文件的引用，<code>mocha.opts</code>文件是mocha的配置文件，一般放在test目录下面，通过配置该文件可以在调用mocha命令时少写一些参数。</p>

<figure class='code'><figcaption><span>dom.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">--</span><span class="nx">require</span> <span class="nx">test</span><span class="o">/</span><span class="nx">dom</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="o">--</span><span class="nx">reporter</span> <span class="nx">dot</span>
</span><span class='line'><span class="o">--</span><span class="nx">ui</span> <span class="nx">bdd</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样以后在运行mocha时就会自动加载<code>dom.js</code>文件了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端学习之道]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/12/06/how-to-learn-front-end/"/>
    <updated>2015-12-06T15:29:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/12/06/how-to-learn-front-end</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-12/front-end-learn.png" width="400" height="350"></p>

<p>最近一直在学习前端，今天看到一篇关于前端学习的文章，文中的观点深以为然，于是简单翻译了一下，文章是根据自己理解翻译的，不是直译，在翻译过程中会穿插介绍一些相关的学习资料。<br/>
原文地址见这里：<a href="https://medium.com/@djsmith42/what-web-framework-should-i-learn-a9285925ca1f#.g49ru17as">我应该学习什么web框架</a>。</p>

<!--more-->


<p></p>

<h2>我应该学习什么web框架</h2>

<p>很多人问我这个问题，以前我会反问你问这个问题的动机是什么，是想提高你收割offer的能力，还是对个人学习比较感兴趣？现在我已不再相信这些问题的答案了，因为我已经有了这个问题的“通用”答案。</p>

<p>在即将迈进2016年的今天，明显感觉web开发的技术更新步伐越来越快，现在已经没有一种“框架”可以终身使用，事实上现在已经没有任何一种“东西”（包括语言，工具等）可以使用终身。比如在今年我在工作中就使用了3种构建工具，3种web框架，3种编程语言（译者注：作者经历跟我有点相似，我今年web开发框架用了3种，前端框架用了2种，编程语言用了3种，构建工具用了3种）。</p>

<p><strong> 所以我觉得值得持续做的事情就是不断学习。</strong></p>

<p>新技术不断涌现，推陈出新的速度越来越快，特别是在前端开发这个生态体系里面。我不认为未来会长期依赖某一项技术，即使这门技术现在看来非常热门，甚至是现在火遍全球的<code>React</code>我也觉得不会。</p>

<p>如果你想学习一样以后可以长期使用的技能，那只有一样：提高你学习的能力。那么问题来了，你怎么学习如何学习？</p>

<p>因为我们讨论的是前端开发，所以我推荐最开始的时候应该学习JavaScript这门语言的基础知识，这方面的知识学习得越多越好，不管是书籍，博客，视频，练习还是其他，找到一种适合你的学习方式，然后<strong>深入学习</strong>（译者注：这里我推荐<a href="http://book.douban.com/subject/1232061/">《JavaScript权威指南》</a>和<a href="http://book.douban.com/subject/10546125/">《JavaScript高级程序设计》</a>）。这可能是一个长期的过程，但我推荐你花一个月的时间来专注学习它，这可能是你将来成功的基石。我的意思并不是说让你完全不管工作和家庭中的事情，而是说将除了工作和家庭之外用来学习的时间，全部花在学习JavaScript上。如果你已经是一个JavaScript大师的话可能用不到一个月的时间，但还是值得花些时间来学习，因为有时候你不知道有哪些知识是你不知道的（译者注：所谓‘温故而知新’嘛）。</p>

<p>下一个阶段就是学习前端的另外一样基础知识——<code>DOM</code>了，同样地持续学习直到你觉得自己能熟练地掌握它（译者注：推荐<a href="http://book.douban.com/subject/6038371/">JavaScript DOM编程艺术</a>）。</p>

<p>当你在这方面打好坚实的地基以后，你可能会了解到更多的框架，关于这一点我推荐尽可能地学习更多的框架和工具。我的意思不是说要把所有新框架都用到你的生产环境上，但你应该通过开发一个小应用来学会如何使用它。在学习这些框架的过程中你会发现你的学习速度越来越快，以前可能需要几天，现在只要几个小时就学会了。</p>

<p>这段时间的学习目的不是为了掌握所有你学过的框架，而是为了锻炼你<strong>快速掌握</strong>一种新技术的能力。我并不是说你不能专门研究某一个框架，你可以选择一两个框架来专门研究，然后在你的工作中使用它们，或者是在未来的工作中使用它们（除非它过时了，当然每个框架都会过时的）。这个阶段的练习是为了实践如何学习，持续地学习。</p>

<p>大部分人没办法在工作中保持这种学习，因为这需要占用工作之外的时间。可能在未来的某一天，我们的企业会完善到可以在工作中提供我们学习的时间，因为这种学习最终会让企业受益，但在今天，大部分公司还做不到。所以你只能通过自己的时间来学习，我推荐你通过一个好玩的小项目来学习，比如<a href="https://www.youtube.com/watch?v=m3jMWnrbUZA">watering your lawn</a>，你可以一遍又一遍的使用这个项目来学习新的框架和工具。</p>

<p>如果你把这些都做好了，你不仅仅是一个牛逼的前端工程师，而且你会得到快速进入其他领域的能力。想要进入移动端？没有问题！想要进入后端开发？没有问题！想要进入嵌入式设备？没有问题！你已经很擅长学习新知识了。</p>

<p>总的来说，在你的学习能力上面进行投资比对某一个框架，编程语言或者技术投资更为重要，在持续学习过程中学会如何学习。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitlab CI runner的创建和配置]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/11/30/gitlab-ci-runner-create-and-config/"/>
    <updated>2015-11-30T22:13:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/11/30/gitlab-ci-runner-create-and-config</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-11/gitlab-ci-runner.png" width="400" height="350"></p>

<p><a href="https://gitlab.com/">gitlab</a>不仅是一个代码托管的开源框架，同时它还集成了CI的功能，可以方便地为gitlab上的项目添加CI功能。</p>

<!--more-->


<p></p>

<h2>创建Runner</h2>

<ul>
<li>Runner服务器</li>
</ul>


<p>首先要找一台服务器来创建Runner，因为是要跟你的gitlab服务关联，所以服务器要可以访问你的gitlab服务。</p>

<ul>
<li>安装gitlab-CI-multi-runner</li>
</ul>


<p>gitlab-ci-multi-runner是CI runner的运行程序，这里有多种安装方式（<a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner#installation/">见这里</a>），这里我们使用了第一种：在linux中安装软件。</p>

<h2>gitlab-ci-multi-runner命令介绍</h2>

<p>执行<code>gitlab-ci-multi-runner help</code>可以看到所有命令的简介，在每个命令加<code>--help</code>可以看到更加具体的参数，比如<code>gitlab-ci-multi-runner start --help</code>，命令的执行顺序为：<code>register(注册runner)--&gt;install(安装服务)--&gt;start(运行服务)</code>。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>COMMANDS:
</span><span class='line'>   run          run multi runner service
</span><span class='line'>   register     register a new runner
</span><span class='line'>   install      install service
</span><span class='line'>   uninstall    uninstall service
</span><span class='line'>   start        start service
</span><span class='line'>   stop         stop service
</span><span class='line'>   restart      restart service
</span><span class='line'>   run-single   start single runner
</span><span class='line'>   unregister   unregister specific runner
</span><span class='line'>   verify       verify all registered runners
</span><span class='line'>   <span class="nb">help</span>, h      Shows a list of commands or <span class="nb">help </span><span class="k">for </span>one <span class="nb">command</span>
</span><span class='line'>
</span><span class='line'>GLOBAL OPTIONS:
</span><span class='line'>   --debug                      debug mode <span class="o">[</span><span class="nv">$DEBUG</span><span class="o">]</span>
</span><span class='line'>   --log-level, -l <span class="s2">&quot;info&quot;</span>       Log level <span class="o">(</span>options: debug, info, warn, error, fatal, panic<span class="o">)</span>
</span><span class='line'>   --help, -h                   show <span class="nb">help</span>
</span><span class='line'>   --version, -v                print the version
</span></code></pre></td></tr></table></div></figure>


<h2>gitlab CI配置</h2>

<ul>
<li>打开网址（比如你的gitlab服务地址是：<code>http://gitlab.your.company/</code>，那gitlab CI的地址就是：<code>http://gitlab.your.company/ci</code>），找到想要配置CI的项目，点击后面的按钮<code>Add project to CI</code>，给项目配置CI功能。</li>
<li>进入CI项目，进入<code>Runners</code>标签页面，可以看到CI的url和token，这2个值是待会用命令注册runner时所需要的。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>How to setup a new project specific runner
</span><span class='line'>Install GitLab Runner software. Checkout the GitLab Runner section to install it
</span><span class='line'>Specify following URL during runner setup:
</span><span class='line'>http://gitlab.your.company/ci
</span><span class='line'>Use the following registration token during setup:
</span><span class='line'>7c92da80317b5f5e1fe1c62a1b0767
</span><span class='line'>Start runner!
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在runner的服务器上注册runner，执行命令<code>gitlab-ci-multi-runner register</code>，下面是执行命令后的交互信息。<br/>
<code>PS：如果你用的是docker的执行方式，可以先把对应的docker的image下载下来，不然第一次执行CI会比较慢。</code></li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>root@cloudeye:~# gitlab-ci-multi-runner register
</span><span class='line'>Please enter the gitlab-ci coordinator URL <span class="o">(</span>e.g. https://gitlab.com/ci<span class="o">)</span>: <span class="c">## 输入你CI服务器的地址</span>
</span><span class='line'>http://gitlab.your.company/ci
</span><span class='line'>Please enter the gitlab-ci token <span class="k">for </span>this runner: <span class="c">## 输入你CI项目的token</span>
</span><span class='line'>7c92da80317b5f5e1fe1c62a1b0767
</span><span class='line'>Please enter the gitlab-ci description <span class="k">for </span>this runner: <span class="c">## 描述信息，只是表述不是很重要</span>
</span><span class='line'><span class="o">[</span>your-project<span class="o">]</span>: your-project
</span><span class='line'>Please enter the gitlab-ci tags <span class="k">for </span>this runner <span class="o">(</span>comma separated<span class="o">)</span>: <span class="c">## runner的标签</span>
</span><span class='line'>dev
</span><span class='line'>INFO<span class="o">[</span>0032<span class="o">]</span> fc6e1ee6 Registering runner... succeeded
</span><span class='line'>Please enter the executor: docker-ssh, ssh, shell, parallels, docker: <span class="c">## runner的执行方式，有5种，这里我选择了docker</span>
</span><span class='line'>docker
</span><span class='line'>Please enter the Docker image <span class="o">(</span>eg. ruby:2.1<span class="o">)</span>: <span class="c">## docker镜像</span>
</span><span class='line'>node:0.12.7
</span><span class='line'>If you want to <span class="nb">enable </span>mysql please enter version <span class="o">(</span>X.Y<span class="o">)</span> or enter latest? <span class="c">## 不需要的话直接空格就可以了 </span>
</span><span class='line'>
</span><span class='line'>If you want to <span class="nb">enable </span>postgres please enter version <span class="o">(</span>X.Y<span class="o">)</span> or enter latest? <span class="c">## 不需要的话直接空格就可以了 </span>
</span><span class='line'>
</span><span class='line'>If you want to <span class="nb">enable </span>redis please enter version <span class="o">(</span>X.Y<span class="o">)</span> or enter latest? <span class="c">## 不需要的话直接空格就可以了 </span>
</span><span class='line'>
</span><span class='line'>If you want to <span class="nb">enable </span>mongo please enter version <span class="o">(</span>X.Y<span class="o">)</span> or enter latest? <span class="c">## 不需要的话直接空格就可以了 </span>
</span><span class='line'>
</span><span class='line'>INFO<span class="o">[</span>0043<span class="o">]</span> Runner registered successfully. Feel free to start it, but <span class="k">if </span>it<span class="err">&#39;</span>s running already the config should be automatically reloaded!
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>注册完成后，打开runner的配置文件：<code>vi /etc/gitlab-runner/config.toml</code>，可以看到配置文件里面增加了刚才注册的相关信息，更多参数的信息可以看<a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/configuration/advanced-configuration.md">官方文档</a>。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>root@cloudeye:~# gitlab-ci-multi-runner register
</span><span class='line'><span class="nv">concurrent</span> <span class="o">=</span> 2
</span><span class='line'>
</span><span class='line'><span class="o">[[</span>runners<span class="o">]]</span>
</span><span class='line'>  <span class="nv">url</span> <span class="o">=</span> <span class="s2">&quot;http://gitlab.your.company/ci&quot;</span>
</span><span class='line'>  <span class="nv">token</span> <span class="o">=</span> <span class="s2">&quot;79bf814ac37a52427345b01e135a78&quot;</span>
</span><span class='line'>  <span class="nv">name</span> <span class="o">=</span> <span class="s2">&quot;your-project&quot;</span>
</span><span class='line'>  <span class="nv">executor</span> <span class="o">=</span> <span class="s2">&quot;docker&quot;</span>
</span><span class='line'>  <span class="o">[</span>runners.docker<span class="o">]</span>
</span><span class='line'>    <span class="nv">image</span> <span class="o">=</span> <span class="s2">&quot;node:0.12.7&quot;</span>
</span><span class='line'>    <span class="nv">privileged</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="nb">    </span><span class="nv">disable_cache</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">    </span><span class="nv">volumes</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;/cache:/cache:rw&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装服务，执行命令<code>gitlab-ci-multi-runner install -n "服务名"</code>，后面的服务名是自己定义的名称，用来后面启动命名使用，与其相对的命令是<code>uninstall</code>。</li>
<li>启动服务，执行命令<code>gitlab-ci-multi-runner start -n "服务名"</code>，与其相类似的命令有<code>stop</code>和<code>restart</code>。</li>
<li>验证runner，执行<code>gitlab-ci-multi-runner verify</code>，可以看到runner的运行情况。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>root@cloudeye:~# gitlab-ci-multi-runner verify
</span><span class='line'>INFO<span class="o">[</span>0000<span class="o">]</span> 79bf814a Veryfing runner... is alive
</span><span class='line'>INFO<span class="o">[</span>0000<span class="o">]</span> 207a4b34 Veryfing runner... is alive
</span><span class='line'>INFO<span class="o">[</span>0000<span class="o">]</span> 20f849f7 Veryfing runner... is alive
</span><span class='line'>INFO<span class="o">[</span>0000<span class="o">]</span> 6e07e13a Veryfing runner... is alive
</span><span class='line'>INFO<span class="o">[</span>0000<span class="o">]</span> 23be6deb Veryfing runner... is alive
</span><span class='line'>INFO<span class="o">[</span>0000<span class="o">]</span> 4e348964 Veryfing runner... is alive
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>启动服务后，可以在刚才的CI runners页面看到已经有runner出现了。</li>
</ul>


<h2>gitlab-ci.yaml文件</h2>

<p>配置好了runner，要让CI跑起来，还需要在项目根目录放一个<code>.gitlab-ci.yaml</code>文件，在这个文件里面可以定制CI的任务，下面是简单的示例文件，更多的用法可以看<a href="http://doc.gitlab.com/ci/yaml/README.html">官方文档</a>。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">efore_script</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bundle_install</span>
</span><span class='line'><span class="l-Scalar-Plain">job1</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">execute-script-for-job1</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[保存并恢复你的tmux]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/11/22/save-and-restore-your-tmux/"/>
    <updated>2015-11-22T19:11:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/11/22/save-and-restore-your-tmux</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-11/tmux.jpg" width="400" height="350"></p>

<p><a href="https://tmux.github.io/">Tmux</a>是一个终端下的工具，可以方便地在一个终端窗口下进行分屏，配合vim可以打造任何IDE所需要的窗口模式，让你的生产力大大提升。介绍Tmux的文章网上有很多，所以我就不赘述了，今天介绍Tmux的一款工具，可以方便的保存Tmux的状态并在任何时候进行恢复。</p>

<!--more-->


<p></p>

<h2>为什么需要恢复这个工具</h2>

<p>Tmux虽然功能十分强大，但却不能像IDE一样保存已经定制好的窗口模式，每次电脑重启后，你需要重新划分你的终端屏幕。程序员都是比较懒的，为了不用每次重启机器都要重新设置一遍Tmux，我们找到了<a href="https://github.com/tmux-plugins/tmux-resurrect">tmux-resurrect</a>这个工具。在介绍这个工具之前，我们先介绍tmux的插件管理工具，因为tmux-resurrect推荐使用它来进行安装。</p>

<h2>Tmux插件管理工具</h2>

<p>Tmux也像Vim等其他软件一样可以通过安装插件来扩充其强大的功能，推荐的方式是使用Tmux的插件管理工具<a href="https://github.com/tmux-plugins/tpm">TPM</a>（Tmux Plugin Manager）来安装插件。安装TPM非常简单，参考其github工程的README文档就可以了。</p>

<p>安装了TPM之后，以后要安装Tmux插件就很方便了，首先在<code>~/tmux.conf</code>中写入你要安装的插件名：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">set</span> -g @plugin <span class="s1">&#39;...&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在tmux中按<code>前缀键+大写I</code>就可以提示你进行插件安装了，安装过程如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Already installed <span class="s2">&quot;tpm&quot;</span>                                                                                                                                                         <span class="o">[</span>0/0<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>TMUX environment reloaded.
</span><span class='line'>
</span><span class='line'>Done, press ENTER to <span class="k">continue</span>.
</span></code></pre></td></tr></table></div></figure>


<h2>tmux-resurrect</h2>

<p>安装完TPM后，我们再来安装tmux-resurrect，跟安装其他插件一样，先在<code>~/tmux.conf</code>下录入tmux-resurrect：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">set</span> -g @plugin <span class="s1">&#39;tmux-plugins/tmux-resurrect&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后按<code>前缀键+I</code>就可以了。</p>

<p>tmux-resurrect的使用非常简单，在Tmux窗口中按<code>前缀键+ctrl+s</code>就是保存你的tmux窗口，按<code>前缀键+ctrl+r</code>是恢复你的tmux窗口。以后只要在开机后，进入Tmux，然后用<code>前缀键+ctrl+r</code>就可以一键恢复你之前的tmux窗口了:&ndash;)</p>

<h2>tmux-sessionist</h2>

<p>刚用tmux-resurrect的同学可能还以为它只是保存Tmux当前一个窗口，其实它保存的是Tmux的所有窗口。那要如何切换Tmux的窗口呢？那就要用到另外一个Tmux的插件——<a href="https://github.com/tmux-plugins/tmux-sessionist">tmux-sessionist</a>了，它可以快速的切换Tmux之间的seesion窗口，安装之后通过<code>前缀键+g</code>就可以了，感兴趣的小伙伴赶紧试一试吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD已死之论战]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/11/13/the-points-about-tdd-is-dead/"/>
    <updated>2015-11-13T20:11:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/11/13/the-points-about-tdd-is-dead</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-11/tdd_dead.png"></p>

<p>公司最近组织了一次关于TDD的培训，从而引发了同事关于TDD的一些讨论，这让我想起了一年前DHH（Ruby On Rails之父）那篇有名的文章<a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">《TDD is dead. Long live testing.》</a>，突然想聊一下关于TDD的一些事情。</p>

<!--more-->


<p></p>

<h2>DHH的观点</h2>

<p>如果不想费劲看英文的话，可以看一下台湾同胞翻译的这篇<a href="http://blog.littlelin.info/posts/2014/04/26/tdd-is-dead-long-live-testing">译文</a>，翻译得很好。其实在国内外早就有一些对TDD质疑的看法，比如<a href="http://coolshell.cn/articles/3649.html">《TDD并不是看上去的那么美》</a>，<a href="http://www.cnblogs.com/weidagang2046/archive/2011/02/23/1963277.html">《TDD到底美不美？》</a>等，这些都是对TDD的一些独立思考，是否软件开发过程是一定要使用TDD？使用了TDD是否就一定能让我们的开发变得更好更快？DHH在一开始也是觉得TDD挺好的，但在尝试TDD的过程中发现TDD并不是那么好实施且容易破坏设计，文章中有几个观点我是比较赞同的，下面我逐一说一下。</p>

<h2>TDD不是一个标准</h2>

<p>TDD是极限编程的一个工程实践，通过先写测试用例再写功能代码的方式来完成软件功能的开发，TDD的好处在网上一搜就可以找到很多，但是一些以敏捷布道为职业的人夸大了TDD的作用，他们会说如果不做TDD就不是敏捷开发，甚至以会不会TDD、用不用TDD来衡量是否一个工程师是否优秀。这种做法是不妥的，TDD就像一项技术、一种框架、一类语言一样，工程师有权利选择使用它也可以不使用。</p>

<p>大家在看Martin Flow、Kent Beck、Uncle Bob使用TDD的时候可能会觉得很厉害，但这并不是TDD很厉害，而是那3位大师很厉害，任何一种招式到了高手手里都是一件很厉害的武器，就像金庸小说下的虚竹用少林基本功就可以对抗鸠摩智这样的高手道理一样。所以我们不应该以会不会用不用TDD为标准来衡量工程师，术业有专攻，就算是在现在使用比较少的ASP、.NET开发工程师里面也有很多优秀的人，更不用说世界上最好的语言PHP了，虽然PHP网站的漏洞很多，但就是这些网站让人们对网络安全更加重视了不是吗:)</p>

<h2>系统测试越来越方便</h2>

<p>DHH还说道TDD让开发多了很多像Mock、Stub之类的东西，让代码更加不容易维护，其实可以使用更高粒度的系统测试来代替单元测试。对于这点我也是比较赞同的，在硬件效率越来越高，带宽越来越大，框架越来越轻量级的今天，一些系统级的测试（比如连接网络，读取数据库，访问第三方系统）的测试也会变得跟单元测试一样快。</p>

<p>在TDD中使用Mock技术也是有一些历史原因，在以前的企业级开发中，数据库用的是Oracle，web容器用的是Weblogic等比较重量级的中间件，使用这些中间件一个是速度慢，另外一个是配置困难，如果要在单元测试里面连接数据库启动web服务的话，一个测试用例的编写和运行都要耗费大量时间，所以就有了很多对中间件Mock的技术，让开发人员在测试中使用假冒的中间件服务，已达到快速测试的目的。</p>

<p>但在技术日新月异的这个时代，Nosql，内存数据库，轻量级web容器等慢慢成为开发的主流，而且硬件资源越来越好，网络速度也越来越快，这让一些系统测试可以运行得跟单元测试一样快，而写系统测试最大的好处就是不用写那么多Mock的代码，不需要把代码隔离的那么厉害，测试案例不会太多太杂。</p>

<h2>我自身的TDD体会</h2>

<p>我以前也是比较喜欢TDD的，并尽量要求自己在工作中使用TDD的方式来开发，但现在并没有要求自己一定必须使用TDD的方式开发，在大部分开发工作中我还是先写功能代码，然后再写单元测试。我觉得一个比较适合TDD的场景是修复BUG，当测试人员向你提交一个BUG的使用，你可以先写一个测试用例来让你的BUG重现，这样测试案例运行肯定会失败，然后在修复你的BUG让测试用例通过，然后再重构代码，这样就完成了一个TDD的过程，而且也保证了你的BUG以后不会再出现。</p>

<p>另外我觉得一个好技术的标准还包括其学习曲线要低，让人容易学会，如果花费大量时间还不能学好的技术可能本身就存在一些问题，抑或者是与人们的习惯相差太大而不能被普遍接受。但不管怎样，如果没有使用过TDD的人就说TDD不好也是不对的，“没有实践就没有发言权”，要证明TDD不够好还是先用TDD写写代码吧，或许能在使用TDD的过程中发现一些对自己有用的东西呢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[科学上网利器Shadowsocks]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/11/07/use-shadowsocks-and-vps/"/>
    <updated>2015-11-07T10:31:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/11/07/use-shadowsocks-and-vps</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-11/ss_vultr.jpg" width="400" height="350"></p>

<p>前段时间AppStore出了一款神器<a href="https://itunes.apple.com/cn/app/surge-web-developer-tool-proxy/id1040100637?ls=1&amp;mt=8">Surge</a>，可以让iOS像其他平台使用<a href="https://github.com/shadowsocks/shadowsocks/wiki">Shadowsocks</a>（以下简称ss）一样地轻松科学上网，因为以前都是用买的SSH或VPN科学上网，所以对自建的VPN服务这一块没有太多关注，甚至错过了ss这种成熟的工具。最近试用了过后觉得非常方便，所以在这里记录一下。</p>

<!--more-->


<p></p>

<h2>ss介绍</h2>

<p>简单的说，ss就是帮助你翻过伟大的GFW的一个工具，只要你有一台可以访问国外网站的服务器，你就可以建立自己的VPN服务。它的方案十分完备，有服务端和各种操作系统的客户端，而且还内置了一个路由列表，在访问网站时会自动识别该网站是否需要科学上网，如果需要的则走国外线路，否则走本地线路，非常智能。</p>

<h2>vps选择</h2>

<p>要搭建自己的VPN，首先需要一台国外的服务器。老牌的vps有<a href="http://www.linode.com">Linode</a>和<a href="https://www.digitalocean.com">DigitalOcean</a>，都是不错的选择，后起之秀有<a href="https://www.vultr.com/">vultr</a>，我选择vultr是因为它最近在做活动，每个新用户送50美元，但是50美元需要在2个月内使用完，相当于头2个月可以选择25美元/月的服务器，这种价位的服务器性能是很高的。</p>

<p>vultr50美元的活动链接是这个：<a href="https://www.vultr.com/freetrial/">50美元活动</a>，需点击页面中的<code>TRY VULTR CLOUD SERVERS FREE</code>按钮来注册用户，注册之后会要求绑定银行信用卡，绑定成功后vultr会在信用卡上预约扣款2.5美元，放心这个钱后面会退的。因为vultr需要24小时来审核你的账户，vultr要求每个人只能有一个账号，不允许一个人建立多个账号。</p>

<p>当过了2个月之后，还可以使用其他优惠码来对账户进行充值，优惠码链接请看这里：<a href="http://vultr.youhuima.cc/">vultr优惠码</a>。</p>

<h2>vps使用</h2>

<p>vps就是一台云服务器，创建的时候要选择机房的物理位置、对应的操作系统和服务器配置，vultr最低的配置是5美元/月，对普通的搭搭博客和搭建VPN的需求是绰绰有余了。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-11/vultr_size.png"></p>

<p>搭建完后就可以对机器进行相关的配置了，最常用的就是配置自己的访问电脑<code>SSH KEYS</code>，这样每次ssh登陆就可以不用输入密码了。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-11/vultr_ssh.png"></p>

<h2>ss服务端</h2>

<p>搭建ss服务器的说明请看这里：<a href="https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E">ss服务器搭建</a>，操作比较简单，先安装pip，然后再通过pip安装ss，pip是Python的下载包工具，现在的linux操作系统一般都默认安装了Python。</p>

<p>然后是设置端口、密码和加密算法，建议用后台方式启动服务，我是用配置文件的方式启动ss服务，这种方式可以将配置信息放在文件中维护。</p>

<p>如果连接有问题，可以通过查看日志文件来看是什么问题，文件路径：<code>/var/log/shadowsock.log</code>。</p>

<h2>ss客户端——android</h2>

<p>ss安卓客户端的下载地址在这里：<a href="https://github.com/shadowsocks/shadowsocks-android/releases">ss安卓客户端</a>。App中文名字叫<code>影梭</code>，安装完成后打开配置界面，填写服务器ip，远程端口，本地端口，密码和加密方法，这些都是和服务端的配置文件内容一致的，完了点击连接，然后你的手机就可以科学上网了，赶紧把Fackbook, Twitter这些下下来玩一下吧。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-11/ss_android.jpg" width="200" height="150"></p>

<h2>ss客户端——mac</h2>

<p>ss在Mac上的客户端在这里：<a href="https://github.com/shadowsocks/shadowsocks-iOS/wiki/Shadowsocks-for-OSX-%E5%B8%AE%E5%8A%A9">ssMac客户端</a>。下载后直接安装即可，安装完成后在右上角菜单栏有个箭头的Logo就是ss了。如下图所示，进入ss的Server来配置服务端的信息。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-11/ss_mac.png" width="200" height="150"></p>

<p>配置完成后，点击<code>Turn Shadowsocks On</code>就可以开启ss客户端了，然后在Chrome浏览器中安装SwitchySharp插件，配置信息如下，以后只要选择了这个代理就可以科学上网了。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-11/chrome_proxy.png" width="400" height="350"></p>

<h2>proxifier</h2>

<p>在Mac上安装了ss的客户端之后，虽然可以通过浏览器科学上网了，但是如果想让其他软件，比如邮箱，terminal等也能科学上网的话，就需要将你的ss代理全局化了。这里介绍一个软件<a href="https://www.proxifier.com/">proxifier</a>，它可以很方便地将ss的服务设置为全局服务。</p>

<ul>
<li>首先创建代理</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-11/proxy_create.png" width="400" height="350"></p>

<ul>
<li>然后再创建规则，注意这时要将Mac上的ss客户端ShadowsocksX设为<code>直连</code>，其他应用设为走ss代理。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-11/proxy_rule.png" width="400" height="350"></p>

<ul>
<li>最后观看proxifier的连接信息，就可以看到电脑上应用的网络连接信息了。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Alfred和一些有用的workflow介绍]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/10/25/alfred-intro-and-good-workflow/"/>
    <updated>2015-10-25T13:36:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/10/25/alfred-intro-and-good-workflow</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred.png"></p>

<p>最近发现了一个超级好用的工具——<a href="https://www.alfredapp.com/">Alfred</a>，可以通过快捷方式找到任何你MAC上的任何应用、文件，甚至可以自定义工作流的方式找到或者打开你想要的资源，后面会推荐几个有用的workflow。</p>

<!--more-->


<p></p>

<h2>Alfred vs. Spotlight</h2>

<p>有人可能会说Mac从Yosemite版本开始就有了类似Alfred的自带工具Spotlight，但仔细使用后会发现Spotlight的功能只是Alfred免费版的一小部分而已，如果使用Alfred付费的Powerpack后功能更加强大，可以配合各种软件快速定位你想要的资源。</p>

<p>所以如果你使用Alfred的话，完全可以替代MAC系统默认的Spotlight，替换方法如下：</p>

<ul>
<li>Spotlight的默认快捷键是<code>⌘ + 空格</code>，可以在系统配置中取消该快捷键。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/spotlight.png"></p>

<ul>
<li>安装Alfred后，在Alfred设置页面将弹出快捷键设置为<code>⌘ + 空格</code>。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_config.png"></p>

<h2>Alfred使用介绍</h2>

<p>网上有比较多的关于Alfred的介绍，我这里就不一一列举其功能了，就挑一些重点的讲。</p>

<h4>设置默认搜索引擎</h4>

<p>Alfred默认使用google，amazon和维基百科来做前3个搜索引擎（可能不同的MAC机器有不同的默认设置，至少我机器上是这3个，这些搜索是在本地应用、文件查找不到之后通过网络进行搜索的设置。</p>

<p>当然你可以更改这些默认设置，操作如下图所示：<br/>
   
<img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_search_config1.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_search_config2.png"></p>

<p>在<code>Fetures-&gt;Default Results-&gt;Setup fallback resULT</code>中设置，虽然百度搜索不怎么样，但是在国内找一些非科技的东西还是需要的，将其设为默认搜索引擎，去掉原来的amazon和维基百科，效果如下图。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_search_config6.png"></p>

<h4>自定义Web搜索</h4>

<p>在上图中可以看到百度是一个自定义的搜索，因为在我的机器上没有百度搜索，所以需要自己添加，添加的步骤如下：</p>

<ul>
<li>在<code>Fetures-&gt;Web Search-&gt;Add Custom Search</code>中添加，如下图所示：</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_search_config3.png"></p>

<ul>
<li>在弹出窗口中设置url, 其中<code>{query}</code>就是你要查询的东西，再填上标题和关键字，有logo图片的话拖放到右边的框框上，最下面的<code>Validation</code>是来测试新建的搜索是否有用的。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_search_config4.png"></p>

<ul>
<li>这样在Alfred输入框中输入<code>baidu Alfred</code>就可以用百度来搜<code>Alfred</code>了。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_search_config5.png"></p>

<h4>其他使用技巧</h4>

<p>Alfred还有其他比较方便的使用方法，比如：</p>

<ul>
<li>当计算器使用</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_use1.png"></p>

<ul>
<li>输入<code>&gt;</code>直接执行bash命令</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_use2.png"></p>

<p>还有其他更多的使用技巧可以在网上找到。</p>

<h2>workflow</h2>

<p>Alfred的这部分功能是需要付费的，最便宜的个人版本折合人民币大概160多。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_price.png"></p>

<p>workflow的安装非常简单，把后缀为alfredworkflow的文件下下来后，点击文件就会提示你是否安装了，这个网站涵盖了很多workflow——<a href="http://www.alfredworkflow.com/">alfredworkflow</a>，有需要的可以在这上面招，我在这里推荐一些程序员比较有用的workflow：</p>

<ul>
<li>Dash workflow : <a href="https://kapeli.com/dash">Dash</a>是一个api查询工具，不仅可以查询各种语言的api，还可以查各种工具或者框架的api，对于程序员来讲非常有用，当然首先你需要安装Dash，再来安装这个workflow——<a href="https://github.com/Kapeli/Dash-Alfred-Workflow">Dash-Alfred-Workflow</a>。</li>
<li>Stackoverflow workflow : Stackoverflow是程序员经常上的网站，通过Alfred可以快速查看网站上的相关问题——<a href="https://github.com/xhinking/Alfred">st-workflow</a>。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/workflow1.png"></p>

<ul>
<li>pkgman workflow: 这个workflow可以查找各种语言和工具的依赖包信息，对程序开发非常有用——<a href="https://github.com/willfarrell/alfred-pkgman-workflow">pkgman-workflow</a>。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/workflow2.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-10/workflow3.png"></p>

<p>下面这些workflow跟程序员不是很相关，但是也是非常有用的，个人推荐：</p>

<ul>
<li>youdao workflow: 经常看到不会的单词要先打开翻译器，再把要翻译的单词拷贝到里面翻译，是不是很麻烦，有了这个workflow就很方便了，直接在Alfred上翻译就可以了——<a href="https://github.com/wensonsmith/YoudaoTranslate">yd-workflow</a>。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/workflow4.png"></p>

<ul>
<li>douban workflow: 这个workflow可以查看豆瓣上的书籍，电影和音乐，非常方便——<a href="https://github.com/lucifr/Alfredv2-Extensions">douban-workflow</a>。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/workflow5.png"></p>

<ul>
<li>evernote workflow: 使用evernote的同学可以使用这个workflow快速找到自己的笔记——<a href="https://github.com/hzlzh/AlfredWorkflow.com">evernote-workflow</a>。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/workflow6.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发人员神秘的工具箱]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/09/21/the-mysterious-tools-of-developer/"/>
    <updated>2015-09-21T10:06:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/09/21/the-mysterious-tools-of-developer</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-9/toolbox.jpeg" width="400" height="300"></p>

<p>需求、时间和质量是项目管理的三个平衡点，如果需求多、开发时间短必将会导致项目质量下降，那开发人员有什么办法在短时间内交付大量的需求（虽然质量低）呢？其实每个开发人员都有一套“神秘”的工具箱，在万不得已的时候就会开始使用它（这部分内容是以前参加<a href="https://www.linkedin.com/in/dteng">Daniel</a>的CSM课程的时候听到的，觉得很有意思，想和大家分享一下）。</p>

<!--more-->


<p></p>

<blockquote><p>天下武功，唯快不破</p><footer><strong>火云邪神</strong></footer></blockquote>


<h2>复制粘贴</h2>

<p>最常见的就是复制粘贴了，天下文章一大抄，何况代码了，把以前可以工作的代码拷贝过来，改改就可以用了，甚至改都不改一下就直接上线也是可以的。别人敲了半天的代码我按2次按键就搞定了，这就是效率！</p>

<p>别跟我说神马重复代码导致改一处地方要变成改多处地方，修改还容易遗漏这些balbal，我们听多了，Who care，明天的事情明天再说，现在最要紧的是赶紧把功能做出来上线，不然奖金泡汤你负责啊？</p>

<h2>在网上搜索代码然后拷过来直接用</h2>

<p>每当我没有灵感的时候，我都会上网搜一下有没有实现我想要的功能的代码，发现了的话就拷贝粘贴到我的代码里面，呵呵我的工作就算完成了。</p>

<p>你说什么？！不弄清楚代码原理直接用危险大？别人的代码不一定适用于我的工程？拜托，我弄清楚那些代码原理的时间，我都可以自己写一个实现了好吗？跟你说了现在最要紧的是上线，别跟我扯这些没用的！另外我用百度搜代码，那速度杠杠的，谁用谁知道啊，现在谁还费那么大劲翻墙访问google啊？！</p>

<h2>功能变成Bug</h2>

<p>上面2招都不好使了肿么办，系统明天就要上线了，功能完不成老板又要找我麻烦了。。。机智的我还是想到了办法，我轻轻地在键盘上敲下了实现该功能的方法名，然后。。。就完了，我已经把功能实现了，可以上线了。</p>

<p>什么？上线后发现啥功能都没有？额。。。我看看。。。哦，这里有个<strong>BUG</strong>，等下个版本一起修复吧！懂了吗？现在这里不是一个未完成的功能，而是一个<strong>BUG</strong>了，呵呵这种办法还不是一般人能想的出来的。</p>

<h2>没有测试</h2>

<p>测试？现在连睡觉的时间都没有，还要我做测试？Are you kidding me？这些东西交给用户不就可以了吗？用户是什么，不就是我们的小白鼠嘛呵呵。</p>

<p>单元测试是什么鬼？用代码来测试代码？我看你吃撑了吧？我写了一堆的代码实现了功能，然后还要写同样多的一堆代码来测试我原来那堆代码，但老板并没有给我双倍工资来做这个事情啊，所以还是省省吧！</p>

<h2>没有代码评审</h2>

<p>让一大群人围观我的代码，还要在上面鸡蛋里挑骨头，想想我也是醉了，我的代码我做主，不想那么多人来judge我的代码。</p>

<p>我知道代码评审是保证质量的有利手段，也有知识传递、宣传团队规则的好处，但为了快速上线，这些活动能砍就砍掉吧。</p>

<h2>没有重构</h2>

<p>重构我有时候也是会做的，像以前我的变量名称都是拼音首字母来命名的，后来我把我系统里面的变量名称重构了一遍，在每个变量名加上了我的名字缩写前缀，像这样：<code>sb_xxx</code>，是不是很机智呢呵呵。</p>

<p>但是为了让项目赶紧上线，我还是别浪费太多时间在重构上面了，等以后有时间再来做吧，或者都后面维护的兄弟来重构吧，前提是他能看懂我的代码：）</p>

<h2>硬编码</h2>

<p>为了更快的提高我编码速度，遇到一些可以直接硬编码我一般都不定义变量，这样可以保证我的思路不被起变量名这种麻烦事情打断，反正这些以后都是改的，到时候再来修改代码就好了。</p>

<p>你看隔壁那个老王又写测试又重构的，还说什么这样以后方便维护，可以快速定位问题，但尼玛搞了2天才完成，而我才花了2个小时，这才是效率啊！什么？后面我花了2个月才修复1个Bug，你是怎么知道的？</p>

<h2>加班</h2>

<p>加班是我能力的重要证明啊，加班让我多了一倍时间来做项目，还怕完不成么？！</p>

<p>加班除了聊天吃饭打游戏外，最重要的是让BOSS知道我在加班，凌晨半夜发个邮件到整个公司邮箱是必须的，下班走的时候在朋友圈晒张&#8221;加班的夜晚真美&#8221;之类的照片也是极好的。让BOSS知道我就算没有功劳也有苦劳，到时候项目完不成也不要怪我，因为我已经加班了。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-9/sb1.jpeg" width="300" height="300"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过TDD聊软件开发]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/09/15/say-something-about-develop-by-tdd/"/>
    <updated>2015-09-15T14:35:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/09/15/say-something-about-develop-by-tdd</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-9/tdd.png" width="400" height="300"></p>

<p>TDD是由<a href="https://en.wikipedia.org/wiki/Extreme_programming">极限编程</a>提出的一个编程实践，与通常的编程行为相反，TDD是先编写测试案例，然后再编写功能代码，重复这样的一个过程直到功能实现完成为止。</p>

<!--more-->


<p></p>

<h2>TDD</h2>

<p>大家可能听过“六顶思考帽子”，说的是一种思维训练方式或者是一个全面思考问题的模型，我们借鉴思考帽子来说明TDD，可以看到最上面的那个图，三顶帽子分别表示TDD的三个步骤。</p>

<ul>
<li>红帽子: 编写一个测试案例，然后运行它，得到失败的测试结果</li>
<li>绿帽子: 编写功能代码，让失败的测试案例跑通过</li>
<li>蓝帽子: 对功能代码和测试代码进行重构</li>
</ul>


<p>为什么红代表失败，绿代表通过呢？可以想象成交通灯，红灯停绿灯行，在最早的时候是<a href="https://en.wikipedia.org/wiki/Kent_Beck">Kent Beck</a>开发的Junit，用它来跑单元测试的时候，失败会出现一个红色的进度条，成功会变成绿色的，所以红代表失败，绿代表成功。</p>

<p>需要注意的几点:</p>

<ul>
<li>在完成绿帽子的过程中，只需要添加让失败测试案例跑通过的功能代码，不要过渡设计。把整个功能代码都写完了，再来补单元测试，这种不是TDD。</li>
<li>在蓝帽子阶段，不仅要对功能代码进行重构，对测试代码也要进行重构，因为测试代码也是以后维护工作的一部分，如果你不认真对待它，它以后也不会好好对待你，烂测试比没有测试更恼火。</li>
</ul>


<p>一直重复这3个步骤，直到你的功能开发完成，这就是TDD。</p>

<h2>软件质量</h2>

<p>先抛开TDD，我们来聊一下项目管理。项目管理三要素:功能，时间，质量，这3者遵守着质量守恒定律。想象一个面积不变的三角形，如果把其中任意2个点往中心点外面拉伸，那第三个点肯定会往中心点靠近。</p>

<p>在传统的项目管理中，功能和时间往往是不可妥协的，比如领导要在xx日之前完成oo功能，开发团队没办法在规定时间完成指定功能，那要怎么办呢？这时候往往就会降低软件质量来达到目的。</p>

<p>而在敏捷开发中，软件质量是不可妥协的点，在保证高质量的软件基础上对其他2个要素进行裁剪，如果你的时间是deadline，一旦改了会影响产品推广，那我们就保证完成核心功能，其他不是那么重要的功能放到下一个版本；如果功能全部都是必须的，那么请把交付时间延后。</p>

<h2>Which One</h2>

<p>在TDD三顶帽子中，你最喜欢哪一个呢？可能大部分人都喜欢绿帽子（你才喜欢绿帽子!!你全家都喜欢绿帽子!!!&hellip;&ndash;_&ndash;#），因为绿帽子表示你的测试通过了，功能完成了，系统可以上线了。但我觉得蓝帽子和红帽子更加重要，为什么呢？</p>

<p>重构在软件开发中不是一项单独的活动，有的开发人员会说等开发完了所有功能之后，再单独找时间做重构，其实这是不对的，重构不是一个很”大“的事情，而是一个个编写好代码的手法或者技巧，这是一项贯穿软件开发整个过程的一个活动，比如在开发功能的时候进行重构，抽取重复代码进行功能复用，又或者在修复Bug时对之前不合理的代码进行重构，使之更具可维护性，各个阶段我们都可以进行重构。</p>

<p>重构是提高软件质量的重要手段之一，在极限编程中有很多实践都是用于提高软件质量的，包括单元测试，持续集成，TDD，结对编程等，而重构是贯穿在这些实践中的一个活动。</p>

<p>红帽子也比较重要，TDD——测试驱动开发，要先写出测试案例和验收条件，而这需要先分析需求、提炼需求，将需求转化为测试用例，测试驱动开发实际上是需求驱动开发，所以能写出一个好的测试用例，实际上就等于已经对功能代码做好了设计。经历过结对编程的人就有这种感觉，一个人写好测试案例，再由另外一个人来写功能代码，第二个人基本上不用费什么劲就可以写出功能代码，为什么呢？因为思路已经在测试案例中体现出来了，你只要照着写就可以了。</p>

<p>要学习TDD网上有很多资料，甚至还有不少视频是演示怎么做TDD的，这里就不详细举例子了，大家可以自行在网上查阅。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何学习Python]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/09/05/how-to-learn-python/"/>
    <updated>2015-09-05T15:01:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/09/05/how-to-learn-python</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-9/python.jpg" width="400" height="300"></p>

<p>Python语言相对Java来说，最大的特点就是易用易学，基本上每个linux系统都有安装python，不像Java一样还需要自己下JVM、安装、设置环境变量等。有了其他编程语言的基础再来学习Python其实是非常简单的，因为Python语言是基于<a href="https://en.wikipedia.org/wiki/ABC_(programming_language)">ABC</a>语言开发出来的，ABC语言是以教学为目的的语言，其宗旨是让编程变得容易阅读和理解，所以Python语言也很容易理解和学习。</p>

<!--more-->


<p></p>

<h2>Pyhotn学习介绍</h2>

<p>关于Python的学习网上有很多介绍，我在这里介绍一下我的学习过程，包括书籍，网站和一些工具等。</p>

<h4>书籍</h4>

<p>关于Python的书我推荐<a href="http://book.douban.com/subject/3112503/">《Python核心编程（第二版）》</a>，这本书看起来很厚其实读起来非常浅显易懂，重点可以看看下面这几章。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>第4章 Python对象
</span><span class='line'>6.8 Unicode
</span><span class='line'>8.11 迭代器和iter<span class="o">()</span>函数
</span><span class='line'>第9章 文件的输入和输出
</span><span class='line'>第10章 错误和异常
</span><span class='line'>第11章 函数和函数式编程
</span><span class='line'>第12章 模块
</span><span class='line'>第13章 面向对象编程
</span><span class='line'>第14章 执行环境
</span><span class='line'>第15章 正则表达式
</span><span class='line'>第18章 多线程编程
</span><span class='line'>20.2 使用Python进行Web应用：创建一个简单的Web客户端
</span></code></pre></td></tr></table></div></figure>


<p>如果不想看这种太多理论的书的话，可以看这本实战的书<a href="http://learnpythonthehardway.org/">《Learn Python The Hard Way》</a>，里面的例子从浅到深让你一步步的学习Python，比较适合没有编程经验的新手。里面的例子不要只是把它们打出来，最好自己可以举一反三做一些关于知识点的挑战和扩展。</p>

<h4>网站</h4>

<p>除了看书编码外，平时业余时间可以订阅一些Python的blog和网站，下面是我最近收集的一些Python博客，分享一下:</p>

<ul>
<li><a href="http://planetpython.org/">Planet Python</a>: 这是最出名的python博客其中之一，快去看看，我希望你能找到对你有用的东西。</li>
<li><a href="http://lucumr.pocoo.org/">lucumr</a>: 博主是flask（一个python web框架）的创始人</li>
<li><a href="https://doughellmann.com">Doug Hellmann</a>: 博主是PYMOTW(Python Module Of the Week)成员之一，博客里面包含了很多python library的知识。如果你是在寻找一些实用的python库的话，你可以在这里找找。</li>
<li><a href="http://www.blog.pythonlibrary.org/">Mouse Vs Python</a>: 这个博客更新也比较频繁。</li>
<li><a href="http://www.pydanny.com/">pydanny</a>: 这是一个主要关注Django的博客，但也有很多关于Python的东西。</li>
</ul>


<h4>工具 &amp; 技巧</h4>

<p>pip和setuptools就不说了，Python开发必备，下载管理依赖包就靠他们了，其他最有用的Python工具要数<a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/">virtualenv</a>了，它可以创建一个虚拟的Python执行环境，因为Python的虚拟机不像JVM那么大，创建出来之后的文件夹非常小（大概只有10M），在这个虚拟环境里面安装执行Python程序不会污染你操作系统的主Python环境。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 安装virtualenv</span>
</span><span class='line'>pip install virtualenv
</span><span class='line'><span class="c"># 创建Python虚拟环境</span>
</span><span class='line'>virtualenv venv
</span><span class='line'><span class="c"># 让虚拟环境生效</span>
</span><span class='line'><span class="nb">source </span>venv/bin/activate
</span><span class='line'><span class="c"># 取消虚拟环境</span>
</span><span class='line'>deactivate
</span></code></pre></td></tr></table></div></figure>


<p>另外Pyhton的调试也非常方便，只要在需要设置断点的地方添加代码<code>import pdb;pdb.set_trace()</code>即可，然后执行程序就会在断点出停止，你可以通过打印下面命令进行调试:</p>

<ul>
<li><code>c</code>: 让程序继续往下走，continue的意思</li>
<li><code>s</code>: 进入子方法内部，相当于step into</li>
<li><code>n</code>: 跳到下一句
这里介绍的只是一些基本的命令，更多的命令可以看<a href="https://docs.python.org/2/library/pdb.html">这里</a>，另外还可以打印断点处的各种变量和执行各种语句。</li>
</ul>


<h2>简洁的Python</h2>

<p>在Python中执行<code>import this</code>可以看到Python之禅。</p>

<blockquote><p>The Zen of Python, by Tim Peters</p><p>Beautiful is better than ugly.<br/>Explicit is better than implicit.<br/>Simple is better than complex.<br/>Complex is better than complicated.<br/>Flat is better than nested.<br/>Sparse is better than dense.<br/>Readability counts.<br/>Special cases aren&#8217;t special enough to break the rules.<br/>Although practicality beats purity.<br/>Errors should never pass silently.<br/>Unless explicitly silenced.<br/>In the face of ambiguity, refuse the temptation to guess.<br/>There should be one&#8211; and preferably only one &#8211;obvious way to do it.<br/>Although that way may not be obvious at first unless you&#8217;re Dutch.<br/>Now is better than never.<br/>Although never is often better than *right* now.<br/>If the implementation is hard to explain, it&#8217;s a bad idea.<br/>If the implementation is easy to explain, it may be a good idea.<br/>Namespaces are one honking great idea &#8211; let&#8217;s do more of those!</p></blockquote>


<p>从Python之禅中我们可以看到Python是一门追求简洁，追求优雅的语言，语言设计者对代码质量要求比较高，希望编写Python代码的开发人员也能写出高质量的代码。</p>

<p>由于Python简洁而强大的函数式编程，我们可以很方便的创建结构稍微复杂的对象，特别复杂的还是建议使用class来创建对象。</p>

<p>比如我们有这样的一个数据结构，一个字典里面包含多个集合，用Java来初始化大概是这个样子:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">list1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;foo1&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">list1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;bar1&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;list1&quot;</span><span class="o">,</span> <span class="n">list1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">list2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;foo2&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">list2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;bar2&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;list2&quot;</span><span class="o">,</span> <span class="n">list2</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>而用Python一行代码就可以搞定:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">my_map</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;list1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="n">foo1</span><span class="p">,</span> <span class="n">bar1</span><span class="p">],</span> <span class="s">&#39;list2&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;foo2&#39;</span><span class="err">，</span><span class="s">&#39;bar2&#39;</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以说Java是一门很啰嗦的语言，虽然新版本的Java加了lambda，然而并不能减少多少Java语言本身的繁杂性。</p>

<h2>Djaogo学习介绍</h2>

<p>Python来实现一些小工具小应用是十分方便的，但Python也可以用来做Web开发，Python比较有名的Web框架有Django，Flask，Tormado等，其中Djaongo使用最为广泛，集成的东西也比较多，不管你是使用关系系数据库还是非关系数据库，是否使用缓存等都可以使用Django，其最好的一个特点是集成了管理员功能，可以省却开发者很大的一部分开发量。</p>

<p>有人可能会说Django比较重，对于新手来说学习成本比较高，对于这个我没有什么意见，因为工作需要使用Django，对于其他的框架还没有接触过，但我使用后的体验是Django虽然要配置的东西比较多，但只要配置好了，开发效率还是挺快的，也可能是我以前大部分时间使用Spring来开发，相对Spring来说Django的配置还算比较轻的，所以对我来说没有什么感觉:)</p>

<p>学习Django可以上Django的<a href="http//www.djangoproject.com">官网</a>，上面有startup的向导，通过向导一步步的操作可以让你快速了解一个web项目的开发，另外上面还有很多文档，可以知道Django的所有内容。</p>

<p>另外一个学习Django比较好的是《Django Book》这本书，这里有它的<a href="http://www.djangobook.com/en/2.0/index.html">网站</a>，书很浅显易读，详细讲解了Django各个部分的内容，有时候是先通过一个比较简单的实现方案实现需求，然后利用Django的特性让代码得到优化，更少的代码来实现更多的内容，这也体现了Django的思想，简洁优雅，复用性高。</p>

<p>理论知识学习的差不多了，最后当然是做项目练手了，可以自己动手做一个web项目来熟悉Python和Django，在实际操作的过程中遇到不懂的问题就google一下，然后记录下来，做过一两个项目之后你应该对Python和Django比较了解了:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python-docx使用简介]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/08/16/hello-python-doxc/"/>
    <updated>2015-08-16T20:18:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/08/16/hello-python-doxc</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-8/python-docx.png" width="400" height="300"></p>

<p>使用word文档来展现内容是很多企业使用的方式之一，但如果文档内容比较多，或者需要制作很多重复文档的话，编写文档的过程会十分枯燥无聊，如果这个时候有一个程序可以帮助你来完成文档制作工作的话那就太好了，这就是<a href="https://python-docx.readthedocs.org/en/latest/">python-docx</a>可以做的事情，下面我们就来看看python-docx的强大功能。</p>

<!--more-->


<p></p>

<h2>安装</h2>

<p>python-docx安装非常简单，可以使用<code>pip install python-docx</code>进行安装。</p>

<h2>创建文档</h2>

<p>使用python-docx创建一个文档非常简单，只需要2行代码就可以搞定，代码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">document</span> <span class="o">=</span> <span class="n">Document</span><span class="p">()</span>
</span><span class='line'><span class="n">document</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">&#39;foo.docx&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>编写段落</h2>

<p>word文档最基本的内容就是一段段的文字信息，使用python-docx可以轻松的生成各种不同风格的段落。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># 普通段落</span>
</span><span class='line'><span class="n">document</span><span class="o">.</span><span class="n">add_paragraph</span><span class="p">(</span><span class="s">u&#39;我是普通文档&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c"># 带风格的段落</span>
</span><span class='line'><span class="n">document</span><span class="o">.</span><span class="n">add_paragraph</span><span class="p">(</span><span class="s">u&#39;我是好看的文档&#39;</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="s">&#39;IntenseQuote&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>style属性是使用一个定制好的风格，名称必须是document对象包含了这个style名称才能使用，否则在生成文档的过程会报错或者style没有生效。</p>

<p>add_paragraph方法会返回一个paragraph对象，这个对象中有一个ParagraphFormat属性，通过设置ParagraphFormat属性的内容可以展示不同的风格：</p>

<ul>
<li>alignment: 段落对齐方式，值为<code>WD_PARAGRAPH_ALIGNMENT</code>常量中的一个。</li>
<li>line_spacing: 行间隔，单位可以有多种，详情参见<a href="https://python-docx.readthedocs.org/en/latest/api/shared.html">这里</a>。</li>
<li>first_line_indent: 首行缩进，值为整数，单位与line_spacing相同。</li>
</ul>


<p>还有其他更多的属性就不一一介绍了，我们还可以更加细粒度地控制一个段落的风格，比如前两句话我们使用粗体展示，后两句使用斜体，这就需要用到Run对象的属性设置了，Run可以看成是段落中的一句话，一个段落包含了n个Run。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">add_paragraph</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">run1</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">add_run</span><span class="p">(</span><span class="s">u&#39;句子一&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">run1</span><span class="o">.</span><span class="n">bold</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'><span class="n">run2</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">add_run</span><span class="p">(</span><span class="s">u&#39;句子二&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">run1</span><span class="o">.</span><span class="n">italic</span> <span class="o">=</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>在document中我们还可以添加标题<code>Heading</code>，新建的文档有<code>0~9</code>级的标题让你选择（默认是1级），其实标题也是段落的一种，我们可以使用设置段落风格的方式来设置标题的风格。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">add_heading</span><span class="p">(</span><span class="s">u&#39;标题&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">paragraph_format</span><span class="o">.</span><span class="n">alignment</span> <span class="o">=</span> <span class="n">WD_ALIGN_PARAGRAPH</span><span class="o">.</span><span class="n">LEFT</span>
</span></code></pre></td></tr></table></div></figure>


<h2>绘制表格</h2>

<p>在文档中我们可能会添加一些表格作为数据内容的展示，在python-docx里面可以轻松的绘制不同的表格。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># 绘制一个2 * 2的表格</span>
</span><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">add_table</span><span class="p">(</span><span class="n">rows</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">cols</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">cell</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">u&#39;单元1&#39;</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">cell</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">u&#39;单元2&#39;</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">cell</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">u&#39;单元3&#39;</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">cell</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">u&#39;单元4&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>还可以对单元格进行合并：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">add_table</span><span class="p">(</span><span class="n">rows</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">cols</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="c"># 将第一行的2个单元格合并</span>
</span><span class='line'><span class="n">merge_cell</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">cell</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">cell</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="n">merge_cell</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">u&#39;合并单元格&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>默认的表格是不带边框的，如果想让表格有边框，可以使用<code>Table Grid</code>这种表格的style。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">add_table</span><span class="p">(</span><span class="n">rows</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">cols</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">style</span> <span class="o">=</span> <span class="s">&#39;Table Grid&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>添加图片</h2>

<p>添加图片也非常简单，在添加图片的方法中输入图片的相对路径即可。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">document</span><span class="o">.</span><span class="n">add_picture</span><span class="p">(</span><span class="s">&#39;demo.png&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>甚至可以添加网络上的图片到文档中，但前提是把图片下载到内存。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">StringIO</span>
</span><span class='line'>
</span><span class='line'><span class="c"># img_url为网络图片url地址</span>
</span><span class='line'><span class="n">image_from_url</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">img_url</span><span class="p">)</span>
</span><span class='line'><span class="n">io_url</span> <span class="o">=</span> <span class="n">StringIO</span><span class="o">.</span><span class="n">StringIO</span><span class="p">()</span>
</span><span class='line'><span class="n">io_url</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">image_from_url</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'><span class="n">io_url</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">document</span><span class="o">.</span><span class="n">add_picture</span><span class="p">(</span><span class="n">io_url</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>文档风格</h2>

<p>每个document对象里面都有一个styles对象，styles对象包含了文档可以使用的style，包括段落，表格，图片等的风格。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">document</span> <span class="o">=</span> <span class="n">Document</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span> <span class="nb">len</span><span class="p">(</span><span class="n">document</span><span class="o">.</span><span class="n">styles</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">document</span><span class="o">.</span><span class="n">styles</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>
</span><span class='line'><span class="n">console</span><span class="o">---------------</span>
</span><span class='line'><span class="mi">160</span>
</span><span class='line'><span class="n">Normal</span>
</span><span class='line'><span class="n">Heading</span> <span class="mi">1</span>
</span><span class='line'><span class="n">Heading</span> <span class="mi">2</span>
</span><span class='line'><span class="n">Heading</span> <span class="mi">3</span>
</span><span class='line'><span class="n">Heading</span> <span class="mi">4</span>
</span><span class='line'><span class="n">Heading</span> <span class="mi">5</span>
</span><span class='line'><span class="n">Heading</span> <span class="mi">6</span>
</span><span class='line'><span class="n">Heading</span> <span class="mi">7</span>
</span><span class='line'><span class="n">Heading</span> <span class="mi">8</span>
</span><span class='line'><span class="n">Heading</span> <span class="mi">9</span>
</span><span class='line'><span class="n">Default</span> <span class="n">Paragraph</span> <span class="n">Font</span>
</span><span class='line'><span class="n">Normal</span> <span class="n">Table</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是新建的文档所包含的style，比较齐全，但如果是基于已有文档的document就只能使用已有文档的styles，可能会比新建的文档少很多。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">document</span> <span class="o">=</span> <span class="n">Document</span><span class="p">(</span><span class="s">&#39;exist.docx&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="nb">len</span><span class="p">(</span><span class="n">document</span><span class="o">.</span><span class="n">styles</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">console</span><span class="o">---------------</span>
</span><span class='line'><span class="mi">12</span>
</span></code></pre></td></tr></table></div></figure>


<p>python-docx是没有设置页眉页脚功能的，但是通过打开一个已经存在页眉页脚的文档，我们就可以拥有包含页眉页脚的document了。</p>

<p>这些是python-docx的一些基本使用方法，更多的内容请参考官方文档，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么我要使用Vim]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/08/09/why-i-use-vi/"/>
    <updated>2015-08-09T08:47:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/08/09/why-i-use-vi</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-8/vi.png" width="250" height="250"></p>

<p>之前做Java开发的时候一直使用IDE，因为Java的IDE工具开发的太好了，以致没有机会深入接触像<code>vi</code>和<code>emacs</code>之类的神编辑器，但最近转python让我有机会深入了解了<code>vi</code>，使用过后不仅觉得方便，而且被其强大深深所吸引。</p>

<!--more-->


<p></p>

<h2>为什么使用vi</h2>

<p>最早是使用Eclipse，然后转IntelliJ IDEA，可以看看我之前的这篇文章——<a href="http://zhaozhiming.github.io/blog/2014/10/09/why-intellij-idea-better-than-eclipse">《为什么Intellij-IDEA比Eclipse好》</a>，之前觉得使用IDEA效率已经很高了，熟悉快捷键的话可以完全不用鼠标进行编码。</p>

<p>其实Jetbarins(开发IDEA的公司)也有python的IDE——PyCharm，功能、操作和IDEA差不多，熟悉IDEA的人可以很快上手PyCharm。</p>

<p>但是作为一个程序员，我觉得如果没有深入使用过一款&#8221;神之编辑器&#8221;（vi或emacs）是有遗憾的，而且通过使用vi发现，IDE有的功能vi都可以有，通过vi的配置，可以将vi打造成任一种语言的IDE，也就是说，使用IDE功能是有限的，但是使用vi，你的编辑器功能是没有边界的，任何你想要的功能都可以通过安装插件或者自己开发插件来实现。</p>

<p>使用IDE你可能不用鼠标进行编码，但是使用vi你可以不用鼠标来操作整个操作系统，这就是vi的魅力，可以让你像弹钢琴一样优雅的编写代码，行云流水，酣畅淋漓。</p>

<p>最后为什么选vi不选emacs呢？因为公司都是vi党，用emacs怕被人打，还是用vi好了-_&ndash;#</p>

<h2>简明Vim练级攻略</h2>

<p>说实话，vi的学习曲线非常陡峭，但是经过前人的积累，已经有不少好用的vi插件和工具帮助我们尽快的熟悉vi，省去自己配置vi的烦恼，剩下的就只有不断地使用vi，以增强vi的熟练程度，做到得心应手。</p>

<p>这里要推荐陈皓老师翻译整理的这篇文章——<a href="http://coolshell.cn/articles/5426.html">简明Vim练级攻略</a>，里面详细介绍了从入门到高级的vi使用命令，分阶段让学习者掌握vi的编辑命令，让你从一大堆繁杂的vi命令中了解到真正实用的vi指令。</p>

<p>还是之前说的，文章只是给你指明方向，实际的练习才是最重要的，要熟悉vi就要每天都使用vi写写东西，如果忘记了命令再重温一下文章的内容，这样不断地强化精神和肌肉的记忆才能掌握好vi。</p>

<h2><a href="https://github.com/wklken/k-vim">k-vim</a></h2>

<p>这里要推荐k-vim这个国人打造的vim配置，里面集成了各种强大的vi插件，功能堪比甚至远超各种IDE，其主要用于python开发，也支持一些基础的前端开发，这里主要讲一下里面配置的一些强大的插件。</p>

<h4>YouCompleteMe</h4>

<p>很多IDE都有代码自动补全的功能，通过这个插件，vi也可以做到这一点，这个插件还可以配置各种语言的自动补全提示。</p>

<h4>gmarik/vundle</h4>

<p>像pip，npm一样，vundle可以管理vi的插件，通过简单的install/uninstall命令可以帮你安装你想要的vi插件。</p>

<h4>scrooloose/syntastic</h4>

<p>IDE有语法错误之类的检查，这个vi插件实现了类似的功能，并且可以配置各种语言的语法检查。</p>

<p>还有其他很多强大的插件，比如工程目录结构菜单，代码模板，源码跳转等。总之，使用k-vim可以省却你大部分配置vim的时间，让你得以马上体验vi的强大。</p>

<h2><a href="https://tmux.github.io">tmux</a></h2>

<p>tmux是一个terminal管理软件，通过tmux配合vi可以使开发工作更加简单快捷，网上有很多介绍tmux的文章，我就不多介绍了，附一下是我的tmux配置，也是从网上查的一份配置，使用之后觉得还不错，推荐给大家，这里使用<code>ctl+A</code>作为tmux前缀，相对默认的<code>ctl+B</code>来说按键相对要近一些。</p>

<figure class='code'><figcaption><span>tmux.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># -- base -- #</span>
</span><span class='line'>unbind C-b
</span><span class='line'><span class="nb">set</span> -g prefix C-a
</span><span class='line'><span class="nb">set</span> -g status-keys vi
</span><span class='line'>setw -g mode-keys vi
</span><span class='line'><span class="nb">bind</span> : <span class="nb">command</span>-prompt
</span><span class='line'><span class="nb">bind </span>r <span class="nb">source</span>-file ~/.tmux.conf <span class="se">\;</span> display-message <span class="s2">&quot;Reloading..&quot;</span>.
</span><span class='line'><span class="nb">set</span> -g default-terminal <span class="s2">&quot;screen-256color&quot;</span>
</span><span class='line'><span class="nb">bind</span>-key a send-prefix
</span><span class='line'>
</span><span class='line'><span class="c"># -- windown -- #</span>
</span><span class='line'><span class="nb">bind </span>s split-window -h -c <span class="s2">&quot;#{pane_current_path}&quot;</span>
</span><span class='line'><span class="nb">bind </span>v split-window -v -c <span class="s2">&quot;#{pane_current_path}&quot;</span>
</span><span class='line'><span class="nb">bind</span>-key c  new-window -c <span class="s2">&quot;#{pane_current_path}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">bind </span>h <span class="k">select</span>-pane -L
</span><span class='line'><span class="nb">bind </span>j <span class="k">select</span>-pane -D
</span><span class='line'><span class="nb">bind </span>k <span class="k">select</span>-pane -U
</span><span class='line'><span class="nb">bind </span>l <span class="k">select</span>-pane -R
</span><span class='line'>
</span><span class='line'><span class="nb">bind</span> ^k resizep -U 10
</span><span class='line'><span class="nb">bind</span> ^j resizep -D 10
</span><span class='line'><span class="nb">bind</span> ^h resizep -L 10
</span><span class='line'><span class="nb">bind</span> ^l resizep -R 10
</span><span class='line'><span class="nb">bind</span> ^u swapp -U
</span><span class='line'><span class="nb">bind</span> ^d swapp -D
</span><span class='line'>
</span><span class='line'><span class="nb">bind </span>u choose-session
</span><span class='line'><span class="nb">bind </span>o choose-window
</span><span class='line'><span class="nb">bind</span> <span class="se">\ </span>last
</span><span class='line'><span class="nb">bind </span>q killp
</span><span class='line'>
</span><span class='line'><span class="nb">bind</span>-key -n C-S-Left swap-window -t -1
</span><span class='line'><span class="nb">bind</span>-key -n C-S-Right swap-window -t +1
</span><span class='line'><span class="nb">set</span> -g base-index 1
</span><span class='line'>setw -g pane-base-index 1
</span><span class='line'><span class="nb">set</span> -g <span class="nb">history</span>-limit 5000
</span><span class='line'>
</span><span class='line'><span class="c"># pane border</span>
</span><span class='line'><span class="nb">set</span> -g pane-border-fg black
</span><span class='line'><span class="nb">set</span> -g pane-border-bg white
</span><span class='line'><span class="nb">set</span> -g pane-active-border-fg black
</span><span class='line'><span class="nb">set</span> -g pane-active-border-bg <span class="s1">&#39;#afd787&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># -- command -- #</span>
</span><span class='line'><span class="nb">bind </span>m <span class="nb">command</span>-prompt <span class="s2">&quot;splitw &#39;exec man %%&#39;&quot;</span>
</span><span class='line'><span class="nb">bind </span>space copy-mode
</span><span class='line'><span class="nb">bind</span> -t vi-copy v begin-selection
</span><span class='line'><span class="nb">bind</span> -t vi-copy y copy-selection
</span><span class='line'><span class="nb">bind</span> -t vi-copy C-v rectangle-toggle
</span><span class='line'><span class="nb">bind</span> <span class="o">]</span> paste-buffer
</span><span class='line'>
</span><span class='line'><span class="c"># -- statusbar --#</span>
</span><span class='line'><span class="nb">set</span> -g status-justify centre
</span><span class='line'><span class="nb">set</span> -g status-right-attr bright
</span><span class='line'><span class="nb">set</span> -g status-right <span class="s2">&quot;%H:%M %a %m-%d&quot;</span>
</span><span class='line'><span class="nb">set</span> -g status-bg default
</span><span class='line'><span class="nb">set</span> -g status-fg <span class="s1">&#39;#afd787&#39;</span>
</span><span class='line'>setw -g window-status-current-attr bright
</span><span class='line'>setw -g window-status-current-fg black
</span><span class='line'>setw -g window-status-current-bg <span class="s1">&#39;#afd787&#39;</span>
</span><span class='line'><span class="nb">set</span> -g status-utf8 on
</span><span class='line'><span class="nb">set</span> -g status-interval 1
</span></code></pre></td></tr></table></div></figure>


<h2>vi学习</h2>

<ul>
<li>简明Vim练级攻略只是介绍了一些比较实用和常用的命令，如果在实际使用过程中发现一些不清楚的vi操作，最好的办法就是通过googl搜索找到答案，并将答案记录下来以免下次忘记。</li>
<li>在从IDE过渡到vi的期间，可以用IDE完成一些比较紧急的工作，其他的就使用vi来完成。</li>
<li>在使用vi的过程中，可以模拟IDE的操作来了解更多vi的命令，比如IDE可以用<code>ctl+w</code>选中整个单词，在vi里面要如何操作？这样慢慢一步一步地将vi的命令掌握，并替换掉你的IDE。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终于等到你]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/08/02/new-company-where-i-actually-like-to/"/>
    <updated>2015-08-02T07:37:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/08/02/new-company-where-i-actually-like-to</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-8/company.jpg"></p>

<p>其实来到新环境已经有一个多月了，但为了尽快熟悉工作上的事情在学习其他东西而忽略了博客的更新，希望以后工作再忙也要保持写博客的习惯。</p>

<!--more-->


<p></p>

<h2>为什么要跳槽</h2>

<p>有人问过<a href="http://baike.baidu.com/link?url=lIGQtDsy-iWUmNrbzgvAWGe8jGGVoeyHtRJ5GR-xlgSciI5Z1U_rXO2NOGV6UVnyn-NMK_o0ykghus7Y4GY-gK">蔡学镛</a>为什么要离开上一家公司加入平安科技，是不是因为跟前公司有什么过节而离开，他反问道，如果你离开父母去到其他城市发展，你是因为不喜欢父母吗？当然不是，是因为要增长自己的见识，开阔自己的视野而选择离开。</p>

<p>其实在上一家公司呆的时间也比较长了，工作需掌握的技术早在开始的一两年就已经学会了，但因为同事和领导都比较nice所以迟迟没有选择离开。但是人总是需要成长，特别是在这种全民创业的互联网时代，不出来历练一下自己，见识一下外面的世界，以后老了肯定会后悔的。</p>

<h2>从传统到创新</h2>

<p>互联网浪潮现在达到了一个前所未有的高度，特别是在新的国家领导人上台之后对互联网持有的开放、鼓励和支持的态度，让我们对互联网行业的未来有了更大的期望。</p>

<p>从一个传统的金融行业进入到互联网安全行业，感觉就像从Windows切换到Linux，从以前的处处封闭到现在的开放自由，感觉非常棒。</p>

<p>对于程序员来说，多多少少都会有一种黑客情节，希望自己可以像《黑客帝国》里面的男猪脚一样在网络世界里叱诧风云，所向无敌，但殊不知获取这种能力的背后是要付出比别人多许多倍的艰苦。</p>

<p>随着互联网的发展，越来越多的互联网公司会被创立，而网络安全不是每家互联网公司，特别是创业公司可以做好的。在新的网络安全法律法规中，规定了以后企业要承担因网络安全原因导致的用户信息泄露的责任，而不是像现在一样，企业可以简单地道个歉了事，因此互联网安全在未来的互联网发展中将会扮演越来越重要的角色。</p>

<h2>从Java到Python</h2>

<p>其实不单只是编程语言的变化，包括语言涉及到的一些技术栈和工具也有很多变化。比如Java的web框架一般使用Spring，小部分使用Play Framework，而Python的web框架比较多，主流的有Django，Flask和Pyramid，现在我们主要使用Django开发。</p>

<p>用Java开发的时候，基本上都是使用IDE来进行编码，Java常用的IDE有IntelliJ IDEA或Eclipse，而在新的环境中需要掌握vi来进行编码，包括后端的python和前端的js和html。以前只是使用vi做过简单的liunx文件编辑，在使用的过程中总觉得没有IDE那么顺畅，从而崇拜那些能把vi用的很熟练的人，觉得他们都是高手。但自从真正接触vi后，觉得其实vi也没有想象中那么难，主要还是要多练习，后面会讲一篇关于vi的博文，讲下我的vi学习之路和环境配置，敬请期待。</p>

<p>其他方面比如DB、缓存等Java和Python都可以选择一样的东西，比如都可以选择Mysql、MongoDB、Redis等，只是对应的驱动、客户端和API不一样。</p>

<p>有的人会觉得现在招Java的互联网公司比较多，从Java转到Python是吃亏了，以后选择公司的范围变小了。在《程序员修炼之道：从小工到专家》中说道，好的程序员应该每年学习一门新的编程语言，如果你掌握的语言越多，其实可以选择的范围会越大，让自己更加有优势。</p>

<h2>人人都是高手</h2>

<p>在以前的工作环境，可能没有太多人关心代码的质量，实现方案是否优雅，代码的重构等，但在新的环境中，发现大家都很注重代码的质量，之前在学习Python的过程中就发现Python包括Django的设计很重视代码的复用，这个我们在<code>Python之禅</code>和Django的模块中就可以看出来，所以Python程序员对代码质量这一方面有更好的理解。</p>

<p>经常在代码review的时候看到其他人在讨论有没有更好的办法来优化这个方案，或者是如何更优雅的重构这段代码，没有人会觉得指出代码质量问题是吹毛求疵的行为。</p>

<p>除了开发人员，产品人员也很有互联网的思想，比如有次在讨论产品方案的时候，产品经理提的最多的是这次我们只上最少的功能，只开发最简单的版本，然后放到市场上看反馈再进行改进，这就是典型的精益创业思想。如果是以前的环境，一般都会把功能想的很齐全，很复杂，导致开发周期很长，从而错过产品上市的最佳时期。</p>

<p>在新的工作环境中，公司更看中人员的发展，而不是项目的成败，情愿项目做的慢一点，也要把项目人员的开发能力培养出来，这样以后可以做更多更好的项目，很符合互联网的思想：快速失败，快速迭代。</p>

<p>要做一个好的程序员，持续地学习是必不可少的，在新的工作环境里，大家都很喜欢学习，每次有部门分享时大家都很兴奋地讨论即将get的新技能，也经常看到有人分享一些新的学习网站，新的工具，因为大家对工作效率的提高也比较感兴趣。</p>

<p>最后，希望在新的环境中，学习到更多的东西，更多地提高自己的能力，创造更多的价值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在Spring中配置Websocket]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/05/11/spring-websocket-config/"/>
    <updated>2015-05-11T09:41:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/05/11/spring-websocket-config</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-5/websockets.png"></p>

<p>Websocket是HTML5的一项新技术，可以让服务端和客户端进行实时的通信，主要的使用场景有: 实时的聊天系统，对实时性要求比较高的游戏，或者金融行业对股票市场数据的及时获取等。在Spring3的时候就已经有了对Websocket的支持，不过需要一些高版本的web容器来运行，比如Tomcat7.0.47+，Jetty9等。</p>

<!--more-->


<p></p>

<p>在Spring的官网上有关于Websocket的示例工程，<a href="https://spring.io/guides/gs/messaging-stomp-websocket/">https://spring.io/guides/gs/messaging-stomp-websocket/</a>，里面简单介绍了如何通过Spring-boot来进行Websocket系统的构建。我们的例子将基于这个例子进行修改，但是是使用传统的Spring的方式进行配置。</p>

<h2>依赖包</h2>

<p>首先我们需要添加相关的依赖包:</p>

<ul>
<li>Websocket需要servlet3.1的版本</li>
<li>spring-websocket和spring-messaging是Spring关于Websocket的组件</li>
<li>使用Jackson进行json数据的处理</li>
</ul>


<figure class='code'><figcaption><span>build.gradle </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">String</span> <span class="n">springVersion</span> <span class="o">=</span> <span class="s2">&quot;4.1.4.RELEASE&quot;</span>
</span><span class='line'><span class="n">String</span> <span class="n">jacksonDatabindVersion</span> <span class="o">=</span> <span class="s2">&quot;2.5.0&quot;</span>
</span><span class='line'><span class="n">String</span> <span class="n">jacksonVersion</span> <span class="o">=</span> <span class="s2">&quot;1.9.13&quot;</span>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//websocket</span>
</span><span class='line'>    <span class="n">compile</span><span class="o">(</span><span class="s2">&quot;javax.websocket:javax.websocket-api:1.1&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">compile</span><span class="o">(</span><span class="s2">&quot;javax.servlet:javax.servlet-api:3.1.0&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//spring</span>
</span><span class='line'>    <span class="n">compile</span><span class="o">(</span><span class="s2">&quot;org.springframework:spring-messaging:&quot;</span> <span class="o">+</span> <span class="n">springVersion</span><span class="o">)</span>
</span><span class='line'>    <span class="n">compile</span><span class="o">(</span><span class="s2">&quot;org.springframework:spring-websocket:&quot;</span> <span class="o">+</span> <span class="n">springVersion</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//json</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s2">&quot;com.fasterxml.jackson.core:jackson-databind:&quot;</span> <span class="o">+</span> <span class="n">jacksonDatabindVersion</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s2">&quot;org.codehaus.jackson:jackson-mapper-asl:&quot;</span> <span class="o">+</span> <span class="n">jacksonVersion</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s2">&quot;org.codehaus.jackson:jackson-core-asl:&quot;</span> <span class="o">+</span> <span class="n">jacksonVersion</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>xml配置（类配置）</h2>

<p>我们有两种方式进行Websocket的配置，一种是通过xml文件的方式，在这里我们定义了websocket的配置信息，这样服务器往客户端发送消息就可以通过<code>/topic/xx</code>来发送，客户端则可以通过<code>/app/hello</code>来发送消息到服务端。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:websocket=</span><span class="s">&quot;http://www.springframework.org/schema/websocket&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    ...... // other configurations
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;websocket:message-broker</span> <span class="na">application-destination-prefix=</span><span class="s">&quot;/app&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;websocket:stomp-endpoint</span> <span class="na">path=</span><span class="s">&quot;/hello&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;websocket:sockjs/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/websocket:stomp-endpoint&gt;</span>
</span><span class='line'>        <span class="nt">&lt;websocket:simple-broker</span> <span class="na">prefix=</span><span class="s">&quot;/topic&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/websocket:message-broker&gt;</span>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外一种方式是通过类的方式，代码如下，功能与上面的xml配置相同:</p>

<figure class='code'><figcaption><span>WebSocketConfig.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.messaging.simp.config.MessageBrokerRegistry</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.socket.config.annotation.StompEndpointRegistry</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="nd">@EnableWebSocketMessageBroker</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebSocketConfig</span> <span class="kd">extends</span> <span class="n">AbstractWebSocketMessageBrokerConfigurer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configureMessageBroker</span><span class="o">(</span><span class="n">MessageBrokerRegistry</span> <span class="n">config</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">config</span><span class="o">.</span><span class="na">enableSimpleBroker</span><span class="o">(</span><span class="s">&quot;/topic&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">config</span><span class="o">.</span><span class="na">setApplicationDestinationPrefixes</span><span class="o">(</span><span class="s">&quot;/app&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerStompEndpoints</span><span class="o">(</span><span class="n">StompEndpointRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">registry</span><span class="o">.</span><span class="na">addEndpoint</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">).</span><span class="na">withSockJS</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>消息类和Controller定义</h2>

<p>Controller定义:</p>

<figure class='code'><figcaption><span>WebSocketConfig.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.zzm.wechat.model.Greeting</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.zzm.wechat.model.HelloMessage</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.messaging.handler.annotation.MessageMapping</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.messaging.handler.annotation.SendTo</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GreetingController</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@MessageMapping</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@SendTo</span><span class="o">(</span><span class="s">&quot;/topic/greetings&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Greeting</span> <span class="nf">greeting</span><span class="o">(</span><span class="n">HelloMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span> <span class="c1">// simulated delay</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Greeting</span><span class="o">(</span><span class="s">&quot;Hello, &quot;</span> <span class="o">+</span> <span class="n">message</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>消息model的定义:</p>

<figure class='code'><figcaption><span>WebSocketConfig.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Greeting</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Greeting</span><span class="o">(</span><span class="n">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getContent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloMessage</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在web.xml中设置controller的url前缀，这样可以避免一些页面的url被controller拦截。</p>

<figure class='code'><figcaption><span>web.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>      <span class="nt">&lt;servlet-name&gt;</span>mvc-dispatcher<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>      <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'>        <span class="nt">&lt;load-on-startup&gt;</span>1<span class="nt">&lt;/load-on-startup&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>      <span class="nt">&lt;servlet-name&gt;</span>mvc-dispatcher<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>      <span class="nt">&lt;url-pattern&gt;</span>/api/*<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/servlet-mapping&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>客户端页面</h2>

<p>首先下载<code>stomp.js</code>和<code>sockjs.js</code>，然后编写一个html页面进行客户端websocket的连接，并实现发送消息和接收消息的功能。我们使用SockJS的方式来创建Websocket连接，注意url要加上domain名称(这里是<code>server</code>)和<code>api</code>前缀。</p>

<figure class='code'><figcaption><span>demo.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Hello WebSocket<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;resources/sockjs-0.3.4.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;resources/stomp.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">stompClient</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">setConnected</span><span class="p">(</span><span class="nx">connected</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;connect&#39;</span><span class="p">).</span><span class="nx">disabled</span> <span class="o">=</span> <span class="nx">connected</span><span class="p">;</span>
</span><span class='line'>            <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;disconnect&#39;</span><span class="p">).</span><span class="nx">disabled</span> <span class="o">=</span> <span class="o">!</span><span class="nx">connected</span><span class="p">;</span>
</span><span class='line'>            <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;conversationDiv&#39;</span><span class="p">).</span><span class="nx">style</span><span class="p">.</span><span class="nx">visibility</span> <span class="o">=</span> <span class="nx">connected</span> <span class="o">?</span> <span class="s1">&#39;visible&#39;</span> <span class="o">:</span> <span class="s1">&#39;hidden&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;response&#39;</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">connect</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SockJS</span><span class="p">(</span><span class="s1">&#39;/server/api/hello&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">stompClient</span> <span class="o">=</span> <span class="nx">Stomp</span><span class="p">.</span><span class="nx">over</span><span class="p">(</span><span class="nx">socket</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">stompClient</span><span class="p">.</span><span class="nx">connect</span><span class="p">({},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">frame</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">setConnected</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Connected: &#39;</span> <span class="o">+</span> <span class="nx">frame</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">stompClient</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="s1">&#39;/topic/greetings&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">greeting</span><span class="p">){</span>
</span><span class='line'>                    <span class="nx">showGreeting</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">greeting</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">content</span><span class="p">);</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">disconnect</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">stompClient</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">stompClient</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">setConnected</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Disconnected&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">sendName</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">stompClient</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;/app/hello&quot;</span><span class="p">,</span> <span class="p">{},</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="nx">name</span> <span class="p">}));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">showGreeting</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;response&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">p</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">wordWrap</span> <span class="o">=</span> <span class="s1">&#39;break-word&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">p</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="nx">message</span><span class="p">));</span>
</span><span class='line'>            <span class="nx">response</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body</span> <span class="na">onload=</span><span class="s">&quot;disconnect()&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;noscript&gt;&lt;h2</span> <span class="na">style=</span><span class="s">&quot;color: #ff0000&quot;</span><span class="nt">&gt;</span>Seems your browser doesn&#39;t support Javascript! Websocket relies on Javascript being enabled. Please enable
</span><span class='line'>    Javascript and reload this page!<span class="nt">&lt;/h2&gt;&lt;/noscript&gt;</span>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;connect&quot;</span> <span class="na">onclick=</span><span class="s">&quot;connect();&quot;</span><span class="nt">&gt;</span>Connect<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>        <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;disconnect&quot;</span> <span class="na">disabled=</span><span class="s">&quot;disabled&quot;</span> <span class="na">onclick=</span><span class="s">&quot;disconnect();&quot;</span><span class="nt">&gt;</span>Disconnect<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;conversationDiv&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label&gt;</span>What is your name?<span class="nt">&lt;/label&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;name&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;sendName&quot;</span> <span class="na">onclick=</span><span class="s">&quot;sendName();&quot;</span><span class="nt">&gt;</span>Send<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">&quot;response&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果：</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-5/websocket-run.png"></p>

<p>浏览器console信息:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Disconnected
</span><span class='line'>chrome-extension://fhhdlnnepfjhlhilgmeepgkhjmhhhjkh/js/detector.js:505 detector
</span><span class='line'>chrome-extension://fhhdlnnepfjhlhilgmeepgkhjmhhhjkh/js/detector.js:506 Object
</span><span class='line'>stomp.js:130 Opening Web Socket...
</span><span class='line'>stomp.js:130 Web Socket Opened...
</span><span class='line'>stomp.js:130 &gt;&gt;&gt; CONNECT
</span><span class='line'>accept-version:1.1,1.0
</span><span class='line'>heart-beat:10000,10000
</span><span class='line'>
</span><span class='line'><span class="o">&lt;&lt;&lt;</span> CONNECTED
</span><span class='line'>version:1.1
</span><span class='line'>heart-beat:0,0
</span><span class='line'>
</span><span class='line'>connected to server undefined
</span><span class='line'>demo.html:22 Connected: CONNECTED
</span><span class='line'>heart-beat:0,0
</span><span class='line'>version:1.1
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; SUBSCRIBE
</span><span class='line'>id:sub-0
</span><span class='line'>destination:/topic/greetings
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; SEND
</span><span class='line'>destination:/app/hello
</span><span class='line'>content-length:14
</span><span class='line'>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;name&quot;</span>:<span class="s2">&quot;zzm&quot;</span><span class="o">}</span>
</span><span class='line'><span class="o">&lt;&lt;&lt;</span> MESSAGE
</span><span class='line'>destination:/topic/greetings
</span><span class='line'>content-type:application/json;charset<span class="o">=</span>UTF-8
</span><span class='line'>subscription:sub-0
</span><span class='line'>message-id:3657pj5u-0
</span><span class='line'>content-length:25
</span><span class='line'>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;content&quot;</span>:<span class="s2">&quot;Hello, zzm!&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>gradle运行jetty9</h2>

<p>gradle内置的Jetty版本是Jetty6，由于版本较低不支持websocket，所以我们测试的话需要打包并部署到Jetty9或Tomcat7.0.47+上，但我们可以通过其他gradle插件来把我们的本地服务运行到Jetty9上。这里介绍2个插件，<a href="https://github.com/akhikhl/gretty">Gretty</a>和<a href="https://github.com/bmuschko/gradle-cargo-plugin">Cargo</a>。</p>

<h4>Gretty</h4>

<p>在<code>build.gradle</code>中添加如下脚本:</p>

<figure class='code'><figcaption><span>build.gradle </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">url</span> <span class="s2">&quot;http://maven.oschina.net/content/groups/public/&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s1">&#39;org.akhikhl.gretty:gretty:+&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;org.akhikhl.gretty&#39;</span>
</span><span class='line'><span class="c1">// apply plugin: &#39;jetty&#39; 注意要注释掉原来的jetty插件</span>
</span><span class='line'>
</span><span class='line'><span class="n">gretty</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">httpPort</span> <span class="o">=</span> <span class="mi">9898</span> <span class="c1">// 指定web服务的http端口</span>
</span><span class='line'>    <span class="n">servletContainer</span> <span class="o">=</span> <span class="s1">&#39;jetty9&#39;</span> <span class="c1">// 这里可以指定tomcat,jetty的几个版本</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后运行<code>gradle appRun</code>即可。</p>

<h4>Cargo</h4>

<p>在<code>build.gradle</code>中添加如下脚本，注意要先下载jetty9的安装包并解压:</p>

<figure class='code'><figcaption><span>build.gradle </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">url</span> <span class="s2">&quot;http://maven.oschina.net/content/groups/public/&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s1">&#39;com.bmuschko:gradle-cargo-plugin:2.1&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;com.bmuschko.cargo&#39;</span>
</span><span class='line'><span class="n">cargo</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">containerId</span> <span class="o">=</span> <span class="s1">&#39;jetty9x&#39;</span>
</span><span class='line'>    <span class="n">port</span> <span class="o">=</span> <span class="mi">9898</span>
</span><span class='line'>    <span class="n">local</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">homeDir</span> <span class="o">=</span> <span class="n">file</span><span class="o">(</span><span class="s1">&#39;/Users/zhaozhiming/tools/jetty-distribution-9.2.10.v20150310&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后运行<code>gradle war CargoRunLocal</code>，注意首先要打出war包，然后插件会自动部署war包到Jetty9的安装目录下，这种方式不大灵活，比如一些页面的修改都需要重新部署才能进行测试。</p>

<p>最后附上Spring关于Websocket的文档链接，请见<a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html">这里</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Openfire和Smack进行即时通讯消息开发]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/04/20/openfire-smack-useage/"/>
    <updated>2015-04-20T09:41:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/04/20/openfire-smack-useage</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-4/openfire.png"></p>

<p><a href="http://www.igniterealtime.org/index.jsp">Openfire</a>是由Ignite Realtime公司用Java开发的一个开源即时通讯服务器，基于XMPP协议（Jabber）进行消息交互，最新版本是3.9.3。该公司旗下有多个Java客户端可供使用，较常使用的是<a href="http://www.igniterealtime.org/projects/smack/index.jsp">Smack</a>，最新的版本是4.1.0，最新的版本与以前的版本相比有较大改动，下面我们就来介绍一下Openfire和Smack的使用。</p>

<!--more-->


<p></p>

<h2>Openfire安装</h2>

<p>Openfire的安装非常简单，你可以通过下面几种方式进行安装。</p>

<h4>docker镜像</h4>

<p>最简单的方式你可以通过docker下载<a href="https://registry.hub.docker.com/u/sameersbn/openfire/dockerfile/">Openfire的镜像</a>，然后执行下面的命令启动openfire容器。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker run --name<span class="o">=</span>myopenfire -d <span class="se">\ </span>
</span><span class='line'>  -p 9090:9090 -p 5222:5222 -p 5223:5223 <span class="se">\ </span>
</span><span class='line'>  -p 7777:7777 -p 7070:7070 -p 7443:7443 <span class="se">\ </span>
</span><span class='line'>  -p 5229:5229 -p 5269:5269 sameersbn/openfire:3.9.3-2
</span></code></pre></td></tr></table></div></figure>


<h4>直接安装</h4>

<p>这里是openfire的<a href="http://www.igniterealtime.org/builds/openfire/docs/latest/documentation/install-guide.html">安装向导</a>，有各个平台的指南，不过首先要安装JDK1.5+，然后按照指南进行安装即可。</p>

<h2>Smack</h2>

<p>最新的Smack版本是4.1.0，跟之前版本的API有很大区别，据说4.2.0的API差别会更大，<a href="https://www.igniterealtime.org/builds/smack/docs/latest/documentation/">这里</a>是Smack4.1.0的代码使用示例。</p>

<h4>创建连接</h4>

<p>不同于以前版本的是ConnectionConfig不再是new出来的，而是通过builder来创建。这个导致Spring的integration-xmpp组件不支持使用，只能自己写连接的类了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="n">XMPPTCPConnection</span> <span class="nf">createConnection</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">XMPPTCPConnectionConfiguration</span> <span class="n">connectionConfig</span> <span class="o">=</span> <span class="n">XMPPTCPConnectionConfiguration</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setUsernameAndPassword</span><span class="o">(</span><span class="s">&quot;username&quot;</span><span class="o">,</span> <span class="s">&quot;password&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setServiceName</span><span class="o">(</span><span class="s">&quot;your.server.name&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setHost</span><span class="o">(</span><span class="s">&quot;your.server.ip&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setConnectTimeout</span><span class="o">(</span><span class="mi">3000</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setSendPresence</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span> <span class="c1">// 设置用户是否上线</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setSecurityMode</span><span class="o">(</span><span class="n">ConnectionConfiguration</span><span class="o">.</span><span class="na">SecurityMode</span><span class="o">.</span><span class="na">disabled</span><span class="o">)</span> <span class="c1">//不使用安全模式</span>
</span><span class='line'>                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">XMPPTCPConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XMPPTCPConnection</span><span class="o">(</span><span class="n">connectionConfig</span><span class="o">);</span>
</span><span class='line'>        <span class="n">connection</span><span class="o">.</span><span class="na">connect</span><span class="o">().</span><span class="na">login</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//这里的login方法如果没传username和password，就是以之前set的用户登录，传了的话就是以传入的用户登录</span>
</span><span class='line'>        <span class="k">return</span>  <span class="n">connection</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>创建用户</h4>

<p>像AccountManager这类对象也不再是new出来的，而是通过getInstance传入connection对象得到。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createUser</span><span class="o">(</span><span class="n">XMPPTCPConnectionConfiguration</span> <span class="n">connection</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">AccountManager</span> <span class="n">accountManager</span> <span class="o">=</span> <span class="n">AccountManager</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>        <span class="n">accountManager</span><span class="o">.</span><span class="na">createAccount</span><span class="o">(</span><span class="s">&quot;username&quot;</span><span class="o">,</span> <span class="s">&quot;password&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>发送消息</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendMessage</span><span class="o">(</span><span class="n">XMPPTCPConnectionConfiguration</span> <span class="n">connection</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ChatManager</span> <span class="n">chatManager</span> <span class="o">=</span> <span class="n">ChatManager</span><span class="o">.</span><span class="na">getInstanceFor</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Chat</span> <span class="n">chat</span> <span class="o">=</span> <span class="n">chatManager</span><span class="o">.</span><span class="na">createChat</span><span class="o">(</span><span class="s">&quot;jid like username@your.server.name&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">chat</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="s">&quot;Hello word1!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>获取离线消息</h4>

<p>注意在创建连接时如果setSendPresence没有设为false，那么在获取离线消息时是始终获取不到的，因为setSendPresence表示已上线，一旦用户上线离线消息就没有了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">receiveOfflineMessages</span><span class="o">(</span><span class="n">XMPPTCPConnectionConfiguration</span> <span class="n">connection</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">OfflineMessageManager</span> <span class="n">offlineMessageManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OfflineMessageManager</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">&gt;</span> <span class="n">messages</span> <span class="o">=</span> <span class="n">offlineMessageManager</span><span class="o">.</span><span class="na">getMessages</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Message</span> <span class="n">message</span> <span class="o">:</span> <span class="n">messages</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>删除离线消息</h4>

<p>离线消息是根据时间来删除的，我们可以在header中获取到消息的时间戳。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteOfflineMessages</span><span class="o">(</span><span class="n">XMPPTCPConnectionConfiguration</span> <span class="n">connection</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">OfflineMessageManager</span> <span class="n">offlineMessageManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OfflineMessageManager</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">OfflineMessageHeader</span><span class="o">&gt;</span> <span class="n">headers</span> <span class="o">=</span> <span class="n">offlineMessageManager</span><span class="o">.</span><span class="na">getHeaders</span><span class="o">();</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stamps</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">OfflineMessageHeader</span> <span class="n">header</span> <span class="o">:</span> <span class="n">headers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">stamps</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">header</span><span class="o">.</span><span class="na">getStamp</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">offlineMessageManager</span><span class="o">.</span><span class="na">deleteMessages</span><span class="o">(</span><span class="n">stamps</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>消息的时间我们还可以通过这种方式获取，这里获取到的时间是一个Date对象，而上面的方式是获取一个时间的String。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getMessageTime</span><span class="o">(</span><span class="n">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">DelayInformation</span> <span class="n">delay</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="na">getExtension</span><span class="o">(</span><span class="n">DelayInformation</span><span class="o">.</span><span class="na">ELEMENT</span><span class="o">,</span> <span class="n">DelayInformation</span><span class="o">.</span><span class="na">NAMESPACE</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">delay</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">delay</span><span class="o">.</span><span class="na">getStamp</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">delay</span><span class="o">.</span><span class="na">getStamp</span><span class="o">().</span><span class="na">getTime</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>创建聊天室</h4>

<p>Smack还可以创建多人聊天，openfire服务器搭建好后会默认创建一个名为conference的分组聊天服务，我们可以在上面创建聊天室。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createRoom</span><span class="o">(</span><span class="n">XMPPTCPConnectionConfiguration</span> <span class="n">connection</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">MultiUserChatManager</span> <span class="n">multiUserChatManager</span> <span class="o">=</span> <span class="n">MultiUserChatManager</span><span class="o">.</span><span class="na">getInstanceFor</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>        <span class="n">MultiUserChat</span> <span class="n">muc</span> <span class="o">=</span> <span class="n">multiUserChatManager</span><span class="o">.</span><span class="na">getMultiUserChat</span><span class="o">(</span><span class="s">&quot;room jid like roomname@conference.your.server.name&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">muc</span><span class="o">.</span><span class="na">createOrJoin</span><span class="o">(</span><span class="s">&quot;nickname&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Form</span> <span class="n">form</span> <span class="o">=</span> <span class="n">muc</span><span class="o">.</span><span class="na">getConfigurationForm</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Form</span> <span class="n">submitForm</span> <span class="o">=</span> <span class="n">form</span><span class="o">.</span><span class="na">createAnswerForm</span><span class="o">();</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">FormField</span><span class="o">&gt;</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">form</span><span class="o">.</span><span class="na">getFields</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">FormField</span> <span class="n">field</span> <span class="o">:</span> <span class="n">fields</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">FormField</span><span class="o">.</span><span class="na">Type</span><span class="o">.</span><span class="na">hidden</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">field</span><span class="o">.</span><span class="na">getType</span><span class="o">())</span> <span class="o">&amp;&amp;</span> <span class="n">field</span><span class="o">.</span><span class="na">getVariable</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">submitForm</span><span class="o">.</span><span class="na">setDefaultAnswer</span><span class="o">(</span><span class="n">field</span><span class="o">.</span><span class="na">getVariable</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">// 这里设置聊天室为公共聊天室</span>
</span><span class='line'>        <span class="n">submitForm</span><span class="o">.</span><span class="na">setAnswer</span><span class="o">(</span><span class="s">&quot;muc#roomconfig_publicroom&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// 这里设置聊天室是永久存在的</span>
</span><span class='line'>        <span class="n">submitForm</span><span class="o">.</span><span class="na">setAnswer</span><span class="o">(</span><span class="s">&quot;muc#roomconfig_persistentroom&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">muc</span><span class="o">.</span><span class="na">sendConfigurationForm</span><span class="o">(</span><span class="n">submitForm</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>发送多人聊天消息</h4>

<p>注意: 在发送聊天室消息之前，必须先加入聊天室(调用join方法)，否则发送的消息实际上是没有发送成功的。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendRoomMessage</span><span class="o">(</span><span class="n">XMPPTCPConnectionConfiguration</span> <span class="n">connection</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">MultiUserChatManager</span> <span class="n">multiUserChatManager</span> <span class="o">=</span> <span class="n">MultiUserChatManager</span><span class="o">.</span><span class="na">getInstanceFor</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>        <span class="n">MultiUserChat</span> <span class="n">muc</span> <span class="o">=</span> <span class="n">multiUserChatManager</span><span class="o">.</span><span class="na">getMultiUserChat</span><span class="o">(</span><span class="s">&quot;room jid like roomname@conference.your.server.name&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">muc</span><span class="o">.</span><span class="na">createOrJoin</span><span class="o">(</span><span class="s">&quot;nickname&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">muc</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="s">&quot;hello world&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>获取聊天室消息</h4>

<p>获取聊天室消息，是在加入聊天室时传入一个DiscussionHistory对象，这个对象可以设置需要获取多少条聊天记录，或者从什么时候开始的聊天记录等。<br/>
注意: nextMessage方法如果不带超时参数，会使用默认的连接超时时间，一般是5S，加入时间参数可以缩短整个方法的执行时间。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">&gt;</span> <span class="nf">getRoomChat</span><span class="o">(</span><span class="n">XMPPTCPConnectionConfiguration</span> <span class="n">connection</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">MultiUserChatManager</span> <span class="n">multiUserChatManager</span> <span class="o">=</span> <span class="n">MultiUserChatManager</span><span class="o">.</span><span class="na">getInstanceFor</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>        <span class="n">MultiUserChat</span> <span class="n">muc</span> <span class="o">=</span> <span class="n">multiUserChatManager</span><span class="o">.</span><span class="na">getMultiUserChat</span><span class="o">(</span><span class="s">&quot;room jid like roomname@conference.your.server.name&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">DiscussionHistory</span> <span class="n">discussionHistory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DiscussionHistory</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//取某个时间点开始的聊天室消息</span>
</span><span class='line'>        <span class="n">discussionHistory</span><span class="o">.</span><span class="na">setSince</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">(</span><span class="mi">1427090003460L</span><span class="o">));</span>
</span><span class='line'>        <span class="n">muc</span><span class="o">.</span><span class="na">createOrJoin</span><span class="o">(</span><span class="s">&quot;nick&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">discussionHistory</span><span class="o">,</span> <span class="n">connection</span><span class="o">.</span><span class="na">getPacketReplyTimeout</span><span class="o">());</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">&gt;</span> <span class="n">messages</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">//这里超时时间设置为100毫秒</span>
</span><span class='line'>            <span class="n">Message</span> <span class="n">message</span> <span class="o">=</span> <span class="n">muc</span><span class="o">.</span><span class="na">nextMessage</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">message</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>            <span class="n">messages</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">messages</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>保存聊天消息</h2>

<p>Openfire一般是不保存历史消息的，包括P2P(个人对个人)或MUC(多人聊天)的都不保存，离线消息会暂时保存在<code>ofOffline</code>这张表中，如果离线消息已读就会从该表中删除。</p>

<p>如果我们需要保存历史消息可以通过添加插件的方式来记录。</p>

<ul>
<li>在Openfire控制台，进入<code>插件</code>页面，选择<code>有效的插件</code>，在里面选择Monitoring Service进行添加。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-4/monitoring_service.png"></p>

<ul>
<li>安装完成后可以在<code>插件</code>页面看到已经安装好的插件。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-4/openfire_plugin.png"></p>

<ul>
<li>在<code>服务器</code>页面会看到新增了2个子页面，<code>归档文件</code>和<code>统计表</code>，进入<code>归档文件</code>页面的存档设置勾上<code>Archive one-to-one chats</code>和<code>Archive group chats</code>选项。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-4/openfire_archive.png"></p>

<ul>
<li>设置好后以后不管是个人聊天还是聊天室的聊天记录都会记录到数据库的<code>ofMessageArchive</code>表中，不过消息是异步保存的，大概会在消息发送后1分钟左右再存到数据库。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Spring-data进行Redis操作]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/04/12/spring-data-redis/"/>
    <updated>2015-04-12T15:15:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/04/12/spring-data-redis</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-4/spring-redis.jpg"></p>

<p><a href="http://redis.io/">Redis</a>相信大家都听说过，它是一个开源的key-value缓存数据库，有很多Java的客户端支持，比较有名的有Jedis，JRedis等（见<a href="http://redis.io/clients#java">这里</a>）。当然我们可以使用客户端的原生代码实现redis的操作，但实际上在spring中就已经集成了这些客户端的使用，下面我们就以Jedis为例来介绍一下Spring中关于Redis的配置。</p>

<!--more-->


<p></p>

<h2>下载相关依赖包</h2>

<p>首先要下载spring和redis相关的依赖包，最新的jedis版本是2.6.2，还需要下载jackson的包，这个后面会介绍为什么需要，以gradle脚本示例如下。</p>

<figure class='code'><figcaption><span>build.gradle </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>    compile<span class="o">(</span><span class="s2">&quot;redis.clients:jedis:&quot;</span> + jedisVersion<span class="o">)</span>
</span><span class='line'>    compile <span class="s2">&quot;org.springframework.data:spring-data-redis:&quot;</span> + springDataRedisVersion
</span><span class='line'>
</span><span class='line'>    //json
</span><span class='line'>    compile <span class="s2">&quot;com.fasterxml.jackson.core:jackson-databind:&quot;</span> + jacksonDatabindVersion
</span><span class='line'>    compile <span class="s2">&quot;org.codehaus.jackson:jackson-mapper-asl:&quot;</span> + jacksonVersion
</span><span class='line'>    compile <span class="s2">&quot;org.codehaus.jackson:jackson-core-asl:&quot;</span> + jacksonVersion
</span></code></pre></td></tr></table></div></figure>


<h2>spring配置jedis</h2>

<p>在spring的xml配置文件中，做如下配置。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="c">&lt;!-- 配置redis池，依次为最大实例数，最大空闲实例数，(创建实例时)最大等待时间，(创建实例时)是否验证 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;jedisPoolConfig&quot;</span> <span class="na">class=</span><span class="s">&quot;redis.clients.jedis.JedisPoolConfig&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxTotal&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.maxTotal}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxIdle&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.maxIdle}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxWaitMillis&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.maxWaitMillis}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;testOnBorrow&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.testOnBorrow}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- redis连接配置，依次为主机ip，端口，是否使用池，(usePool=true时)redis的池配置 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;jedisFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;hostName&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.host}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;port&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.port}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;usePool&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;poolConfig&quot;</span> <span class="na">ref=</span><span class="s">&quot;jedisPoolConfig&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- redis模板配置 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;redisTemplate&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.data.redis.core.RedisTemplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;connectionFactory&quot;</span> <span class="na">ref=</span><span class="s">&quot;jedisFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;defaultSerializer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>序列化</h2>

<p>在spring中进行redis存储，如果没有对key和value进行序列化，保存到redis中会出现乱码。注意看上面的redis模板配置，有个配置项是defaultSerializer，这里表示redis中的key和value遇到需要序列化的时候，都默认使用StringRedisSerializer这个类来进行序列化。如果不指定序列化的话，内容会带乱码。</p>

<p>spring-data-redis的序列化类有下面这几个:</p>

<ul>
<li>GenericToStringSerializer: 可以将任何对象泛化为字符串并序列化</li>
<li>Jackson2JsonRedisSerializer: 跟JacksonJsonRedisSerializer实际上是一样的</li>
<li>JacksonJsonRedisSerializer: 序列化object对象为json字符串</li>
<li>JdkSerializationRedisSerializer: 序列化java对象</li>
<li>StringRedisSerializer: 简单的字符串序列化</li>
</ul>


<p>一般如果key-value都是string的话，使用StringRedisSerializer就可以了，如果需要保存对象为json的话推荐使用JacksonJsonRedisSerializer，它不仅可以将对象序列化，还可以将对象转换为json字符串并保存到redis中，但需要和jackson配合一起使用。</p>

<h2>简单的redis操作</h2>

<p>代码示例如下，使用redis进行set和get操作。</p>

<figure class='code'><figcaption><span>MyUserRepository.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Repository</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyUserRepository</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//直接使用autowire就可以引用到配置文件中的redis-template</span>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">RedisTemplate</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">MyUser</span><span class="o">&gt;</span> <span class="n">template</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ValueOperations</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">MyUser</span><span class="o">&gt;</span> <span class="n">operations</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@PostConstruct</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//这里设置value的序列化方式为JacksonJsonRedisSerializer </span>
</span><span class='line'>        <span class="n">template</span><span class="o">.</span><span class="na">setValueSerializer</span><span class="o">(</span><span class="k">new</span> <span class="n">JacksonJsonRedisSerializer</span><span class="o">&lt;&gt;(</span><span class="n">MyUser</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>        <span class="n">operations</span> <span class="o">=</span> <span class="n">template</span><span class="o">.</span><span class="na">opsForValue</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">MyUser</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">operations</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">MyUser</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">operations</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// model</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyUser</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">// ... setter and getter</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 在Controller中调用</span>
</span><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MyUserRepository</span> <span class="n">myUserRepository</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/test&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span>
</span><span class='line'>    <span class="nd">@ResponseBody</span>
</span><span class='line'>    <span class="n">ResponseEntity</span><span class="o">&lt;?&gt;</span> <span class="n">test</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">MyUser</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyUser</span><span class="o">(</span><span class="s">&quot;zhaozhiming&quot;</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="s">&quot;my:user:zhaozhiming&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">myUserRepository</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
</span><span class='line'>        <span class="n">MyUser</span> <span class="n">myUser</span> <span class="o">=</span> <span class="n">myUserRepository</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;my user:%s&quot;</span><span class="o">,</span> <span class="n">myUser</span><span class="o">));</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="n">result</span><span class="o">,</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用set方法后，可以在日志中看到get后的MyUser对象。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> - my user:MyUser<span class="o">{</span><span class="nv">age</span><span class="o">=</span>100, <span class="nv">username</span><span class="o">=</span><span class="s1">&#39;zhaozhiming&#39;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以在redis里面看到保存后的json字符串了。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-4/redis_result.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB简介]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/02/26/hello-mongodb/"/>
    <updated>2015-02-26T16:42:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/02/26/hello-mongodb</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-2/mongodb.jpeg"></p>

<p><a href="http://www.mongodb.org/">MongoDB</a>是一个<a href="http://en.wikipedia.org/wiki/NoSQL">NoSQL</a>(Not only SQL)数据库，使用C++语言编写，当前最新版本为3.0(beta)。</p>

<!--more-->


<p></p>

<h2>安装</h2>

<p>在MongoDB官网上有各个OS的安装指导，但在docker横行的时代，使用docker来安装无疑是最方便的，这里是<a href="https://registry.hub.docker.com/_/mongo/">MongoDB的docker镜像地址</a>，使用非常简单，执行以下命令，docker就会自动下载镜像并启动MongoDB容器了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker run --name somename -d -p 27017:27017 mongo:tag
</span></code></pre></td></tr></table></div></figure>


<h2>客户端</h2>

<p>对比了几个MongoDB的GUI客户端，发现一个比较好用的客户端<a href="http://robomongo.org/">Robomongo</a>，而且是跨平台的，安装完成后点击添加连接，输入ip和端口号就可以连接到你的MongoDB服务器了。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-2/robomongo.png"></p>

<p>PS:因为我是OS系统，用boot2docker来启动docker的，所以我的ip不是<code>localhost</code>，而是<code>192.168.59.103</code>。</p>

<h2>sql查询</h2>

<p>MongoDB是用表达式语言进行数据库操作的，这里<a href="http://www.cnblogs.com/hoojo/archive/2011/06/01/2066426.html">有一篇blog</a>介绍了MongoDB的一些简单操作，并有SQL语句与之对应，下面简单介绍几个命令。</p>

<h4>关系型数据库 vs NoSQL</h4>

<p>在介绍命令之前，需要先理解与关系型数据库两者概念上的区别。</p>

<ul>
<li>表：table vs collection</li>
<li>行：view/row(s) vs json document</li>
<li>索引：index vs index</li>
</ul>


<h4>简单命令</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 创建一个聚集集合（table）</span>
</span><span class='line'>db.createCollection<span class="o">(</span>“collName”, <span class="o">{</span>size: 20, capped: 5, max: 100<span class="o">})</span>;
</span><span class='line'>
</span><span class='line'><span class="c"># 查询集合所有记录</span>
</span><span class='line'>db.userInfo.find<span class="o">()</span>;
</span><span class='line'>相当于: <span class="k">select</span> * from userInfo;
</span><span class='line'>
</span><span class='line'><span class="c"># 查询age = 22的记录</span>
</span><span class='line'>db.userInfo.find<span class="o">({</span><span class="s2">&quot;age&quot;</span>: 22<span class="o">})</span>;
</span><span class='line'>相当于: <span class="k">select</span> * from userInfo where <span class="nv">age</span> <span class="o">=</span> 22;
</span><span class='line'>
</span><span class='line'><span class="c"># 查询name中包含 mongo的数据</span>
</span><span class='line'>db.userInfo.find<span class="o">({</span>name: /mongo/<span class="o">})</span>;
</span><span class='line'>相当于: <span class="k">select</span> * from userInfo where name like ‘%mongo%’;
</span><span class='line'>
</span><span class='line'><span class="c"># 查询name = zhangsan, age = 22的数据</span>
</span><span class='line'>db.userInfo.find<span class="o">({</span>name: <span class="s1">&#39;zhangsan&#39;</span>, age: 22<span class="o">})</span>;
</span><span class='line'>相当于: <span class="k">select</span> * from userInfo where <span class="nv">name</span> <span class="o">=</span> ‘zhangsan’ and <span class="nv">age</span> <span class="o">=</span> ‘22’;
</span><span class='line'>
</span><span class='line'><span class="c"># 更新记录</span>
</span><span class='line'>db.users.update<span class="o">({</span>age: 25<span class="o">}</span>, <span class="o">{</span><span class="nv">$set</span>: <span class="o">{</span>name: <span class="s1">&#39;changeName&#39;</span><span class="o">}}</span>, <span class="nb">false</span>, <span class="nb">true</span><span class="o">)</span>;
</span><span class='line'>相当于: update users <span class="nb">set </span><span class="nv">name</span> <span class="o">=</span> ‘changeName’ where <span class="nv">age</span> <span class="o">=</span> 25;
</span><span class='line'>
</span><span class='line'><span class="c"># 删除</span>
</span><span class='line'>db.users.remove<span class="o">({</span>age: 132<span class="o">})</span>;
</span><span class='line'>相当于: delete from users where <span class="nv">age</span> <span class="o">=</span> 132;
</span></code></pre></td></tr></table></div></figure>


<h2>Java示例</h2>

<p>使用Java来操作MongoDB也比较简单，首先要下载Java驱动，在Maven库上可以查询到，下面是驱动的Gradle定义。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>org.mongodb:mongo-java-driver:3.0.0-beta2
</span></code></pre></td></tr></table></div></figure>


<p>驱动最新的版本是3.0，语法上跟2.x有一些差别，具体示例可以参考<a href="http://docs.mongodb.org/ecosystem/tutorial/getting-started-with-3.0-java-driver/">MongoDB官网的Java示例</a>。</p>

<h4>简单示例</h4>

<figure class='code'><figcaption><span>MyMongoDB.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.BasicDBObject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.MongoClient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.client.FindIterable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.client.MongoCollection</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.client.MongoDatabase</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.bson.Document</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyMongoDb</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">MongoClient</span> <span class="n">mongo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MongoClient</span><span class="o">(</span><span class="s">&quot;192.168.59.103&quot;</span><span class="o">,</span> <span class="mi">27017</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 根据名称查找数据库</span>
</span><span class='line'>        <span class="n">MongoDatabase</span> <span class="n">mydb</span> <span class="o">=</span> <span class="n">mongo</span><span class="o">.</span><span class="na">getDatabase</span><span class="o">(</span><span class="s">&quot;mydb&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// 根据名称查找集合</span>
</span><span class='line'>        <span class="n">MongoCollection</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="n">collection</span> <span class="o">=</span> <span class="n">mydb</span><span class="o">.</span><span class="na">getCollection</span><span class="o">(</span><span class="s">&quot;collectName&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 查询该集合的所有记录</span>
</span><span class='line'>        <span class="n">FindIterable</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="n">documents</span> <span class="o">=</span> <span class="n">collection</span><span class="o">.</span><span class="na">find</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Document</span> <span class="n">document</span> <span class="o">:</span> <span class="n">documents</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">document</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 插入一条记录</span>
</span><span class='line'>        <span class="n">Document</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Document</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;time&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;sex&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;address&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">BasicDBObject</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;china&quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;province&quot;</span><span class="o">,</span> <span class="s">&quot;Sichuan&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">collection</span><span class="o">.</span><span class="na">insertOne</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 更新一条记录</span>
</span><span class='line'>        <span class="n">collection</span><span class="o">.</span><span class="na">updateOne</span><span class="o">(</span><span class="k">new</span> <span class="n">Document</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;time&quot;</span><span class="o">),</span> <span class="k">new</span> <span class="n">Document</span><span class="o">(</span><span class="s">&quot;$set&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Document</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">,</span> <span class="mi">101</span><span class="o">)));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>数据库设计原则</h2>

<p>MongoDB的数据模式有2种结构：引用(References)和内嵌(Embedded)。</p>

<ul>
<li>引用和关系型数据库的表设计比较像，不同的对象放在不同的集合(表)中。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-2/mongo-references.png"></p>

<ul>
<li>内嵌比较特殊，是把对象的关联对象放到一个集合(表)中，这个恰恰是关系系数据库做不到的。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-2/mongo-embedded.png"></p>

<p>那问题来了，什么时候使用引用，什么时候使用内嵌呢？下面是官方给的一些建议，总结如下:</p>

<ul>
<li>顶级对象，一般使用独立的collection，区别于内嵌</li>
<li>线性明细对象如订单里的订单项，一般使用内嵌</li>
<li>包含关系的对象通常使用内嵌</li>
<li>多对多的关系通常采用引用，dbref</li>
<li>只有少量数据的可以单独作为一个collection，这样可以快速缓存到应用服务器内存</li>
<li>内嵌对象比顶级对象难引用，至少现在还不能对它使用dbref</li>
<li>内嵌对象的获取有时候会比较难，例如各科分数内嵌到学生对象，从所有学生中获取前100个高分，不内嵌会更简单</li>
<li>如果内嵌对象数量很多，可以限制其大小</li>
<li>性能存在问题（应是查询的性能），使用内嵌</li>
</ul>


<p>总而言之，数据库的设计需要考虑需求的使用场景，能一次查询到结果的尽量不要分多次进行查询，更多内容可以参考MongoDB官网<a href="http://docs.mongodb.org/manual/core/data-modeling-introduction/">Data Modeling</a>的章节。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信公众账号开发part2——用户消息接收]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/02/04/wechat-public-account-dev-part-2/"/>
    <updated>2015-02-04T16:03:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/02/04/wechat-public-account-dev-part-2</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-2/wechat_part2.jpg"></p>

<p>上一篇写了如何通过微信开发者认证，今天来讲下如何接收用户的消息，我们以接收用户的订阅消息为例。</p>

<!--more-->


<p></p>

<h2>微信用户消息格式</h2>

<p>在开发者文档的<a href="http://mp.weixin.qq.com/wiki/2/5baf56ce4947d35003b86a9805634b1e.html">接收事件推送</a>文档中，说明了用户订阅消息的请求实体，内容如下:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;xml&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ToUserName&gt;</span><span class="cp">&lt;![CDATA[toUser]]&gt;</span><span class="nt">&lt;/ToUserName&gt;</span>
</span><span class='line'>  <span class="nt">&lt;FromUserName&gt;</span><span class="cp">&lt;![CDATA[FromUser]]&gt;</span><span class="nt">&lt;/FromUserName&gt;</span>
</span><span class='line'>  <span class="nt">&lt;CreateTime&gt;</span>123456789<span class="nt">&lt;/CreateTime&gt;</span>
</span><span class='line'>  <span class="nt">&lt;MsgType&gt;</span><span class="cp">&lt;![CDATA[event]]&gt;</span><span class="nt">&lt;/MsgType&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Event&gt;</span><span class="cp">&lt;![CDATA[subscribe]]&gt;</span><span class="nt">&lt;/Event&gt;</span>
</span><span class='line'><span class="nt">&lt;/xml&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ToUserName: 开发者微信号</li>
<li>FromUserName: 用户微信账号的OpenID</li>
<li>CreateTime: 消息发送时间，秒数</li>
<li>MsgType: 消息类型，事件消息为event</li>
<li>Event: 事件类型，订阅消息为subscribe</li>
</ul>


<h2>消息真实性验证</h2>

<blockquote><p>每次开发者接收用户消息的时候，微信也都会带上前面三个参数（signature、timestamp、nonce）访问开发者设置的URL，开发者依然通过对签名的效验判断此条消息的真实性。效验方式与首次提交验证申请一致。</p><footer><strong>微信公众平台开发者文档</strong> <cite><a href='http://mp.weixin.qq.com/wiki/4/2ccadaef44fe1e4b0322355c2312bfa8.html'>验证消息真实性</a></cite></footer></blockquote>


<p>所以每个订阅消息的http请求都会带有（signature、timestamp、nonce）这3个参数和上面的xml请求实体，服务端可以选择是否校验消息的真实性，建议校验，这样会比较安全。</p>

<h2>接收消息后的响应内容</h2>

<p>了解了消息请求的入参后，还需要知道我们处理请求后，需要返回什么样的内容给用户，这个在开发者文档里面好像没有提及，参考各方资料后知道需要返回一段xml内容，格式如下:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;xml&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Content&gt;</span>感谢您关注我的公众账号[愉快]<span class="nt">&lt;/Content&gt;</span>
</span><span class='line'>    <span class="nt">&lt;CreateTime&gt;</span>1423022113<span class="nt">&lt;/CreateTime&gt;</span>
</span><span class='line'>    <span class="nt">&lt;FromUserName&gt;</span>zzm<span class="nt">&lt;/FromUserName&gt;</span>
</span><span class='line'>    <span class="nt">&lt;FuncFlag&gt;</span>0<span class="nt">&lt;/FuncFlag&gt;</span>
</span><span class='line'>    <span class="nt">&lt;MsgType&gt;</span>text<span class="nt">&lt;/MsgType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ToUserName&gt;</span>zzm<span class="nt">&lt;/ToUserName&gt;</span>
</span><span class='line'><span class="nt">&lt;/xml&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ToUserName: <code>用户微信账号的OpenID</code></li>
<li>FromUserName: <code>开发者微信号</code></li>
<li>CreateTime: 消息发送时间，秒数</li>
<li>FuncFlag: 这个暂时不知道是什么，默认值为0</li>
<li>MsgType: 消息类型，文档消息可以为text和其他，这里我们以最简单的text文本消息为例</li>
<li>Content: 返回给订阅用户的消息内容，可以加表情</li>
</ul>


<p>PS: ToUserName和FromUserName这2个参数和请求的xml实体要相反，这个也比较好理解，用户发了条消息过来，你要发个消息回去，ToUserName就变成了用户，FromUserName变成了你自己的公众账号了。</p>

<h2>服务端开发</h2>

<ul>
<li>了解了http请求的入参和出参，我们可以来开发我们的API了，<code>talk is cheap, show me code</code>。</li>
</ul>


<figure class='code'><figcaption><span>MainController.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="c1">//这里我们定义跟之前认证api相同的url，但方法是POST</span>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/index&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span>
</span><span class='line'>    <span class="nd">@ResponseBody</span>
</span><span class='line'>    <span class="c1">//3个校验消息真实性的参数，还有一个request实体body，里面是xml文本</span>
</span><span class='line'>    <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">receive</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;signature&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">signature</span><span class="o">,</span>
</span><span class='line'>                                   <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;timestamp&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">timestamp</span><span class="o">,</span>
</span><span class='line'>                                   <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;nonce&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">nonce</span><span class="o">,</span>
</span><span class='line'>                                   <span class="nd">@RequestBody</span> <span class="n">String</span> <span class="n">body</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;receive message start&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;signature:%s, timestamp:%s, nonce:%s&quot;</span><span class="o">,</span> <span class="n">signature</span><span class="o">,</span> <span class="n">timestamp</span><span class="o">,</span> <span class="n">nonce</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//先校验消息的真实性，如果校验失败，则返回400</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">wechatAuth</span><span class="o">(</span><span class="n">signature</span><span class="o">,</span> <span class="n">timestamp</span><span class="o">,</span> <span class="n">nonce</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;wechat auth failed&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="s">&quot;wechat auth failed.&quot;</span><span class="o">,</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;body:%s&quot;</span><span class="o">,</span> <span class="n">body</span><span class="o">));</span>
</span><span class='line'>        <span class="c1">//我们定义了一个util来解析xml，将其转换为一个object</span>
</span><span class='line'>        <span class="n">TextMessage</span> <span class="n">requestMessage</span> <span class="o">=</span> <span class="n">XmlUtil</span><span class="o">.</span><span class="na">toTextMessage</span><span class="o">(</span><span class="n">body</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;requestMessage:%s&quot;</span><span class="o">,</span> <span class="n">requestMessage</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">TextMessage</span> <span class="n">textMessage</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">msgType</span> <span class="o">=</span> <span class="n">requestMessage</span><span class="o">.</span><span class="na">getMsgType</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">toUserName</span> <span class="o">=</span> <span class="n">requestMessage</span><span class="o">.</span><span class="na">getToUserName</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">fromUserName</span> <span class="o">=</span> <span class="n">requestMessage</span><span class="o">.</span><span class="na">getFromUserName</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//判断消息类型，如果是event，且事件类型为subscribe，则新建一个文本消息</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">MessageType</span><span class="o">.</span><span class="na">event</span><span class="o">.</span><span class="na">name</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">msgType</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">EventType</span><span class="o">.</span><span class="na">subscribe</span><span class="o">.</span><span class="na">name</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">requestMessage</span><span class="o">.</span><span class="na">getEvent</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&quot;感谢您关注我的公众账号[愉快]&quot;</span><span class="o">;</span>
</span><span class='line'>                <span class="n">textMessage</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TextMessage</span><span class="o">(</span><span class="n">toUserName</span><span class="o">,</span> <span class="n">fromUserName</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">MessageType</span><span class="o">.</span><span class="na">text</span><span class="o">.</span><span class="na">name</span><span class="o">(),</span> <span class="n">message</span><span class="o">,</span> <span class="n">TimeUtil</span><span class="o">.</span><span class="na">currentSeconds</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//将文本消息转换为xml文本</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">responseMessage</span> <span class="o">=</span> <span class="n">XmlUtil</span><span class="o">.</span><span class="na">toXml</span><span class="o">(</span><span class="n">textMessage</span><span class="o">);</span>
</span><span class='line'>        <span class="n">HttpHeaders</span> <span class="n">responseHeaders</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpHeaders</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//设置返回实体的编码，不设置的话可能会变成乱码</span>
</span><span class='line'>        <span class="n">responseHeaders</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Content-Type&quot;</span><span class="o">,</span> <span class="s">&quot;text/html; charset=utf-8&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;response message: %s&quot;</span><span class="o">,</span> <span class="n">responseMessage</span><span class="o">));</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;receive message finish&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="n">responseMessage</span><span class="o">,</span> <span class="n">responseHeaders</span><span class="o">,</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这里使用java原生的JAXB来解析xml。</li>
</ul>


<figure class='code'><figcaption><span>XmlUtil.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.zzm.wechat.model.TextMessage</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.io.IOUtils</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.JAXBContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.Marshaller</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.Unmarshaller</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.StringReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.StringWriter</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">XmlUtil</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toXml</span><span class="o">(</span><span class="n">TextMessage</span> <span class="n">textMessage</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">textMessage</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">JAXBContext</span> <span class="n">context</span> <span class="o">=</span> <span class="n">JAXBContext</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">TextMessage</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Marshaller</span> <span class="n">m</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">createMarshaller</span><span class="o">();</span>
</span><span class='line'>        <span class="n">m</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="n">Marshaller</span><span class="o">.</span><span class="na">JAXB_FORMATTED_OUTPUT</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">m</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="n">Marshaller</span><span class="o">.</span><span class="na">JAXB_FRAGMENT</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">StringWriter</span> <span class="n">sw</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">();</span>
</span><span class='line'>        <span class="n">m</span><span class="o">.</span><span class="na">marshal</span><span class="o">(</span><span class="n">textMessage</span><span class="o">,</span> <span class="n">sw</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sw</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">TextMessage</span> <span class="nf">toTextMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">xml</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">JAXBContext</span> <span class="n">jaxbContext</span> <span class="o">=</span> <span class="n">JAXBContext</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">TextMessage</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Unmarshaller</span> <span class="n">jaxbUnmarshaller</span> <span class="o">=</span> <span class="n">jaxbContext</span><span class="o">.</span><span class="na">createUnmarshaller</span><span class="o">();</span>
</span><span class='line'>        <span class="n">StringReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringReader</span><span class="o">(</span><span class="n">xml</span><span class="o">);</span>
</span><span class='line'>        <span class="n">TextMessage</span> <span class="n">textMessage</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextMessage</span><span class="o">)</span> <span class="n">jaxbUnmarshaller</span><span class="o">.</span><span class="na">unmarshal</span><span class="o">(</span><span class="n">reader</span><span class="o">);</span>
</span><span class='line'>        <span class="n">IOUtils</span><span class="o">.</span><span class="na">closeQuietly</span><span class="o">(</span><span class="n">reader</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">textMessage</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>定义消息的model类，这里需要用到xml的一些annotation。</li>
</ul>


<figure class='code'><figcaption><span>XmlUtil.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlElement</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlRootElement</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//定义命名空间，如果不写的话，xml会以类名开头: &lt;TextMessage&gt;...&lt;/TextMessage&gt;，写了就会以xml开头: &lt;xml&gt;...&lt;/xml&gt;</span>
</span><span class='line'><span class="nd">@XmlRootElement</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;xml&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TextMessage</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">fromUserName</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">toUserName</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">msgType</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">funcFlag</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">event</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">long</span> <span class="n">createTime</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">TextMessage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">TextMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">fromUserName</span><span class="o">,</span> <span class="n">String</span> <span class="n">toUserName</span><span class="o">,</span> <span class="n">String</span> <span class="n">msgType</span><span class="o">,</span> <span class="n">String</span> <span class="n">content</span><span class="o">,</span> <span class="kt">long</span> <span class="n">createTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">fromUserName</span> <span class="o">=</span> <span class="n">fromUserName</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">toUserName</span> <span class="o">=</span> <span class="n">toUserName</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">msgType</span> <span class="o">=</span> <span class="n">msgType</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">createTime</span> <span class="o">=</span> <span class="n">createTime</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getToUserName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">toUserName</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//定义xml子项的名称，不写这个annotation的话，转换后的xml是: &lt;toUserName&gt;xxx&lt;/toUserName&gt;，首字母变小写了，会导致消息传输错误</span>
</span><span class='line'>    <span class="nd">@XmlElement</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;ToUserName&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setToUserName</span><span class="o">(</span><span class="n">String</span> <span class="n">toUserName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">toUserName</span> <span class="o">=</span> <span class="n">toUserName</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//other setter and getter</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>方法写完以后，同样的打包，部署SAE。</p></li>
<li><p>打开手机，关注你的公众账号后，就可以看到服务端传过来的消息内容了。</p></li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-2/wechat_subscribe.png"></p>

<p>我的公众账号是<code>赵芝明的公账号</code>，有兴趣的也可以加一下，以后这个公共账号的功能肯定会慢慢丰富的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信公众账号开发part1——开发者验证]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/02/04/wechat-public-account-dev-part-1/"/>
    <updated>2015-02-04T13:51:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/02/04/wechat-public-account-dev-part-1</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-2/wechat.jpg"></p>

<p>最近在了解微信公众账号的开发，准备边学边写一些文章来记录学习的过程，主要是基于微信的开发者模式来进行公共账号的开发，服务器选择新浪云SAE，语言还是选择比较熟悉的JAVA。</p>

<!--more-->


<p></p>

<h2>基本准备</h2>

<ul>
<li>登陆微信公众平台网站: <code>https://mp.weixin.qq.com</code>，进行账号注册，具体可以参考<a href="http://segmentfault.com/blog/zetd/1190000000356021">青龙老贼的这篇文章</a>，虽然内容有点老跟现在的不大一样，但不影响参考。</li>
<li>在SAE上面新建一个JAVA应用，这里还是可以参照<a href="http://segmentfault.com/blog/zetd/1190000000356067">青龙老贼的文章</a>，跟里面不同的是我们要创建一个JAVA的应用，而不是PHP的。</li>
</ul>


<h2>修改开发者中心的配置</h2>

<ul>
<li>登陆进到微信公众平台后，点击左下角的开发者中心，再点击图中的修改配置按钮，就可以进到修改配置页面。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-2/wechat_config_1.png"></p>

<ul>
<li>填写配置项

<ul>
<li>输入你的SAE的应用URL，比如:<code>http://xxx.sinaapp.com</code>，不一定要写应用的基本URL，可以在上面加一些扩展，比如<code>http://xxx.sinaapp.com/xxx</code>，这个要看你的应用的restful怎么定了。</li>
<li>TOKEN随便输入一个字符串就可以，这个值后面是要配置到java应用里面的，可以理解为一个加密的密钥。</li>
<li>EncodingAESKey随机生成。</li>
<li>消息加解密方式暂时选择明文模式。</li>
</ul>
</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-2/wechat_config_2.png"></p>

<h2>微信服务端开发</h2>

<ul>
<li><p>新建一个spring mvc工程，可以参照<a href="https://confluence.jetbrains.com/display/IntelliJIDEA/Getting+Started+with+Spring+MVC,+Hibernate+and+JSON">这个文章</a>，但我们暂时不需要数据库和页面，只需要定义restful接口就可以了。</p></li>
<li><p>新建Controller并定义认证的api，可以参考微信公众平台开发者文档里面的<a href="http://mp.weixin.qq.com/wiki/17/2d4265491f12608cd170a95559800f2d.html">接入指南</a>，里面有段php代码是指导服务端怎么开发的，我们要做的只是把它翻译成JAVA。</p></li>
</ul>


<figure class='code'><figcaption><span>MainController.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.google.common.base.Joiner</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.common.collect.Lists</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.logging.Log</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.logging.LogFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.http.HttpStatus</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.http.ResponseEntity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.security.MessageDigest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
</span><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainController</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Log</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LogFactory</span><span class="o">.</span><span class="na">getLog</span><span class="o">(</span><span class="n">MainController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//从配置文件获取的token值，就是刚才在修改配置项里面定义的那个Token</span>
</span><span class='line'>    <span class="nd">@Value</span><span class="o">(</span><span class="s">&quot;${token}&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">token</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//定义一个GET请求，url为xxx/index</span>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/index&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="n">produces</span> <span class="o">=</span> <span class="s">&quot;text/html;charset=UTF-8&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span>
</span><span class='line'>    <span class="nd">@ResponseBody</span>
</span><span class='line'>    <span class="c1">//接收新手指南里面提到的那4个参数</span>
</span><span class='line'>    <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">auth</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;signature&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">signature</span><span class="o">,</span>
</span><span class='line'>                                <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;timestamp&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">timestamp</span><span class="o">,</span>
</span><span class='line'>                                <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;nonce&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">nonce</span><span class="o">,</span>
</span><span class='line'>                                <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;echostr&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">echostr</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;wechat auth start&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;signature:%s, timestamp:%s, nonce:%s, echostr:%s&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="n">signature</span><span class="o">,</span> <span class="n">timestamp</span><span class="o">,</span> <span class="n">nonce</span><span class="o">,</span> <span class="n">echostr</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//如果认证通过，原样返回echostr值，并返回200的response</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">wechatAuth</span><span class="o">(</span><span class="n">signature</span><span class="o">,</span> <span class="n">timestamp</span><span class="o">,</span> <span class="n">nonce</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;wechat auth success&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="n">echostr</span><span class="o">,</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//如果失败，则返回400，并提示认证失败</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;wechat auth failed&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="s">&quot;wechat auth failed.&quot;</span><span class="o">,</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">wechatAuth</span><span class="o">(</span><span class="n">String</span> <span class="n">signature</span><span class="o">,</span> <span class="n">String</span> <span class="n">timestamp</span><span class="o">,</span> <span class="n">String</span> <span class="n">nonce</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//将这3个string放到一个list里</span>
</span><span class='line'>        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="n">token</span><span class="o">,</span> <span class="n">timestamp</span><span class="o">,</span> <span class="n">nonce</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;before sort array:%s&quot;</span><span class="o">,</span> <span class="n">strings</span><span class="o">));</span>
</span><span class='line'>        <span class="c1">//按字母顺序做一下排序</span>
</span><span class='line'>        <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">strings</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;after sort array:%s&quot;</span><span class="o">,</span> <span class="n">strings</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//将list里面所有string组合成一个string，这里用到了guava的Joiner</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">groupString</span> <span class="o">=</span> <span class="n">Joiner</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">).</span><span class="na">join</span><span class="o">(</span><span class="n">strings</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;groupString string:%s&quot;</span><span class="o">,</span> <span class="n">groupString</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//用SHA1加密该string</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">sha1</span><span class="o">(</span><span class="n">groupString</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;sha1:%s&quot;</span><span class="o">,</span> <span class="n">result</span><span class="o">));</span>
</span><span class='line'>        <span class="c1">//加密后的值和signature进行比较，注意用java加密后都是字母都是大写的，而传过来的signature是小写字母，所以要大小写转换一下</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">compareResult</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">signature</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">());</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;compare result:%b&quot;</span><span class="o">,</span> <span class="n">compareResult</span><span class="o">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">compareResult</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//类似php的sha1方法</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="nf">sha1</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Create MD5 Hash</span>
</span><span class='line'>            <span class="n">MessageDigest</span> <span class="n">digest</span> <span class="o">=</span> <span class="n">MessageDigest</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">&quot;SHA-1&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">digest</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'>            <span class="kt">byte</span> <span class="n">messageDigest</span><span class="o">[]</span> <span class="o">=</span> <span class="n">digest</span><span class="o">.</span><span class="na">digest</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Create Hex String</span>
</span><span class='line'>            <span class="n">StringBuilder</span> <span class="n">hexString</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">aMessageDigest</span> <span class="o">:</span> <span class="n">messageDigest</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">hexString</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%02X&quot;</span><span class="o">,</span> <span class="mh">0xFF</span> <span class="o">&amp;</span> <span class="n">aMessageDigest</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">hexString</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;sha1 failed&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将工程打包成war，上传到SAE完成部署，启动应用</li>
</ul>


<h2>启用开发者模式</h2>

<ul>
<li>进到微信公众平台的开发者中心，点击服务器配置那一行后面的启用按钮，如果服务器正常启动的话，就可以看到启用成功的提示了。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-2/wechat_start.png"></p>

<p>更多代码可以看这里: <a href="https://github.com/zhaozhiming/wechat-blog%EF%BC%8C%E8%A7%89%E5%BE%97%E5%A5%BD%E7%9A%84%E8%AF%9D%E8%AF%B7Star%E4%B8%80%E4%B8%8B%E5%90%A7%EF%BC%8C%E8%B0%A2%E8%B0%A2">https://github.com/zhaozhiming/wechat-blog%EF%BC%8C%E8%A7%89%E5%BE%97%E5%A5%BD%E7%9A%84%E8%AF%9D%E8%AF%B7Star%E4%B8%80%E4%B8%8B%E5%90%A7%EF%BC%8C%E8%B0%A2%E8%B0%A2</a></p>
]]></content>
  </entry>
  
</feed>
