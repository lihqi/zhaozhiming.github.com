<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2014-10-03T16:27:39+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Vagrant和Ansible搭建Ceph环境]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/10/02/ceph-install-with-vagrant-and-ansible/"/>
    <updated>2014-10-02T22:03:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/10/02/ceph-install-with-vagrant-and-ansible</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-9/ceph-install.jpg"></p>

<h2><a href="http://ceph.com/">Ceph</a>简介</h2>

<p>Ceph是一个高性能，高可用，高扩展的分布式对象存储框架和文件系统，而且是一个免费开源的项目。</p>

<p>但是Ceph的环境搭建起来比较麻烦，最简单的环境也需要2台VM(虚拟机，1台做mon和osd，另外一台做gateway)，而且按照官方文档上面的指南进行安装，经常报各种莫名其妙的问题，现在给大家介绍一个简单的方法来进行Ceph环境的搭建。下面先介绍几个要用到的工具。</p>

<!--more-->


<h2><a href="https://www.vagrantup.com/">Vagrant</a></h2>

<p><img src="http://zhaozhiming.github.io/images/post/2014-9/vagrant.png"></p>

<p>以前使用VM情况是这样的:</p>

<ul>
<li>下载操作系统的iso镜像</li>
<li>通过VM管理工具(VMWare，VirtualBox等)将iso镜像转换为VM</li>
<li>登陆到VM进行操作</li>
</ul>


<p>整个过程复杂而且漫长，但是使用了Vagrant之后就非常方便了，一个命令就可以搞定VM的安装，ssh到VM也无需输入用户名密码，还可以查看所有VM的状态等。</p>

<h3>Box</h3>

<p>vagrant通过box来生成VM，box可以理解是一个制作好的VM，这意味着你搭建完自己的开发环境后，也可以将其制作成一个box，供团队其他成员使用。</p>

<p>box的容量非常小，比如Ubuntu12.04的一个iso镜像一般要500多M，制作成VM可能要10G左右，而一个ubuntu12.04的box只有300多M。Vagrant的box可以在<a href="https://vagrantcloud.com/discover/featured">这里</a>下载，除了有各种OS(ubuntu, windosw, CentOS等)的VM外，还有Virtualbox和VMWare各自对应的box，不过要使用VMWare的box，需要安装插件和到购买相关的<a href="https://www.vagrantup.com/VMware">License</a>，毕竟VMWare不是免费的软件。</p>

<p>下载了box后，执行下面命令就可以添加box了，如果直接输入box名称并发现本地没有box的话，会自动下载box文件。(<code>PS: Vagrant默认使用Virtualbox作为虚拟器软件，所以在安装Vagrant还需要先安装Virtualbox。</code>)</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>//添加本地box文件
</span><span class='line'><span class="nv">$ </span>vagrant box add /your/box/path/xxx.box
</span><span class='line'>//添加指定名称的box，没有的话会自动下载box文件
</span><span class='line'><span class="nv">$ </span>vagrant box add hashicorp/precise32
</span><span class='line'>//列出所有的box
</span><span class='line'><span class="nv">$ </span>vagrant box list
</span></code></pre></td></tr></table></div></figure>


<h3>Vagrant基本操作</h3>

<p>Vagrant的操作非常简单，现在介绍几个常用的操作指令。(<code>PS: 下面的大部分命令后面可以跟VM名称，不跟的话是对所有的VM进行操作。</code>)</p>

<ul>
<li>vagrant status: 展示VM的信息。</li>
<li>vagrant up: 启动VM。</li>
<li>vagrant ssh [VM]: ssh到某个VM上，无需输入用户名和密码。</li>
<li>vagrant halt: 关闭VM。</li>
<li>vagrant destroy: 销毁VM，如果你的VM被你玩残了，销毁它然后重新启动一个就可以了，很方便。</li>
</ul>


<h3>Vagrant共享</h3>

<p>使用<code>vagrant ssh</code>到VM后，可以看到根目录下有个<code>/vagrant</code>文件夹，这个是VM和工程间的共享目录，在这个文件夹里面存放东西，可以在存放Vagrantfile的目录里面看到，反之亦然，在VM里面也可以读取到工程下的文件。</p>

<h3>Vagrantfile</h3>

<p>初始化vagrant工程后可以看到一个<code>Vagrantfile</code>的文件，这个是配置VM的文件，可以看下面的例子:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">VM</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;hashicorp/precise64&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">VM</span><span class="o">.</span><span class="n">define</span> <span class="ss">:rgw</span> <span class="k">do</span> <span class="o">|</span><span class="n">rgw</span><span class="o">|</span>
</span><span class='line'>    <span class="n">rgw</span><span class="o">.</span><span class="n">VM</span><span class="o">.</span><span class="n">network</span> <span class="ss">:private_network</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="s2">&quot;192.168.42.2&quot;</span>
</span><span class='line'>    <span class="n">rgw</span><span class="o">.</span><span class="n">VM</span><span class="o">.</span><span class="n">host_name</span> <span class="o">=</span> <span class="s2">&quot;ceph-rgw&quot;</span>
</span><span class='line'>    <span class="n">rgw</span><span class="o">.</span><span class="n">VM</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:virtualbox</span> <span class="k">do</span> <span class="o">|</span><span class="n">vb</span><span class="o">|</span>
</span><span class='line'>      <span class="n">vb</span><span class="o">.</span><span class="n">customize</span> <span class="o">[</span><span class="s2">&quot;modifyVM&quot;</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="s2">&quot;--memory&quot;</span><span class="p">,</span> <span class="s2">&quot;192&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">rgw</span><span class="o">.</span><span class="n">VM</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:VMware_fusion</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>      <span class="n">v</span><span class="o">.</span><span class="n">VMx</span><span class="o">[</span><span class="s1">&#39;memsize&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;192&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个Vagrantfile指定了box的名称，然后创建了一个名称为<code>rgw</code>的VM，指定了VM的ip、hostname、内存大小。</p>

<p>关于vagrant就介绍到这里，想要了解更多信息可以查看<a href="https://www.vagrantup.com/">vagrant官网</a>。</p>

<h2><a href="http://www.ansible.com/home">Ansible</a></h2>

<p><img src="http://zhaozhiming.github.io/images/post/2014-9/ansible.jpg"></p>

<p>Ansible是一个开源的远程机器管理软件，可以批量操作多台远程服务器。(<code>PS: Ansible只适合操作Linux和Unix机器，如果是Windows系统是不可以的。</code>)</p>

<h3>安装</h3>

<p>要安装Ansible需要先安装Python2.6/7，然后可以通过easy_install或pip进行下载安装。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo esay_install ansible
</span><span class='line'><span class="c"># or</span>
</span><span class='line'>sudo pip install ansible
</span></code></pre></td></tr></table></div></figure>


<h3>使用示例</h3>

<p>创建一个文件夹，在文件夹里面创建一个hosts文件，hosts格式如下:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># hosts</span>
</span><span class='line'><span class="o">[</span>ceph<span class="o">]</span>
</span><span class='line'>192.168.42.2
</span><span class='line'>192.168.42.101
</span><span class='line'>192.168.42.201
</span></code></pre></td></tr></table></div></figure>


<p>可以看到hosts文件里面有几个远程机器的ip(这里是虚拟机)，远程机器可以分组，通过中括号里面的组名来划分。</p>

<p>然后执行下面的命令执行简单的命令。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ansible all -a <span class="s1">&#39;who&#39;</span>
</span><span class='line'>ceph-mon0 | success | <span class="nv">rc</span><span class="o">=</span>0 &gt;&gt;
</span><span class='line'>ceph     pts/0        2014-10-02 08:54 <span class="o">(</span>192.168.42.60<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>ceph-osd0 | success | <span class="nv">rc</span><span class="o">=</span>0 &gt;&gt;
</span><span class='line'>ceph     pts/0        2014-10-02 08:54 <span class="o">(</span>192.168.42.60<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>ceph-osd1 | success | <span class="nv">rc</span><span class="o">=</span>0 &gt;&gt;
</span><span class='line'>ceph     pts/0        2014-10-02 08:54 <span class="o">(</span>192.168.42.60<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>从输出信息上可以看到这几台远程机器都成功执行了<code>who</code>命令，不过如果要成功执行上面的命令，还需要先在执行机和远程机上面设置无密码ssh连接。</p>

<h3>无密码ssh连接</h3>

<p>假设有2台机器，机器A和机器B，现在想让机器A<code>ssh</code>机器B的时候不需要输入用户和密码，操作如下。</p>

<ul>
<li>在机器B上创建一个用户，并配置好，下面命令的<code>username</code>指自己要创建的用户名。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo useradd -d /home/<span class="o">{</span>username<span class="o">}</span> -m <span class="o">{</span>username<span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>sudo passwd <span class="o">{</span>username<span class="o">}</span>
</span><span class='line'><span class="c"># 输入密码</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;{username} ALL = (root) NOPASSWD:ALL&quot;</span> | sudo tee /etc/sudoers.d/<span class="o">{</span>username<span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>sudo chmod 0440 /etc/sudoers.d/<span class="o">{</span>username<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在机器A上生成密钥，并发送给机器B。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ssh-keygen
</span><span class='line'>
</span><span class='line'>Generating public/private key pair.
</span><span class='line'>Enter file in which to save the key <span class="o">(</span>/ceph-admin/.ssh/id_rsa<span class="o">)</span>:
</span><span class='line'>Enter passphrase <span class="o">(</span>empty <span class="k">for </span>no passphrase<span class="o">)</span>:
</span><span class='line'>Enter same passphrase again:
</span><span class='line'>Your identification has been saved in /ceph-admin/.ssh/id_rsa.
</span><span class='line'>Your public key has been saved in /ceph-admin/.ssh/id_rsa.pub.
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ssh-copy-id <span class="o">{</span>username<span class="o">}</span>@<span class="o">{</span>机器B<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>到这里就可以不用输入密码进行ssh了，如果想连用户名也不想输入的话，需要机器A在<code>.ssh</code>文件下创建一个<code>config</code>文件，在里面添加如下内容。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Host 机器B
</span><span class='line'>   Hostname 机器B
</span><span class='line'>   User <span class="o">{</span>username<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>playbook</h3>

<p>ansible还可以通过一个playbook脚本进行远程机器的操作，playbook的示例如下:</p>

<figure class='code'><figcaption><span>playbook.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># playbook.yml</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">all</span>
</span><span class='line'>  <span class="l-Scalar-Plain">remote_user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ceph</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">whoami</span>
</span><span class='line'>      <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="s">&#39;whoami</span><span class="nv"> </span><span class="s">&gt;</span><span class="nv"> </span><span class="s">whoami.rst&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建完playbook文件后执行如下命令可以看到执行结果。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ansible-playbook playbook.yml
</span><span class='line'>
</span><span class='line'>PLAY <span class="o">[</span>all<span class="o">]</span> ********************************************************************
</span><span class='line'>
</span><span class='line'>GATHERING FACTS ***************************************************************
</span><span class='line'>ok: <span class="o">[</span>ceph-mon0<span class="o">]</span>
</span><span class='line'>ok: <span class="o">[</span>ceph-osd1<span class="o">]</span>
</span><span class='line'>ok: <span class="o">[</span>ceph-osd0<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>TASK: <span class="o">[</span>whoami<span class="o">]</span> ****************************************************************
</span><span class='line'>changed: <span class="o">[</span>ceph-mon0<span class="o">]</span>
</span><span class='line'>changed: <span class="o">[</span>ceph-osd0<span class="o">]</span>
</span><span class='line'>changed: <span class="o">[</span>ceph-osd1<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>PLAY RECAP ********************************************************************
</span><span class='line'>ceph-mon0                  : <span class="nv">ok</span><span class="o">=</span>2    <span class="nv">changed</span><span class="o">=</span>1    <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>ceph-osd0                  : <span class="nv">ok</span><span class="o">=</span>2    <span class="nv">changed</span><span class="o">=</span>1    <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>ceph-osd1                  : <span class="nv">ok</span><span class="o">=</span>2    <span class="nv">changed</span><span class="o">=</span>1    <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>这时可以在远程机器的用户目录上可以看到新产生了一个<code>whoami.rst</code>的文件。</p>

<p>关于ansible就介绍到这里，想要了解更多信息可以查看<a href="http://docs.ansible.com/">ansible的文档</a>。</p>

<h2><a href="https://github.com/ceph/ceph-ansible">Ceph-ansible</a></h2>

<p>这个github项目主要是利用了上面介绍的2个工具，使用vagrant来创建ceph需要的服务器VM，然后将ceph的环境搭建通过ansible的playbook脚本执行。</p>

<h3>执行步骤</h3>

<ul>
<li>下载ceph-ansible项目;</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone https://github.com/ceph/ceph-ansible.git
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>一行命令就可以完成环境搭建，完成后ceph的环境是: 3个mon，3个osd，1个rgw;</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>mon0                       : <span class="nv">ok</span><span class="o">=</span>16   <span class="nv">changed</span><span class="o">=</span>11   <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>mon1                       : <span class="nv">ok</span><span class="o">=</span>16   <span class="nv">changed</span><span class="o">=</span>10   <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>mon2                       : <span class="nv">ok</span><span class="o">=</span>16   <span class="nv">changed</span><span class="o">=</span>11   <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>osd0                       : <span class="nv">ok</span><span class="o">=</span>19   <span class="nv">changed</span><span class="o">=</span>7    <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>osd1                       : <span class="nv">ok</span><span class="o">=</span>19   <span class="nv">changed</span><span class="o">=</span>7    <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>osd2                       : <span class="nv">ok</span><span class="o">=</span>19   <span class="nv">changed</span><span class="o">=</span>7    <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>rgw                        : <span class="nv">ok</span><span class="o">=</span>20   <span class="nv">changed</span><span class="o">=</span>17   <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redhat企业版无网环境下安装Dokuwiki]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/09/17/red-hat-enterprise-offline-env-install-dokuwiki/"/>
    <updated>2014-09-17T12:23:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/09/17/red-hat-enterprise-offline-env-install-dokuwiki</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-9/dokuwiki.png"></p>

<h2><a href="https://www.dokuwiki.org">Dokuwiki</a>介绍</h2>

<p>Dokuwiki是一个轻量级，高可用，免费开源的wiki软件，它不需要DB数据库，wiki内容直接以文本文件形式存储在文件系统上。Dokuwiki语法简洁易懂，管理维护简单，支持扩展多种模板展示wiki网站，还可以使用很多开源的插件来增加wiki的功能，比一般的传统wiki更加强大，更容易使用。</p>

<!--more-->


<h2>环境与版本</h2>

<ul>
<li>操作系统: Redhat Enterprise Linux Server release 6.4 (Santiago)</li>
<li>网络环境: 无法连接网络</li>
<li>Dokuwiki版本: 最新版</li>
<li>Apache Http Server版本: 2.4.10</li>
<li>PHP版本: 5.6.0</li>
</ul>


<p>下面是Dokuwiki的系统要求:</p>

<blockquote><p>DokuWiki System Requirements<br/>1. Webserver supporting PHP<br/>2. PHP version 5.2 or later</p></blockquote>


<h2>安装Apache Http Server(httpd)</h2>

<p>没有网络安装Linux软件是比较苦逼的，需要先安装该软件依赖的软件，如果依赖层次较深，就需要先安装完很多依赖软件后才能安装该软件。如果有网络的情况下，直接使用<code>yum install</code>或<code>apt-get install</code>就可以把相关依赖的软件都一起安装了。</p>

<p>先看一下httpd的安装要求:</p>

<ul>
<li>APR和APR-Util</li>
</ul>


<p>先确定系统已经安装了这2个软件，如果没有的话先到<a href="http://apr.apache.org">Apache APR</a>下载源码包，下载完成后分别解压到httpd的<code>scrlib/apr</code>和<code>srclib/apr-util</code>(<code>srclib</code>在httpd的压缩文件解压后的目录里面)，解压后的目录结构如下。后面在安装httpd的时候使用<code>./configure</code>命令时加上<code>--with-included-apr</code>就可以了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>httpd-2.4.10
</span><span class='line'>--|scrlib
</span><span class='line'>----|apr
</span><span class='line'>------|apr.exp
</span><span class='line'>------|...other apr files
</span><span class='line'>----|apr-util
</span><span class='line'>------|aprutil.dep
</span><span class='line'>------|...other apr-util files
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Perl-Compatible Regular Expressions Library (<a href="http://www.pcre.org">PCRE</a>)
PCRE安装比较简单，去pcre的网站下载源码包后解压，cd到解压目录执行下面的命令。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./configure
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>安装完依赖的软件后，就可以开始安装httpd了，到Apache的网站下载最新版的<a href="http://httpd.apache.org/download.cgi">Apache Http Server软件</a>，执行以下命令，最后一步是启动httpd服务，如果安装成功的话在浏览器输入<code>http://127.0.0.1</code>可以看到<code>It Works!</code>的字样。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./configure --prefix<span class="o">=</span>/usr/local/apache2 --with-included-apr
</span><span class='line'>make
</span><span class='line'>make install
</span><span class='line'>/usr/local/apache2/bin/apachectl -k start
</span></code></pre></td></tr></table></div></figure>


<h2>安装<a href="http://php.net">PHP</a></h2>

<p>安装PHP也需要安装其他软件，需要先安装<a href="http://xmlsoft.org">libxml2</a>，先到网站下载源码包，然后执行下面的命令安装。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./configure --prefix<span class="o">=</span>/usr/local/libxml2
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>安装完libxml2后，到PHP网站下载最新版的源码，然后执行下面的命令安装，注意configure要带&mdash;with-apx2参数，指向apache2的apx2命令。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./configure --prefix<span class="o">=</span>/usr/local/php --with-apxs2<span class="o">=</span>/usr/local/apache2/bin/apxs --with-libxml-dir<span class="o">=</span>/usr/local/libxml2
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>编辑httpd的配置文件即/usr/local/apache2/conf/httpd.conf，并添加以下内容:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>AddType application/x-httpd-php .php
</span><span class='line'>AddType application/x-httpd-php-source .phps
</span></code></pre></td></tr></table></div></figure>


<p>复制php.ini文件到PHP的安装目录，源码包里有2个php.ini文件，随便哪一个都可以。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cp ~/tools/php-5.6.0/php.ini-production /usr/local/php/php.ini
</span></code></pre></td></tr></table></div></figure>


<p>重启httpd。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>/usr/local/apache2/bin/apachectl -k restart
</span></code></pre></td></tr></table></div></figure>


<p>建立test.php文件放在httpd目录(/usr/local/apache2/)下的htdocs下，内容如下，通过浏览器查看<code>http://127.0.0.1/test.php</code>，如果显示了内容就表示PHP安装成功了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nb">phpinfo</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>安装dokuwiki</h2>

<p>到dokuwiki网站下载源码包，执行下面的命令进行安装。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mv 下载目录/dokuwiki-xxxx.tgz /usr/local/apache2/htdocs
</span><span class='line'><span class="nb">cd</span> /usr/local/apache2/htdocs
</span><span class='line'>tar -xvf dokuwiki-xxxx.tgz
</span><span class='line'>mv dokuwiki-xxxx dokuwiki
</span></code></pre></td></tr></table></div></figure>


<p>查询httpd的用户是什么，这样才可以将dokuwiki的文件夹授权给这个用户，执行下面命令可以看到httpd进程的用户，我查到的是daemon。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>lsof -i | grep :http
</span><span class='line'>chown -R daemon:daemon dokuwiki
</span></code></pre></td></tr></table></div></figure>


<p>在浏览器中输入<code>http://127.0.0.1/dokuwiki/install.php</code>可以看到安装向导页面，根据向导安装dokuwiki即可。</p>

<h2>ubuntu有网络情况下安装dokuwiki</h2>

<p>看完一大篇没有网络的安装后，再来看有网络的情况下安装是多么的简单。</p>

<p>安装系统是Ubuntu 14.04 LTS，执行完下面的命令，dokuwiki就安装完成了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install apache2
</span><span class='line'>sudo apt-get install php5
</span><span class='line'><span class="nb">cd</span> /var/www
</span><span class='line'>sudo cp ~/Download/dokuwiki-xxx.tgz .
</span><span class='line'>sudo tar -zxvf dokuwiki-xxxx.tgz
</span><span class='line'>sudo mv dokuwiki-xxxx dokuwiki
</span><span class='line'>sudo chown -R www-data:www-data dokuwiki
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[快速找到你想要的jar包]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/09/14/find-your-jar-quickly/"/>
    <updated>2014-09-14T17:41:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/09/14/find-your-jar-quickly</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-9/class-not-found.jpeg"></p>

<p>在做Java开发时，经常遇到<code>Class not found</code>的错误，一般的做法就是在google上搜索class名字，然后再搜索这个class所在的jar包是哪个，最后才找到可以下载jar包的链接。过程比较繁琐，有没有更好的方法可以快速的找到缺少的class所在的jar包呢？答案是肯定的。</p>

<!--more-->


<h2><a href="http://grepcode.com/">Grepcode</a></h2>

<p>这个网站可以通过class名称直接搜索到拥有这个class的所有的jar包，比如说我们运行Java程序时报下面的错误，发现<code>cn/com/starit/io/SystemDemo02</code>找不到。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>java.lang.NoClassDefFoundError: cn/com/starit/io/SystemDemo02
</span><span class='line'>Caused by: java.lang.ClassNotFoundException: cn.com.starit.io.SystemDemo02
</span><span class='line'>    at java.net.URLClassLoader<span class="nv">$1</span>.run<span class="o">(</span>URLClassLoader.java:200<span class="o">)</span>
</span><span class='line'>    at java.security.AccessController.doPrivileged<span class="o">(</span>Native Method<span class="o">)</span>
</span><span class='line'>    at java.net.URLClassLoader.findClass<span class="o">(</span>URLClassLoader.java:188<span class="o">)</span>
</span><span class='line'>    at java.lang.ClassLoader.loadClass<span class="o">(</span>ClassLoader.java:307<span class="o">)</span>
</span><span class='line'>    at sun.misc.Launcher<span class="nv">$AppClassLoader</span>.loadClass<span class="o">(</span>Launcher.java:301<span class="o">)</span>
</span><span class='line'>    at java.lang.ClassLoader.loadClass<span class="o">(</span>ClassLoader.java:252<span class="o">)</span>
</span><span class='line'>    at java.lang.ClassLoader.loadClassInternal<span class="o">(</span>ClassLoader.java:320<span class="o">)</span>
</span><span class='line'>Exception in thread <span class="s2">&quot;main&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>进入grepcode首页，输入<code>cn/com/starit/io/SystemDemo02</code>进行查询。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/grepcode-1.png"></p>

<ul>
<li>可以看到查询结果涵盖了所有可能包含这个class的jar包，最前面的是相似度最接近的jar包名称，点开版本号还可以看到具体的源码。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/grepcode-2.png"></p>

<h2><a href="http://mvnrepository.com/">mvnrepository</a></h2>

<p>知道Jar包的名称后，我们就可以通过mvnrepository这个网站来下载对应的jar包了，操作也很简单，输入jar名称就可以查询到相关的jar版本信息，里面还有maven，gradle等构建工具的配置脚本信息。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-9/mvn-repository-1.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-9/mvn-repository-2.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-9/mvn-repository-3.png"></p>

<p>结合这两个网站就可以很方便的找到缺失的Jar包了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ceph认证原理]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/09/13/ceph-authentication-theory/"/>
    <updated>2014-09-13T09:11:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/09/13/ceph-authentication-theory</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-9/rados-arch.png"></p>

<p>为识别用户和防范攻击，ceph提供了cephx来进行用户和后台进程认证。</p>

<!--more-->


<h2>原理介绍</h2>

<p>Cephx使用共享密钥的方式进行认证，意思是客户端和monitor集群都有一份客户端的密钥。它提供了一个相互认证的机制，集群确定用户拥有密钥，而用户确定集群拥有密钥的备份。</p>

<p>Ceph不提供统一的认证接口给对象存储，所以客户端必须直接跟OSD交互。为了保护数据，ceph提供了cephx认证系统，用来对用户在客户端的操作进行认证。Cephx认证协议与<a href="http://en.wikipedia.org/wiki/Kerberos_(protocol)">Kerberos</a>相类似。</p>

<p>用户调用客户端连接monitor。跟Kerberos不同，每个monitor都可以进行认证，所以没有单点和性能瓶颈的问题。Monitor返回一个类似Kerberos的数据结构，包含了一个session key来访问ceph服务。Session key是通过加密用户自己的密钥来生成的，所以只有该用户能请求monitor服务。然后客户端使用session key向monitor发起请求，monitor于是提供给客户端一个ticket来使客户端和OSD进行认证。Monitor和OSD共享密钥，所以客户端可以使用Monitor提供的ticket来和OSD进行交互。跟Kerberos一样，cephx的ticket会过期，所以攻击者不能使用过期的ticket或session key来做不正当的事情。这种认证形式将阻止攻击者通过修改用户已泄露信息的方式，或者伪造消息进行通讯访问的方式来进行攻击，只要用户的密钥不要在失效前泄露就没有什么问题。</p>

<p>使用cephx时，管理员需要先创建user。在下面的图表中，client.admin用户调用<code>ceph auth get-or-create-key</code>的命令来生成用户名和密钥，ceph的auth子系统来生成用户名和密钥，保存一份密钥在monitor并将用户的密钥传回给client.admin用户。这使得客户端和monitor共享了一份密钥。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-9/rados-auth-1.png"></p>

<p>为了能通过monitor的认证，客户端将用户名传给monitor，然后monitor产生一个session key并且通过密钥将其加密，并使之与用户名关联。然后monitor将加密session key回传给客户端，客户端再通过共享密钥进行解密，从而获取到seesion key。session key标示当前用户的当前回话。然后客户端再发起请求要求一个代表用户会话密钥的ticket，monitor产生ticket并通过用户密钥进行加密，并将其回传给客户端。客户端对ticket进行解密，以后客户端向OSD或MDS发起请求时，就用它来对请求进行签名。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-9/rados-auth-2.png"></p>

<p>cephx协议验证客户端和Ceph服务器之间的通信。在初始化认证之后，在客户端和服务器间的每一条信息，都会使用ticket进行签名，这样monitor，OSD和MDS服务就可以使用他们的共享密钥进行验证。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-9/rados-auth-3.png"></p>

<p>认证提供的保护是在ceph客户端和服务器之间。认证不能超过客户端，比如用户从一台远程服务器上访问cpeh客户端，ceph的认证就不能适用于远程主机和客户端了。</p>

<h2>生成存储集群的keyring</h2>

<ul>
<li>生成client.admin的key</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ceph auth get-or-create client.admin mon <span class="s1">&#39;allow *&#39;</span> mds <span class="s1">&#39;allow *&#39;</span> osd <span class="s1">&#39;allow *&#39;</span> -o /etc/ceph/ceph.client.admin.keyring
</span></code></pre></td></tr></table></div></figure>


<p><code>注意：这个操作会覆盖原有的ceph.client.admin.keyring文件，请谨慎操作。</code></p>

<ul>
<li>创建monitor的keyring</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ceph-authtool --create-keyring /tmp/ceph.mon.keyring --gen-key -n mon. --cap mon <span class="s1">&#39;allow *&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>复制monitor的keyring文件到每个monitor的data目录</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cp /tmp/ceph.mon.keyring /var/lib/ceph/mon/ceph-a/keyring
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>为每个OSD产生keyring，id是OSD的编号</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ceph auth get-or-create osd.<span class="o">{</span><span class="nv">$id</span><span class="o">}</span> mon <span class="s1">&#39;allow rwx&#39;</span> osd <span class="s1">&#39;allow *&#39;</span> -o /var/lib/ceph/osd/ceph-<span class="o">{</span><span class="nv">$id</span><span class="o">}</span>/keyring
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>为每个MDS产生keyring，id是MDS编号</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ceph auth get-or-create mds.<span class="o">{</span><span class="nv">$id</span><span class="o">}</span> mon <span class="s1">&#39;allow rwx&#39;</span> osd <span class="s1">&#39;allow *&#39;</span> mds <span class="s1">&#39;allow *&#39;</span> -o /var/lib/ceph/mds/ceph-<span class="o">{</span><span class="nv">$id</span><span class="o">}</span>/keyring
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在ceph.conf的global中增加认证开关</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">auth cluster required</span> <span class="o">=</span> <span class="s">cephx</span>
</span><span class='line'><span class="na">auth service required</span> <span class="o">=</span> <span class="s">cephx</span>
</span><span class='line'><span class="na">auth client required</span> <span class="o">=</span> <span class="s">cephx</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>重启存储服务</li>
</ul>


<h2>认证配置</h2>

<ul>
<li>auth cluster required：[cephx | none]:如果打开，表示存储集群（mon,osd,mds）相互之间需要通过keyring认证。</li>
<li>auth service required：[cephx | none]:如果打开，表示客户端（比如gateway）到存储集群（mon,osd,mds）需要通过keyring认证。</li>
<li>auth client required：[cephx | none]:如果打开，表示存储集群（mon,osd,mds）到客户端（比如gateway）需要通过keyring认证。</li>
</ul>


<h2>Rados gateway创建keyring</h2>

<p>需要使用一台管理节点的机器来生成keyring文件，管理节点是使用ceph-deploy才有的机器，我理解没有管理节点的话，使用mon或osd的机器可以创建keyring。</p>

<ul>
<li>创建文件并增加权限</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo ceph-authtool --create-keyring /etc/ceph/ceph.client.radosgw.keyring
</span><span class='line'>sudo chmod +r /etc/ceph/ceph.client.radosgw.keyring
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用ceph-authtool在keyring文件中生成随机密码</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo ceph-authtool /etc/ceph/ceph.client.radosgw.keyring -n client.radosgw.gateway --gen-key
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在keyring中增加存储集群的操作权限；</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo ceph-authtool -n client.radosgw.gateway --cap osd <span class="s1">&#39;allow rwx&#39;</span> --cap mon <span class="s1">&#39;allow rwx&#39;</span> /etc/ceph/ceph.client.radosgw.keyring
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将gateway的key添加到存储集群（-k不知道是什么参数）</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo ceph -k /etc/ceph/ceph.client.admin.keyring auth add client.radosgw.gateway -i /etc/ceph/ceph.client.radosgw.keyring
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将生成的keyring文件上传到gateway的机器</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo scp /etc/ceph/ceph.client.radosgw.keyring  ceph@<span class="o">{</span>hostname<span class="o">}</span>:/home/ceph
</span><span class='line'>ssh <span class="o">{</span>hostname<span class="o">}</span>
</span><span class='line'>sudo mv ceph.client.radosgw.keyring /etc/ceph/ceph.client.radosgw.keyring
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在ceph.conf中配置gateway的keyring文件路径</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="err">[client.radosgw.{instance-name}]</span>
</span><span class='line'><span class="na">host</span> <span class="o">=</span> <span class="s">{host-name}</span>
</span><span class='line'><span class="na">keyring</span> <span class="o">=</span> <span class="s">/etc/ceph/ceph.client.radosgw.keyring</span>
</span><span class='line'><span class="na">rgw socket path</span> <span class="o">=</span> <span class="s">/var/run/ceph/ceph.radosgw.{instance-name}.fastcgi.sock</span>
</span><span class='line'><span class="na">log file</span> <span class="o">=</span> <span class="s">/var/log/ceph/client.radosgw.{instance-name}.log</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让你的安卓开发更容易(二)——Genymotion]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/08/31/make-your-android-dev-life-easy-part-2/"/>
    <updated>2014-08-31T17:29:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/08/31/make-your-android-dev-life-easy-part-2</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-8/genymotion-logo.jpg"></p>

<p>以前听过一个笑话，说是一个App好不容易拿到100万的融资，但是没几天就花完了，问创始人这钱怎么花的？创始人说:没什么，就是每个型号的Android手机各买了一个来做测试，钱就花完了。</p>

<p>Android开发需要有强大的模拟器来避免这种尴尬，<a href="http://www.genymotion.com/">Genymotion</a>是一个Android模拟器，比起Google官方的AVD(Android Virtual Devices)，它有着启动快速，安装方便，简单上手的特点。</p>

<!--more-->


<h2>注册安装</h2>

<ul>
<li>进入官网首页，点击<code>GET GENYMOTION</code>按钮（官网需要翻墙访问，不过有genymotion的<a href="http://www.genymotion.cn/">中文网</a>也可以访问）;</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-install-2.png"></p>

<ul>
<li>有3个套餐让你选择，我们当然选择免费的先试用一下，点击download按钮;</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-install-3.png"></p>

<ul>
<li>下载要求你先注册一个账号，注册完成后需要到注册邮箱接收邮件，激活你的genymotion账号;</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-install-1.png"></p>

<ul>
<li>激活账号后，可以看到网站提示你可以下载了;</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-install-4.png"></p>

<ul>
<li>下载页面中，可以看到最上面的genymotion版本包含了Oracle VirtualBox4.2.12这个虚拟机工具，如果是选择下面的genymotion，则需要先下载<a href="https://www.virtualbox.org/">VirtualBox</a>并安装;</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-install-5.png"></p>

<ul>
<li>下载页面的下方，还有流行的Java IDE——Intellij IDEA和Eclipse的插件，看你用的IDE是哪个就下载哪个插件，这个后面会用到;</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-install-6.png"></p>

<ul>
<li>下载genymotion的安装文件后，安装安装提示进行安装即可。</li>
</ul>


<h2>使用说明</h2>

<ul>
<li>点击安装完成后的genymotion图标，下图的中间那个图标；</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-use-1.png"></p>

<ul>
<li>启动后是genymotion客户端的主界面；</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-use-2.jpg"></p>

<ul>
<li>初次启动会提示你没有虚拟设备，是否添加一个？选择yes；</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-use-3.jpg"></p>

<ul>
<li>这时会弹出一个登陆框，输入注册的用户名（或邮箱）和密码，点击Connect按钮（这一步需要用VPN翻墙）；</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-use-4.jpg"></p>

<ul>
<li>验证通过后就可以添加虚拟设备了，下图是虚拟设备列表，可以选择Android版本和设备型号进行过滤查询（有些比较老的手机型号会查不到），选择你需要的虚拟设备，点击Next；</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-use-6.png" width="150" height="250"><br/>
<img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-use-7.png" width="150" height="250">
<img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-use-5.png"></p>

<ul>
<li>genymotion会显示虚拟设备的详细信息，你确定无误后点击Next就会进行下载；</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-use-8.png"></p>

<ul>
<li>虚拟机下载中；</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-use-9.png"></p>

<ul>
<li>下载完成后回到主窗口，选择下载后的虚拟设备，点击Play按钮；</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-use-10.png"></p>

<ul>
<li>你马上就可以看到你的虚拟设备已经启动，速度很快。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-use-11.png" width="300" height="500"></p>

<h2>与Intellij IDEA集成</h2>

<p>现在我们来看看如何在IDE里面启动虚拟设备，这里以Intellij IDEA为例。</p>

<ul>
<li>刚才我们下载了genymotion的IDE插件，在IDEA中打开插件管理设置界面，选择<code>install plugin from disk...</code>进行安装，安装完后重启IDEA；</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-idea-1.png"></p>

<ul>
<li>重启IDEA后看到工具栏里面多了一个红色手机状的图标，图中工具栏的最后面一个图标；</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-idea-2.png"></p>

<ul>
<li>点击图标出现genymotion设备列表窗口，可以看到现在设备的状态都是关机的(off)；</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-idea-3.png"></p>

<ul>
<li>选择一个设备点击Start按钮，设备和在genymotion客户端一样启动了；</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-idea-4.png"></p>

<ul>
<li>关掉IDEA中的设备列表窗口，运行你的App，会提示你是否需要在刚才启动的设备里面运行，选择OK；</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-idea-5.png"></p>

<ul>
<li>可以看到你的App已经在genymotion的虚拟设备中运行了；</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-9/genymotion-idea-6.png" width="300" height="500"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让你的安卓开发更容易(一)——Intellij IDEA]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/08/31/make-your-android-dev-life-easy-part-1/"/>
    <updated>2014-08-31T10:59:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/08/31/make-your-android-dev-life-easy-part-1</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-8/intellijidea_android.gif"></p>

<blockquote><p>工欲善其事，必先利其器</p><footer><strong>孔子 ——《春秋》</strong></footer></blockquote>


<p>介绍一下安卓开发的一些好用工具，可以让你的开发事半功倍。如果你是一个安卓新手，那么准备一套高效率的开发工具，会让你从一开始就养成使用好工具的习惯，从开始就比别人更快；如果你是一名安卓开发高手，也可以看看这些工具，说不定你已经在使用其中的一些工具了。</p>

<!--more-->


<h2>Intellij IDEA</h2>

<p>虽然IntelliJ IDEA是一款收费的软件，但收费有它收费的道理，跟eclipse相比，它多了更多重构，代码错误提示，与更多工具集成的功能。IntelliJ IDEA被认为是当前Java开发效率最快的IDE工具，它集成了开发过程中实用的众多功能，几乎可以不用鼠标可以方便的完成你要做的任何事情，最大程度的加快开发的速度。简单而又功能强大。</p>

<p>从版本10开始，IntelliJ IDEA就集成了Android的开发功能，发展到现在版本13，不仅具备了流畅开发Android项目的能力，而且还集成了最新的构建工具Gradle，Android lint等工具。</p>

<h3>Android Hello World</h3>

<p>现在我们使用IntelliJ IDEA来创建一个使用Gradle构建的Android项目。</p>

<ul>
<li>首先点击创建新工程，在左边的项目类型栏中选择<code>Android</code>，可以看到右边有4个选项可以选，我们选择<code>Gradle: Android Mondule</code>，然后点击下面的Next;</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-8/idea-android-project-1.png"></p>

<ul>
<li>进入项目信息配置页面，可以看到有如下的选项，填写后点击Next；

<ul>
<li>Application name: 应用名</li>
<li>Module name: 模块名</li>
<li>Package name: 包名</li>
<li>Minimum required SDK: 可支持的最小Android SDK版本</li>
<li>Target SDK: 可支持的最大Android SDK版本</li>
<li>Compile with: 用哪个Android SDK版本编译</li>
<li>Theme: app主题，全黑，全白，半黑半百，是否要GridLayou，是否要action bar等</li>
</ul>
</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-8/idea-android-project-2.png"></p>

<ul>
<li>选择main_activity的样式，有9种可以选择，样式的效果在右边可以预览，我们可以选择最简单的<code>Blank Activity</code>，选择好了Next；</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-8/idea-android-project-3.png"></p>

<ul>
<li>填写Activity名字和对应的展示层layout名字，填完Next；</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-8/idea-android-project-4.png"></p>

<ul>
<li>填写工程名和选择工程文件路径，注意最下面的<code>Project format</code>，有2种格式，一种是<code>.idea</code>文件夹，一个是ipr文件，选择ipr文件的方式可以减少很多文件的生成，最后Finish；</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-8/idea-android-project-5.png"></p>

<p>生成的代码如下:</p>

<figure class='code'><figcaption><span>MainActivity.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">ActionBarActivity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onCreateOptionsMenu</span><span class="o">(</span><span class="n">Menu</span> <span class="n">menu</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Inflate the menu; this adds items to the action bar if it is present.</span>
</span><span class='line'>        <span class="n">getMenuInflater</span><span class="o">().</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">menu</span><span class="o">.</span><span class="na">main</span><span class="o">,</span> <span class="n">menu</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onOptionsItemSelected</span><span class="o">(</span><span class="n">MenuItem</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Handle action bar item clicks here. The action bar will</span>
</span><span class='line'>        <span class="c1">// automatically handle clicks on the Home/Up button, so long</span>
</span><span class='line'>        <span class="c1">// as you specify a parent activity in AndroidManifest.xml.</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="na">getItemId</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">id</span> <span class="o">==</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">action_settings</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onOptionsItemSelected</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>activity_main.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RelativeLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:paddingLeft=</span><span class="s">&quot;@dimen/activity_horizontal_margin&quot;</span>
</span><span class='line'>    <span class="na">android:paddingRight=</span><span class="s">&quot;@dimen/activity_horizontal_margin&quot;</span>
</span><span class='line'>    <span class="na">android:paddingTop=</span><span class="s">&quot;@dimen/activity_vertical_margin&quot;</span>
</span><span class='line'>    <span class="na">android:paddingBottom=</span><span class="s">&quot;@dimen/activity_vertical_margin&quot;</span>
</span><span class='line'>    <span class="na">tools:context=</span><span class="s">&quot;com.github.zzm.myapplication1.app.MainActivity&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;TextView</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;@string/hello_world&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行的效果如下:</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-8/idea-android-project-6.png" width="250" height="350"></p>

<h3>Gradle脚本</h3>

<p>可以看到工程目录下有2个build.gradle脚本，一个是根目录的构建文件(如下)，如果想提高构建速度，可以将脚本中的mavenCentral()改为<code>maven {url "http://maven.oschina.net/content/groups/public/"}</code>，就是将maven的国外镜像库改成国内的库。</p>

<figure class='code'><figcaption><span>root/build.gradle </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="c1">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span>
</span><span class='line'>
</span><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s1">&#39;com.android.tools.build:gradle:0.9.+&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">allprojects</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外一个是app目录下的构建文件，可以看到指定了sdk的最小最大版本，需要的依赖包等。</p>

<figure class='code'><figcaption><span>app/build.gradle </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s1">&#39;com.android.tools.build:gradle:0.9.+&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;android&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">android</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compileSdkVersion</span> <span class="mi">20</span>
</span><span class='line'>    <span class="n">buildToolsVersion</span> <span class="s2">&quot;20.0.0&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">defaultConfig</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">minSdkVersion</span> <span class="mi">8</span>
</span><span class='line'>        <span class="n">targetSdkVersion</span> <span class="mi">20</span>
</span><span class='line'>        <span class="n">versionCode</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">versionName</span> <span class="s2">&quot;1.0&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">buildTypes</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">release</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">runProguard</span> <span class="kc">false</span>
</span><span class='line'>            <span class="n">proguardFiles</span> <span class="nf">getDefaultProguardFile</span><span class="o">(</span><span class="s1">&#39;proguard-android.txt&#39;</span><span class="o">),</span> <span class="s1">&#39;proguard-rules.txt&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="nf">fileTree</span><span class="o">(</span><span class="nl">dir:</span> <span class="s1">&#39;libs&#39;</span><span class="o">,</span> <span class="nl">include:</span> <span class="o">[</span><span class="s1">&#39;*.jar&#39;</span><span class="o">])</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;com.android.support:appcompat-v7:20.0.0&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让路由飞越长城(二)]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/08/30/let-the-router-cross-great-wall-part-2/"/>
    <updated>2014-08-30T19:30:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/08/30/let-the-router-cross-great-wall-part-2</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-8/greatefw.jpg"></p>

<p>配置好了高级的路由器，安装了dd-wrt版本的固件，现在还不忙着让路由器翻墙，先在一台机器上测试能通过新路由器能正常上网和翻墙，可以了之后我们再来配置路由器的翻墙功能。</p>

<!--more-->


<h3>VPN</h3>

<p>翻墙基本是两种方式:SSH和VPN。SSH是在浏览器上连接国外的服务器从而可以浏览被和谐的网站，而VPN是让整个设备的网络都连上国外的服务器，包括浏览器和其他任何软件。VPN的好处是可以让其他软件更快速地连接国外服务器，比如要下载android的sdk，国内网络经常半天没有反应，翻墙后下载速度就快多了，但缺点也比较明显，就是访问国内网站的时候会比较慢，使用国内软件比如QQ的时候时不时会掉线。</p>

<p>这里有个比较好的VPN推荐一下<a href="http://www.strongvpn.com/">Strong VPN</a>(需要翻墙才能访问)，这个是一个美国比较好的VPN，连接稳定，访问快速，24小时技术支持，价格也比较合适，有个55美刀/年的套餐，支持PPTP,L2TP和SSTP连接。国内的VPN和SSH我用了几个都不大满意，不是有些网站不能上，就是经常掉线连不上。如果有米的话，还可以去租VPS(虚拟专用服务器)，自己搭VPN服务，那速度绝对比直接买的VPN快，甚至还可以自己卖VPN账号。</p>

<p>不管怎样，我们需要一个VPN账号，而且可以支持PPTP连接的，下面会用到。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-8/strong-vpn.png"></p>

<h3><a href="https://code.google.com/p/autoddvpn/">autoddvpn</a>(需要翻墙才能访问)</h3>

<p>autoddvpn是一个解决方案，主要有下面几大功能:</p>

<ul>
<li>让你的dd-wrt路由器可以自由翻墙，路由下的所有设备仿佛在墙外一样，完全感觉不到墙的存在；</li>
<li>智能路由，可以自动判断访问的网站是墙内还是墙外的，如果是墙内的就不走VPN，如果是墙外的走VPN；</li>
<li>守护进程，监控你的VPN服务是否正常，如果VPN断了可以随时重连。</li>
</ul>


<p>autoddvpn有2种设置模式:传统模式(classicMode)和优雅模式(graceMode)，这里我们主要介绍<a href="https://code.google.com/p/autoddvpn/wiki/graceMode">graceMode</a>。在gracemode中，我们主要看PPTP这一块的内容，因为我们的VPN账号只支持PPTP，不支持OpenVPN(Strong VPN支持PPTP,L2TP,SSTP连接，但dd-wrt不支持L2TP和SSTP)。</p>

<ul>
<li>首先开启路由器的<a href="https://code.google.com/p/autoddvpn/wiki/jffs">JFFS</a>，这样可以将我们的脚本放到jffs里面(jffs我理解是一块可以挂载的小硬盘)；</li>
<li>接着按照文档设置DNS(<a href="https://code.google.com/p/autoddvpn/wiki/graceMode#%E8%A8%AD%E7%BD%AE%E6%96%B9%E5%BC%8F(%E4%BB%A5PPTP%E7%82%BA%E4%BE%8B)">PPTP设置</a>)；</li>
<li>ssh或telnet到你的路由器，登录名和密码是你刷了dd-wrt版本后进入web页面设置的用户名和密码；</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>telnet 192.168.11.1
</span><span class='line'>Trying 192.168.11.1...
</span><span class='line'>Connected to 192.168.1.1.
</span><span class='line'>Escape character is <span class="s1">&#39;^]&#39;</span>.
</span><span class='line'>
</span><span class='line'>DD-WRT v24-sp2 std <span class="o">(</span>c<span class="o">)</span> 2014 NewMedia-NET GmbH
</span><span class='line'>Release: 06/23/14 <span class="o">(</span>SVN revision: 24461<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>DD-WRT login: root
</span><span class='line'>Password:
</span><span class='line'><span class="o">==========================================================</span>
</span><span class='line'>
</span><span class='line'> ____  ___    __        ______ _____         ____  _  _
</span><span class='line'> | _ <span class="se">\|</span> _ <span class="se">\ </span>  <span class="se">\ \ </span>     / /  _ <span class="se">\_</span>   _| __   _|___ <span class="se">\|</span> <span class="o">||</span> |
</span><span class='line'> <span class="o">||</span> | <span class="o">||</span> <span class="o">||</span>____<span class="se">\ \ </span>/<span class="se">\ </span>/ /| |_<span class="o">)</span> <span class="o">||</span> |   <span class="se">\ \ </span>/ / __<span class="o">)</span> | <span class="o">||</span> |_
</span><span class='line'> <span class="o">||</span>_| <span class="o">||</span>_||_____<span class="se">\ </span>V  V / |  _ &lt; | |    <span class="se">\ </span>V / / __/|__   _|
</span><span class='line'> |___/|___/      <span class="se">\_</span>/<span class="se">\_</span>/  |_| <span class="se">\_\|</span>_|     <span class="se">\_</span>/ |_____|  |_|
</span><span class='line'>
</span><span class='line'>                       DD-WRT v24-sp2
</span><span class='line'>                   http://www.dd-wrt.com
</span><span class='line'>
</span><span class='line'><span class="o">==========================================================</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>BusyBox v1.22.1 <span class="o">(</span>2014-06-23 03:23:41 CEST<span class="o">)</span> built-in shell <span class="o">(</span>ash<span class="o">)</span>
</span><span class='line'>Enter <span class="s1">&#39;help&#39;</span> <span class="k">for </span>a list of built-in commands.
</span><span class='line'>
</span><span class='line'>root@DD-WRT:~#
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>登陆后执行下面的命令；</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># mkdir /jffs/pptp</span>
</span><span class='line'><span class="c"># cd /jffs/pptp</span>
</span><span class='line'><span class="c"># wget http://autoddvpn.googlecode.com/svn/trunk/grace.d/vpnup.sh</span>
</span><span class='line'><span class="c"># wget http://autoddvpn.googlecode.com/svn/trunk/grace.d/vpndown.sh</span>
</span><span class='line'><span class="c"># wget http://autoddvpn.googlecode.com/svn/trunk/pptp/jffs/run.sh</span>
</span><span class='line'><span class="c"># chmod a+x *.sh</span>
</span><span class='line'><span class="c"># nvram set rc_startup=&#39;/jffs/pptp/run.sh&#39;</span>
</span><span class='line'><span class="c"># nvram commit</span>
</span></code></pre></td></tr></table></div></figure>


<p>一般执行上面的wget命令都是不行的，因为autoddvpn网站要翻墙才能访问，所以可以在pptp目录下创建那3个脚本文件，然后将网站上脚本的内容copy到脚本文件里面，命令更新如下。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># mkdir /jffs/pptp</span>
</span><span class='line'><span class="c"># cd /jffs/pptp</span>
</span><span class='line'><span class="c"># touch vpnup.sh</span>
</span><span class='line'><span class="c"># touch vpndown.sh</span>
</span><span class='line'><span class="c"># touch run.sh</span>
</span><span class='line'><span class="c"># ...直接从网站上复制脚本内容，再拷贝到文件里面</span>
</span><span class='line'><span class="c"># chmod a+x *.sh</span>
</span><span class='line'><span class="c"># nvram set rc_startup=&#39;/jffs/pptp/run.sh&#39;</span>
</span><span class='line'><span class="c"># nvram commit</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>参考<a href="https://code.google.com/p/autoddvpn/wiki/HOWTO#%E8%A8%AD%E7%BD%AEPPTP_client">文档</a>的<code>设置PPTP client</code>部分进行dd-wrt的PPTP客户端设置;</li>
<li>重启dd-wrt路由器，启动后会产生一个Log文件<code>/tmp/autoddvpn.log 這是autoddvpn的log</code>;</li>
<li>最后关于守护进程的脚本，autoddvpn没有提供，其实就是定时检查一下PPTP连接是否通的，不通的话就重连，下面给一个openvpn的检查脚本，pptp的上网自己查一下；</li>
</ul>


<figure class='code'><figcaption><span>/jffs/pptp/openvpnDaemon.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">ISRUN</span><span class="o">=</span><span class="sb">`</span>ps|grep <span class="s2">&quot;openvpn&quot;</span>|wc -l<span class="sb">`</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$ISRUN</span> -lt 4 <span class="o">]]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Not running, start!&quot;</span>
</span><span class='line'>openvpn --config /jffs/openvpn/openvpn.conf --daemon
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Openvpn is already running.&quot;</span>
</span><span class='line'><span class="nb">exit</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在dd-wrt的web界面的“管理”->“管理”下启用Cron，并且在附加任务中输入：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>*/2 * * * * /jffs/openvpn/openvpnDaemon.sh
</span></code></pre></td></tr></table></div></figure>


<h3>悬而未决的问题——PPTP无法连接</h3>

<p>可能有的人使用VPN进行PPTP连接时会发现连接不上，在windows下是报一个<code>806</code>的异常，这种可能是你的ISP(网络服务提供商——电信或联通)没有提供这个服务，这种情况下还不知道怎么解决。在网上查过不少资料，说什么设置路由器的PPTP穿透功能，配置1723端口开启等，这些都没有什么效果，希望有高手告知这种情况要怎么解决。谢谢</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让路由飞越长城(一)]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/08/29/let-the-router-cross-great-wall-part-1/"/>
    <updated>2014-08-29T21:13:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/08/29/let-the-router-cross-great-wall-part-1</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-8/greatefw.jpeg"></p>

<p>最近GFW貌似升级了，现在连Google也无法访问，开发用百度实在搜不到什么东西，用bing也各种不爽(用了几天自己都快病了)。虽说可以用SSH，VPN翻墙，但家里的电子设备如果比较多，要一个一个设置起来就会比较麻烦，如果能在路由器上翻墙就好了，这样只要设备只需要接入路由器的WIFI就可以自动翻墙，无需任何设置。</p>

<!--more-->


<h3>可以刷固件的路由器</h3>

<p>要实现路由器翻墙，首先需要一个高级的路由器，这种路由器可以刷一些路由器固件（固件我理解就是路由器的操作系统，一般是基于Linux的），我们后面需要在固件上通过脚本配置实现翻墙。我是基于DD-WRT这个固件进行路由翻墙的，所以我选择可以刷DD-WRT固件的路由器，这里有<a href="http://www.dd-wrt.com/wiki/index.php/Supported_Devices">网页</a>可以参考.</p>

<p>我在网上参考了一些资料，觉得Buffalo(巴法洛)的路由器比较好，大部分实现了路由器翻墙的介绍文章都是使用Buffalo的，所以向大家也推荐这个牌子，我用的型号是WZR-HP-G300NH2，淘宝上卖400多。</p>

<p>使用了Buffalo的路由器后，感觉要比以前用的那些路由快很多，同样是打开百度（百度最大的功能，测网络联通）速度明显感觉不一样。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-8/WZR-HP-G300NH2.jpg"></p>

<h3><a href="http://www.dd-wrt.com">DD-WRT</a></h3>

<p>路由器的固件其实不只dd-wrt一种，还有<a href="http://www.polarcloud.com/tomato">Tomato</a>也是一种比较流行的路由器固件，两种固件各有优劣，网上有很多它们的比较，这里就不说了。</p>

<p>dd-wrt对应不同品牌的路由器有不同的固件版本，每个品牌的不同型号也会对应不同的固件版本，要在这么多版本中查找到自己想要的固件版本，需要登录到dd-wrt的官网进行选择。</p>

<p>进入官网首页后，点击Router Database模块，然后在输入框中输入路由器型号，就可以看到对应的dd-wrt版本记录。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-8/dd-wrt-1.png"></p>

<p>点击查询出来的版本记录，会出现固件版本的详细说明和下载链接。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-8/dd-wrt-2.png"></p>

<p>这里有2个固件可供选择(不同型号的固件名称会有不同，这里是以我的路由器型号举例):</p>

<ul>
<li>buffalo_to_ddwrt_webflash-MULTI.bin是指你的路由器固件不是dd-wrt的，需要把固件升级成dd-wrt。</li>
<li>wzr-hp-g300nh2-dd-wrt-webupgrade-MULTI.bin是说你的固件已经是dd-wrt了，但固件版本太老了要升级。</li>
</ul>


<p>用上面的方法查出来的固件版本其实不是最新的，这里有个dd-wrt版本的<a href="ftp://ftp.dd-wrt.com/betas/">ftp链接</a>，打开连接后，可以看到不同年份的目录，进入某个目录后可以看到不同品牌的路由器的目录，比如<code>ftp://ftp.dd-wrt.com/betas/2014/06-23-2014-r24461/buffalo_wzr-hp-g300nh2/</code>，这里就是最新的固件版本了。</p>

<h3>升级路由器固件</h3>

<p>其实Buffalo也有自己官方的dd-wrt版本，但看网上介绍buffalo官方的dd-wrt版本功能不行，所以建议还是刷正式的dd-wrt版本。在dd-wrt官网上可以看到路由器固件的<a href="http://www.dd-wrt.com/wiki/index.php/Installation">安装介绍</a>(这里是WZR-HP-G300NH2的<a href="http://dd-wrt.com/wiki/index.php/Buffalo_WZR-HP-G300NH">安装介绍</a>），但个人感觉里面的说明太复杂，什么30/30/30硬复位大法，TFTP刷新法等看不大明白，同时也怕太复杂导致失误操作让路由器变砖头。</p>

<p>最简单的方式是在你的路由器的web管理页面直接升级（我只试过Buffalo的，其他的路由器我没试过）:</p>

<ul>
<li>打开浏览器进入<code>192.168.1.1</code>，如果你的路由器是连接电信路由器网口的，可能ip地址不是这个；</li>
<li>输入用户名密码后，进入管理配置页面，点击其中的更新，选择dd-wrt的固件文件打开。</li>
<li>点击<strong>更新固件</strong>按钮，然后大概等个5~6分钟，等看到100%完成，路由器会自动重启；</li>
<li>重新进入<code>192.168.1.1</code>，可以看到变成dd-wrt的管理页面了，首次登陆需要输入用户名和密码。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-8/dd-wrt-3.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Robot Framework结合Spring进行uat测试]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/06/19/robot-framework-uat-test-with-spring/"/>
    <updated>2014-06-19T21:50:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/06/19/robot-framework-uat-test-with-spring</id>
    <content type="html"><![CDATA[<p>在做项目过程中，单元测试是大家经常接触的也是了解的比较多的，但单元测试有时候为了更快的运行，会mock掉数据库或者关联系统来执行测试，这样的话整体的功能就得不到验证，另外单元测试也无法进行页面比如html的测试，这个时候就需要进行UAT自动化测试了。</p>

<!--more-->


<p></p>

<p><a href="http://baike.baidu.com/view/1330235.htm?fromTaglist">UAT</a>，(User Acceptance Test),用户接受度测试，即验收测试，这种一般是手工测试，当然重复进行手动测试是一种选择，但如果手工测试很多的话每次执行就比较浪费时间和精力，而且也容易遗漏和出错，所以我们需要将手工测试进行自动化。</p>

<h2><a href="http://robotframework.org/">Robot Framework</a></h2>

<p>Robot是一个自动化测试框架，其可以使用的Lib很多，简单地安装即可使用，也可以自己通过Python和Java来开发自己需要的Lib包，不过现在robot的Lib已经比较多了，可以满足大部分的使用场景。</p>

<h4>安装</h4>

<p>Robot安装十分简单，但首先要安装Python环境（Python安装这里不介绍了，请自行google了解），然后执行以下语句进行安装。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo pip install robotframework
</span></code></pre></td></tr></table></div></figure>


<p>安装完成后验证是否安装成功。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>pybot --version
</span><span class='line'>Robot Framework 2.8.5 <span class="o">(</span>Python 2.7.3 on linux2<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果需要安装其他Lib包，同样是通过pip进行安装，下面以安装Selenium2Library为例。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo pip install robotframework_Selenium2Library
</span></code></pre></td></tr></table></div></figure>


<h4>Robot脚本</h4>

<p>Robot安装完成后，就可以开始编写测试脚本了，下面是测试脚本和Resource文件的例子:</p>

<figure class='code'><figcaption><span>create_recipient.robot</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='robotframework'><span class='line'><span class="gh">*** Settings ***</span><span class="p"></span>
</span><span class='line'><span class="kn">Library</span><span class="p">    </span><span class="nn">Selenium2Library</span><span class="p"></span>
</span><span class='line'><span class="kn">Library</span><span class="p">    </span><span class="nn">DatabaseLibrary</span><span class="p"></span>
</span><span class='line'><span class="kn">Resource</span><span class="p">   </span><span class="nn">resource.robot</span><span class="p"></span>
</span><span class='line'><span class="kn">Test Setup</span><span class="p">      </span><span class="nf">Open Browser</span><span class="p">  ${</span><span class="nv">baseurl</span><span class="p">}</span><span class="s">/#/recipients</span><span class="p">  ${</span><span class="nv">browser</span><span class="p">}</span>
</span><span class='line'><span class="kn">Test Teardown</span><span class="p">   </span><span class="nf">Close Browser</span><span class="p"></span>
</span><span class='line'>
</span><span class='line'><span class="gh">*** TestCases ***</span><span class="p"></span>
</span><span class='line'><span class="gu">create new recipient</span><span class="p"></span>
</span><span class='line'><span class="p">    </span><span class="ge">Given </span><span class="nf">execute sql</span><span class="p">  </span><span class="s">delete from recipients where email=&#39;zhaozhiming003@gmail.com&#39;</span><span class="p"></span>
</span><span class='line'><span class="p">    </span><span class="ge">When </span><span class="nf">create recipient</span><span class="p"></span>
</span><span class='line'><span class="p">    </span><span class="ge">Then </span><span class="nf">verify create recipient</span><span class="p">  </span><span class="s">添加用户成功</span><span class="p"></span>
</span><span class='line'>
</span><span class='line'><span class="gu">create exist recipient</span><span class="p"></span>
</span><span class='line'><span class="p">    </span><span class="ge">Given </span><span class="nf">execute sql</span><span class="p">  </span><span class="s">delete from recipients where email=&#39;zhaozhiming003@gmail.com&#39;</span><span class="p"></span>
</span><span class='line'><span class="p">    </span><span class="ge">Given </span><span class="nf">execute sql</span><span class="p">  </span><span class="s">insert into recipients(username,email) values(&#39;zhaozhiming&#39;,&#39;zhaozhiming003@gmail.com&#39;)</span><span class="p"></span>
</span><span class='line'><span class="p">    </span><span class="ge">When </span><span class="nf">create recipient</span><span class="p"></span>
</span><span class='line'><span class="p">    </span><span class="ge">Then </span><span class="nf">verify create recipient</span><span class="p">  </span><span class="s">添加用户失败</span><span class="p"></span>
</span><span class='line'>
</span><span class='line'><span class="gh">*** Keywords ***</span><span class="p"></span>
</span><span class='line'><span class="gu">execute sql</span><span class="p"></span>
</span><span class='line'><span class="p">    [</span><span class="kn">Arguments</span><span class="p">]  ${</span><span class="nv">sql</span><span class="p">}</span>
</span><span class='line'><span class="p">    </span><span class="nf">Connect To Database Using Custom Params</span><span class="p">      </span><span class="s">cymysql</span><span class="p">    </span><span class="s">db=&#39;</span><span class="p">${</span><span class="nv">dbname</span><span class="p">}</span><span class="s">&#39;,user=&#39;</span><span class="p">${</span><span class="nv">dbuser</span><span class="p">}</span><span class="s">&#39;,passwd=&#39;</span><span class="p">${</span><span class="nv">dbpassword</span><span class="p">}</span><span class="s">&#39;, host=&#39;</span><span class="p">${</span><span class="nv">dbhost</span><span class="p">}</span><span class="s">&#39;,port=</span><span class="p">${</span><span class="nv">dbport</span><span class="p">}</span>
</span><span class='line'><span class="p">    </span><span class="nf">Execute Sql String</span><span class="p">    ${</span><span class="nv">sql</span><span class="p">}</span>
</span><span class='line'><span class="p">    </span><span class="nf">Disconnect from database</span><span class="p"></span>
</span><span class='line'>
</span><span class='line'><span class="gu">create recipient</span><span class="p"></span>
</span><span class='line'><span class="p">    </span><span class="nf">Input text</span><span class="p">    </span><span class="s">username</span><span class="p">    </span><span class="s">zhaozhiming</span><span class="p"></span>
</span><span class='line'><span class="p">    </span><span class="nf">Input text</span><span class="p">    </span><span class="s">email</span><span class="p">    </span><span class="s">zhaozhiming003@gmail.com</span><span class="p"></span>
</span><span class='line'><span class="p">    </span><span class="nf">click element</span><span class="p">  </span><span class="s">css=.submit</span><span class="p"></span>
</span><span class='line'>
</span><span class='line'><span class="gu">verify create recipient</span><span class="p"></span>
</span><span class='line'><span class="p">    [</span><span class="kn">Arguments</span><span class="p">]  ${</span><span class="nv">expectContent</span><span class="p">}</span>
</span><span class='line'><span class="p">    </span><span class="nf">sleep</span><span class="p">   </span><span class="s">2s</span><span class="p"></span>
</span><span class='line'><span class="p">    </span><span class="nf">page should contain</span><span class="p">  ${</span><span class="nv">expectContent</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>resource.robot</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='robotframework'><span class='line'><span class="gh">*** Variables ***</span><span class="p"></span>
</span><span class='line'><span class="p">${</span><span class="nv">baseurl</span><span class="p">}  </span><span class="s">http://localhost:9898/oddemail</span><span class="p"></span>
</span><span class='line'><span class="p">${</span><span class="nv">dbhost</span><span class="p">}  </span><span class="s">localhost</span><span class="p"></span>
</span><span class='line'><span class="p">${</span><span class="nv">dbport</span><span class="p">}  </span><span class="s">3306</span><span class="p"></span>
</span><span class='line'><span class="p">${</span><span class="nv">dbname</span><span class="p">}  </span><span class="s">oms</span><span class="p"></span>
</span><span class='line'><span class="p">${</span><span class="nv">dbuser</span><span class="p">}  </span><span class="s">root</span><span class="p"></span>
</span><span class='line'><span class="p">${</span><span class="nv">dbpassword</span><span class="p">}  </span><span class="s">root</span><span class="p"></span>
</span><span class='line'><span class="p">${</span><span class="nv">browser</span><span class="p">}  </span><span class="s">chrome</span><span class="p"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Settings下面是测试脚本需要引用的Lib包名，Resource文件，Setup和Teardown方法。</p>

<ul>
<li>Resource文件可以用来存放一些可以复用的变量，当然也可以将这一部分放到测试脚本中。</li>
<li>Setup和Teardow跟单元测试一样，是在跑每个Test Case之前和之后会做的事情。注意上面例子里面打开url指定了浏览器Chrome，如果不指定浏览器的话会默认用Firefox打开，如果想使用Chrome来进行web自动化测试的话，则需要下载Chrome驱动<a href="https://code.google.com/p/selenium/wiki/ChromeDriver">chromedriver</a>，下载完后将其解压并设置到PATH路径。</li>
</ul>
</li>
<li><p>TestCases设置了脚本里的测试案例，每个测试案例可以由Given，When，Then组成，每一行除开这几个关键字就是测试案例的步骤，在robot里面叫关键字，关键字可以带参数，可以把关键字理解为程序里面的方法。</p></li>
<li><p>Keywords就是在Test Case里面定义的关键字了，里面有是每个关键字具体的执行内容。</p>

<ul>
<li><code>execute sql</code>这个关键字的内容是连接数据库，执行sql，关闭数据库连接。</li>
<li><code>create recipient</code>这个关键字的内容是在页面输入用户名，输入邮箱地址，点击提交按钮。注意这里的页面元素是通过class来查找的，也可以通过id，tag或其他。</li>
<li><code>verify create recipient</code>这个关键字的内容是等待2秒，验证页面是否包含期望的内容。</li>
</ul>
</li>
</ul>


<p>可以看到Keyword的每个内容描述都很简单易懂，甚至还可以写中文，让不懂开发的人也知道你的测试案例是做什么的。</p>

<h4>执行脚本</h4>

<p>因为这个测试案例是对web页面进行测试，所以在执行测试案例之前需要先将应用服务启起来，服务启起来后，执行下面的 语句:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>pybot /your/robot/scripts/path/create_recipient.robot
</span></code></pre></td></tr></table></div></figure>


<p>执行完后会看到系统自动打开浏览器，输入url，自动填写输入框，并验证是否正确，最后会产生几个报告文件，如果测试案例失败，还会自动将失败的页面截图存成文件。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Output:  /home/kingzzm/projects/odde-mail-server/output.xml
</span><span class='line'>Log:     /home/kingzzm/projects/odde-mail-server/log.html
</span><span class='line'>Report:  /home/kingzzm/projects/odde-mail-server/report.html
</span></code></pre></td></tr></table></div></figure>


<p>另外建议脚本存放到test目录下，建议目录结构如下:</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-6/robot_script_local.png"></p>

<h4>与Gradle集成</h4>

<p>每次跑robot测试都需要手动启一个web服务比较麻烦，可以考虑在Gradle中通过任务的方式来执行robot测试，在跑测试之前先通过gradle启一个本地应用，然后开始跑robot测试，跑完测试后通过Gradle停掉本地服务。<br/>
因为Gradle自带jetty容器，所以这一步实现起来也比较简单:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">[</span><span class="n">jettyRun</span><span class="o">,</span> <span class="n">jettyStop</span><span class="o">]*.</span><span class="na">stopPort</span> <span class="o">=</span> <span class="mi">7654</span>
</span><span class='line'><span class="o">[</span><span class="n">jettyRun</span><span class="o">,</span> <span class="n">jettyStop</span><span class="o">]*.</span><span class="na">stopKey</span> <span class="o">=</span> <span class="s1">&#39;oddemail&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="nf">uat</span><span class="o">(</span><span class="nl">type:</span><span class="n">Exec</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="n">jettyRun</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">commandLine</span> <span class="s1">&#39;/usr/local/bin/pybot&#39;</span><span class="o">,</span> <span class="s1">&#39;src/test/uat/testcase&#39;</span>
</span><span class='line'>    <span class="n">doLast</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">jettyStop</span><span class="o">.</span><span class="na">execute</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以后需要跑uat测试就执行<code>gradle uat</code>这个命令就可以了，这样还可以结合jenkins进行uat自动化测试。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于Spring MVC做单元测试（二）——使用JMockit]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/06/17/spring-mvc-unit-test-part-2/"/>
    <updated>2014-06-17T12:24:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/06/17/spring-mvc-unit-test-part-2</id>
    <content type="html"><![CDATA[<p>上一篇Post讲了如何使用Spring的Test框架来进行单元测试，但在运行单元测试的时候有一个问题，就是每次跑单元测试都需要加载一下配置文件，或者启动web容器，这样的单元测试跑起来就不能达到快的目的。下面再介绍一下通过JMockit这个Java Mock工具来进行spring的单元测试，其特点是不需指定spring的配置文件，任何对象都可以mock出来并进行关联。</p>

<!--more-->


<p></p>

<h2>Controller</h2>

<p>首先我们还是来看一下使用了JMockit的Controller单元测试是怎么写的，Controller的功能代码可以查看上一篇post。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.model.Result</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.service.MailService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mockit.Expectations</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mockit.Injectable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mockit.Tested</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mockit.integration.junit4.JMockit</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">CoreMatchers</span><span class="o">.</span><span class="na">is</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">JMockit</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MailControllerTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Tested</span>
</span><span class='line'>    <span class="n">MailController</span> <span class="n">mailController</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Injectable</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MailService</span> <span class="n">mailService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_return_status_success_when_send_mail_success</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Expectations</span><span class="o">()</span> <span class="o">{</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mailService</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">&quot;test@test.com&quot;</span><span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Result</span><span class="o">(</span><span class="s">&quot;成功&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mailController</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">&quot;test@test.com&quot;</span><span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;{\&quot;status\&quot;:\&quot;成功\&quot;}&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>@RunWith(JMockit.class): 指定单元测试的执行类为JMockit.class;</li>
<li>@Tested: 这个Annotate是指被测试类，在这个测试案例中我们要测试的是MailController，所以我们给其打上这个标签;</li>
<li>@Injectable: 这个Annotate可以将对象进行mock并自动关联到被测试类，而不需要通过其他文件类似spring的配置文件等来进行关联;</li>
<li>@Expectations: mock对象mailService的send方法，让其返回一个Result对象;</li>
</ul>


<p>做完上面这些基本就可以了，后面的被测方法调用和验证都跟原来的一样。这样看起来是不是比原来的单元测试代码少了一些，也更简洁了一些，最重要的一点是这样的单元测试不依赖spring的bean定义文件，不需要启动web服务，执行起来速度很快。</p>

<h2>Service</h2>

<p>再来看一下Service的单元测试要怎么改写，同样Service的功能代码可以看上一篇Post。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.model.Recipient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.model.Result</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.repo.RecipientRepository</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mockit.Injectable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mockit.NonStrictExpectations</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mockit.Tested</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mockit.integration.junit4.JMockit</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">Is</span><span class="o">.</span><span class="na">is</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">JMockit</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RecipientServiceTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Tested</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">RecipientService</span> <span class="n">recipientService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Injectable</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">RecipientRepository</span> <span class="n">recipientRepository</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_return_success_when_add_recipient_not_exist</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Result</span> <span class="n">result</span> <span class="o">=</span> <span class="n">recipientService</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Tom&quot;</span><span class="o">,</span> <span class="s">&quot;test@test.com&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">getStatus</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;成功&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>相对Controller Test这里少了一步对recipientRepository对象findByEmail方法的mock，因为如果不通过Expectations进行方法mock的话，方法会默认返回null，而我们要测试的场景正是需要findByEmail方法返回null，所以mock方法这一步我们也省了。<br/>
改写后的整体代码也比原来的少了很多，而且速度更快。</p>

<h2>适当使用Mock框架</h2>

<p>JMockit功能非常强大，不仅可以轻松处理上面的这些测试场景，还可以对static,final,private等方法进行mock，可以让你的单元测试毫无阻碍的进行。<br/>
但是如果过度的使用Mock框架，会让功能代码的坏味道被掩盖。本来单元测试的设计可以让你发现功能代码上的一些设计是否合理，比如有没有紧耦合等，但使用JMockit可以让你在设计不合理的代码上也可以轻松地进行单元测试，这样你就很难发现功能代码上的问题了。<br/>
所以建议JMockit等类似的mock框架还是要谨慎使用，首先要保证功能代码设计合理，满足面向对象设计的要求，再来考虑提高单元测试效率的问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于Spring MVC做单元测试（一）——使用Spring Test框架]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/06/16/spring-mvc-unit-test-part-1/"/>
    <updated>2014-06-16T10:54:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/06/16/spring-mvc-unit-test-part-1</id>
    <content type="html"><![CDATA[<p>最近用Spring Mvc框架做了几个小项目，但都没有做单元测试，最近想恶补一下这方面的东西，包括基于Spring的单元测试，自动化测试和JS单元测试。今天先讲一下基于Spring框架的单元测试，测试使用的是Spring自带的test组件，再结合Mockito一起编写测试案例，以下示例会包括Controller和Service，由于Repository是基于Spring JPA，没有自己的逻辑，所以这里就不涉及Repository的单元测试，以后有需要再介绍。</p>

<!--more-->


<p></p>

<h2>Controller</h2>

<p>首先看一下Controller的代码（如下），代码比较简单，就是接收前端发过来的一些参数，通过这些参数直接调用Service的方法。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.model.Result</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.service.MailService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.logging.Log</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.logging.LogFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.codehaus.jackson.map.ObjectMapper</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMethod</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestParam</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.ResponseBody</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span><span class="o">.</span><span class="na">format</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;/mail&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MailController</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Log</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LogFactory</span><span class="o">.</span><span class="na">getLog</span><span class="o">(</span><span class="n">MailController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ObjectMapper</span> <span class="n">mapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectMapper</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MailService</span> <span class="n">mailService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/send&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">,</span> <span class="n">produces</span> <span class="o">=</span> <span class="s">&quot;text/plain;charset=UTF-8&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span>
</span><span class='line'>    <span class="nd">@ResponseBody</span>
</span><span class='line'>    <span class="n">String</span> <span class="nf">send</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;recipients&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">recipients</span><span class="o">,</span>
</span><span class='line'>                <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;subject&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">subject</span><span class="o">,</span>
</span><span class='line'>                <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;content&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">content</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;mail controller send start&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="s">&quot;recipients:%s&quot;</span><span class="o">,</span> <span class="n">recipients</span><span class="o">));</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="s">&quot;subject:%s&quot;</span><span class="o">,</span> <span class="n">subject</span><span class="o">));</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="s">&quot;content:%s&quot;</span><span class="o">,</span> <span class="n">content</span><span class="o">));</span>
</span><span class='line'>        <span class="n">Result</span> <span class="n">mailResult</span> <span class="o">=</span> <span class="n">mailService</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">recipients</span><span class="o">,</span> <span class="n">subject</span><span class="o">,</span> <span class="n">content</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">mailResult</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="s">&quot;result:%s&quot;</span><span class="o">,</span> <span class="n">result</span><span class="o">));</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;mail controller send finish&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再来看对应的单元测试:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.model.Result</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.service.MailService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Before</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.mockito.InjectMocks</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.mockito.Mock</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.mockito.MockitoAnnotations</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.web.WebAppConfiguration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.web.servlet.MockMvc</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.web.servlet.setup.MockMvcBuilders</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">CoreMatchers</span><span class="o">.</span><span class="na">is</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">Mockito</span><span class="o">.</span><span class="na">verify</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">Mockito</span><span class="o">.</span><span class="na">when</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">request</span><span class="o">.</span><span class="na">MockMvcRequestBuilders</span><span class="o">.</span><span class="na">post</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">result</span><span class="o">.</span><span class="na">MockMvcResultHandlers</span><span class="o">.</span><span class="na">print</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">result</span><span class="o">.</span><span class="na">MockMvcResultMatchers</span><span class="o">.</span><span class="na">content</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">result</span><span class="o">.</span><span class="na">MockMvcResultMatchers</span><span class="o">.</span><span class="na">status</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@WebAppConfiguration</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="s">&quot;file:src/main/webapp/WEB-INF/mvc-dispatcher-servlet.xml&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MailControllerTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Mock</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MailService</span> <span class="n">mailService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@InjectMocks</span>
</span><span class='line'>    <span class="n">MailController</span> <span class="n">mailController</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">MockitoAnnotations</span><span class="o">.</span><span class="na">initMocks</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">mockMvc</span> <span class="o">=</span> <span class="n">MockMvcBuilders</span><span class="o">.</span><span class="na">standaloneSetup</span><span class="o">(</span><span class="n">mailController</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_return_status_success_when_send_mail_success</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">when</span><span class="o">(</span><span class="n">mailService</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">&quot;test@test.com&quot;</span><span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="k">new</span> <span class="n">Result</span><span class="o">(</span><span class="s">&quot;成功&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">post</span><span class="o">(</span><span class="s">&quot;/mail/send&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&quot;recipients&quot;</span><span class="o">,</span> <span class="s">&quot;test@test.com&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&quot;subject&quot;</span><span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&quot;content&quot;</span><span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">andDo</span><span class="o">(</span><span class="n">print</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">()).</span><span class="na">andExpect</span><span class="o">(</span><span class="n">content</span><span class="o">().</span><span class="na">string</span><span class="o">(</span><span class="n">is</span><span class="o">(</span><span class="s">&quot;{\&quot;status\&quot;:\&quot;&quot;</span> <span class="o">+</span> <span class="n">result</span> <span class="o">+</span> <span class="s">&quot;\&quot;}&quot;</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">verify</span><span class="o">(</span><span class="n">mailService</span><span class="o">).</span><span class="na">send</span><span class="o">(</span><span class="s">&quot;test@test.com&quot;</span><span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>首先是Spring的几个Annotate</h4>

<ul>
<li>RunWith(SpringJUnit4ClassRunner.class): 表示使用Spring Test组件进行单元测试;</li>
<li>WebAppConfiguration: 使用这个Annotate会在跑单元测试的时候真实的启一个web服务，然后开始调用Controller的Rest API，待单元测试跑完之后再将web服务停掉;</li>
<li>ContextConfiguration: 指定Bean的配置文件信息，可以有多种方式，这个例子使用的是文件路径形式，如果有多个配置文件，可以将括号中的信息配置为一个字符串数组来表示;</li>
</ul>


<h4>然后是Mockito的Annotate</h4>

<ul>
<li>Mock: 如果该对象需要mock，则加上此Annotate;</li>
<li>InjectMocks: 使mock对象的使用类可以注入mock对象，在上面这个例子中，mock对象是MailService，使用了MailService的是MailController，所以在Controller加上该Annotate;</li>
</ul>


<h4>Setup方法</h4>

<ul>
<li><code>MockitoAnnotations.initMocks(this)</code>: 将打上Mockito标签的对象起作用，使得Mock的类被Mock，使用了Mock对象的类自动与Mock对象关联。</li>
<li><code>mockMvc</code>: 细心的朋友应该注意到了这个对象，这个对象是Controller单元测试的关键，它的初始化也是在setup方法里面。</li>
</ul>


<h4>Test Case</h4>

<ul>
<li>首先mock了MailService的send方法，让其返回一个成功的Result对象。</li>
<li><code>mockMvc.perform</code>: 发起一个http请求。</li>
<li><code>post(url)</code>: 表示一个post请求，url对应的是Controller中被测方法的Rest url。</li>
<li><code>param(key, value)</code>: 表示一个request parameter，方法参数是key和value。</li>
<li><code>andDo（print()）</code>: 表示打印出request和response的详细信息，便于调试。</li>
<li><code>andExpect（status().isOk()）</code>: 表示期望返回的Response Status是200。</li>
<li><code>andExpect（content().string(is（expectstring））</code>: 表示期望返回的Response Body内容是期望的字符串。</li>
</ul>


<p>使用print打印处理的信息类似下面显示的内容:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>MockHttpServletRequest:
</span><span class='line'>         HTTP Method = POST
</span><span class='line'>         Request URI = /mail/send
</span><span class='line'>          Parameters = {recipients=[test@test.com], subject=[test], content=[test]}
</span><span class='line'>             Headers = {}
</span><span class='line'>
</span><span class='line'>             Handler:
</span><span class='line'>                Type = com.odde.mail.controller.MailController
</span><span class='line'>              Method = public java.lang.String com.odde.mail.controller.MailController.send(java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception
</span><span class='line'>
</span><span class='line'>               Async:
</span><span class='line'>   Was async started = false
</span><span class='line'>        Async result = null
</span><span class='line'>
</span><span class='line'>  Resolved Exception:
</span><span class='line'>                Type = null
</span><span class='line'>
</span><span class='line'>        ModelAndView:
</span><span class='line'>           View name = null
</span><span class='line'>                View = null
</span><span class='line'>               Model = null
</span><span class='line'>
</span><span class='line'>            FlashMap:
</span><span class='line'>
</span><span class='line'>MockHttpServletResponse:
</span><span class='line'>              Status = 200
</span><span class='line'>       Error message = null
</span><span class='line'>             Headers = {Content-Type=[text/plain;charset=UTF-8], Content-Length=[19]}
</span><span class='line'>        Content type = text/plain;charset=UTF-8
</span><span class='line'>                Body = {&quot;status&quot;:&quot;成功&quot;}
</span><span class='line'>       Forwarded URL = null
</span><span class='line'>      Redirected URL = null
</span><span class='line'>             Cookies = []
</span></code></pre></td></tr></table></div></figure>


<h2>Service</h2>

<p>照例我们先看一下Service的功能代码，代码也比较简单，就是调用Repository做一些增删改查的动作。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.model.Recipient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.model.Result</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.repo.RecipientRepository</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.logging.Log</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.logging.LogFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Service</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RecipientService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">RecipientRepository</span> <span class="n">recipientRepository</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Result</span> <span class="nf">add</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Recipient</span> <span class="n">recipient</span> <span class="o">=</span> <span class="n">recipientRepository</span><span class="o">.</span><span class="na">findByEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Result</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">recipient</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">recipientRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="k">new</span> <span class="n">Recipient</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">email</span><span class="o">));</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Result</span><span class="o">(</span><span class="s">&quot;成功&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Result</span><span class="o">(</span><span class="s">&quot;失败&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再来看对应的测试代码:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.model.Recipient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.repo.RecipientRepository</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Before</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.mockito.InjectMocks</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.mockito.Mock</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.mockito.MockitoAnnotations</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.ContextConfiguration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">Is</span><span class="o">.</span><span class="na">is</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">Matchers</span><span class="o">.</span><span class="na">any</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">Matchers</span><span class="o">.</span><span class="na">anyString</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">Mockito</span><span class="o">.</span><span class="na">verify</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">Mockito</span><span class="o">.</span><span class="na">when</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="s">&quot;file:src/main/webapp/WEB-INF/mvc-dispatcher-servlet.xml&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RecipientServiceTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Mock</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">RecipientRepository</span> <span class="n">recipientRepository</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@InjectMocks</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">RecipientService</span> <span class="n">recipientService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">MockitoAnnotations</span><span class="o">.</span><span class="na">initMocks</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_return_success_when_add_recipient_not_exist</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">when</span><span class="o">(</span><span class="n">recipientRepository</span><span class="o">.</span><span class="na">findByEmail</span><span class="o">(</span><span class="n">anyString</span><span class="o">())).</span><span class="na">thenReturn</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="n">when</span><span class="o">(</span><span class="n">recipientRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">any</span><span class="o">(</span><span class="n">Recipient</span><span class="o">.</span><span class="na">class</span><span class="o">))).</span><span class="na">thenReturn</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">recipientService</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Tom&quot;</span><span class="o">,</span> <span class="s">&quot;test@test.com&quot;</span><span class="o">).</span><span class="na">getStatus</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;成功&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">verify</span><span class="o">(</span><span class="n">recipientRepository</span><span class="o">).</span><span class="na">findByEmail</span><span class="o">(</span><span class="n">anyString</span><span class="o">());</span>
</span><span class='line'>        <span class="n">verify</span><span class="o">(</span><span class="n">recipientRepository</span><span class="o">).</span><span class="na">save</span><span class="o">(</span><span class="n">any</span><span class="o">(</span><span class="n">Recipient</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Service的单元测试就比较简单了，大部分内容都在Controller里面讲过，不同的地方就是Controller是使用mockMvc对象来模拟Controler的被测方法，而在Service的单元测试中则是直接调用Service的方法（比如上面例子中的findByEmail和add）。</p>

<h2>Reponsitory</h2>

<p>最后再说一下Reponsitory的单元测试，刚才讲过这里不涉及这块的介绍，因为Reponsitory没有具体的实现代码，基本上调用的是Spring JPA的功能。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.model.Recipient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">RecipientRepository</span> <span class="kd">extends</span> <span class="n">JpaRepository</span><span class="o">&lt;</span><span class="n">Recipient</span><span class="o">,</span> <span class="n">Long</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Recipient</span> <span class="nf">findByEmail</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你的项目里面有自定义的Reponsitory具体实现，则需要做单元测试，这个可以上网自行搜索相关资料。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近小项目的一些记录（二）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/05/31/some-tips-in-my-recent-project-2/"/>
    <updated>2014-05-31T10:40:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/05/31/some-tips-in-my-recent-project-2</id>
    <content type="html"><![CDATA[<p><a href="http://zhaozhiming.github.io/blog/2014/05/31/some-tips-in-my-recent-project/">前一篇post</a>主要记录了Spring JPA和Hibernate的问题，接着记录其他一些工具遇到的问题。</p>

<!--more-->


<p></p>

<h2>Jsoup</h2>

<p><a href="https://github.com/jhy/jsoup">Jsoup</a>是一个比较火的Java解析Html工具，简单易用，功能强大，在github上有不少星星。</p>

<h3>使用Jsoup连接url时报403</h3>

<p>一般使用Jsoup连接url都不会有什么问题，正常的写法如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Jsoup</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>但有些网站会获取用户的浏览器信息，而上面的写法是没有浏览器信息的，这个时候就会报403的错误，需要在连接时加上userAngent。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Jsoup</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="na">userAgent</span><span class="o">(</span><span class="s">&quot;Mozilla&quot;</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Css Selector</h3>

<p>使用Jsoup来抓取网页信息，最简单的一种方式就是通过Css selector，这样可以让你少写很多代码。比如下面的一段html:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用css selector可以这样简单的获得。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">doc</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="s">&quot;#main div.header&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Velocity</h2>

<p>项目用到了Velocity来定制邮件模板，这样可以方便的修改邮件格式。在网上可以搜到很多关于Spring和Velocity集成的文章，但大部分是讲如何使用Velocity来生成页面的，而如何生成其他文件的说明比较少，下面我们就来看一下如何配置的。</p>

<ul>
<li>先配置velocityConfigurer的bean，这里定义了模板文件的路径，属性和编码等信息。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;velocityConfigurer&quot;</span>
</span><span class='line'>          <span class="na">class=</span><span class="s">&quot;org.springframework.web.servlet.view.velocity.VelocityConfigurer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;resourceLoaderPath&quot;</span> <span class="na">value=</span><span class="s">&quot;WEB-INF/velocity&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;velocityProperties&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;props&gt;</span>
</span><span class='line'>                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;directive.foreach.counter.name&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    loopCounter
</span><span class='line'>                <span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;directive.foreach.counter.initial.value&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    0
</span><span class='line'>                <span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;input.encoding&quot;</span><span class="nt">&gt;</span>UTF-8<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;output.encoding&quot;</span><span class="nt">&gt;</span>UTF-8<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/props&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在需要使用的Sevice里面引入，这样就可以在service里面使用到Velocity的配置信息了。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Service</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MailService</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Resource</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;velocityConfigurer&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">VelocityConfigurer</span> <span class="n">velocityConfigurer</span><span class="o">;</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用Velocity的工具类来得到生成的文件信息。

<ul>
<li>temple是模板文件的名称。</li>
<li>model是生成文件所需的参数。</li>
</ul>
</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">content</span> <span class="o">=</span> <span class="n">VelocityEngineUtils</span><span class="o">.</span><span class="na">mergeTemplateIntoString</span><span class="o">(</span>
</span><span class='line'>                <span class="n">velocityConfigurer</span><span class="o">.</span><span class="na">getVelocityEngine</span><span class="o">(),</span> <span class="n">temple</span><span class="o">,</span>
</span><span class='line'>                <span class="n">MAIL_ENCODING</span><span class="o">,</span> <span class="n">model</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Angularjs</h3>

<p>Angularjs功能比较强大，使用它之后基本可以不用使用JQuery了，这里记录一下使用遇到的一个比较奇怪的问题。</p>

<ul>
<li>问题: 使用Angularjs发起一个post请求，带了几个请求的参数，后台接收请求时获取不到参数。开始的写法如下：</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="kd">var</span> <span class="nx">queryData</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="s2">&quot;depGroup&quot;</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#dep_group&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;website&quot;</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#website&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;startDate&quot;</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#start_date&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;endDate&quot;</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#end_date&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;api/search&#39;</span><span class="p">,</span> <span class="nx">queryData</span><span class="p">).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">$scope</span><span class="p">.</span><span class="nx">blogs</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'>                <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>接收不到参数的原因是angularjs把参数转成了json导致后台接收不到，需要在发起请求时将参数转换一下，修改后的代码如下：</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="kd">var</span> <span class="nx">postConfig</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span> <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;application/x-www-form-urlencoded; charset=UTF-8&#39;</span><span class="p">},</span>
</span><span class='line'>        <span class="nx">transformRequest</span><span class="o">:</span> <span class="nx">transform</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;api/search&#39;</span><span class="p">,</span> <span class="nx">queryData</span><span class="err">，</span><span class="nx">postConfig</span><span class="p">).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">$scope</span><span class="p">.</span><span class="nx">blogs</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Semantic-ui</h3>

<p>这个是我比较喜欢的一个css框架，这里要注意的地方是有些功能和Angularjs结合起来会发现不起作用，如果不起作用可以尝试使用<a href="https://github.com/caitp/angular-semantic">angular-semantic</a>这个工具看看能否解决问题。</p>

<ul>
<li>semantic-ui的表单规则和行为设置，简单的示例如下，需要设置规则(rules)和配置(setting即校验通过后的行为)。</li>
</ul>


<p>js代码:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="kd">var</span> <span class="nx">rules</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">searchKeyword</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">identifier</span><span class="o">:</span> <span class="s1">&#39;searchKeyword&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">rules</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;empty&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">prompt</span><span class="o">:</span> <span class="s1">&#39;请输入查询关键字&#39;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">setting</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">onSuccess</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 发http请求</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#searchForm&#39;</span><span class="p">).</span><span class="nx">form</span><span class="p">(</span><span class="nx">rules</span><span class="p">,</span> <span class="nx">setting</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>html代码:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;searchForm&quot;</span> <span class="na">class=</span><span class="s">&quot;ui form&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;two fields&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui icon input&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;searchKeyword&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;searchKeyword&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;请输入查询关键字...&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;search icon&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;field&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;searchBtn&quot;</span> <span class="na">class=</span><span class="s">&quot;ui blue submit button&quot;</span><span class="nt">&gt;</span>查询<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui error message&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近小项目的一些记录（一）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/05/31/some-tips-in-my-recent-project/"/>
    <updated>2014-05-31T09:09:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/05/31/some-tips-in-my-recent-project</id>
    <content type="html"><![CDATA[<p>最近花了2个星期的时间做了一个小网站，用来统计部门同事发布的博客情况。需求比较简单，做这个项目的时候就顺便把以前学到的东西整合到了一起，从前端到后台，从编码到部署（“全栈工程师”？呵呵），虽然事情比较琐碎但也学到了不少东西，下面就记录一下开发过程中遇到的一些问题。</p>

<!--more-->


<p></p>

<h2>技术栈</h2>

<p>这里先列举一下项目用到的一些技术，其实这些东西就是自己的工具箱，要慢慢丰富，要及时更新，这样才能做出来好东西。</p>

<ul>
<li>Spring4 MVC</li>
<li>Hibernate orm</li>
<li>Spring Data JPA</li>
<li>AngularJS(Javascript MVW Framework)</li>
<li>Semantic UI(CSS Framework)</li>
<li>Velocity(for mail)</li>
<li>Gradle</li>
<li>SAE(Sina App Engine)</li>
</ul>


<h2>Spring JPA</h2>

<p>项目遇到不少的问题都来自JPA，也有一部分原因是由于SAE的MySql数据库是读写分离的两个库，所以要配置多个数据源才能在上面正常读写数据。<br/>
JPA有个好处就是操作数据库时不用写太多代码，不用像以前一样写一个接口再写一个实现，只需要一个接口就可以完成基本的操作了，如果有特殊的操作则可以通过标签的方式来写sql。</p>

<h3>Spring JPA配置多个persistence-unit(或多个数据源）</h3>

<ul>
<li>首先增加JPA的多persistence-unit的管理Bean。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;persistenceUnitManager&quot;</span>
</span><span class='line'>          <span class="na">class=</span><span class="s">&quot;org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;persistenceXmlLocation&quot;</span> <span class="na">value=</span><span class="s">&quot;classpath:META-INF/persistence.xml&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="c">&lt;!--  comment dataSourceLooup to use jndi --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;dataSourceLookup&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>然后配置多套DataSource，EntityManagerFactory，TransactionManger和jpa:repository，这里要重点注意jps:repository的配置也要有多套，否则启动就会报<code>No unique bean of type [javax.persistence.EntityManagerFactory] is defined: expected single bean but found 2</code>的错误。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="c">&lt;!--write persistence unit config--&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;writeJpaVendor&quot;</span>
</span><span class='line'>          <span class="na">class=</span><span class="s">&quot;org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;showSql&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;generateDdl&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;writeDataSource&quot;</span> <span class="na">class=</span><span class="s">&quot;com.mchange.v2.c3p0.ComboPooledDataSource &quot;</span> <span class="na">destroy-method=</span><span class="s">&quot;close&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;driverClass&quot;</span> <span class="na">value=</span><span class="s">&quot;com.mysql.jdbc.Driver&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;jdbcUrl&quot;</span> <span class="na">value=</span><span class="s">&quot;jdbc:mysql://localhost:3306/deblog&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;user&quot;</span> <span class="na">value=</span><span class="s">&quot;root&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">value=</span><span class="s">&quot;root&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;acquireIncrement&quot;</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;initialPoolSize&quot;</span> <span class="na">value=</span><span class="s">&quot;5&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxPoolSize&quot;</span> <span class="na">value=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;minPoolSize&quot;</span> <span class="na">value=</span><span class="s">&quot;5&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxStatements&quot;</span> <span class="na">value=</span><span class="s">&quot;100&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;testConnectionOnCheckout&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;writeEntityManagerFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;persistenceUnitManager&quot;</span> <span class="na">ref=</span><span class="s">&quot;persistenceUnitManager&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;persistenceUnitName&quot;</span> <span class="na">value=</span><span class="s">&quot;mainPersistenceUnit&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;jpaVendorAdapter&quot;</span> <span class="na">ref=</span><span class="s">&quot;writeJpaVendor&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;loadTimeWeaver&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;jpaDialect&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.orm.jpa.vendor.HibernateJpaDialect&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;writeTransactionManager&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.orm.jpa.JpaTransactionManager&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;entityManagerFactory&quot;</span> <span class="na">ref=</span><span class="s">&quot;writeEntityManagerFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;qualifier</span> <span class="na">value=</span><span class="s">&quot;writeEm&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;jpaDialect&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.orm.jpa.vendor.HibernateJpaDialect&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;jpa:repositories</span> <span class="na">base-package=</span><span class="s">&quot;com.github.dba.repo.write&quot;</span>
</span><span class='line'>                      <span class="na">entity-manager-factory-ref=</span><span class="s">&quot;writeEntityManagerFactory&quot;</span>
</span><span class='line'>                      <span class="na">transaction-manager-ref=</span><span class="s">&quot;writeTransactionManager&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;tx:annotation-driven</span> <span class="na">transaction-manager=</span><span class="s">&quot;writeTransactionManager&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在persistence.xml文件中增加多个unit,这里以一个unit为例，多个的话只要persistence-unit的name不一样就可以了。下面的例子引用了之前的datasource的配置，可以不需要再配置一次jdbc信息。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;persistence-unit</span> <span class="na">name=</span><span class="s">&quot;mainPersistenceUnit&quot;</span> <span class="na">transaction-type=</span><span class="s">&quot;RESOURCE_LOCAL&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;provider&gt;</span>org.hibernate.ejb.HibernatePersistence<span class="nt">&lt;/provider&gt;</span>
</span><span class='line'>        <span class="nt">&lt;non-jta-data-source&gt;</span>writeDataSource<span class="nt">&lt;/non-jta-data-source&gt;</span>
</span><span class='line'>        <span class="nt">&lt;class&gt;</span>com.github.dba.model.Blog<span class="nt">&lt;/class&gt;</span>
</span><span class='line'>        <span class="nt">&lt;class&gt;</span>com.github.dba.model.DepGroup<span class="nt">&lt;/class&gt;</span>
</span><span class='line'>        <span class="nt">&lt;class&gt;</span>com.github.dba.model.DepMember<span class="nt">&lt;/class&gt;</span>
</span><span class='line'>        <span class="nt">&lt;class&gt;</span>com.github.dba.model.BlogView<span class="nt">&lt;/class&gt;</span>
</span><span class='line'>        <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;javax.persistence.jdbc.driver&quot;</span> <span class="na">value=</span><span class="s">&quot;com.mysql.jdbc.Driver&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;javax.persistence.jdbc.url&quot;</span> <span class="na">value=</span><span class="s">&quot;jdbc:mysql://localhost:3306/deblog&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;javax.persistence.jdbc.user&quot;</span> <span class="na">value=</span><span class="s">&quot;root&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;javax.persistence.jdbc.password&quot;</span> <span class="na">value=</span><span class="s">&quot;root&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;hibernate.dialect&quot;</span> <span class="na">value=</span><span class="s">&quot;org.hibernate.dialect.MySQLDialect&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;hibernate.show_sql&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;hibernate.hbm2ddl.auto&quot;</span> <span class="na">value=</span><span class="s">&quot;update&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/persistence-unit&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Spring JPA动态查询</h3>

<ul>
<li>首先在model类中增加一个静态方法，用来生成本次查询的动态条件。

<ul>
<li>下面的例子假设depGroup, website, startDate, endDate都可能有值。</li>
<li>where中的&#8221;=&ldquo;,&rdquo;&lt;&ldquo;,&rdquo;>&ldquo;可以在CriteriaBuilder中找到相应的方法，还有比如like等。</li>
<li>如果是嵌套对象的话，比如Blog对象包含Author对象，要对比Author对象的值，则可以用这种方式来取值: <code>root.&lt;Author&gt;get("author").&lt;String&gt;get("groupName")</code>。</li>
</ul>
</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Specification</span><span class="o">&lt;</span><span class="n">Blog</span><span class="o">&gt;</span> <span class="nf">querySpecification</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">depGroup</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">website</span><span class="o">,</span>
</span><span class='line'>                                                         <span class="kd">final</span> <span class="n">String</span> <span class="n">startDate</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">endDate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Specifications</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="k">new</span> <span class="n">Specification</span><span class="o">&lt;</span><span class="n">Blog</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Predicate</span> <span class="nf">toPredicate</span><span class="o">(</span><span class="n">Root</span><span class="o">&lt;</span><span class="n">Blog</span><span class="o">&gt;</span> <span class="n">root</span><span class="o">,</span> <span class="n">CriteriaQuery</span><span class="o">&lt;?&gt;</span> <span class="n">query</span><span class="o">,</span> <span class="n">CriteriaBuilder</span> <span class="n">cb</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Predicate</span> <span class="n">predicate</span> <span class="o">=</span> <span class="n">cb</span><span class="o">.</span><span class="na">conjunction</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">Strings</span><span class="o">.</span><span class="na">isNullOrEmpty</span><span class="o">(</span><span class="n">depGroup</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="s">&quot;*&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">depGroup</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">predicate</span><span class="o">.</span><span class="na">getExpressions</span><span class="o">().</span><span class="na">add</span><span class="o">(</span>
</span><span class='line'>                            <span class="n">cb</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">root</span><span class="o">.&lt;</span><span class="n">Author</span><span class="o">&gt;</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;author&quot;</span><span class="o">).&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;groupName&quot;</span><span class="o">),</span> <span class="n">depGroup</span><span class="o">));</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">Strings</span><span class="o">.</span><span class="na">isNullOrEmpty</span><span class="o">(</span><span class="n">website</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="s">&quot;*&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">website</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">predicate</span><span class="o">.</span><span class="na">getExpressions</span><span class="o">().</span><span class="na">add</span><span class="o">(</span>
</span><span class='line'>                            <span class="n">cb</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">root</span><span class="o">.&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;website&quot;</span><span class="o">),</span> <span class="n">website</span><span class="o">));</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">Strings</span><span class="o">.</span><span class="na">isNullOrEmpty</span><span class="o">(</span><span class="n">startDate</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                        <span class="kt">long</span> <span class="n">time</span> <span class="o">=</span> <span class="n">DbaUtil</span><span class="o">.</span><span class="na">parseTimeStringToLong</span><span class="o">(</span><span class="n">startDate</span><span class="o">,</span> <span class="n">PAGE_DATE_FORMAT</span><span class="o">);</span>
</span><span class='line'>                        <span class="n">predicate</span><span class="o">.</span><span class="na">getExpressions</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">cb</span><span class="o">.</span><span class="na">ge</span><span class="o">(</span><span class="n">root</span><span class="o">.&lt;</span><span class="n">Long</span><span class="o">&gt;</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;time&quot;</span><span class="o">),</span> <span class="n">time</span><span class="o">));</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ParseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="s">&quot;%s parse to date error:&quot;</span><span class="o">,</span> <span class="n">startDate</span><span class="o">));</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">Strings</span><span class="o">.</span><span class="na">isNullOrEmpty</span><span class="o">(</span><span class="n">endDate</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                        <span class="kt">long</span> <span class="n">time</span> <span class="o">=</span> <span class="n">DbaUtil</span><span class="o">.</span><span class="na">parseTimeStringToLong</span><span class="o">(</span><span class="n">endDate</span><span class="o">,</span> <span class="n">PAGE_DATE_FORMAT</span><span class="o">);</span>
</span><span class='line'>                        <span class="n">predicate</span><span class="o">.</span><span class="na">getExpressions</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">cb</span><span class="o">.</span><span class="na">le</span><span class="o">(</span><span class="n">root</span><span class="o">.&lt;</span><span class="n">Long</span><span class="o">&gt;</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;time&quot;</span><span class="o">),</span> <span class="n">time</span><span class="o">));</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ParseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="s">&quot;%s parse to date error:&quot;</span><span class="o">,</span> <span class="n">endDate</span><span class="o">));</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="n">predicate</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>写好了动态查询条件后，就要把它放到查询语句里面了，比如要查询所有数据，示例如下，例子还加了一个对时间的排序条件。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Blog</span><span class="o">&gt;</span> <span class="n">blogs</span> <span class="o">=</span> <span class="n">blogReadRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">(</span>
</span><span class='line'>                <span class="n">Blog</span><span class="o">.</span><span class="na">querySpecification</span><span class="o">(</span><span class="n">depGroup</span><span class="o">,</span> <span class="n">website</span><span class="o">,</span> <span class="n">startDate</span><span class="o">,</span> <span class="n">endDate</span><span class="o">),</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">Sort</span><span class="o">(</span><span class="n">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">DESC</span><span class="o">,</span> <span class="s">&quot;time&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<h3>嵌套对象</h3>

<p>这个可能跟JPA没有多大关系，更多是跟Hibernate有关，但都属于db层面的，就写在一起了。</p>

<p>比如有张表是Blog，这样用Hibernate-orm对应到程序就有一个Blog类，如果Blog属性比较多的话，后续就会变成了一个大类。我们想在数据库只对应一张表的情况下，可以对应到程序的多个类，比如Blog类下面有个Author的类，要怎么做呢？可以用<code>@Embedded</code>标签来解决这个问题。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Entity</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;blogs&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Blog</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Id</span>
</span><span class='line'>    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="n">GenerationType</span><span class="o">.</span><span class="na">AUTO</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Embedded</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Author</span> <span class="n">author</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Embeddable</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Author</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Basic</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>分离成多个对象的话，有个好处就是可以在不同的model添加不同的逻辑计算，避免把所有逻辑都放在一个类里面，这也是面向对象设计时要考虑的一个问题。但数据库始终只对应一张表，操作简单。</p>

<p>下一篇: <a href="http://zhaozhiming.github.io/blog/2014/05/31/some-tips-in-my-recent-project-2/">最近小项目的一些记录（二）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis集群环境安装指南]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/05/11/redis-cluster-env-create/"/>
    <updated>2014-05-11T20:50:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/05/11/redis-cluster-env-create</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-5/redis-cluster.jpg"></p>

<h3>环境</h3>

<p>RHLinux-6.4-64-EN, 红帽6.4 64位，英文正式发布版。</p>

<!--more-->


<p></p>

<h3>Redis3.0.0</h3>

<ul>
<li>redis2.x版本还不支持集群，3.0版本将会支持，现在3.0版本还在开发中，现在是beta-3版本(截止2014-5-8)，但功能是可用的。</li>
<li>下载Redis3.0.0 beta-3版本，点击<a href="https://github.com/antirez/redis/archive/3.0.0-beta3.tar.gz">这里</a>下载。</li>
<li>Redis3的安装可以参照之前的<a href="http://10.42.173.13/zhaozhiming003/redis-poc/blob/master/doc/redis_install.md">单机安装指南</a>操作。</li>
</ul>


<h3>创建Redis集群实例</h3>

<ul>
<li>创建集群节点的文件夹，先创建cluster-test文件夹，再以端口为名称创建子文件夹。这里我们要创建6个Redis实例，3个作为master，3个作为slave。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir cluster-test
</span><span class='line'><span class="nb">cd </span>cluster-test
</span><span class='line'>mkdir 7000 7001 7002 7003 7004 7005
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在每个文件夹下面创建创建Redis配置文件，注意根据不同实例的端口号修改下面的配置文件，nodes.conf文件为Redis实例启动时自动生成。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>port 7000
</span><span class='line'>cluster-enabled yes
</span><span class='line'>cluster-config-file nodes.conf
</span><span class='line'>cluster-node-timeout 5000
</span><span class='line'>appendonly yes
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>开6个terminal窗口，分别启动这6个Redis实例。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>7000
</span><span class='line'>../redis-server ./redis.conf
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>当成功启动后，能看到每个terminal出现下面的字样，是因为node.conf文件不存在，所以给每个实例分配了一个新的ID。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>82462<span class="o">]</span> 26 Nov 11:56:55.329 * No cluster configuration found, I<span class="err">&#39;</span>m 97a3a64667477371c4479320d683e4c8db5858b1
</span></code></pre></td></tr></table></div></figure>


<h3>创建集群</h3>

<ul>
<li>现在Redis的6个实例都已经启动了，现在来开始创建集群。创建集群用到了一个ruby文件，放在redis3目录的src子目录下，找到后执行以下命令。这里的<code>-replicas 1</code>表示每个master配备1个slave，后面的参数就是6个实例的ip加端口，以空格隔开。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>redis-3.0.0-beta3/src
</span><span class='line'>./redis-trib.rb create --replicas 1 127.0.0.1:7000 127.0.0.1:7001 <span class="se">\</span>
</span><span class='line'>127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>执行命令后会提示你是否接受提示的配置信息，默认的是前3台作为master机器，后3台作为slave机器，输入<code>yes</code>，出现最后的信息表示集群已经创建好了。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Creating cluster
</span><span class='line'>Connecting to node 127.0.0.1:7000: OK
</span><span class='line'>Connecting to node 127.0.0.1:7001: OK
</span><span class='line'>Connecting to node 127.0.0.1:7002: OK
</span><span class='line'>Connecting to node 127.0.0.1:7003: OK
</span><span class='line'>Connecting to node 127.0.0.1:7004: OK
</span><span class='line'>Connecting to node 127.0.0.1:7005: OK &gt;&gt;&gt;
</span><span class='line'>Performing <span class="nb">hash </span>slots allocation on 6 nodes...
</span><span class='line'>Using 3 masters: 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002
</span><span class='line'>127.0.0.1:7000 replica <span class="c">#1 is 127.0.0.1:7003</span>
</span><span class='line'>127.0.0.1:7001 replica <span class="c">#1 is 127.0.0.1:7004</span>
</span><span class='line'>127.0.0.1:7002 replica <span class="c">#1 is 127.0.0.1:7005</span>
</span><span class='line'>M: 9991306f0e50640a5684f1958fd754b38fa034c9 127.0.0.1:7000 slots:0-5460 <span class="o">(</span>5461 slots<span class="o">)</span> master
</span><span class='line'>M: e68e52cee0550f558b03b342f2f0354d2b8a083b 127.0.0.1:7001 slots:5461-10921 <span class="o">(</span>5461 slots<span class="o">)</span> master
</span><span class='line'>M: 393c6df5eb4b4cec323f0e4ca961c8b256e3460a 127.0.0.1:7002 slots:10922-16383 <span class="o">(</span>5462 slots<span class="o">)</span> master
</span><span class='line'>S: 48b728dbcedff6bf056231eb44990b7d1c35c3e0 127.0.0.1:7003
</span><span class='line'>S: 345ede084ac784a5c030a0387f8aaa9edfc59af3 127.0.0.1:7004
</span><span class='line'>S: 3375be2ccc321932e8853234ffa87ee9fde973ff 127.0.0.1:7005
</span><span class='line'>Can I <span class="nb">set </span>the above configuration? <span class="o">(</span><span class="nb">type</span> <span class="s1">&#39;yes&#39;</span> to accept<span class="o">)</span>: yes
</span><span class='line'>
</span><span class='line'>Nodes configuration updated &gt;&gt;&gt;
</span><span class='line'>Sending CLUSTER MEET messages to join the cluster Waiting <span class="k">for </span>the cluster to join... &gt;&gt;&gt;
</span><span class='line'>Performing Cluster Check <span class="o">(</span>using node 127.0.0.1:7000<span class="o">)</span>
</span><span class='line'>M: ebbb890e899244e4a2a6303826a29543ebf9885d 127.0.0.1:7000
</span><span class='line'>   slots:0-5460 <span class="o">(</span>5461 slots<span class="o">)</span> master
</span><span class='line'>M: ebbb890e899244e4a2a6303826a29543ebf9885d 127.0.0.1:7001
</span><span class='line'>   slots:5461-10922 <span class="o">(</span>5462 slots<span class="o">)</span> master
</span><span class='line'>M: 73c22198cd1d0782ec24e3c9b03378030891c9a3 127.0.0.1:7002
</span><span class='line'>   slots:10923-16383 <span class="o">(</span>5461 slots<span class="o">)</span> master
</span><span class='line'>M: c785d85b95d7bdc28ec90384ab8a5885b289542c 127.0.0.1:7003
</span><span class='line'>   slots: <span class="o">(</span>0 slots<span class="o">)</span> master
</span><span class='line'>   replicates b949ea2d9c822ff069521a354b4ed48855ac6203
</span><span class='line'>M: 570c472fe553ba3c9d0fb3ba16fcdb8579b4fc86 127.0.0.1:7004
</span><span class='line'>   slots: <span class="o">(</span>0 slots<span class="o">)</span> master
</span><span class='line'>   replicates ebbb890e899244e4a2a6303826a29543ebf9885d
</span><span class='line'>M: f86667ec42cff41a5666162a912713173f5306d7 127.0.0.1:7005
</span><span class='line'>   slots: <span class="o">(</span>0 slots<span class="o">)</span> master
</span><span class='line'>   replicates 73c22198cd1d0782ec24e3c9b03378030891c9a3
</span><span class='line'><span class="o">[</span>OK<span class="o">]</span> All nodes agree about slots configuration.
</span><span class='line'>&gt;&gt;&gt; Check <span class="k">for </span>open slots...
</span><span class='line'>&gt;&gt;&gt; Check slots coverage...
</span><span class='line'><span class="o">[</span>OK<span class="o">]</span> All 16384 slots covered.
</span></code></pre></td></tr></table></div></figure>


<p>PS: 安装过程还发现RedHat系统上没有安装ruby，需要先安装ruby，而且公司机器还不能上网下载安装，只能通过离线的方式安装ruby，这里有离线安装的文档可以参考一下:<a href="https://rvm.io/rvm/offline">https://rvm.io/rvm/offline</a>。</p>

<h3>验证</h3>

<p>可以使用Redis3.0的redis-cli客户端进行验证，需要加上<code>-c</code>参数，表示集群的意思。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>redis-cli -c -p 7000
</span><span class='line'>redis 127.0.0.1:7000&gt; <span class="nb">set </span>foo bar
</span><span class='line'>-&gt; Redirected to slot <span class="o">[</span>12182<span class="o">]</span> located at 127.0.0.1:7002
</span><span class='line'>OK
</span><span class='line'>redis 127.0.0.1:7002&gt; <span class="nb">set </span>hello world
</span><span class='line'>-&gt; Redirected to slot <span class="o">[</span>866<span class="o">]</span> located at 127.0.0.1:7000
</span><span class='line'>OK
</span><span class='line'>redis 127.0.0.1:7000&gt; get foo
</span><span class='line'>-&gt; Redirected to slot <span class="o">[</span>12182<span class="o">]</span> located at 127.0.0.1:7002
</span><span class='line'><span class="s2">&quot;bar&quot;</span>
</span><span class='line'>redis 127.0.0.1:7000&gt; get hello
</span><span class='line'>-&gt; Redirected to slot <span class="o">[</span>866<span class="o">]</span> located at 127.0.0.1:7000
</span><span class='line'><span class="s2">&quot;world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>更多的资料可以参考这里：<a href="http://redis.io/topics/cluster-tutorial">http://redis.io/topics/cluster-tutorial</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书笔记——沸腾十五年，看板方法，精益创业]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/05/09/read-book-note-2014-4/"/>
    <updated>2014-05-09T06:43:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/05/09/read-book-note-2014-4</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-5/april_book.jpg"></p>

<!--more-->


<p></p>

<h2>沸腾十五年</h2>

<p><img class="right" src="http://zhaozhiming.github.io/images/post/2014-5/china-15-year.jpg"></p>

<p>沸腾十五年这本书介绍了中国互联网1995～2010这15年间，中国互联网公司从无到有，从小到大，各种兴衰成败的故事。</p>

<p>里面有一个比较好玩的段子，讲的是联众（大家应该都知道，就是以前做休闲游戏平台的，后来被腾讯无情超越）刚开始把游戏平台做出来的时候，用户非常少，经常找不到人可以开一桌麻将或者斗地主，用户等着等着不耐烦就走了。联众的几位创始开发看到这种情况急得不得了，本来上线的人就少，经过招呼亲朋好友卖广告什么的好不容易来了点人吧，还经常因为凑不到一桌游戏而让人给跑了。后来他们想了个办法，看到有上线的用户凑不到一桌开不了游戏的，就几个开发人员一起点进去陪用户玩，这样来把用户留住，甚至有的开发一人开了好几个账号同时陪用户玩游戏。靠着这种打不死的精神，后来联众就慢慢做大了。</p>

<p>看完书会让人热血沸腾，恨不得马上投身互联网浪潮，但仔细一想书中介绍的都是成功的互联网企业，在这些光彩夺目的互联网公司的光芒照耀下，让人看不到那些同期出生但又失败的互联网公司，这些公司的数量应该是成功者的N倍。我们要时刻充满激情来对待工作和生活，但在这个浮躁的社会也需要时刻保持一颗冷静的心。</p>

<h2>看板方法</h2>

<p><img class="right" src="http://zhaozhiming.github.io/images/post/2014-5/kanban.jpg"></p>

<p>有幸参加了David Anderson关于看板方法的培训，回来后把看板方法的书认真研读了一遍，对其中的观点很是赞同。</p>

<h3>缩短范围</h3>

<p><code>在项目过程中需要舍弃一些东西进行权衡时，传统的项目经理会选择延期交付、增加资源投入、缩短范围或三者不同程度兼而有之;敏捷项目的明确共识是缩短范围，保障交付时间。</code><br/>
在有些东西要权衡时，为什么敏捷项目只选择缩短范围呢？<br/>
* 首先看如果选择延期交付会造成什么后果。由于你无法兑现之前的交付承诺，导致了与业务之间的不信任关系，业务无法相信你下次是否还能按时完成交付。<br/>
* 再看增加资源投入。在软件开发中，增加资源投入就意味着加人，但在《人月神话》里面已经说过了，<code>在一个已经延迟的项目里面增加人手，只会导致这个项目更加延迟</code>。<br/>
* 最后是缩短范围。缩小范围不是将业务的需求全部去掉，而是保留其中业务认为最主要的一部分，缩减业务认为优先级不是特别高的一部分，这样也可以让业务对需求有更清晰的认识。</p>

<p>项目的三要素：时间、金钱和质量，我觉得是三者是一个能量守恒的关系，如果提高其中的两项，那另外一项是要降低的，不可能三者同时提高。业务经常要求功能要多（金钱），上线时间要早（时间），传统项目迫于业务的压力，经常会选择降低质量（质量）来达到业务的前面两个要求，而敏捷项目首先会保持质量这一高标准，然后在保证按时交付的前提下，和业务PK交付的需求。</p>

<h3>降低变异性</h3>

<p>变异性是导致任务堆积，项目不能按时交付等的风险因素。降低变异性有如下好处：
* 降低变异性可以减少WIP，使得平均前置时间下降。
* 降低变异性能够减少对富余时间的需要（富余时间我理解就是预估工作量的buffer）。
* 降低变异性有利于实现资源平衡，潜在地降低对人数的需求。
什么地方可以体现变异性？<br/>
比如手工测试就存在变异性，手工测试会因为某些人为因素而认为测试是失败的，但实际上测试是成功的，结果就造成了开发过程中的浪费，乃至阻碍。可以通过自动化测试消除手工测试的变异性，自动化测试稳定而且准确。<br/>
还有比如在编写story的时候，如果story使用不同的方式来描述也会存在变异性，会让开发需要经常切换不同的思维或者角度去理解需求，出错率较高。可以通过编写一套团队认为合适的story模板来消除这种变异性。</p>

<h3>其他</h3>

<ul>
<li>敏捷开发中有很多对业务没有实际价值的成本，有这么几种：事务成本（搭建环境），协调成本（各种会议），破坏负载（软件缺陷）。敏捷中的会议是协调成本，以精益的角度来将要消除这种浪费。</li>
<li>虽然看板中强调前置时间少，交付速率高，但也不能以牺牲可预测性来换取这些指标。可预测在敏捷中很关键，可预测的交付会与用户建立信任关系，牺牲可预测性来提高短期的前置时间和交付速率是不可取的。</li>
</ul>


<h2>精益创业</h2>

<p><img class="right" src="http://zhaozhiming.github.io/images/post/2014-5/lean.jpg"></p>

<h3>MVP(最小化可行产品)</h3>

<p>MVP是指一个最小化的可以获得用户反馈的产品，可以帮助创业者尽早开启学习认知的历程，它不一定是实实在在的产品，它是用最快的方式，以最少的精力完成&#8217;开发-测量-认知&#8217;的反馈循环。比如Dropbox在他们还未开发出产品之前，把一段幽默风趣的产品介绍视频作为他们的MVP放到网上，从而吸引了大量公测用户，为他们指明产品的正确方向。</p>

<h2>低质量</h2>

<p>质量低下的产品可能会造成重新返工、交付延期、用户的流失，每个做产品的人，包括设计、开发、测试，每个人都会以高质量为标准，在敏捷开发中更是要求产品质量必须是高标准，但坚持高质量的前提是我们已经知道产品的哪些功能是用户需要的，如果在用户需要的功能上偷工减料势必会造成用户流失。<br/>
但在创业的时候，很多东西都是未知的，用户不知道自己想要什么，创业者可能连哪些人是用户都不知道，在不知道产品有哪些功能的情况下，坚持产品质量的高标准就没有什么必要了。<br/>
创业阶段更需要是快速推出一个MVP产品，获得用户反馈，即使质量低下也未必不受用户欢迎。</p>

<h3>其他</h3>

<p>精益创业的常规工作是对比测试、持续部署和顾客测试，精益创业的技巧包括快速迭代/基于数据制定决策，以及早期顾客介入。</p>

<p>自己写的读书笔记不咋的，这里看到了另外一篇关于《精益创业》的读书笔记，非常完整地概括了这本书的观点，是前JavaEye的创始人范凯写的，点击<a href="http://robbinfan.com/blog/27/lean-startup">这里</a>查看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Red Hat系统安装Redis]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/05/07/redis-install-guide-in-redhat/"/>
    <updated>2014-05-07T19:53:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/05/07/redis-install-guide-in-redhat</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-5/redis.jpg"></p>

<!--more-->


<p></p>

<h2>环境</h2>

<p>RHLinux-6.4-64-EN, 红帽6.4 64位，英文正式发布版</p>

<h2>安装</h2>

<p>安装很简单，先下载redis的压缩包，下载地址见<a href="http://redis.io/download">这里</a>，然后拷贝到你的linux机器，接着执行下面的命令。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tar xzf redis-2.6.14.tar.gz
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>redis-2.6.14
</span><span class='line'><span class="nv">$ </span>make
</span></code></pre></td></tr></table></div></figure>


<h2>启动</h2>

<p>编译完后增加了src目录，执行src下面的redis-server脚本即可启动redis服务。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>src/redis-server
</span></code></pre></td></tr></table></div></figure>


<h2>调试</h2>

<p>执行src目录下的redis-cli脚本，这个是redis的客户端。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>src/redis-cli
</span><span class='line'>redis&gt; <span class="nb">set </span>foo bar
</span><span class='line'>OK
</span><span class='line'>redis&gt; get foo
</span><span class='line'><span class="s2">&quot;bar&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>java调用</h2>

<ol>
<li>Redis比较出名的java客户端是jedis，先下载jedis的jar包，可以去maven库搜下jedis就可以下载到，源码是放在github上：<a href="https://github.com/xetorthio/jedis">https://github.com/xetorthio/jedis</a>。</li>
<li>简单写个main方法就可以调用。</li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Jedis</span><span class="o">(</span><span class="s">&quot;10.20.8.39&quot;</span><span class="o">);</span> <span class="c1">//redis服务器的ip，端口默认6379</span>
</span><span class='line'>        <span class="n">jedis</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="s">&quot;bar&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">jedis</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>后台进程</h2>

<p>之前的启动方式不是后台进程方式的，终端关了服务也就停了，可以使用下面的命令将Redis作为后台进程启动，并添加到系统启动命名中。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>redis-2.6.14/utils
</span><span class='line'><span class="nv">$.</span>/install_server
</span></code></pre></td></tr></table></div></figure>


<p>执行命令后，会提示你回答几个问题，可以一路回车过去，选择默认设置。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Please <span class="k">select </span>the redis port <span class="k">for </span>this instance: <span class="o">[</span>6379<span class="o">]</span>
</span><span class='line'>Selecting default: 6379
</span><span class='line'>Please <span class="k">select </span>the redis config file name <span class="o">[</span>/etc/redis/6379.conf<span class="o">]</span>
</span><span class='line'>Selected default - /etc/redis/6379.conf
</span><span class='line'>Please <span class="k">select </span>the redis log file name <span class="o">[</span>/var/log/redis_6379.log<span class="o">]</span>
</span><span class='line'>Selected default - /var/log/redis_6379.log
</span><span class='line'>Please <span class="k">select </span>the data directory <span class="k">for </span>this instance <span class="o">[</span>/var/lib/redis/6379<span class="o">]</span>
</span><span class='line'>Selected default - /var/lib/redis/6379
</span><span class='line'>Please <span class="k">select </span>the redis executable path <span class="o">[</span>/usr/local/bin/redis-server<span class="o">]</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>后续可以通过下面的方式启停服务。<br/>
1. /etc/init.d/redis_6379 start &mdash;启动<br/>
2. /etc/init.d/redis_6379 stop &mdash;服务<br/>
当然也可在/usr/local/bin目录下使用redis-server来启动。</p>

<p><strong>PS: 我在执行install_server脚本后，发现服务启动不起来，查看/etc/init.d/redis_6379这个文件发现里面的换行符号被替换成了<code>/n</code>符号，手动将这些符号替换成换行就可以了。</strong></p>

<h2>更多资料</h2>

<p>更多资料可以看这里：<a href="http://redis.io/">http://redis.io/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[swift源码详解（三）——proxy/controllers/base.py]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/05/04/swift-code-explain-3-proxy-controllers-base/"/>
    <updated>2014-05-04T21:36:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/05/04/swift-code-explain-3-proxy-controllers-base</id>
    <content type="html"><![CDATA[<h2><a href="http://zhaozhiming.github.io/blog/2014/04/19/swift-code-explain-total/">回swift代码结构目录</a></h2>

<h3>update_headers</h3>

<!--more-->


<p></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">update_headers</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">headers</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Helper function to update headers in the response.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param response: swob.Response object</span>
</span><span class='line'><span class="sd">    :param headers: dictionary headers</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="s">&#39;items&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">headers</span> <span class="o">=</span> <span class="n">headers</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="s">&#39;etag&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;&quot;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;date&#39;</span><span class="p">,</span> <span class="s">&#39;content-length&#39;</span><span class="p">,</span> <span class="s">&#39;content-type&#39;</span><span class="p">,</span>
</span><span class='line'>                          <span class="s">&#39;connection&#39;</span><span class="p">,</span> <span class="s">&#39;x-put-timestamp&#39;</span><span class="p">,</span> <span class="s">&#39;x-delete-after&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>更新response的header。</li>
<li>查看headers中是否&#8217;items&#8217;属性，有的话给headers赋值。</li>
<li>遍历headers中的每个header,如果是&#8217;etag&#8217;，则去除值中的双引号，并写到response的header中，如果header不是特殊的header，则写到response的header中。</li>
</ul>


<h3>source_key</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">source_key</span><span class="p">(</span><span class="n">resp</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Provide the timestamp of the swift http response as a floating</span>
</span><span class='line'><span class="sd">    point value.  Used as a sort key.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param resp: bufferedhttp response object</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">float</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;x-put-timestamp&#39;</span><span class="p">)</span> <span class="ow">or</span>
</span><span class='line'>                 <span class="n">resp</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;x-timestamp&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>依次获取response中的header&#8217;x-put-timestamp&#8217;和&#8217;x-timestamp&#8217;的值，如果有值则返回，没有则返回0。</li>
</ul>


<h3>delay_denial</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">delay_denial</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Decorator to declare which methods should have any swift.authorize call</span>
</span><span class='line'><span class="sd">    delayed. This is so the method can load the Request object up with</span>
</span><span class='line'><span class="sd">    additional information that may be needed by the authorization system.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param func: function for which authorization will be delayed</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">func</span><span class="o">.</span><span class="n">delay_denial</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@functools.wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapped</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapped</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>方法标签，标识了该标签的方法表示与swift.authorize有关，会延迟认证。</li>
</ul>


<h3>get_account_memcache_key</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_account_memcache_key</span><span class="p">(</span><span class="n">account</span><span class="p">):</span>
</span><span class='line'>    <span class="n">cache_key</span><span class="p">,</span> <span class="n">env_key</span> <span class="o">=</span> <span class="n">_get_cache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cache_key</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>获取account的缓存key。</li>
</ul>


<h3>get_container_memcache_key</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_container_memcache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">container</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;container not provided&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cache_key</span><span class="p">,</span> <span class="n">env_key</span> <span class="o">=</span> <span class="n">_get_cache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cache_key</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>获取container的缓存key。</li>
</ul>


<h3>_prep_headers_to_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_prep_headers_to_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="n">server_type</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Helper method that iterates once over a dict of headers,</span>
</span><span class='line'><span class="sd">    converting all keys to lower case and separating</span>
</span><span class='line'><span class="sd">    into subsets containing user metadata, system metadata</span>
</span><span class='line'><span class="sd">    and other headers.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">meta</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">sysmeta</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">other</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="nb">dict</span><span class="p">(</span><span class="n">headers</span><span class="p">)</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'>        <span class="n">lkey</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">is_user_meta</span><span class="p">(</span><span class="n">server_type</span><span class="p">,</span> <span class="n">lkey</span><span class="p">):</span>
</span><span class='line'>            <span class="n">meta</span><span class="p">[</span><span class="n">strip_user_meta_prefix</span><span class="p">(</span><span class="n">server_type</span><span class="p">,</span> <span class="n">lkey</span><span class="p">)]</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">is_sys_meta</span><span class="p">(</span><span class="n">server_type</span><span class="p">,</span> <span class="n">lkey</span><span class="p">):</span>
</span><span class='line'>            <span class="n">sysmeta</span><span class="p">[</span><span class="n">strip_sys_meta_prefix</span><span class="p">(</span><span class="n">server_type</span><span class="p">,</span> <span class="n">lkey</span><span class="p">)]</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">other</span><span class="p">[</span><span class="n">lkey</span><span class="p">]</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">other</span><span class="p">,</span> <span class="n">meta</span><span class="p">,</span> <span class="n">sysmeta</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将header根据server_type进行分类，以x-<em>-meta开头的为用户信息类，以x-</em>-sysmeta开头的为系统信息类，其他的为other类。</li>
</ul>


<h3>headers_to_account_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">headers_to_account_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="n">status_int</span><span class="o">=</span><span class="n">HTTP_OK</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Construct a cacheable dict of account info based on response headers.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">headers</span><span class="p">,</span> <span class="n">meta</span><span class="p">,</span> <span class="n">sysmeta</span> <span class="o">=</span> <span class="n">_prep_headers_to_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="s">&#39;account&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="n">status_int</span><span class="p">,</span>
</span><span class='line'>        <span class="c"># &#39;container_count&#39; anomaly:</span>
</span><span class='line'>        <span class="c"># Previous code sometimes expects an int sometimes a string</span>
</span><span class='line'>        <span class="c"># Current code aligns to str and None, yet translates to int in</span>
</span><span class='line'>        <span class="c"># deprecated functions as needed</span>
</span><span class='line'>        <span class="s">&#39;container_count&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-account-container-count&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;total_object_count&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-account-object-count&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;bytes&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-account-bytes-used&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;meta&#39;</span><span class="p">:</span> <span class="n">meta</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;sysmeta&#39;</span><span class="p">:</span> <span class="n">sysmeta</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将account的header进行分类，返回包含account信息的字典。</li>
</ul>


<h3>headers_to_container_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">headers_to_container_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="n">status_int</span><span class="o">=</span><span class="n">HTTP_OK</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Construct a cacheable dict of container info based on response headers.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">headers</span><span class="p">,</span> <span class="n">meta</span><span class="p">,</span> <span class="n">sysmeta</span> <span class="o">=</span> <span class="n">_prep_headers_to_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="s">&#39;container&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="n">status_int</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;read_acl&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-container-read&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;write_acl&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-container-write&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;sync_key&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-container-sync-key&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;object_count&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-container-object-count&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;bytes&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-container-bytes-used&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;versions&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-versions-location&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;cors&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;allow_origin&#39;</span><span class="p">:</span> <span class="n">meta</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;access-control-allow-origin&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&#39;expose_headers&#39;</span><span class="p">:</span> <span class="n">meta</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;access-control-expose-headers&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&#39;max_age&#39;</span><span class="p">:</span> <span class="n">meta</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;access-control-max-age&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="s">&#39;meta&#39;</span><span class="p">:</span> <span class="n">meta</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;sysmeta&#39;</span><span class="p">:</span> <span class="n">sysmeta</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将container的header进行分类，返回包含container信息的字典。</li>
</ul>


<h3>headers_to_object_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">headers_to_object_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="n">status_int</span><span class="o">=</span><span class="n">HTTP_OK</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Construct a cacheable dict of object info based on response headers.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">headers</span><span class="p">,</span> <span class="n">meta</span><span class="p">,</span> <span class="n">sysmeta</span> <span class="o">=</span> <span class="n">_prep_headers_to_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="s">&#39;object&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="n">status_int</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;length&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;content-length&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;content-type&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&#39;etag&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;etag&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&#39;meta&#39;</span><span class="p">:</span> <span class="n">meta</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">info</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将object的header进行分类，返回包含object信息的字典。</li>
</ul>


<h3>cors_validation</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">cors_validation</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Decorator to check if the request is a CORS request and if so, if it&#39;s</span>
</span><span class='line'><span class="sd">    valid.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param func: function to check</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="nd">@functools.wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapped</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
</span><span class='line'>        <span class="n">controller</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="n">req</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># The logic here was interpreted from</span>
</span><span class='line'>        <span class="c">#    http://www.w3.org/TR/cors/#resource-requests</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Is this a CORS request?</span>
</span><span class='line'>        <span class="n">req_origin</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;Origin&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">req_origin</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># Yes, this is a CORS request so test if the origin is allowed</span>
</span><span class='line'>            <span class="n">container_info</span> <span class="o">=</span> \
</span><span class='line'>                <span class="n">controller</span><span class="o">.</span><span class="n">container_info</span><span class="p">(</span><span class="n">controller</span><span class="o">.</span><span class="n">account_name</span><span class="p">,</span>
</span><span class='line'>                                          <span class="n">controller</span><span class="o">.</span><span class="n">container_name</span><span class="p">,</span> <span class="n">req</span><span class="p">)</span>
</span><span class='line'>            <span class="n">cors_info</span> <span class="o">=</span> <span class="n">container_info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;cors&#39;</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># Call through to the decorated method</span>
</span><span class='line'>            <span class="n">resp</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">controller</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">strict_cors_mode</span> <span class="ow">and</span> \
</span><span class='line'>                    <span class="ow">not</span> <span class="n">controller</span><span class="o">.</span><span class="n">is_origin_allowed</span><span class="p">(</span><span class="n">cors_info</span><span class="p">,</span> <span class="n">req_origin</span><span class="p">):</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">resp</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>方法标签，对CORS请求进行验证。</li>
<li>先判断该请求是否是一个跨域资源共享（CORS）请求，是的话先获取container的信息，再根据container信息获取cors信息。</li>
<li>如果controller的cors mode存在就判断原请求是否被允许，允许的话返回response。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="c"># Expose,</span>
</span><span class='line'>            <span class="c">#  - simple response headers,</span>
</span><span class='line'>            <span class="c">#    http://www.w3.org/TR/cors/#simple-response-header</span>
</span><span class='line'>            <span class="c">#  - swift specific: etag, x-timestamp, x-trans-id</span>
</span><span class='line'>            <span class="c">#  - user metadata headers</span>
</span><span class='line'>            <span class="c">#  - headers provided by the user in</span>
</span><span class='line'>            <span class="c">#    x-container-meta-access-control-expose-headers</span>
</span><span class='line'>            <span class="k">if</span> <span class="s">&#39;Access-Control-Expose-Headers&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">:</span>
</span><span class='line'>                <span class="n">expose_headers</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>                    <span class="s">&#39;cache-control&#39;</span><span class="p">,</span> <span class="s">&#39;content-language&#39;</span><span class="p">,</span> <span class="s">&#39;content-type&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&#39;expires&#39;</span><span class="p">,</span> <span class="s">&#39;last-modified&#39;</span><span class="p">,</span> <span class="s">&#39;pragma&#39;</span><span class="p">,</span> <span class="s">&#39;etag&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&#39;x-timestamp&#39;</span><span class="p">,</span> <span class="s">&#39;x-trans-id&#39;</span><span class="p">]</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">header</span> <span class="ow">in</span> <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">header</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;X-Container-Meta&#39;</span><span class="p">)</span> <span class="ow">or</span> \
</span><span class='line'>                            <span class="n">header</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;X-Object-Meta&#39;</span><span class="p">):</span>
</span><span class='line'>                        <span class="n">expose_headers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">header</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">cors_info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;expose_headers&#39;</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">expose_headers</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span>
</span><span class='line'>                        <span class="p">[</span><span class="n">header_line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>                         <span class="k">for</span> <span class="n">header_line</span> <span class="ow">in</span>
</span><span class='line'>                         <span class="n">cors_info</span><span class="p">[</span><span class="s">&#39;expose_headers&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>                         <span class="k">if</span> <span class="n">header_line</span><span class="o">.</span><span class="n">strip</span><span class="p">()])</span>
</span><span class='line'>                <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;Access-Control-Expose-Headers&#39;</span><span class="p">]</span> <span class="o">=</span> \
</span><span class='line'>                    <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">expose_headers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>方法标签，对CORS请求进行验证。</li>
<li>先判断该请求是否是一个跨域资源共享（CORS）请求，是的话先获取container的信息，再根据container信息获取cors信息。</li>
<li>根据controller的cors mode判断cors请求是否被允许，是的话返回response。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="c"># The user agent won&#39;t process the response if the Allow-Origin</span>
</span><span class='line'>            <span class="c"># header isn&#39;t included</span>
</span><span class='line'>            <span class="k">if</span> <span class="s">&#39;Access-Control-Allow-Origin&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">cors_info</span><span class="p">[</span><span class="s">&#39;allow_origin&#39;</span><span class="p">]</span> <span class="ow">and</span> \
</span><span class='line'>                        <span class="n">cors_info</span><span class="p">[</span><span class="s">&#39;allow_origin&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="o">==</span> <span class="s">&#39;*&#39;</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;Access-Control-Allow-Origin&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;*&#39;</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;Access-Control-Allow-Origin&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">req_origin</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span>     <span class="n">resp</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># Not a CORS request so make the call as normal</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapped</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果response里面不包含&#8217;Access-Control-Allow-Origin&#8217; header，则加上该header。</li>
</ul>


<h3>get_object_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_object_info</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">app</span><span class="p">,</span> <span class="n">path</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">swift_source</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Get the info structure for an object, based on env and app.</span>
</span><span class='line'><span class="sd">    This is useful to middlewares.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    .. note::</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        This call bypasses auth. Success does not imply that the request has</span>
</span><span class='line'><span class="sd">        authorization to the object.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="n">version</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span> <span class="o">=</span> \
</span><span class='line'>        <span class="n">split_path</span><span class="p">(</span><span class="n">path</span> <span class="ow">or</span> <span class="n">env</span><span class="p">[</span><span class="s">&#39;PATH_INFO&#39;</span><span class="p">],</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">_get_object_info</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">swift_source</span><span class="o">=</span><span class="n">swift_source</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_object_info</span><span class="p">({},</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">info</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>根据env和app获取object的结构信息。</li>
</ul>


<h3>get_container_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_container_info</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">app</span><span class="p">,</span> <span class="n">swift_source</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Get the info structure for a container, based on env and app.</span>
</span><span class='line'><span class="sd">    This is useful to middlewares.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    .. note::</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        This call bypasses auth. Success does not imply that the request has</span>
</span><span class='line'><span class="sd">        authorization to the container.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="n">version</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">unused</span><span class="p">)</span> <span class="o">=</span> \
</span><span class='line'>        <span class="n">split_path</span><span class="p">(</span><span class="n">env</span><span class="p">[</span><span class="s">&#39;PATH_INFO&#39;</span><span class="p">],</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">get_info</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">ret_not_found</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">swift_source</span><span class="o">=</span><span class="n">swift_source</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_container_info</span><span class="p">({},</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">info</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>根据env和app获取container的结构信息。</li>
</ul>


<h3>get_account_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_account_info</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">app</span><span class="p">,</span> <span class="n">swift_source</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Get the info structure for an account, based on env and app.</span>
</span><span class='line'><span class="sd">    This is useful to middlewares.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    .. note::</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        This call bypasses auth. Success does not imply that the request has</span>
</span><span class='line'><span class="sd">        authorization to the account.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="n">version</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">_junk</span><span class="p">,</span> <span class="n">_junk</span><span class="p">)</span> <span class="o">=</span> \
</span><span class='line'>        <span class="n">split_path</span><span class="p">(</span><span class="n">env</span><span class="p">[</span><span class="s">&#39;PATH_INFO&#39;</span><span class="p">],</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">get_info</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">ret_not_found</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">swift_source</span><span class="o">=</span><span class="n">swift_source</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_account_info</span><span class="p">({},</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;container_count&#39;</span><span class="p">)</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span><span class="p">[</span><span class="s">&#39;container_count&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span><span class="p">[</span><span class="s">&#39;container_count&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="s">&#39;container_count&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">info</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>根据env和app获取account的结构信息。</li>
</ul>


<h3>_get_cache_key</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_get_cache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Get the keys for both memcache (cache_key) and env (env_key)</span>
</span><span class='line'><span class="sd">    where info about accounts and containers is cached</span>
</span><span class='line'><span class="sd">    :param   account: The name of the account</span>
</span><span class='line'><span class="sd">    :param container: The name of the container (or None if account)</span>
</span><span class='line'><span class="sd">    :returns a tuple of (cache_key, env_key)</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">container</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cache_key</span> <span class="o">=</span> <span class="s">&#39;container/</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cache_key</span> <span class="o">=</span> <span class="s">&#39;account/</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">account</span>
</span><span class='line'>    <span class="c"># Use a unique environment cache key per account and one container.</span>
</span><span class='line'>    <span class="c"># This allows caching both account and container and ensures that when we</span>
</span><span class='line'>    <span class="c"># copy this env to form a new request, it won&#39;t accidentally reuse the</span>
</span><span class='line'>    <span class="c"># old container or account info</span>
</span><span class='line'>    <span class="n">env_key</span> <span class="o">=</span> <span class="s">&#39;swift.</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">cache_key</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cache_key</span><span class="p">,</span> <span class="n">env_key</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>获取account和container的缓存key，account是&#8217;account/account名&#8217;，container是&#8217;container/account名/container名&#8217;，还有env_key，值为&#8217;swift.缓存key&#8217;。</li>
</ul>


<h3>get_object_env_key</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_object_env_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Get the keys for env (env_key) where info about object is cached</span>
</span><span class='line'><span class="sd">    :param   account: The name of the account</span>
</span><span class='line'><span class="sd">    :param container: The name of the container</span>
</span><span class='line'><span class="sd">    :param obj: The name of the object</span>
</span><span class='line'><span class="sd">    :returns a string env_key</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">env_key</span> <span class="o">=</span> <span class="s">&#39;swift.object/</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">account</span><span class="p">,</span>
</span><span class='line'>                                         <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">env_key</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>得到object的env_key，值为&#8217;swift.object/account名/container名/object名。</li>
</ul>


<h3>set_info_cache</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_set_info_cache</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">resp</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Cache info in both memcache and env.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Caching is used to avoid unnecessary calls to account &amp; container servers.</span>
</span><span class='line'><span class="sd">    This is a private function that is being called by GETorHEAD_base and</span>
</span><span class='line'><span class="sd">    by clear_info_cache.</span>
</span><span class='line'><span class="sd">    Any attempt to GET or HEAD from the container/account server should use</span>
</span><span class='line'><span class="sd">    the GETorHEAD_base interface which would than set the cache.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param  app: the application object</span>
</span><span class='line'><span class="sd">    :param  account: the unquoted account name</span>
</span><span class='line'><span class="sd">    :param  container: the unquoted container name or None</span>
</span><span class='line'><span class="sd">    :param resp: the response received or None if info cache should be cleared</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">container</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cache_time</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">recheck_container_existence</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cache_time</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">recheck_account_existence</span>
</span><span class='line'>    <span class="n">cache_key</span><span class="p">,</span> <span class="n">env_key</span> <span class="o">=</span> <span class="n">_get_cache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">resp</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_int</span> <span class="o">==</span> <span class="n">HTTP_NOT_FOUND</span><span class="p">:</span>
</span><span class='line'>            <span class="n">cache_time</span> <span class="o">*=</span> <span class="mf">0.1</span>
</span><span class='line'>        <span class="k">elif</span> <span class="ow">not</span> <span class="n">is_success</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">status_int</span><span class="p">):</span>
</span><span class='line'>            <span class="n">cache_time</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cache_time</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Next actually set both memcache and the env chache</span>
</span><span class='line'>    <span class="n">memcache</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="s">&#39;memcache&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span> <span class="n">env</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;swift.cache&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">cache_time</span><span class="p">:</span>
</span><span class='line'>        <span class="n">env</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">env_key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">memcache</span><span class="p">:</span>
</span><span class='line'>            <span class="n">memcache</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">cache_key</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">container</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_container_info</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_int</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_account_info</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_int</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">memcache</span><span class="p">:</span>
</span><span class='line'>        <span class="n">memcache</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">cache_key</span><span class="p">,</span> <span class="n">info</span><span class="p">,</span> <span class="n">time</span><span class="o">=</span><span class="n">cache_time</span><span class="p">)</span>
</span><span class='line'>    <span class="n">env</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">info</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>信息在缓存和env都各存一份，缓存一般用来避免对account和container没必要的调用，这是一个私有方法，主要被GETorHEAD_base和clear_info_cache方法调用。如果想通过HEAD和GET获取container/account信息，建议使用GETorHEAD_base方法，因为该方法会设置缓存信息。</li>
<li>检查container和account是否存在，再通过account和container获取缓存key。</li>
<li>根据response状态码设置缓存时间，如果缓存时间设置为None，则在env和缓存中移除cache_key缓存信息。</li>
<li>最后在缓存和env中设置container或account的info信息。</li>
</ul>


<h3>_set_object_info_cache</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_set_object_info_cache</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">resp</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Cache object info env. Do not cache object informations in</span>
</span><span class='line'><span class="sd">    memcache. This is an intentional omission as it would lead</span>
</span><span class='line'><span class="sd">    to cache pressure. This is a per-request cache.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Caching is used to avoid unnecessary calls to object servers.</span>
</span><span class='line'><span class="sd">    This is a private function that is being called by GETorHEAD_base.</span>
</span><span class='line'><span class="sd">    Any attempt to GET or HEAD from the object server should use</span>
</span><span class='line'><span class="sd">    the GETorHEAD_base interface which would then set the cache.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param  app: the application object</span>
</span><span class='line'><span class="sd">    :param  account: the unquoted account name</span>
</span><span class='line'><span class="sd">    :param  container: the unquoted container name or None</span>
</span><span class='line'><span class="sd">    :param  object: the unquoted object name or None</span>
</span><span class='line'><span class="sd">    :param resp: the response received or None if info cache should be cleared</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">env_key</span> <span class="o">=</span> <span class="n">get_object_env_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">resp</span><span class="p">:</span>
</span><span class='line'>        <span class="n">env</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">env_key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_object_info</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_int</span><span class="p">)</span>
</span><span class='line'>    <span class="n">env</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">info</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>object的信息只缓存在env中，没有缓存在memcache中是因为缓存起来的话会对缓存造成压力，这是前一次请求的缓存。缓存为了避免那些对object没必要的调用，这是一个私有方法，主要被GETorHEAD_base和clear_info_cache方法调用。如果想通过HEAD和GET获取container/account信息，建议使用GETorHEAD_base方法，因为该方法会设置缓存信息。</li>
<li>先获取object的env_key，如果response没有则在env中移除env_key的信息，最后在env中添加object的info信息。</li>
</ul>


<h3>clear_info_cache</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">clear_info_cache</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Clear the cached info in both memcache and env</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param  app: the application object</span>
</span><span class='line'><span class="sd">    :param  account: the account name</span>
</span><span class='line'><span class="sd">    :param  container: the containr name or None if setting info for containers</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">_set_info_cache</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在memcache和env中清除account或container的缓存信息。</li>
</ul>


<h3>_get_info_cache</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_get_info_cache</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Get the cached info from env or memcache (if used) in that order</span>
</span><span class='line'><span class="sd">    Used for both account and container info</span>
</span><span class='line'><span class="sd">    A private function used by get_info</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param  app: the application object</span>
</span><span class='line'><span class="sd">    :param  env: the environment used by the current request</span>
</span><span class='line'><span class="sd">    :returns the cached info or None if not cached</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cache_key</span><span class="p">,</span> <span class="n">env_key</span> <span class="o">=</span> <span class="n">_get_cache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">env_key</span> <span class="ow">in</span> <span class="n">env</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">env</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span>
</span><span class='line'>    <span class="n">memcache</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="s">&#39;memcache&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span> <span class="n">env</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;swift.cache&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">memcache</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">memcache</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">cache_key</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="n">key</span><span class="p">],</span> <span class="nb">unicode</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">info</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">info</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;utf-8&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">env</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">info</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">info</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Noner</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>私有方法，被get_info调用，在env和memcache中获取account和container信息，顺序是先env再memcache。</li>
<li>获取env_key和cache_keyi，如果env_key在env中存在，则返回env中的值。</li>
<li>如果env中没有，再从memcache中获取信息，将获取到的信息放到env中。</li>
</ul>


<h3>_prepare_pre_auth_info_request</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_prepare_pre_auth_info_request</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">swift_source</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Prepares a pre authed request to obtain info using a HEAD.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param env: the environment used by the current request</span>
</span><span class='line'><span class="sd">    :param path: The unquoted request path</span>
</span><span class='line'><span class="sd">    :param swift_source: value for swift.source in WSGI environment</span>
</span><span class='line'><span class="sd">    :returns: the pre authed request</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="c"># Set the env for the pre_authed call without a query string</span>
</span><span class='line'>    <span class="n">newenv</span> <span class="o">=</span> <span class="n">make_pre_authed_env</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#39;HEAD&#39;</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">agent</span><span class="o">=</span><span class="s">&#39;Swift&#39;</span><span class="p">,</span>
</span><span class='line'>                                 <span class="n">query_string</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">swift_source</span><span class="o">=</span><span class="n">swift_source</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># This is a sub request for container metadata- drop the Origin header from</span>
</span><span class='line'>    <span class="c"># the request so the it is not treated as a CORS request.</span>
</span><span class='line'>    <span class="n">newenv</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s">&#39;HTTP_ORIGIN&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># Note that Request.blank expects quoted path</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Request</span><span class="o">.</span><span class="n">blank</span><span class="p">(</span><span class="n">quote</span><span class="p">(</span><span class="n">path</span><span class="p">),</span> <span class="n">environ</span><span class="o">=</span><span class="n">newenv</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>准备一个做过认证的HEAD请求来获取信息。</li>
</ul>


<h3>get_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_info</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">ret_not_found</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
</span><span class='line'>             <span class="n">swift_source</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Get the info about accounts or containers</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Note: This call bypasses auth. Success does not imply that the</span>
</span><span class='line'><span class="sd">          request has authorization to the info.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param app: the application object</span>
</span><span class='line'><span class="sd">    :param env: the environment used by the current request</span>
</span><span class='line'><span class="sd">    :param account: The unquoted name of the account</span>
</span><span class='line'><span class="sd">    :param container: The unquoted name of the container (or None if account)</span>
</span><span class='line'><span class="sd">    :returns: the cached info or None if cannot be retrieved</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">_get_info_cache</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">ret_not_found</span> <span class="ow">or</span> <span class="n">is_success</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="s">&#39;status&#39;</span><span class="p">]):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">info</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>    <span class="c"># Not in cache, let&#39;s try the account servers</span>
</span><span class='line'>    <span class="n">path</span> <span class="o">=</span> <span class="s">&#39;/v1/</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">account</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">container</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># Stop and check if we have an account?</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">get_info</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>        <span class="n">path</span> <span class="o">+=</span> <span class="s">&#39;/&#39;</span> <span class="o">+</span> <span class="n">container</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">req</span> <span class="o">=</span> <span class="n">_prepare_pre_auth_info_request</span><span class="p">(</span>
</span><span class='line'>        <span class="n">env</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="p">(</span><span class="n">swift_source</span> <span class="ow">or</span> <span class="s">&#39;GET_INFO&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="c"># Whenever we do a GET/HEAD, the GETorHEAD_base will set the info in</span>
</span><span class='line'>    <span class="c"># the environment under environ[env_key] and in memcache. We will</span>
</span><span class='line'>    <span class="c"># pick the one from environ[env_key] and use it to set the caller env</span>
</span><span class='line'>    <span class="n">resp</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cache_key</span><span class="p">,</span> <span class="n">env_key</span> <span class="o">=</span> <span class="n">_get_cache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span>
</span><span class='line'>        <span class="n">env</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">info</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">ret_not_found</span> <span class="ow">or</span> <span class="n">is_success</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="s">&#39;status&#39;</span><span class="p">]):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">info</span>
</span><span class='line'>    <span class="k">except</span> <span class="p">(</span><span class="ne">KeyError</span><span class="p">,</span> <span class="ne">AttributeError</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>从缓存中获取info信息，如果缓存中有且状态是success，则返回info。如果缓存没有，则发起1个不用认证的请求获取account和container的info信息。</li>
</ul>


<h3>_get_object_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_get_object_info</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">swift_source</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Get the info about object</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Note: This call bypasses auth. Success does not imply that the</span>
</span><span class='line'><span class="sd">          request has authorization to the info.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param app: the application object</span>
</span><span class='line'><span class="sd">    :param env: the environment used by the current request</span>
</span><span class='line'><span class="sd">    :param account: The unquoted name of the account</span>
</span><span class='line'><span class="sd">    :param container: The unquoted name of the container</span>
</span><span class='line'><span class="sd">    :param obj: The unquoted name of the object</span>
</span><span class='line'><span class="sd">    :returns: the cached info or None if cannot be retrieved</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">env_key</span> <span class="o">=</span> <span class="n">get_object_env_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">env_key</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">info</span>
</span><span class='line'>    <span class="c"># Not in cached, let&#39;s try the object servers</span>
</span><span class='line'>    <span class="n">path</span> <span class="o">=</span> <span class="s">&#39;/v1/</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>    <span class="n">req</span> <span class="o">=</span> <span class="n">_prepare_pre_auth_info_request</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">swift_source</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># Whenever we do a GET/HEAD, the GETorHEAD_base will set the info in</span>
</span><span class='line'>    <span class="c"># the environment under environ[env_key]. We will</span>
</span><span class='line'>    <span class="c"># pick the one from environ[env_key] and use it to set the caller env</span>
</span><span class='line'>    <span class="n">resp</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span>
</span><span class='line'>        <span class="n">env</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">info</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">info</span>
</span><span class='line'>    <span class="k">except</span> <span class="p">(</span><span class="ne">KeyError</span><span class="p">,</span> <span class="ne">AttributeError</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>先从env中获取object的info信息，如果没有则发起请求不认证的请求重新获取。</li>
</ul>


<h3>close_swift_conn</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">close_swift_conn</span><span class="p">(</span><span class="n">src</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Force close the http connection to the backend.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param src: the response from the backend</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># Since the backends set &quot;Connection: close&quot; in their response</span>
</span><span class='line'>        <span class="c"># headers, the response object (src) is solely responsible for the</span>
</span><span class='line'>        <span class="c"># socket. The connection object (src.swift_conn) has no references</span>
</span><span class='line'>        <span class="c"># to the socket, so calling its close() method does nothing, and</span>
</span><span class='line'>        <span class="c"># therefore we don&#39;t do it.</span>
</span><span class='line'>        <span class="c">#</span>
</span><span class='line'>        <span class="c"># Also, since calling the response&#39;s close() method might not</span>
</span><span class='line'>        <span class="c"># close the underlying socket but only decrement some</span>
</span><span class='line'>        <span class="c"># reference-counter, we have a special method here that really,</span>
</span><span class='line'>        <span class="c"># really kills the underlying socket with a close() syscall.</span>
</span><span class='line'>        <span class="n">src</span><span class="o">.</span><span class="n">nuke_from_orbit</span><span class="p">()</span>  <span class="c"># it&#39;s the only way to be sure</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
</span><span class='line'>        <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>关闭swift连接，用了很底层的一个关闭socket连接的方法。</li>
</ul>


<h2>GetOrHeadHandler类</h2>

<h3>init方法</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">app</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">server_type</span><span class="p">,</span> <span class="n">ring</span><span class="p">,</span> <span class="n">partition</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">backend_headers</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ring</span> <span class="o">=</span> <span class="n">ring</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span> <span class="o">=</span> <span class="n">server_type</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">partition</span> <span class="o">=</span> <span class="n">partition</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">backend_headers</span> <span class="o">=</span> <span class="n">backend_headers</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">used_nodes</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">used_source_etag</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># stuff from request</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">req_method</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">method</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">req_path</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">path</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">req_query_string</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">query_string</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">newest</span> <span class="o">=</span> <span class="n">config_true_value</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-newest&#39;</span><span class="p">,</span> <span class="s">&#39;f&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># populated when finding source</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">statuses</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">reasons</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">source_headers</span> <span class="o">=</span> <span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>GetOrHeadHandler类的初始化方法。</li>
</ul>


<h3>fast_forward</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">fast_forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num_bytes</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Will skip num_bytes into the current ranges.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :params num_bytes: the number of bytes that have already been read on</span>
</span><span class='line'><span class="sd">                           this request. This will change the Range header</span>
</span><span class='line'><span class="sd">                           so that the next req will start where it left off.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :raises NotImplementedError: if this is a multirange request</span>
</span><span class='line'><span class="sd">        :raises ValueError: if invalid range header</span>
</span><span class='line'><span class="sd">        :raises HTTPRequestedRangeNotSatisfiable: if begin + num_bytes</span>
</span><span class='line'><span class="sd">                                                  &gt; end of range</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;Range&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">backend_headers</span><span class="p">:</span>
</span><span class='line'>            <span class="n">req_range</span> <span class="o">=</span> <span class="n">Range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">backend_headers</span><span class="p">[</span><span class="s">&#39;Range&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">req_range</span><span class="o">.</span><span class="n">ranges</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>                <span class="k">raise</span> <span class="ne">NotImplementedError</span><span class="p">()</span>
</span><span class='line'>            <span class="n">begin</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="n">req_range</span><span class="o">.</span><span class="n">ranges</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">begin</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># this is a -50 range req (last 50 bytes of file)</span>
</span><span class='line'>                <span class="n">end</span> <span class="o">-=</span> <span class="n">num_bytes</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">begin</span> <span class="o">+=</span> <span class="n">num_bytes</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">end</span> <span class="ow">and</span> <span class="n">begin</span> <span class="o">&gt;</span> <span class="n">end</span><span class="p">:</span>
</span><span class='line'>                <span class="k">raise</span> <span class="n">HTTPRequestedRangeNotSatisfiable</span><span class="p">()</span>
</span><span class='line'>            <span class="n">req_range</span><span class="o">.</span><span class="n">ranges</span> <span class="o">=</span> <span class="p">[(</span><span class="n">begin</span><span class="p">,</span> <span class="n">end</span><span class="p">)]</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">backend_headers</span><span class="p">[</span><span class="s">&#39;Range&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">req_range</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">backend_headers</span><span class="p">[</span><span class="s">&#39;Range&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;bytes=</span><span class="si">%d</span><span class="s">-&#39;</span> <span class="o">%</span> <span class="n">num_bytes</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>先判断Range是否在后台进程的header中，如果没有，则在后台进程header中增加Range，值为&#8217;bytes=&lsquo;加num_bytes。</li>
<li>如果有，先创建一个Range对象，判断如果Range对象的ranges如果大于1,则报NotImplementedError的异常。</li>
<li>从rangs中取到开始和结束字节数，先检查两个字节数是否正确，不正确抛异常，正确的话将其重新放入到后台进程header中。</li>
</ul>


<h3>is_good_source</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">is_good_source</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">src</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Indicates whether or not the request made to the backend found</span>
</span><span class='line'><span class="sd">        what it was looking for.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param src: the response from the backend</span>
</span><span class='line'><span class="sd">        :returns: True if found, False if not</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span> <span class="o">==</span> <span class="s">&#39;Object&#39;</span> <span class="ow">and</span> <span class="n">src</span><span class="o">.</span><span class="n">status</span> <span class="o">==</span> <span class="mi">416</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">is_success</span><span class="p">(</span><span class="n">src</span><span class="o">.</span><span class="n">status</span><span class="p">)</span> <span class="ow">or</span> <span class="n">is_redirection</span><span class="p">(</span><span class="n">src</span><span class="o">.</span><span class="n">status</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果是一个Object请求，并且返回状态码是416，则返回True，否则返回状态码是否200～399。</li>
</ul>


<h3>_make_app_iter</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">_make_app_iter</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">source</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Returns an iterator over the contents of the source (via its read</span>
</span><span class='line'><span class="sd">        func).  There is also quite a bit of cleanup to ensure garbage</span>
</span><span class='line'><span class="sd">        collection works and the underlying socket of the source is closed.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param req: incoming request object</span>
</span><span class='line'><span class="sd">        :param source: The httplib.Response object this iterator should read</span>
</span><span class='line'><span class="sd">                       from.</span>
</span><span class='line'><span class="sd">        :param node: The node the source is reading from, for logging purposes.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">nchunks</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="n">bytes_read_from_source</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="n">node_timeout</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">node_timeout</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span> <span class="o">==</span> <span class="s">&#39;Object&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="n">node_timeout</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">recoverable_node_timeout</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>初始化本地变量，如果是object请求，则将节点超时时间设置为object的recoverable_node_timeout。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>                <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">with</span> <span class="n">ChunkReadTimeout</span><span class="p">(</span><span class="n">node_timeout</span><span class="p">):</span>
</span><span class='line'>                        <span class="n">chunk</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">object_chunk_size</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">nchunks</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>                        <span class="n">bytes_read_from_source</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
</span><span class='line'>                <span class="k">except</span> <span class="n">ChunkReadTimeout</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_value</span><span class="p">,</span> <span class="n">exc_traceback</span> <span class="o">=</span> <span class="n">exc_info</span><span class="p">()</span>
</span><span class='line'>                    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">newest</span> <span class="ow">or</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span> <span class="o">!=</span> <span class="s">&#39;Object&#39;</span><span class="p">:</span>
</span><span class='line'>                        <span class="k">raise</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_value</span><span class="p">,</span> <span class="n">exc_traceback</span>
</span><span class='line'>                    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">fast_forward</span><span class="p">(</span><span class="n">bytes_read_from_source</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">except</span> <span class="p">(</span><span class="ne">NotImplementedError</span><span class="p">,</span> <span class="n">HTTPException</span><span class="p">,</span> <span class="ne">ValueError</span><span class="p">):</span>
</span><span class='line'>                        <span class="k">raise</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_value</span><span class="p">,</span> <span class="n">exc_traceback</span>
</span><span class='line'>                    <span class="n">new_source</span><span class="p">,</span> <span class="n">new_node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get_source_and_node</span><span class="p">()</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">new_source</span><span class="p">:</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">exception_occurred</span><span class="p">(</span>
</span><span class='line'>                            <span class="n">node</span><span class="p">,</span> <span class="n">_</span><span class="p">(</span><span class="s">&#39;Object&#39;</span><span class="p">),</span>
</span><span class='line'>                            <span class="n">_</span><span class="p">(</span><span class="s">&#39;Trying to read during GET (retrying)&#39;</span><span class="p">))</span>
</span><span class='line'>                        <span class="c"># Close-out the connection as best as possible.</span>
</span><span class='line'>                        <span class="k">if</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="s">&#39;swift_conn&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
</span><span class='line'>                            <span class="n">close_swift_conn</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">source</span> <span class="o">=</span> <span class="n">new_source</span>
</span><span class='line'>                        <span class="n">node</span> <span class="o">=</span> <span class="n">new_node</span>
</span><span class='line'>                        <span class="n">bytes_read_from_source</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>                        <span class="k">continue</span>
</span><span class='line'>                    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                        <span class="k">raise</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_value</span><span class="p">,</span> <span class="n">exc_traceback</span>
</span><span class='line'>                <span class="k">if</span> <span class="ow">not</span> <span class="n">chunk</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>                <span class="k">with</span> <span class="n">ChunkWriteTimeout</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">client_timeout</span><span class="p">):</span>
</span><span class='line'>                    <span class="k">yield</span> <span class="n">chunk</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>通过一个无限循环，不断读取response的数据，累加读取的块数大小和字节总长度。</li>
<li>如果读取数据超时，则处理异常，如果请求不是Object则抛出最近的异常信息。</li>
<li>记录已读的字节范围，错误抛异常。</li>
<li>获取新的source和节点，如果source存在的话，则创建一个异常并关闭连接重新初始化，否则抛出异常。</li>
<li>如果读取不到数据，则跳出循环。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>                <span class="c"># This is for fairness; if the network is outpacing the CPU,</span>
</span><span class='line'>                <span class="c"># we&#39;ll always be able to read and write data without</span>
</span><span class='line'>                <span class="c"># encountering an EWOULDBLOCK, and so eventlet will not switch</span>
</span><span class='line'>                <span class="c"># greenthreads on its own. We do it manually so that clients</span>
</span><span class='line'>                <span class="c"># don&#39;t starve.</span>
</span><span class='line'>                <span class="c">#</span>
</span><span class='line'>                <span class="c"># The number 5 here was chosen by making stuff up. It&#39;s not</span>
</span><span class='line'>                <span class="c"># every single chunk, but it&#39;s not too big either, so it seemed</span>
</span><span class='line'>                <span class="c"># like it would probably be an okay choice.</span>
</span><span class='line'>                <span class="c">#</span>
</span><span class='line'>                <span class="c"># Note that we may trampoline to other greenthreads more often</span>
</span><span class='line'>                <span class="c"># than once every 5 chunks, depending on how blocking our</span>
</span><span class='line'>                <span class="c"># network IO is; the explicit sleep here simply provides a</span>
</span><span class='line'>                <span class="c"># lower bound on the rate of trampolining.</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">nchunks</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">sleep</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">except</span> <span class="n">ChunkReadTimeout</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">exception_occurred</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">_</span><span class="p">(</span><span class="s">&#39;Object&#39;</span><span class="p">),</span>
</span><span class='line'>                                        <span class="n">_</span><span class="p">(</span><span class="s">&#39;Trying to read during GET&#39;</span><span class="p">))</span>
</span><span class='line'>            <span class="k">raise</span>
</span><span class='line'>        <span class="k">except</span> <span class="n">ChunkWriteTimeout</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span>
</span><span class='line'>                <span class="n">_</span><span class="p">(</span><span class="s">&#39;Client did not read from proxy within </span><span class="si">%s</span><span class="s">s&#39;</span><span class="p">)</span> <span class="o">%</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">client_timeout</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;client_timeouts&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">GeneratorExit</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;swift.non_client_disconnect&#39;</span><span class="p">):</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="n">_</span><span class="p">(</span><span class="s">&#39;Client disconnected on read&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="n">_</span><span class="p">(</span><span class="s">&#39;Trying to send to client&#39;</span><span class="p">))</span>
</span><span class='line'>            <span class="k">raise</span>
</span><span class='line'>        <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># Close-out the connection as best as possible.</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="s">&#39;swift_conn&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
</span><span class='line'>                <span class="n">close_swift_conn</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>每读取5个字节块，休眠一次。</li>
<li>读取数据超时抛异常。</li>
<li>写入数据超时记日志。</li>
<li>抛出各种异常后关闭连接。</li>
</ul>


<h3>_get_source_and_node</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">_get_source_and_node</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">statuses</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">reasons</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">source_headers</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="n">sources</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">node_timeout</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">node_timeout</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span> <span class="o">==</span> <span class="s">&#39;Object&#39;</span> <span class="ow">and</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">newest</span><span class="p">:</span>
</span><span class='line'>            <span class="n">node_timeout</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">recoverable_node_timeout</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>初始化本地变量，设置node_timeout时间。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">iter_nodes</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ring</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">partition</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">node</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">used_nodes</span><span class="p">:</span>
</span><span class='line'>                <span class="k">continue</span>
</span><span class='line'>            <span class="n">start_node_timing</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'>            <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                <span class="k">with</span> <span class="n">ConnectionTimeout</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">conn_timeout</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">conn</span> <span class="o">=</span> <span class="n">http_connect</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">node</span><span class="p">[</span><span class="s">&#39;ip&#39;</span><span class="p">],</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;port&#39;</span><span class="p">],</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;device&#39;</span><span class="p">],</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">partition</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">req_method</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">headers</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">backend_headers</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">query_string</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">req_query_string</span><span class="p">)</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">set_node_timing</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_node_timing</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">with</span> <span class="n">Timeout</span><span class="p">(</span><span class="n">node_timeout</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">possible_source</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span>
</span><span class='line'>                    <span class="c"># See NOTE: swift_conn at top of file about this.</span>
</span><span class='line'>                    <span class="n">possible_source</span><span class="o">.</span><span class="n">swift_conn</span> <span class="o">=</span> <span class="n">conn</span>
</span><span class='line'>            <span class="k">except</span> <span class="p">(</span><span class="ne">Exception</span><span class="p">,</span> <span class="n">Timeout</span><span class="p">):</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">exception_occurred</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">node</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">_</span><span class="p">(</span><span class="s">&#39;Trying to </span><span class="si">%(method)s</span><span class="s"> </span><span class="si">%(path)s</span><span class="s">&#39;</span><span class="p">)</span> <span class="o">%</span>
</span><span class='line'>                    <span class="p">{</span><span class="s">&#39;method&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">req_method</span><span class="p">,</span> <span class="s">&#39;path&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">req_path</span><span class="p">})</span>
</span><span class='line'>                <span class="k">continue</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>循环取节点，如果节点已经被使用了，则跳过该节点，否则封装http连接，设置节点时间。</li>
<li>获取请求结果，如果超时，则抛异常，跳出此次循环。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_good_source</span><span class="p">(</span><span class="n">possible_source</span><span class="p">):</span>
</span><span class='line'>                <span class="c"># 404 if we know we don&#39;t have a synced copy</span>
</span><span class='line'>                <span class="k">if</span> <span class="ow">not</span> <span class="nb">float</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;X-PUT-Timestamp&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)):</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">HTTP_NOT_FOUND</span><span class="p">)</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">reasons</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">source_headers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">close_swift_conn</span><span class="p">(</span><span class="n">possible_source</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">used_source_etag</span><span class="p">:</span>
</span><span class='line'>                        <span class="n">src_headers</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>                            <span class="p">(</span><span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">(),</span> <span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span>
</span><span class='line'>                            <span class="n">possible_source</span><span class="o">.</span><span class="n">getheaders</span><span class="p">())</span>
</span><span class='line'>                        <span class="k">if</span> <span class="n">src_headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;etag&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;&quot;&#39;</span><span class="p">)</span> <span class="o">!=</span> \
</span><span class='line'>                                <span class="bp">self</span><span class="o">.</span><span class="n">used_source_etag</span><span class="p">:</span>
</span><span class='line'>                            <span class="bp">self</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">HTTP_NOT_FOUND</span><span class="p">)</span>
</span><span class='line'>                            <span class="bp">self</span><span class="o">.</span><span class="n">reasons</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                            <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                            <span class="bp">self</span><span class="o">.</span><span class="n">source_headers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                            <span class="k">continue</span>
</span><span class='line'>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">reasons</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">reason</span><span class="p">)</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">source_headers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">sources</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">possible_source</span><span class="p">,</span> <span class="n">node</span><span class="p">))</span>
</span><span class='line'>                    <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">newest</span><span class="p">:</span>  <span class="c"># one good source is enough</span>
</span><span class='line'>                        <span class="k">break</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果返回结果合理，则判断返回结果中的PUT时间是否存在，不存在证明还没有同步，则返回404并关闭连接。</li>
<li>如果时间存在，则继续判断已用etag是否存在，存在的话从返回结果中取出etag值与之比较，不相等就返回404并关闭连接。</li>
<li>已用etag不存在，则将返回结果设置到自身属性中，并判断是否最新，是则跳出循环，取一个good source就足够了。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">reasons</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">reason</span><span class="p">)</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">source_headers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">getheaders</span><span class="p">())</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">possible_source</span><span class="o">.</span><span class="n">status</span> <span class="o">==</span> <span class="n">HTTP_INSUFFICIENT_STORAGE</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">error_limit</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">_</span><span class="p">(</span><span class="s">&#39;ERROR Insufficient Storage&#39;</span><span class="p">))</span>
</span><span class='line'>                <span class="k">elif</span> <span class="n">is_server_error</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">status</span><span class="p">):</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">error_occurred</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">node</span><span class="p">,</span> <span class="n">_</span><span class="p">(</span><span class="s">&#39;ERROR </span><span class="si">%(status)d</span><span class="s"> </span><span class="si">%(body)s</span><span class="s"> &#39;</span>
</span><span class='line'>                                <span class="s">&#39;From </span><span class="si">%(type)s</span><span class="s"> Server&#39;</span><span class="p">)</span> <span class="o">%</span>
</span><span class='line'>                        <span class="p">{</span><span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="n">possible_source</span><span class="o">.</span><span class="n">status</span><span class="p">,</span>
</span><span class='line'>                         <span class="s">&#39;body&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][:</span><span class="mi">1024</span><span class="p">],</span>
</span><span class='line'>                         <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">sources</span><span class="p">:</span>
</span><span class='line'>            <span class="n">sources</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="n">source_key</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>            <span class="n">source</span><span class="p">,</span> <span class="n">node</span> <span class="o">=</span> <span class="n">sources</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">src</span><span class="p">,</span> <span class="n">_junk</span> <span class="ow">in</span> <span class="n">sources</span><span class="p">:</span>
</span><span class='line'>                <span class="n">close_swift_conn</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">used_nodes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>            <span class="n">src_headers</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>                <span class="p">(</span><span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">(),</span> <span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span>
</span><span class='line'>                <span class="n">possible_source</span><span class="o">.</span><span class="n">getheaders</span><span class="p">())</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">used_source_etag</span> <span class="o">=</span> <span class="n">src_headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;etag&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;&quot;&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">source</span><span class="p">,</span> <span class="n">node</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果返回结果不是一个good source，则将返回结果信息设置到自身属性，如果返回状态是507,则将节点加入到错误列表，如果返回状态是其他500以上的数字，则抛出异常。</li>
<li>循环结束后，如果取到了source，则先将sources进行排序然后取第一个，接着关闭剩下的source。</li>
<li>添加节点到已用节点，设置易用etag，返回结果，如果取不到source，则返回空。</li>
</ul>


<h3>get_working_response</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">get_working_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
</span><span class='line'>        <span class="n">source</span><span class="p">,</span> <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get_source_and_node</span><span class="p">()</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">source</span><span class="p">:</span>
</span><span class='line'>            <span class="n">res</span> <span class="o">=</span> <span class="n">Response</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">req</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;GET&#39;</span> <span class="ow">and</span> \
</span><span class='line'>                    <span class="n">source</span><span class="o">.</span><span class="n">status</span> <span class="ow">in</span> <span class="p">(</span><span class="n">HTTP_OK</span><span class="p">,</span> <span class="n">HTTP_PARTIAL_CONTENT</span><span class="p">):</span>
</span><span class='line'>                <span class="n">res</span><span class="o">.</span><span class="n">app_iter</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_make_app_iter</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">source</span><span class="p">)</span>
</span><span class='line'>                <span class="c"># See NOTE: swift_conn at top of file about this.</span>
</span><span class='line'>                <span class="n">res</span><span class="o">.</span><span class="n">swift_conn</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="n">swift_conn</span>
</span><span class='line'>            <span class="n">res</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="n">status</span>
</span><span class='line'>            <span class="n">update_headers</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">source</span><span class="o">.</span><span class="n">getheaders</span><span class="p">())</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="n">res</span><span class="o">.</span><span class="n">environ</span><span class="p">:</span>
</span><span class='line'>                <span class="n">res</span><span class="o">.</span><span class="n">environ</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>            <span class="n">res</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;swift_x_timestamp&#39;</span><span class="p">]</span> <span class="o">=</span> \
</span><span class='line'>                <span class="n">source</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;x-timestamp&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">res</span><span class="o">.</span><span class="n">accept_ranges</span> <span class="o">=</span> <span class="s">&#39;bytes&#39;</span>
</span><span class='line'>            <span class="n">res</span><span class="o">.</span><span class="n">content_length</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;Content-Length&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">source</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;Content-Type&#39;</span><span class="p">):</span>
</span><span class='line'>                <span class="n">res</span><span class="o">.</span><span class="n">charset</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>                <span class="n">res</span><span class="o">.</span><span class="n">content_type</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;Content-Type&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>先获取source和node，如果有的话，则根据req参数封装response，如果请求是&#8217;GET&#8217;并且source的状态是200或206,则设置response的app_iter和conn。</li>
<li>将source的状态码和header设置进response，再分别根据source的内容设置返回的response的值。</li>
</ul>


<h2>Controller类</h2>

<h3>init方法</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="sd">&quot;&quot;&quot;Base WSGI controller class for the proxy&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">server_type</span> <span class="o">=</span> <span class="s">&#39;Base&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Ensure these are all lowercase</span>
</span><span class='line'>    <span class="n">pass_through_headers</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">app</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Creates a controller attached to an application instance</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param app: the application instance</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">account_name</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">trans_id</span> <span class="o">=</span> <span class="s">&#39;-&#39;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_allowed_methods</span> <span class="o">=</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>设置类型为base，初始化方法，创建controller时使用。</li>
</ul>


<h3>allowed_methods</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">allowed_methods</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_allowed_methods</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">_allowed_methods</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'>            <span class="n">all_methods</span> <span class="o">=</span> <span class="n">inspect</span><span class="o">.</span><span class="n">getmembers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">predicate</span><span class="o">=</span><span class="n">inspect</span><span class="o">.</span><span class="n">ismethod</span><span class="p">)</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">all_methods</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="s">&#39;publicly_accessible&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">):</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">_allowed_methods</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_allowed_methods</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>类属性变量allowed_methods的初始化方法。</li>
</ul>


<h3>transfer_headers</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">transfer_headers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">src_headers</span><span class="p">,</span> <span class="n">dst_headers</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Transfer legal headers from an original client request to dictionary</span>
</span><span class='line'><span class="sd">        that will be used as headers by the backend request</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param src_headers: A dictionary of the original client request headers</span>
</span><span class='line'><span class="sd">        :param dst_headers: A dictionary of the backend request headers</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">st</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">x_remove</span> <span class="o">=</span> <span class="s">&#39;x-remove-</span><span class="si">%s</span><span class="s">-meta-&#39;</span> <span class="o">%</span> <span class="n">st</span>
</span><span class='line'>        <span class="n">dst_headers</span><span class="o">.</span><span class="n">update</span><span class="p">((</span><span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;-remove&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                           <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">src_headers</span>
</span><span class='line'>                           <span class="k">if</span> <span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="n">x_remove</span><span class="p">)</span> <span class="ow">or</span>
</span><span class='line'>                           <span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_x_remove_headers</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">dst_headers</span><span class="o">.</span><span class="n">update</span><span class="p">((</span><span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">(),</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'>                           <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">src_headers</span><span class="o">.</span><span class="n">iteritems</span><span class="p">()</span>
</span><span class='line'>                           <span class="k">if</span> <span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">pass_through_headers</span> <span class="ow">or</span>
</span><span class='line'>                           <span class="n">is_sys_or_user_meta</span><span class="p">(</span><span class="n">st</span><span class="p">,</span> <span class="n">k</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将一个原始客户端请求的遗留header转换为新的header，给后台进程使用。</li>
</ul>


<h3>transfer_headers</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">generate_request_headers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">orig_req</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">additional</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
</span><span class='line'>                                 <span class="n">transfer</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Create a list of headers to be used in backend requets</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param orig_req: the original request sent by the client to the proxy</span>
</span><span class='line'><span class="sd">        :param additional: additional headers to send to the backend</span>
</span><span class='line'><span class="sd">        :param transfer: If True, transfer headers from original client request</span>
</span><span class='line'><span class="sd">        :returns: a dictionary of headers</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="c"># Use the additional headers first so they don&#39;t overwrite the headers</span>
</span><span class='line'>        <span class="c"># we require.</span>
</span><span class='line'>        <span class="n">headers</span> <span class="o">=</span> <span class="n">HeaderKeyDict</span><span class="p">(</span><span class="n">additional</span><span class="p">)</span> <span class="k">if</span> <span class="n">additional</span> <span class="k">else</span> <span class="n">HeaderKeyDict</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">transfer</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">transfer_headers</span><span class="p">(</span><span class="n">orig_req</span><span class="o">.</span><span class="n">headers</span><span class="p">,</span> <span class="n">headers</span><span class="p">)</span>
</span><span class='line'>        <span class="n">headers</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="s">&#39;x-timestamp&#39;</span><span class="p">,</span> <span class="n">normalize_timestamp</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()))</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">orig_req</span><span class="p">:</span>
</span><span class='line'>            <span class="n">referer</span> <span class="o">=</span> <span class="n">orig_req</span><span class="o">.</span><span class="n">as_referer</span><span class="p">()</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">referer</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>        <span class="n">headers</span><span class="p">[</span><span class="s">&#39;x-trans-id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">trans_id</span>
</span><span class='line'>        <span class="n">headers</span><span class="p">[</span><span class="s">&#39;connection&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;close&#39;</span>
</span><span class='line'>        <span class="n">headers</span><span class="p">[</span><span class="s">&#39;user-agent&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;proxy-server </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">()</span>
</span><span class='line'>        <span class="n">headers</span><span class="p">[</span><span class="s">&#39;referer&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">referer</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">headers</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>生成一组headers为后台进程使用。</li>
</ul>


<h3>account_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">account_info</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">req</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Get account information, and also verify that the account exists.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param account: name of the account to get the info for</span>
</span><span class='line'><span class="sd">        :param req: caller&#39;s HTTP request context object (optional)</span>
</span><span class='line'><span class="sd">        :returns: tuple of (account partition, account nodes, container_count)</span>
</span><span class='line'><span class="sd">                  or (None, None, None) if it does not exist</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">partition</span><span class="p">,</span> <span class="n">nodes</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">account_ring</span><span class="o">.</span><span class="n">get_nodes</span><span class="p">(</span><span class="n">account</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">req</span><span class="p">:</span>
</span><span class='line'>            <span class="n">env</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="s">&#39;environ&#39;</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">env</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">get_info</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;container_count&#39;</span><span class="p">)</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="n">container_count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">container_count</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="s">&#39;container_count&#39;</span><span class="p">])</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">partition</span><span class="p">,</span> <span class="n">nodes</span><span class="p">,</span> <span class="n">container_count</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>获取account信息，正常返回分区号，节点和容器数量，获取不到返回3个None。</li>
</ul>


<h3>account_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">container_info</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">req</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Get container information and thusly verify container existence.</span>
</span><span class='line'><span class="sd">        This will also verify account existence.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param account: account name for the container</span>
</span><span class='line'><span class="sd">        :param container: container name to look up</span>
</span><span class='line'><span class="sd">        :param req: caller&#39;s HTTP request context object (optional)</span>
</span><span class='line'><span class="sd">        :returns: dict containing at least container partition (&#39;partition&#39;),</span>
</span><span class='line'><span class="sd">                  container nodes (&#39;containers&#39;), container read</span>
</span><span class='line'><span class="sd">                  acl (&#39;read_acl&#39;), container write acl (&#39;write_acl&#39;),</span>
</span><span class='line'><span class="sd">                  and container sync key (&#39;sync_key&#39;).</span>
</span><span class='line'><span class="sd">                  Values are set to None if the container does not exist.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">part</span><span class="p">,</span> <span class="n">nodes</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">container_ring</span><span class="o">.</span><span class="n">get_nodes</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">req</span><span class="p">:</span>
</span><span class='line'>            <span class="n">env</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="s">&#39;environ&#39;</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">env</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">get_info</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>            <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_container_info</span><span class="p">({},</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">info</span><span class="p">[</span><span class="s">&#39;partition&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>            <span class="n">info</span><span class="p">[</span><span class="s">&#39;nodes&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">info</span><span class="p">[</span><span class="s">&#39;partition&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">part</span>
</span><span class='line'>            <span class="n">info</span><span class="p">[</span><span class="s">&#39;nodes&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">nodes</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">info</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>获取container信息，会顺便校验container是否存在，也会校验account是否存在。</li>
</ul>


<h3>make_request(私有方法)</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">_make_request</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nodes</span><span class="p">,</span> <span class="n">part</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">query</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">logger_thread_locals</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Iterates over the given node iterator, sending an HTTP request to one</span>
</span><span class='line'><span class="sd">        node at a time.  The first non-informational, non-server-error</span>
</span><span class='line'><span class="sd">        response is returned.  If no non-informational, non-server-error</span>
</span><span class='line'><span class="sd">        response is received from any of the nodes, returns None.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param nodes: an iterator of the backend server and handoff servers</span>
</span><span class='line'><span class="sd">        :param part: the partition number</span>
</span><span class='line'><span class="sd">        :param method: the method to send to the backend</span>
</span><span class='line'><span class="sd">        :param path: the path to send to the backend</span>
</span><span class='line'><span class="sd">                     (full path ends up being /&lt;$device&gt;/&lt;$part&gt;/&lt;$path&gt;)</span>
</span><span class='line'><span class="sd">        :param headers: a list of dicts, where each dict represents one</span>
</span><span class='line'><span class="sd">                        backend request that should be made.</span>
</span><span class='line'><span class="sd">        :param query: query string to send to the backend.</span>
</span><span class='line'><span class="sd">        :param logger_thread_locals: The thread local values to be set on the</span>
</span><span class='line'><span class="sd">                                     self.app.logger to retain transaction</span>
</span><span class='line'><span class="sd">                                     logging information.</span>
</span><span class='line'><span class="sd">        :returns: a swob.Response object, or None if no responses were received</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">thread_locals</span> <span class="o">=</span> <span class="n">logger_thread_locals</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">nodes</span><span class="p">:</span>
</span><span class='line'>            <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                <span class="n">start_node_timing</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'>                <span class="k">with</span> <span class="n">ConnectionTimeout</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">conn_timeout</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">conn</span> <span class="o">=</span> <span class="n">http_connect</span><span class="p">(</span><span class="n">node</span><span class="p">[</span><span class="s">&#39;ip&#39;</span><span class="p">],</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;port&#39;</span><span class="p">],</span>
</span><span class='line'>                                        <span class="n">node</span><span class="p">[</span><span class="s">&#39;device&#39;</span><span class="p">],</span> <span class="n">part</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span>
</span><span class='line'>                                        <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">query_string</span><span class="o">=</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">conn</span><span class="o">.</span><span class="n">node</span> <span class="o">=</span> <span class="n">node</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">set_node_timing</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_node_timing</span><span class="p">)</span>
</span><span class='line'>                <span class="k">with</span> <span class="n">Timeout</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">node_timeout</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">resp</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span>
</span><span class='line'>                    <span class="k">if</span> <span class="ow">not</span> <span class="n">is_informational</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">status</span><span class="p">)</span> <span class="ow">and</span> \
</span><span class='line'>                            <span class="ow">not</span> <span class="n">is_server_error</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">status</span><span class="p">):</span>
</span><span class='line'>                        <span class="k">return</span> <span class="n">resp</span><span class="o">.</span><span class="n">status</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">reason</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">getheaders</span><span class="p">(),</span> \
</span><span class='line'>                            <span class="n">resp</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>                    <span class="k">elif</span> <span class="n">resp</span><span class="o">.</span><span class="n">status</span> <span class="o">==</span> <span class="n">HTTP_INSUFFICIENT_STORAGE</span><span class="p">:</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">error_limit</span><span class="p">(</span><span class="n">node</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">_</span><span class="p">(</span><span class="s">&#39;ERROR Insufficient Storage&#39;</span><span class="p">))</span>
</span><span class='line'>            <span class="k">except</span> <span class="p">(</span><span class="ne">Exception</span><span class="p">,</span> <span class="n">Timeout</span><span class="p">):</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">exception_occurred</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">node</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">_</span><span class="p">(</span><span class="s">&#39;Trying to </span><span class="si">%(method)s</span><span class="s"> </span><span class="si">%(path)s</span><span class="s">&#39;</span><span class="p">)</span> <span class="o">%</span>
</span><span class='line'>                    <span class="p">{</span><span class="s">&#39;method&#39;</span><span class="p">:</span> <span class="n">method</span><span class="p">,</span> <span class="s">&#39;path&#39;</span><span class="p">:</span> <span class="n">path</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>遍历每个节点，根据节点信息发起请求，如果请求不是100+和500+，则返回请求结果。</li>
<li>如果请求状态码为507，则加入node到异常node列表。</li>
<li>其他异常抛出异常信息。</li>
</ul>


<h3>make_requests</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">make_requests</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">ring</span><span class="p">,</span> <span class="n">part</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">query_string</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Sends an HTTP request to multiple nodes and aggregates the results.</span>
</span><span class='line'><span class="sd">        It attempts the primary nodes concurrently, then iterates over the</span>
</span><span class='line'><span class="sd">        handoff nodes as needed.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param req: a request sent by the client</span>
</span><span class='line'><span class="sd">        :param ring: the ring used for finding backend servers</span>
</span><span class='line'><span class="sd">        :param part: the partition number</span>
</span><span class='line'><span class="sd">        :param method: the method to send to the backend</span>
</span><span class='line'><span class="sd">        :param path: the path to send to the backend</span>
</span><span class='line'><span class="sd">                     (full path ends up being  /&lt;$device&gt;/&lt;$part&gt;/&lt;$path&gt;)</span>
</span><span class='line'><span class="sd">        :param headers: a list of dicts, where each dict represents one</span>
</span><span class='line'><span class="sd">                        backend request that should be made.</span>
</span><span class='line'><span class="sd">        :param query_string: optional query string to send to the backend</span>
</span><span class='line'><span class="sd">        :returns: a swob.Response object</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">start_nodes</span> <span class="o">=</span> <span class="n">ring</span><span class="o">.</span><span class="n">get_part_nodes</span><span class="p">(</span><span class="n">part</span><span class="p">)</span>
</span><span class='line'>        <span class="n">nodes</span> <span class="o">=</span> <span class="n">GreenthreadSafeIterator</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">iter_nodes</span><span class="p">(</span><span class="n">ring</span><span class="p">,</span> <span class="n">part</span><span class="p">))</span>
</span><span class='line'>        <span class="n">pile</span> <span class="o">=</span> <span class="n">GreenAsyncPile</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">start_nodes</span><span class="p">))</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">head</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">:</span>
</span><span class='line'>            <span class="n">pile</span><span class="o">.</span><span class="n">spawn</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_make_request</span><span class="p">,</span> <span class="n">nodes</span><span class="p">,</span> <span class="n">part</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span>
</span><span class='line'>                       <span class="n">head</span><span class="p">,</span> <span class="n">query_string</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">thread_locals</span><span class="p">)</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="n">statuses</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">resp</span> <span class="ow">in</span> <span class="n">pile</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="n">resp</span><span class="p">:</span>
</span><span class='line'>                <span class="k">continue</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">resp</span><span class="p">)</span>
</span><span class='line'>            <span class="n">statuses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">resp</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">have_quorum</span><span class="p">(</span><span class="n">statuses</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">start_nodes</span><span class="p">)):</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>        <span class="c"># give any pending requests *some* chance to finish</span>
</span><span class='line'>        <span class="n">pile</span><span class="o">.</span><span class="n">waitall</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">post_quorum_timeout</span><span class="p">)</span>
</span><span class='line'>        <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">start_nodes</span><span class="p">):</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">HTTP_SERVICE_UNAVAILABLE</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="n">statuses</span><span class="p">,</span> <span class="n">reasons</span><span class="p">,</span> <span class="n">resp_headers</span><span class="p">,</span> <span class="n">bodies</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">best_response</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">statuses</span><span class="p">,</span> <span class="n">reasons</span><span class="p">,</span> <span class="n">bodies</span><span class="p">,</span>
</span><span class='line'>                                  <span class="s">&#39;</span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">server_type</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">method</span><span class="p">),</span>
</span><span class='line'>                                  <span class="n">headers</span><span class="o">=</span><span class="n">resp_headers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>先通过partition获取node节点，再根据节点个数创建线程发起每个节点请求。</li>
<li>获取每个线程的返回结果，将状态码和响应结果记录保存到列表中，如果状态码列表个数超过节点的一半，则跳出循环。</li>
<li>将剩下的response设置为503，最后通过best_response方法获取response。</li>
</ul>


<h3>have_quorum</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">have_quorum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">statuses</span><span class="p">,</span> <span class="n">node_count</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Given a list of statuses from several requests, determine if</span>
</span><span class='line'><span class="sd">        a quorum response can already be decided.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param statuses: list of statuses returned</span>
</span><span class='line'><span class="sd">        :param node_count: number of nodes being queried (basically ring count)</span>
</span><span class='line'><span class="sd">        :returns: True or False, depending on if quorum is established</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">quorum</span> <span class="o">=</span> <span class="n">quorum_size</span><span class="p">(</span><span class="n">node_count</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">statuses</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">quorum</span><span class="p">:</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">hundred</span> <span class="ow">in</span> <span class="p">(</span><span class="n">HTTP_OK</span><span class="p">,</span> <span class="n">HTTP_MULTIPLE_CHOICES</span><span class="p">,</span> <span class="n">HTTP_BAD_REQUEST</span><span class="p">):</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">sum</span><span class="p">(</span><span class="mi">1</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">statuses</span>
</span><span class='line'>                       <span class="k">if</span> <span class="n">hundred</span> <span class="o">&lt;=</span> <span class="n">s</span> <span class="o">&lt;</span> <span class="n">hundred</span> <span class="o">+</span> <span class="mi">100</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">quorum</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>通过节点个数和一组状态码判断响应是否已经满足限额。</li>
</ul>


<h3>best_response</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">best_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">statuses</span><span class="p">,</span> <span class="n">reasons</span><span class="p">,</span> <span class="n">bodies</span><span class="p">,</span> <span class="n">server_type</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">etag</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Given a list of responses from several servers, choose the best to</span>
</span><span class='line'><span class="sd">        return to the API.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param req: swob.Request object</span>
</span><span class='line'><span class="sd">        :param statuses: list of statuses returned</span>
</span><span class='line'><span class="sd">        :param reasons: list of reasons for each status</span>
</span><span class='line'><span class="sd">        :param bodies: bodies of each response</span>
</span><span class='line'><span class="sd">        :param server_type: type of server the responses came from</span>
</span><span class='line'><span class="sd">        :param etag: etag</span>
</span><span class='line'><span class="sd">        :param headers: headers of each response</span>
</span><span class='line'><span class="sd">        :returns: swob.Response object with the correct status, body, etc. set</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="n">Response</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">statuses</span><span class="p">):</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">hundred</span> <span class="ow">in</span> <span class="p">(</span><span class="n">HTTP_OK</span><span class="p">,</span> <span class="n">HTTP_MULTIPLE_CHOICES</span><span class="p">,</span> <span class="n">HTTP_BAD_REQUEST</span><span class="p">):</span>
</span><span class='line'>                <span class="n">hstatuses</span> <span class="o">=</span> \
</span><span class='line'>                    <span class="p">[</span><span class="n">s</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">statuses</span> <span class="k">if</span> <span class="n">hundred</span> <span class="o">&lt;=</span> <span class="n">s</span> <span class="o">&lt;</span> <span class="n">hundred</span> <span class="o">+</span> <span class="mi">100</span><span class="p">]</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">hstatuses</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">quorum_size</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">statuses</span><span class="p">)):</span>
</span><span class='line'>                    <span class="n">status</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">hstatuses</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">status_index</span> <span class="o">=</span> <span class="n">statuses</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">resp</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">reasons</span><span class="p">[</span><span class="n">status_index</span><span class="p">])</span>
</span><span class='line'>                    <span class="n">resp</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">bodies</span><span class="p">[</span><span class="n">status_index</span><span class="p">]</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">headers</span><span class="p">:</span>
</span><span class='line'>                        <span class="n">update_headers</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="n">headers</span><span class="p">[</span><span class="n">status_index</span><span class="p">])</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">etag</span><span class="p">:</span>
</span><span class='line'>                        <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;etag&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">etag</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;&quot;&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">resp</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="n">_</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%(type)s</span><span class="s"> returning 503 for </span><span class="si">%(statuses)s</span><span class="s">&#39;</span><span class="p">),</span>
</span><span class='line'>                              <span class="p">{</span><span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="n">server_type</span><span class="p">,</span> <span class="s">&#39;statuses&#39;</span><span class="p">:</span> <span class="n">statuses</span><span class="p">})</span>
</span><span class='line'>        <span class="n">resp</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">&#39;503 Internal Server Error&#39;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resp</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>给定一组response，返回最佳的response。</li>
<li>比如副本数是3,response列表是[201,201,503],则返回201。</li>
</ul>


<h3>autocreate_account</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">autocreate_account</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Autocreate an account</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param env: the environment of the request leading to this autocreate</span>
</span><span class='line'><span class="sd">        :param account: the unquoted account name</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">partition</span><span class="p">,</span> <span class="n">nodes</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">account_ring</span><span class="o">.</span><span class="n">get_nodes</span><span class="p">(</span><span class="n">account</span><span class="p">)</span>
</span><span class='line'>        <span class="n">path</span> <span class="o">=</span> <span class="s">&#39;/</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">account</span>
</span><span class='line'>        <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;X-Timestamp&#39;</span><span class="p">:</span> <span class="n">normalize_timestamp</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()),</span>
</span><span class='line'>                   <span class="s">&#39;X-Trans-Id&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">trans_id</span><span class="p">,</span>
</span><span class='line'>                   <span class="s">&#39;Connection&#39;</span><span class="p">:</span> <span class="s">&#39;close&#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">make_requests</span><span class="p">(</span><span class="n">Request</span><span class="o">.</span><span class="n">blank</span><span class="p">(</span><span class="s">&#39;/v1&#39;</span> <span class="o">+</span> <span class="n">path</span><span class="p">),</span>
</span><span class='line'>                                  <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">account_ring</span><span class="p">,</span> <span class="n">partition</span><span class="p">,</span> <span class="s">&#39;PUT&#39;</span><span class="p">,</span>
</span><span class='line'>                                  <span class="n">path</span><span class="p">,</span> <span class="p">[</span><span class="n">headers</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">nodes</span><span class="p">))</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">is_success</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">status_int</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;autocreate account </span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'>            <span class="n">clear_info_cache</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s">&#39;Could not autocreate account </span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>发起一个PUT请求自动创建account，创建失败记录警告信息。</li>
</ul>


<h3>GETorHEAD_base</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">GETorHEAD_base</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">server_type</span><span class="p">,</span> <span class="n">ring</span><span class="p">,</span> <span class="n">partition</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Base handler for HTTP GET or HEAD requests.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param req: swob.Request object</span>
</span><span class='line'><span class="sd">        :param server_type: server type used in logging</span>
</span><span class='line'><span class="sd">        :param ring: the ring to obtain nodes from</span>
</span><span class='line'><span class="sd">        :param partition: partition</span>
</span><span class='line'><span class="sd">        :param path: path for the request</span>
</span><span class='line'><span class="sd">        :returns: swob.Response object</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">backend_headers</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">generate_request_headers</span><span class="p">(</span>
</span><span class='line'>            <span class="n">req</span><span class="p">,</span> <span class="n">additional</span><span class="o">=</span><span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">handler</span> <span class="o">=</span> <span class="n">GetOrHeadHandler</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span><span class="p">,</span> <span class="n">ring</span><span class="p">,</span>
</span><span class='line'>                                   <span class="n">partition</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">backend_headers</span><span class="p">)</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">=</span> <span class="n">handler</span><span class="o">.</span><span class="n">get_working_response</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">res</span><span class="p">:</span>
</span><span class='line'>            <span class="n">res</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">best_response</span><span class="p">(</span>
</span><span class='line'>                <span class="n">req</span><span class="p">,</span> <span class="n">handler</span><span class="o">.</span><span class="n">statuses</span><span class="p">,</span> <span class="n">handler</span><span class="o">.</span><span class="n">reasons</span><span class="p">,</span> <span class="n">handler</span><span class="o">.</span><span class="n">bodies</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&#39;</span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">server_type</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">method</span><span class="p">),</span>
</span><span class='line'>                <span class="n">headers</span><span class="o">=</span><span class="n">handler</span><span class="o">.</span><span class="n">source_headers</span><span class="p">)</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="p">(</span><span class="n">vrs</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">split_path</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>            <span class="n">_set_info_cache</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span><span class='line'>            <span class="k">pass</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="p">(</span><span class="n">vrs</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">split_path</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>            <span class="n">_set_object_info_cache</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span>
</span><span class='line'>                                   <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span><span class='line'>            <span class="k">pass</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>基类controller的get或head请求处理方法，首先构造header和handler发起一个http请求。</li>
<li>如果请求没有响应，则调用best_response方法取到response。</li>
<li>如果请求有响应，则根据request分割出account、container和object信息，设置到缓存中，最后返回response。</li>
</ul>


<h3>is_origin_allowed</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">is_origin_allowed</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cors_info</span><span class="p">,</span> <span class="n">origin</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Is the given Origin allowed to make requests to this resource</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param cors_info: the resource&#39;s CORS related metadata headers</span>
</span><span class='line'><span class="sd">        :param origin: the origin making the request</span>
</span><span class='line'><span class="sd">        :return: True or False</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">allowed_origins</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">cors_info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;allow_origin&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="n">allowed_origins</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>
</span><span class='line'>                <span class="p">[</span><span class="n">a</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>                 <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">cors_info</span><span class="p">[</span><span class="s">&#39;allow_origin&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>                 <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">strip</span><span class="p">()])</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">cors_allow_origin</span><span class="p">:</span>
</span><span class='line'>            <span class="n">allowed_origins</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">cors_allow_origin</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">origin</span> <span class="ow">in</span> <span class="n">allowed_origins</span> <span class="ow">or</span> <span class="s">&#39;*&#39;</span> <span class="ow">in</span> <span class="n">allowed_origins</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>判断该请求方法是否允许发起请求，先从header中获取&#8217;allow_origin&#8217;的值，如果有的花，更新允许访问列表。</li>
<li>如果原请求方法在允许访问列表中，或者允许访问列表中有&#8217;*&lsquo;，则返回True。</li>
</ul>


<h3>OPTIONS</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="nd">@public</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">OPTIONS</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Base handler for OPTIONS requests</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param req: swob.Request object</span>
</span><span class='line'><span class="sd">        :returns: swob.Response object</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="c"># Prepare the default response</span>
</span><span class='line'>        <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;Allow&#39;</span><span class="p">:</span> <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">allowed_methods</span><span class="p">)}</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="n">Response</span><span class="p">(</span><span class="n">status</span><span class="o">=</span><span class="mi">200</span><span class="p">,</span> <span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># If this isn&#39;t a CORS pre-flight request then return now</span>
</span><span class='line'>        <span class="n">req_origin_value</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;Origin&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">req_origin_value</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">resp</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>options请求的基本handler，准备一个默认的response，如果不是一个CORS请求，则返回默认的response。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>        <span class="c"># This is a CORS preflight request so check it&#39;s allowed</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">container_info</span> <span class="o">=</span> \
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">container_info</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">account_name</span><span class="p">,</span>
</span><span class='line'>                                    <span class="bp">self</span><span class="o">.</span><span class="n">container_name</span><span class="p">,</span> <span class="n">req</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">AttributeError</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># This should only happen for requests to the Account. A future</span>
</span><span class='line'>            <span class="c"># change could allow CORS requests to the Account level as well.</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">resp</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">cors</span> <span class="o">=</span> <span class="n">container_info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;cors&#39;</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># If the CORS origin isn&#39;t allowed return a 401</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_origin_allowed</span><span class="p">(</span><span class="n">cors</span><span class="p">,</span> <span class="n">req_origin_value</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;Access-Control-Request-Method&#39;</span><span class="p">)</span> <span class="ow">not</span> <span class="ow">in</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">allowed_methods</span><span class="p">):</span>
</span><span class='line'>            <span class="n">resp</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">HTTP_UNAUTHORIZED</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">resp</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果对account进行操作的CORS请求，则返回默认reponse，否则获取container信息。</li>
<li>如果CORS请求不允许，则返回401。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>        <span class="c"># Allow all headers requested in the request. The CORS</span>
</span><span class='line'>        <span class="c"># specification does leave the door open for this, as mentioned in</span>
</span><span class='line'>        <span class="c"># http://www.w3.org/TR/cors/#resource-preflight-requests</span>
</span><span class='line'>        <span class="c"># Note: Since the list of headers can be unbounded</span>
</span><span class='line'>        <span class="c"># simply returning headers can be enough.</span>
</span><span class='line'>        <span class="n">allow_headers</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;Access-Control-Request-Headers&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="n">allow_headers</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>
</span><span class='line'>                <span class="n">list_from_csv</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;Access-Control-Request-Headers&#39;</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Populate the response with the CORS preflight headers</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">cors</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;allow_origin&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="o">==</span> <span class="s">&#39;*&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">headers</span><span class="p">[</span><span class="s">&#39;access-control-allow-origin&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;*&#39;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">headers</span><span class="p">[</span><span class="s">&#39;access-control-allow-origin&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">req_origin_value</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">cors</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;max_age&#39;</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="n">headers</span><span class="p">[</span><span class="s">&#39;access-control-max-age&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cors</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;max_age&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">headers</span><span class="p">[</span><span class="s">&#39;access-control-allow-methods&#39;</span><span class="p">]</span> <span class="o">=</span> \
</span><span class='line'>            <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">allowed_methods</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">allow_headers</span><span class="p">:</span>
</span><span class='line'>            <span class="n">headers</span><span class="p">[</span><span class="s">&#39;access-control-allow-headers&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">allow_headers</span><span class="p">)</span>
</span><span class='line'>        <span class="n">resp</span><span class="o">.</span><span class="n">headers</span> <span class="o">=</span> <span class="n">headers</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">resp</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在response的header中增加相关header，分别有&#8217;access-control-allow-origin&#8217;,&lsquo;access-control-max-age&rsquo;,&lsquo;access-control-allow-methods&#8217;和&#8217;access-control-allow-headers&#8217;。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[swift源码详解（二）——proxy/server.py]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/04/20/swift-code-explain-proxy-server/"/>
    <updated>2014-04-20T20:52:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/04/20/swift-code-explain-proxy-server</id>
    <content type="html"><![CDATA[<h2><a href="http://zhaozhiming.github.io/blog/2014/04/19/swift-code-explain-total/">回swift代码结构目录</a></h2>

<h3>int方法</h3>

<!--more-->


<p></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">conf</span><span class="p">,</span> <span class="n">memcache</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">logger</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">account_ring</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">container_ring</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">object_ring</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">conf</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="n">conf</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">logger</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="n">get_logger</span><span class="p">(</span><span class="n">conf</span><span class="p">,</span> <span class="n">log_route</span><span class="o">=</span><span class="s">&#39;proxy-server&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="n">logger</span>
</span><span class='line'>        <span class="n">swift_dir</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;swift_dir&#39;</span><span class="p">,</span> <span class="s">&#39;/etc/swift&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">node_timeout</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;node_timeout&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">recoverable_node_timeout</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span>
</span><span class='line'>            <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;recoverable_node_timeout&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">node_timeout</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">conn_timeout</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;conn_timeout&#39;</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">client_timeout</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;client_timeout&#39;</span><span class="p">,</span> <span class="mi">60</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">put_queue_depth</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;put_queue_depth&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">object_chunk_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;object_chunk_size&#39;</span><span class="p">,</span> <span class="mi">65536</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">client_chunk_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;client_chunk_size&#39;</span><span class="p">,</span> <span class="mi">65536</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">trans_id_suffix</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;trans_id_suffix&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">post_quorum_timeout</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;post_quorum_timeout&#39;</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">error_suppression_interval</span> <span class="o">=</span> \
</span><span class='line'>            <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;error_suppression_interval&#39;</span><span class="p">,</span> <span class="mi">60</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">error_suppression_limit</span> <span class="o">=</span> \
</span><span class='line'>            <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;error_suppression_limit&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">recheck_container_existence</span> <span class="o">=</span> \
</span><span class='line'>            <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;recheck_container_existence&#39;</span><span class="p">,</span> <span class="mi">60</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">recheck_account_existence</span> <span class="o">=</span> \
</span><span class='line'>            <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;recheck_account_existence&#39;</span><span class="p">,</span> <span class="mi">60</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">allow_account_management</span> <span class="o">=</span> \
</span><span class='line'>            <span class="n">config_true_value</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;allow_account_management&#39;</span><span class="p">,</span> <span class="s">&#39;no&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">object_post_as_copy</span> <span class="o">=</span> \
</span><span class='line'>            <span class="n">config_true_value</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;object_post_as_copy&#39;</span><span class="p">,</span> <span class="s">&#39;true&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">object_ring</span> <span class="o">=</span> <span class="n">object_ring</span> <span class="ow">or</span> <span class="n">Ring</span><span class="p">(</span><span class="n">swift_dir</span><span class="p">,</span> <span class="n">ring_name</span><span class="o">=</span><span class="s">&#39;object&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">container_ring</span> <span class="o">=</span> <span class="n">container_ring</span> <span class="ow">or</span> <span class="n">Ring</span><span class="p">(</span><span class="n">swift_dir</span><span class="p">,</span>
</span><span class='line'>                                                     <span class="n">ring_name</span><span class="o">=</span><span class="s">&#39;container&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">account_ring</span> <span class="o">=</span> <span class="n">account_ring</span> <span class="ow">or</span> <span class="n">Ring</span><span class="p">(</span><span class="n">swift_dir</span><span class="p">,</span>
</span><span class='line'>                                                 <span class="n">ring_name</span><span class="o">=</span><span class="s">&#39;account&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">memcache</span> <span class="o">=</span> <span class="n">memcache</span>
</span><span class='line'>        <span class="n">mimetypes</span><span class="o">.</span><span class="n">init</span><span class="p">(</span><span class="n">mimetypes</span><span class="o">.</span><span class="n">knownfiles</span> <span class="o">+</span>
</span><span class='line'>                       <span class="p">[</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">swift_dir</span><span class="p">,</span> <span class="s">&#39;mime.types&#39;</span><span class="p">)])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">account_autocreate</span> <span class="o">=</span> \
</span><span class='line'>            <span class="n">config_true_value</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;account_autocreate&#39;</span><span class="p">,</span> <span class="s">&#39;no&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">expiring_objects_account</span> <span class="o">=</span> \
</span><span class='line'>            <span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;auto_create_account_prefix&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="s">&#39;.&#39;</span><span class="p">)</span> <span class="o">+</span> \
</span><span class='line'>            <span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;expiring_objects_account_name&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="s">&#39;expiring_objects&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">expiring_objects_container_divisor</span> <span class="o">=</span> \
</span><span class='line'>            <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;expiring_objects_container_divisor&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="mi">86400</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">max_containers_per_account</span> <span class="o">=</span> \
</span><span class='line'>            <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;max_containers_per_account&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">max_containers_whitelist</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>            <span class="n">a</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;max_containers_whitelist&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">strip</span><span class="p">()]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">deny_host_headers</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>            <span class="n">host</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">host</span> <span class="ow">in</span>
</span><span class='line'>            <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;deny_host_headers&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="n">host</span><span class="o">.</span><span class="n">strip</span><span class="p">()]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">rate_limit_after_segment</span> <span class="o">=</span> \
</span><span class='line'>            <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;rate_limit_after_segment&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">rate_limit_segments_per_sec</span> <span class="o">=</span> \
</span><span class='line'>            <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;rate_limit_segments_per_sec&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">log_handoffs</span> <span class="o">=</span> <span class="n">config_true_value</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;log_handoffs&#39;</span><span class="p">,</span> <span class="s">&#39;true&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">cors_allow_origin</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>            <span class="n">a</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;cors_allow_origin&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">strip</span><span class="p">()]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">strict_cors_mode</span> <span class="o">=</span> <span class="n">config_true_value</span><span class="p">(</span>
</span><span class='line'>            <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;strict_cors_mode&#39;</span><span class="p">,</span> <span class="s">&#39;t&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">node_timings</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">timing_expiry</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;timing_expiry&#39;</span><span class="p">,</span> <span class="mi">300</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">sorting_method</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;sorting_method&#39;</span><span class="p">,</span> <span class="s">&#39;shuffle&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">max_large_object_get_time</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span>
</span><span class='line'>            <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;max_large_object_get_time&#39;</span><span class="p">,</span> <span class="s">&#39;86400&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;request_node_count&#39;</span><span class="p">,</span> <span class="s">&#39;2 * replicas&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="n">value</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">value</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">request_node_count</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">replicas</span><span class="p">:</span> <span class="n">value</span>
</span><span class='line'>        <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span> <span class="ow">and</span> <span class="n">value</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;*&#39;</span> <span class="ow">and</span> <span class="n">value</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;replicas&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">value</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">value</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">request_node_count</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">replicas</span><span class="p">:</span> <span class="n">value</span> <span class="o">*</span> <span class="n">replicas</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span>
</span><span class='line'>                <span class="s">&#39;Invalid request_node_count value: </span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">_read_affinity</span> <span class="o">=</span> <span class="n">read_affinity</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;read_affinity&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">read_affinity_sort_key</span> <span class="o">=</span> <span class="n">affinity_key_function</span><span class="p">(</span><span class="n">read_affinity</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">ValueError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># make the message a little more useful</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Invalid read_affinity value: </span><span class="si">%r</span><span class="s"> (</span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span>
</span><span class='line'>                             <span class="p">(</span><span class="n">read_affinity</span><span class="p">,</span> <span class="n">err</span><span class="o">.</span><span class="n">message</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">write_affinity</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;write_affinity&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">write_affinity_is_local_fn</span> \
</span><span class='line'>                <span class="o">=</span> <span class="n">affinity_locality_predicate</span><span class="p">(</span><span class="n">write_affinity</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">ValueError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># make the message a little more useful</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Invalid write_affinity value: </span><span class="si">%r</span><span class="s"> (</span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span>
</span><span class='line'>                             <span class="p">(</span><span class="n">write_affinity</span><span class="p">,</span> <span class="n">err</span><span class="o">.</span><span class="n">message</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;write_affinity_node_count&#39;</span><span class="p">,</span>
</span><span class='line'>                         <span class="s">&#39;2 * replicas&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="n">value</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">value</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">write_affinity_node_count</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">replicas</span><span class="p">:</span> <span class="n">value</span>
</span><span class='line'>        <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span> <span class="ow">and</span> <span class="n">value</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;*&#39;</span> <span class="ow">and</span> <span class="n">value</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;replicas&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">value</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">value</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">write_affinity_node_count</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">replicas</span><span class="p">:</span> <span class="n">value</span> <span class="o">*</span> <span class="n">replicas</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span>
</span><span class='line'>                <span class="s">&#39;Invalid write_affinity_node_count value: </span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
</span><span class='line'>        <span class="c"># swift_owner_headers are stripped by the account and container</span>
</span><span class='line'>        <span class="c"># controllers; we should extend header stripping to object controller</span>
</span><span class='line'>        <span class="c"># when a privileged object header is implemented.</span>
</span><span class='line'>        <span class="n">swift_owner_headers</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span>
</span><span class='line'>            <span class="s">&#39;swift_owner_headers&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;x-container-read, x-container-write, &#39;</span>
</span><span class='line'>            <span class="s">&#39;x-container-sync-key, x-container-sync-to, &#39;</span>
</span><span class='line'>            <span class="s">&#39;x-account-meta-temp-url-key, x-account-meta-temp-url-key-2, &#39;</span>
</span><span class='line'>            <span class="s">&#39;x-account-access-control&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">swift_owner_headers</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>            <span class="n">name</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">title</span><span class="p">()</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">swift_owner_headers</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="n">name</span><span class="o">.</span><span class="n">strip</span><span class="p">()]</span>
</span><span class='line'>        <span class="c"># Initialization was successful, so now apply the client chunk size</span>
</span><span class='line'>        <span class="c"># parameter as the default read / write buffer size for the network</span>
</span><span class='line'>        <span class="c"># sockets.</span>
</span><span class='line'>        <span class="c">#</span>
</span><span class='line'>        <span class="c"># NOTE WELL: This is a class setting, so until we get set this on a</span>
</span><span class='line'>        <span class="c"># per-connection basis, this affects reading and writing on ALL</span>
</span><span class='line'>        <span class="c"># sockets, those between the proxy servers and external clients, and</span>
</span><span class='line'>        <span class="c"># those between the proxy servers and the other internal servers.</span>
</span><span class='line'>        <span class="c">#</span>
</span><span class='line'>        <span class="c"># ** Because it affects the client as well, currently, we use the</span>
</span><span class='line'>        <span class="c"># client chunk size as the govenor and not the object chunk size.</span>
</span><span class='line'>        <span class="n">socket</span><span class="o">.</span><span class="n">_fileobject</span><span class="o">.</span><span class="n">default_bufsize</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">client_chunk_size</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">expose_info</span> <span class="o">=</span> <span class="n">config_true_value</span><span class="p">(</span>
</span><span class='line'>            <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;expose_info&#39;</span><span class="p">,</span> <span class="s">&#39;yes&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">disallowed_sections</span> <span class="o">=</span> <span class="n">list_from_csv</span><span class="p">(</span>
</span><span class='line'>            <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;disallowed_sections&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">admin_key</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;admin_key&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>        <span class="n">register_swift_info</span><span class="p">(</span>
</span><span class='line'>            <span class="n">version</span><span class="o">=</span><span class="n">swift_version</span><span class="p">,</span>
</span><span class='line'>            <span class="n">strict_cors_mode</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">strict_cors_mode</span><span class="p">,</span>
</span><span class='line'>            <span class="o">**</span><span class="n">constraints</span><span class="o">.</span><span class="n">EFFECTIVE_CONSTRAINTS</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>proxy server的初始化函数，具体配置的说明可以参考<a href="http://docs.openstack.org/havana/config-reference/content/proxy-server-conf.html">这里</a>。</p>

<h3>check_config</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">check_config</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Check the configuration for possible errors</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_read_affinity</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">sorting_method</span> <span class="o">!=</span> <span class="s">&#39;affinity&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s">&quot;sorting_method is set to &#39;</span><span class="si">%s</span><span class="s">&#39;, not &#39;affinity&#39;; &quot;</span>
</span><span class='line'>                             <span class="s">&quot;read_affinity setting will have no effect.&quot;</span> <span class="o">%</span>
</span><span class='line'>                             <span class="bp">self</span><span class="o">.</span><span class="n">sorting_method</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>proxy server初始化后被调用的方法，检查proxy的read_affinity配置和排序方法设置不一致时，记录警告日志。</p>

<h3>call方法</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">start_response</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        WSGI entry point.</span>
</span><span class='line'><span class="sd">        Wraps env in swob.Request object and passes it down.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param env: WSGI environment dictionary</span>
</span><span class='line'><span class="sd">        :param start_response: WSGI callable</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">memcache</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">memcache</span> <span class="o">=</span> <span class="n">cache_from_env</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>            <span class="n">req</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">update_request</span><span class="p">(</span><span class="n">Request</span><span class="p">(</span><span class="n">env</span><span class="p">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">handle_request</span><span class="p">(</span><span class="n">req</span><span class="p">)(</span><span class="n">env</span><span class="p">,</span> <span class="n">start_response</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">UnicodeError</span><span class="p">:</span>
</span><span class='line'>            <span class="n">err</span> <span class="o">=</span> <span class="n">HTTPPreconditionFailed</span><span class="p">(</span>
</span><span class='line'>                <span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">,</span> <span class="n">body</span><span class="o">=</span><span class="s">&#39;Invalid UTF8 or contains NULL&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">err</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">start_response</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="p">(</span><span class="ne">Exception</span><span class="p">,</span> <span class="n">Timeout</span><span class="p">):</span>
</span><span class='line'>            <span class="n">start_response</span><span class="p">(</span><span class="s">&#39;500 Server Error&#39;</span><span class="p">,</span>
</span><span class='line'>                           <span class="p">[(</span><span class="s">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s">&#39;text/plain&#39;</span><span class="p">)])</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[</span><span class="s">&#39;Internal server error.</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>9~10: 检查memcache缓存是否为空，如果为空的话就从上下文中获取，由于proxy-server在pipeline中是最后面，如果pipeline前面配置了memcache中间件的话，就可以从上下文中取到。</li>
<li>12: 调用update_request方法，后面会介绍。</li>
<li>13: 调用handle_request方法，后面会介绍，最后返回response。</li>
<li>14~17: 捕获UnicodeError并返回412。</li>
<li>18~21: 捕获Timeout和其他异常并返回500。</li>
</ul>


<h3>update_request</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">update_request</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;x-storage-token&#39;</span> <span class="ow">in</span> <span class="n">req</span><span class="o">.</span><span class="n">headers</span> <span class="ow">and</span> \
</span><span class='line'>                <span class="s">&#39;x-auth-token&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="p">:</span>
</span><span class='line'>            <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;x-auth-token&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;x-storage-token&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">req</span>
</span></code></pre></td></tr></table></div></figure>


<p>该方法是将requeset中的x-auth-token的header替换为x-storage-token的header。</p>

<h3>handle_request</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">handle_request</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Entry point for proxy server.</span>
</span><span class='line'><span class="sd">        Should return a WSGI-style callable (such as swob.Response).</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param req: swob.Request object</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">set_statsd_prefix</span><span class="p">(</span><span class="s">&#39;proxy-server&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">req</span><span class="o">.</span><span class="n">content_length</span> <span class="ow">and</span> <span class="n">req</span><span class="o">.</span><span class="n">content_length</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;errors&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">HTTPBadRequest</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">,</span>
</span><span class='line'>                                      <span class="n">body</span><span class="o">=</span><span class="s">&#39;Invalid Content-Length&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="ow">not</span> <span class="n">check_utf8</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">path_info</span><span class="p">):</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;errors&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">HTTPPreconditionFailed</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">,</span> <span class="n">body</span><span class="o">=</span><span class="s">&#39;Invalid UTF8 or contains NULL&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">except</span> <span class="ne">UnicodeError</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;errors&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">HTTPPreconditionFailed</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">,</span> <span class="n">body</span><span class="o">=</span><span class="s">&#39;Invalid UTF8 or contains NULL&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>8: 在log中设置&#8217;proxy-server&#8217;前缀。</li>
<li>10~13: 检查request中content length如果有且长度为0，则返回500。</li>
<li>15~23  : 检查url格式是否utf-8，如果不是则返回412。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                <span class="n">controller</span><span class="p">,</span> <span class="n">path_parts</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_controller</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>                <span class="n">p</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">path_info</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;errors&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">HTTPNotFound</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="n">controller</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;errors&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">HTTPPreconditionFailed</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">,</span> <span class="n">body</span><span class="o">=</span><span class="s">&#39;Bad URL&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">deny_host_headers</span> <span class="ow">and</span> \
</span><span class='line'>                    <span class="n">req</span><span class="o">.</span><span class="n">host</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">deny_host_headers</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">HTTPForbidden</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">,</span> <span class="n">body</span><span class="o">=</span><span class="s">&#39;Invalid host header&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>2～5: 调用get_controller方法(后面会介绍)，通过url获取对应的controller类和url中通过&#8217;/&lsquo;符号分割的各个部分。</li>
<li>6~8: 捕获ValueError并返回404。</li>
<li>9~11: 如果controller类为空则返回404。</li>
<li>12~14: 如果proxy中有定义deny_host_headers(禁止访问的ip），并且request的ip与禁止访问的ip一致，则返回403。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">set_statsd_prefix</span><span class="p">(</span><span class="s">&#39;proxy-server.&#39;</span> <span class="o">+</span>
</span><span class='line'>                                          <span class="n">controller</span><span class="o">.</span><span class="n">server_type</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>
</span><span class='line'>            <span class="n">controller</span> <span class="o">=</span> <span class="n">controller</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">path_parts</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="s">&#39;swift.trans_id&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># if this wasn&#39;t set by an earlier middleware, set it now</span>
</span><span class='line'>                <span class="n">trans_id</span> <span class="o">=</span> <span class="n">generate_trans_id</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">trans_id_suffix</span><span class="p">)</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;swift.trans_id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">trans_id</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">txn_id</span> <span class="o">=</span> <span class="n">trans_id</span>
</span><span class='line'>            <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;x-trans-id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;swift.trans_id&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="n">controller</span><span class="o">.</span><span class="n">trans_id</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;swift.trans_id&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">client_ip</span> <span class="o">=</span> <span class="n">get_remote_client</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>1～2: 日志加上controller名字前缀。</li>
<li>3: 通过controller类实例化controller对象。</li>
<li>4~10: 如果swift.trans_id没有在request的上下文中，则重新生成trans_id，并设置在上下文、日志、header和controller中。</li>
<li>11: 调用get_remote_client方法(后面介绍)，先判断header中是否有&#8217;x-cluster-client-ip&#8217;，如果没有再去获取header中的&#8217;x-forwarded-for&#8217;，还是没有的话就从request中的remote_addr取值，得到client_ip。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                <span class="n">handler</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">controller</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">method</span><span class="p">)</span>
</span><span class='line'>                <span class="nb">getattr</span><span class="p">(</span><span class="n">handler</span><span class="p">,</span> <span class="s">&#39;publicly_accessible&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">except</span> <span class="ne">AttributeError</span><span class="p">:</span>
</span><span class='line'>                <span class="n">allowed_methods</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">controller</span><span class="p">,</span> <span class="s">&#39;allowed_methods&#39;</span><span class="p">,</span> <span class="nb">set</span><span class="p">())</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">HTTPMethodNotAllowed</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;Allow&#39;</span><span class="p">:</span> <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">allowed_methods</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>2~3: 通过request的method，在controller得到一个名字相同，并且有&#8217;public&#8217;标签的方法对象handler。</li>
<li>4~7: 如果获取不到对应的public方法，则打印出controller中所有public方法并返回405。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="k">if</span> <span class="s">&#39;swift.authorize&#39;</span> <span class="ow">in</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># We call authorize before the handler, always. If authorized,</span>
</span><span class='line'>                <span class="c"># we remove the swift.authorize hook so isn&#39;t ever called</span>
</span><span class='line'>                <span class="c"># again. If not authorized, we return the denial unless the</span>
</span><span class='line'>                <span class="c"># controller&#39;s method indicates it&#39;d like to gather more</span>
</span><span class='line'>                <span class="c"># information and try again later.</span>
</span><span class='line'>                <span class="n">resp</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;swift.authorize&#39;</span><span class="p">](</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="ow">not</span> <span class="n">resp</span><span class="p">:</span>
</span><span class='line'>                    <span class="c"># No resp means authorized, no delayed recheck required.</span>
</span><span class='line'>                    <span class="k">del</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;swift.authorize&#39;</span><span class="p">]</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="c"># Response indicates denial, but we might delay the denial</span>
</span><span class='line'>                    <span class="c"># and recheck later. If not delayed, return the error now.</span>
</span><span class='line'>                    <span class="k">if</span> <span class="ow">not</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">handler</span><span class="p">,</span> <span class="s">&#39;delay_denial&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
</span><span class='line'>                        <span class="k">return</span> <span class="n">resp</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果request的上下文中有swift.authorize，则调用这个方法进行认证。<br/>
如果没有返回结果证明之前已经认证通过了，后面的请求不需要再认证，将&#8217;swift.authorize&#8217;从上下文去掉。<br/>
如果有Response返回则表示认证不通过，会先检查是否有延迟禁止的配置，如果没有返回认证不通过的response，如果有则会等后面再重新确认。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="c"># Save off original request method (GET, POST, etc.) in case it</span>
</span><span class='line'>            <span class="c"># gets mutated during handling.  This way logging can display the</span>
</span><span class='line'>            <span class="c"># method the client actually sent.</span>
</span><span class='line'>            <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;swift.orig_req_method&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">method</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">handler</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="n">HTTPException</span> <span class="k">as</span> <span class="n">error_response</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">error_response</span>
</span><span class='line'>        <span class="k">except</span> <span class="p">(</span><span class="ne">Exception</span><span class="p">,</span> <span class="n">Timeout</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="n">_</span><span class="p">(</span><span class="s">&#39;ERROR Unhandled exception in request&#39;</span><span class="p">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">HTTPServerError</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>4~5: 在日志中记录原始的request方法，防止请求在传播过程中发生突变http请求方法发生改变。</li>
<li>6~10: 捕获异常，记录日志。</li>
</ul>


<h3>get_controller</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">get_controller</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Get the controller to handle a request.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param path: path from request</span>
</span><span class='line'><span class="sd">        :returns: tuple of (controller class, path dictionary)</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :raises: ValueError (thrown by split_path) if given invalid path</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">path</span> <span class="o">==</span> <span class="s">&#39;/info&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">d</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">version</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">expose_info</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">expose_info</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">disallowed_sections</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">disallowed_sections</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">admin_key</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">admin_key</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">InfoController</span><span class="p">,</span> <span class="n">d</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">version</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">split_path</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="n">d</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">version</span><span class="o">=</span><span class="n">version</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">account_name</span><span class="o">=</span><span class="n">account</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">container_name</span><span class="o">=</span><span class="n">container</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">object_name</span><span class="o">=</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">obj</span> <span class="ow">and</span> <span class="n">container</span> <span class="ow">and</span> <span class="n">account</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">ObjectController</span><span class="p">,</span> <span class="n">d</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">container</span> <span class="ow">and</span> <span class="n">account</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">ContainerController</span><span class="p">,</span> <span class="n">d</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">account</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">container</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">obj</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">AccountController</span><span class="p">,</span> <span class="n">d</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span><span class="p">,</span> <span class="n">d</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>10～15: 如果url是&#8217;info&#8217;，则返回InController和controller字典参数，expose_info表示是否暴露信息，disallowed_sections表示不允许暴露的字段列表，比如container_qutoas, tempurl等。</li>
<li>17～28: 根据url判断是account、container还是object，返回对应的controller和字典参数。</li>
</ul>


<h3>sort_nodes</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">sort_nodes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nodes</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        Sorts nodes in-place (and returns the sorted list) according to</span>
</span><span class='line'><span class="sd">        the configured strategy. The default &quot;sorting&quot; is to randomly</span>
</span><span class='line'><span class="sd">        shuffle the nodes. If the &quot;timing&quot; strategy is chosen, the nodes</span>
</span><span class='line'><span class="sd">        are sorted according to the stored timing data.</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>        <span class="c"># In the case of timing sorting, shuffling ensures that close timings</span>
</span><span class='line'>        <span class="c"># (ie within the rounding resolution) won&#39;t prefer one over another.</span>
</span><span class='line'>        <span class="c"># Python&#39;s sort is stable (http://wiki.python.org/moin/HowTo/Sorting/)</span>
</span><span class='line'>        <span class="n">shuffle</span><span class="p">(</span><span class="n">nodes</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">sorting_method</span> <span class="o">==</span> <span class="s">&#39;timing&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">def</span> <span class="nf">key_func</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
</span><span class='line'>                <span class="n">timing</span><span class="p">,</span> <span class="n">expires</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">node_timings</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">node</span><span class="p">[</span><span class="s">&#39;ip&#39;</span><span class="p">],</span> <span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">timing</span> <span class="k">if</span> <span class="n">expires</span> <span class="o">&gt;</span> <span class="n">now</span> <span class="k">else</span> <span class="o">-</span><span class="mf">1.0</span>
</span><span class='line'>            <span class="n">nodes</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">key_func</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">sorting_method</span> <span class="o">==</span> <span class="s">&#39;affinity&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">nodes</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">read_affinity_sort_key</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">nodes</span>
</span></code></pre></td></tr></table></div></figure>


<p>节点的排序方法，将节点根据配置的排序策略进行排序。<br/>
* 11: 将节点顺序打乱，确保节点不会按照时间排好序。
* 12～18: 如果配置的排序策略是按时间排序，则定义一个（节点）按时间排序的方法让节点按照这个方法排序，如果节点已过期则timing为-0.1，即会被排到最后。
* 19～20: 如果配置的排序策略是按亲和力排序，则节点按照亲和力方法排序。</p>

<h3>set_node_timing</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">set_node_timing</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">timing</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">sorting_method</span> <span class="o">!=</span> <span class="s">&#39;timing&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>
</span><span class='line'>        <span class="n">timing</span> <span class="o">=</span> <span class="nb">round</span><span class="p">(</span><span class="n">timing</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>  <span class="c"># sort timings to the millisecond</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">node_timings</span><span class="p">[</span><span class="n">node</span><span class="p">[</span><span class="s">&#39;ip&#39;</span><span class="p">]]</span> <span class="o">=</span> <span class="p">(</span><span class="n">timing</span><span class="p">,</span> <span class="n">now</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">timing_expiry</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>2～3: 如果配置的排序策略不是&#8217;timing&#8217;，则直接返回不做设置。</li>
<li>4～6: 设置单个节点的排序时间过期时间。</li>
</ul>


<h3>error_limited</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">error_limited</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Check if the node is currently error limited.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param node: dictionary of node to check</span>
</span><span class='line'><span class="sd">        :returns: True if error limited, False otherwise</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;errors&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;last_error&#39;</span> <span class="ow">in</span> <span class="n">node</span> <span class="ow">and</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;last_error&#39;</span><span class="p">]</span> <span class="o">&lt;</span> \
</span><span class='line'>                <span class="n">now</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">error_suppression_interval</span><span class="p">:</span>
</span><span class='line'>            <span class="k">del</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;last_error&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="k">if</span> <span class="s">&#39;errors&#39;</span> <span class="ow">in</span> <span class="n">node</span><span class="p">:</span>
</span><span class='line'>                <span class="k">del</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;errors&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>        <span class="n">limited</span> <span class="o">=</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;errors&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">error_suppression_limit</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">limited</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span>
</span><span class='line'>                <span class="n">_</span><span class="p">(</span><span class="s">&#39;Node error limited </span><span class="si">%(ip)s</span><span class="s">:</span><span class="si">%(port)s</span><span class="s"> (</span><span class="si">%(device)s</span><span class="s">)&#39;</span><span class="p">),</span> <span class="n">node</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">limited</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>8～10: 如果节点里面没有&#8217;errors&#8217;选项，则返回false。</li>
<li>11～10: 如果节点里面的&#8217;last_error&#8217;选项不正确，则删除该选项和errors选项，并返回false。</li>
<li>12～15: 判断节点的错误个数是否超过配置的错误限制，如果超过则记录日志，并返回是否超限制的结果。</li>
</ul>


<h3>error_limit</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">error_limit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Mark a node as error limited. This immediately pretends the</span>
</span><span class='line'><span class="sd">        node received enough errors to trigger error suppression. Use</span>
</span><span class='line'><span class="sd">        this for errors like Insufficient Storage. For other errors</span>
</span><span class='line'><span class="sd">        use :func:`error_occurred`.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param node: dictionary of node to error limit</span>
</span><span class='line'><span class="sd">        :param msg: error message</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">node</span><span class="p">[</span><span class="s">&#39;errors&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">error_suppression_limit</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">node</span><span class="p">[</span><span class="s">&#39;last_error&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="n">_</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%(msg)s</span><span class="s"> </span><span class="si">%(ip)s</span><span class="s">:</span><span class="si">%(port)s</span><span class="s">/</span><span class="si">%(device)s</span><span class="s">&#39;</span><span class="p">),</span>
</span><span class='line'>                          <span class="p">{</span><span class="s">&#39;msg&#39;</span><span class="p">:</span> <span class="n">msg</span><span class="p">,</span> <span class="s">&#39;ip&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;ip&#39;</span><span class="p">],</span>
</span><span class='line'>                          <span class="s">&#39;port&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;port&#39;</span><span class="p">],</span> <span class="s">&#39;device&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;device&#39;</span><span class="p">]})</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>11～14: 记录一个节点的错误信息:错误个数，最后错误的时间，并记录日志。</li>
</ul>


<h3>error_occurred</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">error_occurred</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Handle logging, and handling of errors.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param node: dictionary of node to handle errors for</span>
</span><span class='line'><span class="sd">        :param msg: error message</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">node</span><span class="p">[</span><span class="s">&#39;errors&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;errors&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">node</span><span class="p">[</span><span class="s">&#39;last_error&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="n">_</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%(msg)s</span><span class="s"> </span><span class="si">%(ip)s</span><span class="s">:</span><span class="si">%(port)s</span><span class="s">/</span><span class="si">%(device)s</span><span class="s">&#39;</span><span class="p">),</span>
</span><span class='line'>                          <span class="p">{</span><span class="s">&#39;msg&#39;</span><span class="p">:</span> <span class="n">msg</span><span class="p">,</span> <span class="s">&#39;ip&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;ip&#39;</span><span class="p">],</span>
</span><span class='line'>                          <span class="s">&#39;port&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;port&#39;</span><span class="p">],</span> <span class="s">&#39;device&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;device&#39;</span><span class="p">]})</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>8～12: 与前面的方法类似，唯一区别是记录节点错误个数是取当前的错误个数，然后+1。</li>
</ul>


<h3>iter_nodes</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">iter_nodes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ring</span><span class="p">,</span> <span class="n">partition</span><span class="p">,</span> <span class="n">node_iter</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Yields nodes for a ring partition, skipping over error</span>
</span><span class='line'><span class="sd">        limited nodes and stopping at the configurable number of</span>
</span><span class='line'><span class="sd">        nodes. If a node yielded subsequently gets error limited, an</span>
</span><span class='line'><span class="sd">        extra node will be yielded to take its place.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        Note that if you&#39;re going to iterate over this concurrently from</span>
</span><span class='line'><span class="sd">        multiple greenthreads, you&#39;ll want to use a</span>
</span><span class='line'><span class="sd">        swift.common.utils.GreenthreadSafeIterator to serialize access.</span>
</span><span class='line'><span class="sd">        Otherwise, you may get ValueErrors from concurrent access. (You also</span>
</span><span class='line'><span class="sd">        may not, depending on how logging is configured, the vagaries of</span>
</span><span class='line'><span class="sd">        socket IO and eventlet, and the phase of the moon.)</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param ring: ring to get yield nodes from</span>
</span><span class='line'><span class="sd">        :param partition: ring partition to yield nodes for</span>
</span><span class='line'><span class="sd">        :param node_iter: optional iterable of nodes to try. Useful if you</span>
</span><span class='line'><span class="sd">            want to filter or reorder the nodes.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">part_nodes</span> <span class="o">=</span> <span class="n">ring</span><span class="o">.</span><span class="n">get_part_nodes</span><span class="p">(</span><span class="n">partition</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">node_iter</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="n">node_iter</span> <span class="o">=</span> <span class="n">itertools</span><span class="o">.</span><span class="n">chain</span><span class="p">(</span><span class="n">part_nodes</span><span class="p">,</span>
</span><span class='line'>                                        <span class="n">ring</span><span class="o">.</span><span class="n">get_more_nodes</span><span class="p">(</span><span class="n">partition</span><span class="p">))</span>
</span><span class='line'>        <span class="n">num_primary_nodes</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">part_nodes</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Use of list() here forcibly yanks the first N nodes (the primary</span>
</span><span class='line'>        <span class="c"># nodes) from node_iter, so the rest of its values are handoffs.</span>
</span><span class='line'>        <span class="n">primary_nodes</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">sort_nodes</span><span class="p">(</span>
</span><span class='line'>            <span class="nb">list</span><span class="p">(</span><span class="n">itertools</span><span class="o">.</span><span class="n">islice</span><span class="p">(</span><span class="n">node_iter</span><span class="p">,</span> <span class="n">num_primary_nodes</span><span class="p">)))</span>
</span><span class='line'>        <span class="n">handoff_nodes</span> <span class="o">=</span> <span class="n">node_iter</span>
</span><span class='line'>        <span class="n">nodes_left</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">request_node_count</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">primary_nodes</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>20～24: 根据partition获取相应的节点，如果node_iter为空，则将之前取到的节点和get_more_nodes节点连接起来为node_iter赋值，并取得节点个数。</li>
<li>28～31: 将node_iter的节点重新排序，并取前面部分作为主要nodes，handoff_nodes为node_iter剩下的nodes， nodes_left为剩下的节点个数。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">primary_nodes</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">error_limited</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
</span><span class='line'>                <span class="k">yield</span> <span class="n">node</span>
</span><span class='line'>                <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">error_limited</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">nodes_left</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">nodes_left</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                        <span class="k">return</span>
</span><span class='line'>        <span class="n">handoffs</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">handoff_nodes</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">error_limited</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
</span><span class='line'>                <span class="n">handoffs</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">log_handoffs</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;handoff_count&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span>
</span><span class='line'>                        <span class="s">&#39;Handoff requested (</span><span class="si">%d</span><span class="s">)&#39;</span> <span class="o">%</span> <span class="n">handoffs</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">handoffs</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">primary_nodes</span><span class="p">):</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;handoff_all_count&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="k">yield</span> <span class="n">node</span>
</span><span class='line'>                <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">error_limited</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">nodes_left</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">nodes_left</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                        <span class="k">return</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>1～7: 遍历每个主节点，如果节点没有错误则返回该节点，剩余节点数-1,如果剩余节点数&lt;=0,则直接返回。</li>
<li>8～22: 如果主节点中都有错误，则从剩余节点中查找满足条件的节点，查找方法和主节点查找方法雷同，只是多了一些日志的记录。</li>
</ul>


<h3>exception_occurred</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">exception_occurred</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">typ</span><span class="p">,</span> <span class="n">additional_info</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Handle logging of generic exceptions.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param node: dictionary of node to log the error for</span>
</span><span class='line'><span class="sd">        :param typ: server type</span>
</span><span class='line'><span class="sd">        :param additional_info: additional information to log</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span>
</span><span class='line'>            <span class="n">_</span><span class="p">(</span><span class="s">&#39;ERROR with </span><span class="si">%(type)s</span><span class="s"> server </span><span class="si">%(ip)s</span><span class="s">:</span><span class="si">%(port)s</span><span class="s">/</span><span class="si">%(device)s</span><span class="s"> re: &#39;</span>
</span><span class='line'>              <span class="s">&#39;</span><span class="si">%(info)s</span><span class="s">&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="p">{</span><span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="n">typ</span><span class="p">,</span> <span class="s">&#39;ip&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;ip&#39;</span><span class="p">],</span> <span class="s">&#39;port&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;port&#39;</span><span class="p">],</span>
</span><span class='line'>             <span class="s">&#39;device&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;device&#39;</span><span class="p">],</span> <span class="s">&#39;info&#39;</span><span class="p">:</span> <span class="n">additional_info</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>9～13: 当异常发生的时候，记录异常日志。</li>
</ul>


<h3>modify_wsgi_pipeline</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">modify_wsgi_pipeline</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pipe</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Called during WSGI pipeline creation. Modifies the WSGI pipeline</span>
</span><span class='line'><span class="sd">        context to ensure that mandatory middleware is present in the pipeline.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param pipe: A PipelineWrapper object</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">pipeline_was_modified</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">filter_spec</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="n">required_filters</span><span class="p">):</span>
</span><span class='line'>            <span class="n">filter_name</span> <span class="o">=</span> <span class="n">filter_spec</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">filter_name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">pipe</span><span class="p">:</span>
</span><span class='line'>                <span class="n">afters</span> <span class="o">=</span> <span class="n">filter_spec</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;after_fn&#39;</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">_junk</span><span class="p">:</span> <span class="p">[])(</span><span class="n">pipe</span><span class="p">)</span>
</span><span class='line'>                <span class="n">insert_at</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">after</span> <span class="ow">in</span> <span class="n">afters</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                        <span class="n">insert_at</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">insert_at</span><span class="p">,</span> <span class="n">pipe</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">after</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>  <span class="c"># not in pipeline; ignore it</span>
</span><span class='line'>                        <span class="k">pass</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span>
</span><span class='line'>                    <span class="s">&#39;Adding required filter </span><span class="si">%s</span><span class="s"> to pipeline at position </span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span>
</span><span class='line'>                    <span class="p">(</span><span class="n">filter_name</span><span class="p">,</span> <span class="n">insert_at</span><span class="p">))</span>
</span><span class='line'>                <span class="n">ctx</span> <span class="o">=</span> <span class="n">pipe</span><span class="o">.</span><span class="n">create_filter</span><span class="p">(</span><span class="n">filter_name</span><span class="p">)</span>
</span><span class='line'>                <span class="n">pipe</span><span class="o">.</span><span class="n">insert_filter</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="n">insert_at</span><span class="p">)</span>
</span><span class='line'>                <span class="n">pipeline_was_modified</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">pipeline_was_modified</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&quot;Pipeline was modified. New pipeline is </span><span class="se">\&quot;</span><span class="si">%s</span><span class="se">\&quot;</span><span class="s">.&quot;</span><span class="p">,</span>
</span><span class='line'>                             <span class="n">pipe</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&quot;Pipeline is </span><span class="se">\&quot;</span><span class="si">%s</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pipe</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>8～24: 遍历定义好的中间件required_filters，如果该中间件没有在pipeline中，则将该中间件插入到pipeline，插入位置根据中间件的atfer_fn方法得到。</li>
<li>26～31: 记录人日志信息。</li>
</ul>


<h3>required_filters</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># List of entry points for mandatory middlewares.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Fields:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># &quot;name&quot; (required) is the entry point name from setup.py.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># &quot;after_fn&quot; (optional) a function that takes a PipelineWrapper object as its</span>
</span><span class='line'><span class="c"># single argument and returns a list of middlewares that this middleware</span>
</span><span class='line'><span class="c"># should come after. Any middlewares in the returned list that are not present</span>
</span><span class='line'><span class="c"># in the pipeline will be ignored, so you can safely name optional middlewares</span>
</span><span class='line'><span class="c"># to come after. For example, [&quot;catch_errors&quot;, &quot;bulk&quot;] would install this</span>
</span><span class='line'><span class="c"># middleware after catch_errors and bulk if both were present, but if bulk</span>
</span><span class='line'><span class="c"># were absent, would just install it after catch_errors.</span>
</span><span class='line'>
</span><span class='line'><span class="n">required_filters</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;catch_errors&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;gatekeeper&#39;</span><span class="p">,</span>
</span><span class='line'>     <span class="s">&#39;after_fn&#39;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">pipe</span><span class="p">:</span> <span class="p">([</span><span class="s">&#39;catch_errors&#39;</span><span class="p">]</span>
</span><span class='line'>                               <span class="k">if</span> <span class="n">pipe</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&quot;catch_errors&quot;</span><span class="p">)</span>
</span><span class='line'>                               <span class="k">else</span> <span class="p">[])},</span>
</span><span class='line'>    <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;dlo&#39;</span><span class="p">,</span> <span class="s">&#39;after_fn&#39;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">_junk</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;catch_errors&#39;</span><span class="p">,</span> <span class="s">&#39;gatekeeper&#39;</span><span class="p">,</span>
</span><span class='line'>                                               <span class="s">&#39;proxy_logging&#39;</span><span class="p">]}]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>modify_wsgi_pipeline方法用到的required_filters。</li>
</ul>


<h3>app_factory</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">app_factory</span><span class="p">(</span><span class="n">global_conf</span><span class="p">,</span> <span class="o">**</span><span class="n">local_conf</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;paste.deploy app factory for creating WSGI proxy apps.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">conf</span> <span class="o">=</span> <span class="n">global_conf</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'>    <span class="n">conf</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">local_conf</span><span class="p">)</span>
</span><span class='line'>    <span class="n">app</span> <span class="o">=</span> <span class="n">Application</span><span class="p">(</span><span class="n">conf</span><span class="p">)</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">check_config</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">app</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>proxy server的工厂方法，初始化server对象并检查配置，然后返回创建好的对象。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[swift源码详解（一）——开始]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/04/19/swift-code-explain-total/"/>
    <updated>2014-04-19T17:19:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/04/19/swift-code-explain-total</id>
    <content type="html"><![CDATA[<p>从今天开始准备仔细再看一下swift的源码，然后把理解的内容记录下来。下面是swift源码的代码结构，准备每天更新1～2个文件的代码理解，更新好的在文件名上会在下面的代码结构上有链接出现。</p>

<!--more-->


<p>
swift的源码因为不断在更新，笔记记录的代码就以2014-4-18的为准，我已经fork了一份swift源码到我github上，地址是：<a href="https://github.com/zhaozhiming/swift">https://github.com/zhaozhiming/swift</a>，代码结构如下：</p>

<ul>
<li><h3>swift</h3>

<ul>
<li><h3>account</h3>

<ul>
<li>auditor.py</li>
<li>backend.py</li>
<li>reaper.py</li>
<li>replicator.py</li>
<li>server.py</li>
<li>utils.py</li>
</ul>
</li>
<li><h3>cli</h3>

<ul>
<li>info.py</li>
<li>recon.py</li>
<li>ringbuilder.py</li>
<li>ringbuilder.py</li>
</ul>
</li>
<li><h3>common</h3>

<ul>
<li><h3>middleware</h3>

<ul>
<li>account_quotas.py</li>
<li>acl.py</li>
<li>bulk.py</li>
<li>catch_errors.py</li>
<li>cname_lookup.py</li>
<li>container_quotas.py</li>
<li>container_sync.py</li>
<li>crossdomain.py</li>
<li>dlo.py</li>
<li>domain_remap.py</li>
<li>formpost.py</li>
<li>gatekeeper.py</li>
<li>healthcheck.py</li>
<li>list_endpoints.py</li>
<li>memcache.py</li>
<li>name_check.py</li>
<li>proxy_logging.py</li>
<li>ratelimit.py</li>
<li>recon.py</li>
<li>slo.py</li>
<li>staticweb.py</li>
<li>tempauth.py</li>
<li>tempurl.py</li>
</ul>
</li>
<li><h3>ring</h3>

<ul>
<li>builder.py</li>
<li>ring.py</li>
<li>utils.py</li>
</ul>
</li>
<li>bufferedhttp.py</li>
<li>constraints.py</li>
<li>container_sync_realms.py</li>
<li>daemon.py</li>
<li>db.py</li>
<li>db_replicator.py</li>
<li>direct_client.py</li>
<li>exceptions.py</li>
<li>http.py</li>
<li>internal_client.py</li>
<li>manager.py</li>
<li>memcached.py</li>
<li>request_helpers.py</li>
<li>swob.py</li>
<li>swob.py</li>
<li>utils.py</li>
<li>wsgi.py</li>
</ul>
</li>
<li><h3>container</h3>

<ul>
<li>auditor.py</li>
<li>backend.py</li>
<li>replicator.py</li>
<li>server.py</li>
<li>sync.py</li>
<li>updater.py</li>
</ul>
</li>
<li><h3>obj</h3>

<ul>
<li>auditor.py</li>
<li>diskfile.py</li>
<li>expirer.py</li>
<li>mem_diskfile.py</li>
<li>mem_server.py</li>
<li>replicator.py</li>
<li>server.py</li>
<li>ssync_receiver.py</li>
<li>ssync_sender.py</li>
<li>updater.py</li>
</ul>
</li>
<li><h3>proxy</h3>

<ul>
<li>controllers

<ul>
<li>account.py</li>
<li><a href="http://zhaozhiming.github.io/blog/2014/05/04/swift-code-explain-3-proxy-controllers-base/">base.py</a></li>
<li>container.py</li>
<li>obj.py</li>
</ul>
</li>
<li><a href="http://zhaozhiming.github.io/blog/2014/04/20/swift-code-explain-proxy-server/">server.py</a></li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在ubunut下使用pycharm和eclipse进行python远程调试]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/04/13/python-remote-debug-setting-by-pycharm-and-eclipse-in-ubuntu/"/>
    <updated>2014-04-13T15:54:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/04/13/python-remote-debug-setting-by-pycharm-and-eclipse-in-ubuntu</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-4/pycharm_and_eclipse.jpg"></p>

<p>我比较喜欢Pycharm，因为这个是JetBrains公司出的python IDE工具，该公司下的java IDE工具——IDEA，无论从界面还是操作上都甩eclipse几条街，但项目组里有些人使用eclipse比较久了，一时让他们转pycharm比较困难，所以还是两边的设置都介绍一下吧。</p>

<!--more-->


<p></p>

<h2>pycharm远程调试</h2>

<p>pycharmd的远程调试比eclipse的简单多了，而且调试程序也比较稳定，不像eclipse那样容易出一些莫名其妙的问题，步骤如下。</p>

<ol>
<li>将pycharm安装目录下的pycharm-debug.egg文件拷贝到远程机器上（如果是python3的话就拷贝pycharm-debug-py3k.egg文件）。</li>
<li>在远程机器上安装pycharm-debug.egg，安装命令： <code>easy_install pycharm-debug.egg</code>。</li>
<li><p>在pycharm中设置断点监听配置。<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/pycharm-debug/pycharm-1.png"><br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/pycharm-debug/pycharm-2.png"><br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/pycharm-debug/pycharm-3.png"></p></li>
<li><p>启动调试监听程序。<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/pycharm-debug/pycharm-4.png"><br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/pycharm-debug/pycharm-5.png"></p></li>
<li><p>在远程机器上启动服务并发起http请求。<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-10.png"></p></li>
<li><p>pycharm监听到请求会进入断点。
<img src="http://zhaozhiming.github.io/images/post/2014-4/pycharm-debug/pycharm-6.png"></p></li>
</ol>


<p>更多关于pycharm远程调试的信息可以参阅<a href="http://www.jetbrains.com/pycharm/webhelp/remote-debugging.html">这里</a>。</p>

<h2>eclipse远程调试</h2>

<p>使用eclipse进行python远程调试，需要先在ubuntu下面安装eclipse和eclipse的python插件PyDev。</p>

<ul>
<li>Eclipse安装比较简单，直接解压下载后的eclipse包即可使用。</li>
<li><p>PyDev可以按照<a href="http://pydev.org/manual_101_install.html">官网的向导</a>进行安装。<br/>
安装完后按照下面的步骤进行远程调试。</p></li>
<li><p>在window->Preperences->PyDev->Debug中，设置debug端口，比如12306。<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-1.png"></p></li>
<li><p>新增PyDev视图。<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-2.png"><br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-3.png"></p></li>
<li><p>在Pydev试图中增加remote debug菜单。<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-4.png"><br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-5.png"></p></li>
<li><p>在远程机器的源码里面添加调试代码和断点。<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-6.png"></p></li>
<li><p>断点设置语句：<br/>
<code>pydevd.settrace('192.168.8.128', port=12306, stdoutToServer=True, stderrToServer=True)</code><br/>
注意：这里的ip是指设置了调试监听的机器ip。<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-7.png"></p></li>
<li><p>通过Pydev菜单打开调试监听。<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-8.png"><br/>
开始监听显示信息如下：<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-9.png"></p></li>
<li><p>启动远程服务并发起http请求。
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-10.png"></p></li>
<li><p>Pydev监听到请求后就会进入断点。
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-11.png"></p></li>
</ul>


<p>更多远程调试的内容可以参照Pydev的<a href="http://pydev.org/manual_adv_remote_debugger.html">官网步骤</a>。</p>
]]></content>
  </entry>
  
</feed>
