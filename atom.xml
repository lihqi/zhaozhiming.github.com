<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2018-04-29T17:02:08+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[以太坊工具包 Ethers.js 使用介绍]]></title>
    <link href="http://zhaozhiming.github.io/blog/2018/04/25/how-to-use-ethers-dot-js/"/>
    <updated>2018-04-25T20:18:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2018/04/25/how-to-use-ethers-dot-js</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2018/04/ethers.png" width="400" height="300"></p>

<p>在之前的文章介绍过，以太坊提供了两种形式的 API，一种是 <a href="https://github.com/ethereum/wiki/wiki/JSON-RPC">JSON RPC</a>，另外一种是 <a href="https://github.com/ethereum/wiki/wiki/JavaScript-API">Javascript API</a> —— 通过 Web3 这个工具包进行 API 调用，Web3 功能强大但缺点就是账号相关的 API 比较少，而且它底层用到了一些 Node 原生库的依赖，导致其在 React Native（以下简称 RN） 中使用会有一些问题，因为 Node 和 RN 是 2 个不同的环境。</p>

<p>所以今天给大家介绍另外一个功能强大的 JS 以太坊工具库——<a href="https://github.com/ethers-io/ethers.js/">Ethers.js</a>。</p>

<!--more-->


<h2>简介</h2>

<p>Ethers.js 的官方介绍是这样的——针对以太坊钱包功能完整实现的工具包，其 API 文档也十分详尽，感兴趣的同学可以看<a href="https://docs.ethers.io/ethers.js/html/">这里</a>。</p>

<p>在仓库维护上作者比较用心，issue 都能及时解答，更新也比较频繁，如果觉得这个库还不错的可以考虑给作者一些 Eth 捐赠，这是作者的以太坊账户地址：<code>0xEA517D5a070e6705Cc5467858681Ed953d285Eb9</code>。</p>

<h2>创建 / 导入钱包</h2>

<p>与 Web3 相比 Ethers.js 的账号相关 API 比较丰富，在文档介绍中，这一类 API 叫<code>钱包</code>API，钱包就是账户的意思，创建钱包有以下方式：</p>

<h3>创建随机地址的钱包</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wallet</span> <span class="o">=</span> <span class="nx">Wallet</span><span class="p">.</span><span class="nx">createRandom</span><span class="p">();</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Address: &quot;</span> <span class="o">+</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
</span><span class='line'><span class="c1">// &quot;每次都会生成不一样的钱包地址&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>通过明文私钥创建钱包</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">privateKey</span> <span class="o">=</span> <span class="s2">&quot;0x0123456789012345678901234567890123456789012345678901234567890123&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">wallet</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Wallet</span><span class="p">(</span><span class="nx">privateKey</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Address: &quot;</span> <span class="o">+</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
</span><span class='line'><span class="c1">// &quot;Address: 0x14791697260E4c9A71f18484C9f997B308e59325&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>通过助记词创建钱包</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">mnemonic</span> <span class="o">=</span> <span class="s2">&quot;radar blur cabbage chef fix engine embark joy scheme fiction master release&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">wallet</span> <span class="o">=</span> <span class="nx">Wallet</span><span class="p">.</span><span class="nx">fromMnemonic</span><span class="p">(</span><span class="nx">mnemonic</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Address: &quot;</span> <span class="o">+</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
</span><span class='line'><span class="c1">// &quot;Address: 0xaC39b311DCEb2A4b2f5d8461c1cdaF756F4F7Ae9&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>通过 keystore 创建钱包</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// keystore 是一个 json</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">json</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">keystore</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">password</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">Wallet</span><span class="p">.</span><span class="nx">fromEncryptedWallet</span><span class="p">(</span><span class="nx">json</span><span class="p">,</span> <span class="nx">password</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">wallet</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Address: &quot;</span> <span class="o">+</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// &quot;Address: 0x88a5C2d9919e46F883EB62F7b8Dd9d0CC45bc290&quot;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：这种方式在 RN 环境中执行效率非常低，在电脑上执行只要 5 秒不到，但在 RN 上要执行差不多 5 分钟。</p>

<h3>创建脑记忆的钱包</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">username</span> <span class="o">=</span> <span class="s2">&quot;support@ethers.io&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">password</span> <span class="o">=</span> <span class="s2">&quot;password123&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">Wallet</span><span class="p">.</span><span class="nx">fromBrainWallet</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">wallet</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Address: &quot;</span> <span class="o">+</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// &quot;Address: 0x7Ee9AE2a2eAF3F0df8D323d555479be562ac4905&quot;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>脑记忆方式其实就是用户名和密码的方法，同样这种方式在 RN 环境执行效率也很差。</p>

<h2>导出钱包</h2>

<p>导出钱包也是钱包应用的一个主要业务场景，分别有以下几种方式：</p>

<h3>导出明文私钥</h3>

<p>因为每个钱包对象都有一个<code>privateKey</code>属性，所以导出私钥只要直接获取这个属性就可以了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wallet</span> <span class="o">=</span> <span class="nx">Wallet</span><span class="p">.</span><span class="nx">createRandom</span><span class="p">();</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;导出私钥：&#39;</span> <span class="o">+</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">privateKey</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>导出助记词</h3>

<p>跟私钥不同，不是每个钱包对象都有助记词属性，只有通过助记词导入的钱包对象有助记词<code>mnemonic</code>属性。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">mnemonic</span> <span class="o">=</span> <span class="s2">&quot;radar blur cabbage chef fix engine embark joy scheme fiction master release&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">wallet</span> <span class="o">=</span> <span class="nx">Wallet</span><span class="p">.</span><span class="nx">fromMnemonic</span><span class="p">(</span><span class="nx">mnemonic</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;导出助记词：&#39;</span> <span class="o">+</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">mnemonic</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>导出 keystore</h3>

<p>钱包对象有一个<code>encrypt</code>方法可以导出钱包的 keystore，但该方法在 RN 环境中同样存在效率低下的问题。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">password</span> <span class="o">=</span> <span class="s2">&quot;password123&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 回调函数可以获取导出进度</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">percent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Encrypting: &quot;</span> <span class="o">+</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">percent</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;% complete&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">keystore</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">encrypt</span><span class="p">(</span><span class="nx">password</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;导出 keystore：&#39;</span> <span class="o">+</span> <span class="nx">keystore</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Provider</h2>

<p>钱包的创建是离线的，不需要依赖网络即可创建钱包地址，但如果想获取钱包的相关信息，比如金额、交易记录，又或者想广播交易的话，就需要让钱包连上以太坊的网络了。</p>

<p>在 Web3 中是用 provider 来进行网络连接的，Ethers.js 也是一样，而且 Ethers.js 提供了集成多种 Provider 的方式。</p>

<h3>Provider 类型</h3>

<ul>
<li>Etherscan Provider：连接 Etherscan API 的 provider，需要 2 个参数，一个是网络名称，一个查询 API 所需的 token（之前的文章有讲过，查询 Etherscan 的 API 时 apitoken 不是必须的，但如果没有的话会受到每秒 5 次的调用限制）。</li>
<li>Json Rpc Provider：连接本地以太坊网点的 Provider。</li>
<li>Infura Provider：连接 Infura 网络的 Provider，Infura 是一套以太坊的基础设施服务，同样有以太坊的主网络和测试网络。</li>
<li>Web3 Provider：连接已有 web3 对象的 provider。</li>
<li>Fallback Provider：连接一个可以是多种类型的 provider 集合，如果前面的 provider 有问题，会自动去连接后面的。</li>
</ul>


<h3>Provider network</h3>

<p>在 Provider 创建方法中都有一个参数<code>network</code>，它是一个字符串，代表网络名称，有如下值：</p>

<ul>
<li>homestead/mainnet：以太坊主网络</li>
<li>morden: morden 测试网络（现在已经退役了）</li>
<li>ropsten/testnet: ropsten 测试网络</li>
<li>rinkeby：rinkeby 测试网络</li>
<li>kovan：kovan 测试网络</li>
</ul>


<h3>与钱包集成</h3>

<p>在通过私钥创建钱包的方法中，除了第一个参数私钥外，还有一个可选参数就是 provider，所以我们可以这样将 provider 集成到钱包中：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">provider</span> <span class="o">=</span> <span class="nx">providers</span><span class="p">.</span><span class="nx">getDefaultProvider</span><span class="p">();</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">wallet</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Wallet</span><span class="p">(</span><span class="nx">privateKey</span><span class="p">,</span> <span class="nx">provider</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以直接通过给钱包对象的 provider 属性赋值来集成 provider。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">provider</span> <span class="o">=</span> <span class="nx">providers</span><span class="p">.</span><span class="nx">getDefaultProvider</span><span class="p">();</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">wallet</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Wallet</span><span class="p">(</span><span class="nx">privateKey</span><span class="p">);</span>
</span><span class='line'><span class="nx">wallet</span><span class="p">.</span><span class="nx">provider</span> <span class="o">=</span> <span class="nx">provider</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>智能合约</h2>

<p>关于智能合约后面我会另外写一篇文章来介绍怎么使用 Ethers.js 来实现以太坊代币的业务操作，包括获取金额和交易等。</p>

<h2>交易</h2>

<p>交易功能比较简单，在钱包对象有对应的方法：<code>sendTransaction ( transaction )</code>和<code>send ( addressOrName, amountWei [ , options ] )</code>，大家可以自行查阅文档。</p>

<h2>生成助记词</h2>

<p>还有一个比较常见的业务场景是生成助记词，Ethers.js 也很贴心地提供了这个功能：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">entropy</span> <span class="o">=</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">randomBytes</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">mnemonicTemp</span> <span class="o">=</span> <span class="nx">HDNode</span><span class="p">.</span><span class="nx">entropyToMnemonic</span><span class="p">(</span><span class="nx">entropy</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">walelt</span> <span class="o">=</span> <span class="nx">Wallet</span><span class="p">.</span><span class="nx">fromMnemonic</span><span class="p">(</span><span class="nx">mnemonicTemp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>工具类</h2>

<p>Ethers.js 还提供了一些比较常用的工具方法，比如对 BigNumber 的操作。</p>

<h3>BigNumber 计算</h3>

<p>有人可能会问为什么需要操作 BigNumber？因为以太坊的计量单位是<code>Wei</code>，一个以太币是 10<sup>18</sup> Wei，如果用普通的 JS number 对象来存储操作的话，可能会因为数据溢出而导致结果异常。</p>

<p>比如常见的业务场景是：获取钱包账户金额（以太币数量）并乘以货币单位汇率（美元或者人民币）得到最终结果。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 汇率，截止 2018-04-29，ETH 价格为 693.01 USD</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">USD_RATE</span> <span class="o">=</span> <span class="mf">693.01</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 钱包金额</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">balance</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">wallet</span><span class="p">.</span><span class="nx">getBalance</span><span class="p">();</span>
</span><span class='line'><span class="c1">// bigNumber 不能和小数进行计算，所以要先将汇率变成整数</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">rate</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">USD_RATE</span> <span class="o">*</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">balance</span><span class="p">.</span><span class="nx">mul</span><span class="p">(</span><span class="nx">rate</span><span class="p">).</span><span class="nx">div</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>BigNumber 格式化</h3>

<p>计算好了结果后，我们需要将其转换成正常的数量单位并展示到前台，还好 Ethers.js 提供了相关的方法，还可以通过不同参数展示不同格式的结果。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wei</span> <span class="o">=</span> <span class="nx">utils</span><span class="p">.</span><span class="nx">bigNumberify</span><span class="p">(</span><span class="s2">&quot;1000000000000000000000&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">formatEther</span><span class="p">(</span><span class="nx">wei</span><span class="p">));</span>
</span><span class='line'><span class="c1">// &quot;1000.0&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">formatEther</span><span class="p">(</span><span class="nx">wei</span><span class="p">,</span> <span class="p">{</span><span class="nx">commify</span><span class="o">:</span> <span class="kc">true</span><span class="p">}));</span>
</span><span class='line'><span class="c1">// &quot;1,000.0&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">formatEther</span><span class="p">(</span><span class="nx">wei</span><span class="p">,</span> <span class="p">{</span><span class="nx">pad</span><span class="o">:</span> <span class="kc">true</span><span class="p">}));</span>
</span><span class='line'><span class="c1">// &quot;1000.000000000000000000&quot; </span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">formatEther</span><span class="p">(</span><span class="nx">wei</span><span class="p">,</span> <span class="p">{</span><span class="nx">commify</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">pad</span><span class="o">:</span> <span class="kc">true</span><span class="p">}));</span>
</span><span class='line'><span class="c1">// &quot;1,000.000000000000000000&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>其他</h3>

<p>其他工具方法还有 UTF8 字符串转换，地址 icap 转换等，感兴趣的同学可以自行参考文档。</p>

<h2>总结</h2>

<p>Ethers.js 是一个非常适合开发以太坊钱包应用的工具库，这里介绍的功能只是仓库功能的冰山一角，如果需要了解其更多功能的话，还请参阅官方文档。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何使用 Etherscan 的 API]]></title>
    <link href="http://zhaozhiming.github.io/blog/2018/04/20/how-to-use-etherscan-api/"/>
    <updated>2018-04-20T20:51:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2018/04/20/how-to-use-etherscan-api</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2018/04/etherscan.png" width="400" height="300"></p>

<p>虽然以太坊提供了 <a href="https://github.com/ethereum/wiki/wiki/JavaScript-API">Web3</a> 和 <a href="https://github.com/ethereum/wiki/wiki/JSON-RPC">Json Rpc</a> 这 2 种 API，geth 也额外提供了一些 <a href="https://github.com/ethereum/go-ethereum/wiki/Management-APIs">API</a>，但是对于开发以太坊应用来说还是显得有些不足，比如说获取交易记录的时间，需要先通过交易的 hash 找到该交易对应的区块 id，然后才能找到对应的时间，查询起来相当不方便。</p>

<p>好在<code>Etherscan</code>对外提供了一些公共的 API，给我们提供了额外的能力来处理更多的业务场景。</p>

<!--more-->


<h2>Etherscan api</h2>

<p>为了方便开发人员更好地使用<code>ethersacn.io</code>，网站提供了<a href="https://etherscan.io/apis">一系列 API</a> 供开发人员使用。</p>

<h3>使用方法</h3>

<p>API 的使用非常简单，基本上都是 get 方法，通过 http 请求就可以直接调用，在每个 Api 的说明文档都有对应的例子可以查看。</p>

<h3>模块介绍</h3>

<p>API 主要包含以下模块：账号、智能合约、交易、区块、事件日志、代币及工具等。</p>

<h3>账号 API</h3>

<p>账号相关的 API，有获取账号金额，获取交易记录等，该模块提供的 API 最多。</p>

<h4>获取单个账号金额</h4>

<p><em>API 示例</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>https://api.etherscan.io/api?module<span class="o">=</span>account&amp;action<span class="o">=</span>balance&amp;address<span class="o">=</span>0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a&amp;tag<span class="o">=</span>latest&amp;apikey<span class="o">=</span>YourApiKeyToken
</span></code></pre></td></tr></table></div></figure>


<p><em>参数说明</em></p>

<ul>
<li>module：对应的模块名称，这里是账户模块，所以是<code>moudle=account</code></li>
<li>action：对应的操作，这里是<code>balance</code>，即获取金额。</li>
<li>address：要查询金额的账号地址。</li>
<li>tag：之前在介绍 geth 的 API 时讲过获取账号金额需要 2 个参数，一个是账号地址，另外一个就是 tag，一般写<code>latest</code>就可以了。</li>
<li>apikey：你在<code>Etherscan</code>上创建的 apikey，带上没有请求的限制，也可以不带，下面会介绍 API 的请求限制。</li>
</ul>


<p>其中<code>module、action、apikey</code>是每个 API 都有的参数，其他的参数则因不同 API 而不同。</p>

<p><em>返回结果</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span><span class="s2">&quot;status&quot;</span>:<span class="s2">&quot;1&quot;</span>,<span class="s2">&quot;message&quot;</span>:<span class="s2">&quot;OK&quot;</span>,<span class="s2">&quot;result&quot;</span>:<span class="s2">&quot;670456215218885498951364&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>获取多个账号金额</h4>

<p><em>API 示例</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>https://api.etherscan.io/api?module<span class="o">=</span>account&amp;action<span class="o">=</span>balancemulti&amp;address<span class="o">=</span>0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a,0x63a9975ba31b0b9626b34300f7f627147df1f526,0x198ef1ec325a96cc354c7266a038be8b5c558f67&amp;tag<span class="o">=</span>latest&amp;apikey<span class="o">=</span>YourApiKeyToken
</span></code></pre></td></tr></table></div></figure>


<p><em>参数说明</em></p>

<p>（前面有讲过的参数就不讲了，下同）</p>

<p>与单个账号金额 API 相比，参数<code>address</code>用<code>,</code>号分隔多个账号，最多可支持 20 个账号的金额查询。</p>

<p><em>返回结果</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;OK&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;result&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;account&quot;</span>: <span class="s2">&quot;0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;balance&quot;</span>: <span class="s2">&quot;40807168564070000000000&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;account&quot;</span>: <span class="s2">&quot;0x63a9975ba31b0b9626b34300f7f627147df1f526&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;balance&quot;</span>: <span class="s2">&quot;332567136222827062478&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;account&quot;</span>: <span class="s2">&quot;0x198ef1ec325a96cc354c7266a038be8b5c558f67&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;balance&quot;</span>: <span class="s2">&quot;0&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;status&quot;</span>: <span class="s2">&quot;1&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>获取&#8221;正常&#8221;交易记录</h4>

<p><em>API 示例</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>https://api.etherscan.io/api?module<span class="o">=</span>account&amp;action<span class="o">=</span>txlist&amp;address<span class="o">=</span>0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a&amp;startblock<span class="o">=</span>0&amp;endblock<span class="o">=</span>99999999&amp;page<span class="o">=</span>1&amp;offset<span class="o">=</span>10&amp;sort<span class="o">=</span>asc&amp;apikey<span class="o">=</span>YourApiKeyToken
</span></code></pre></td></tr></table></div></figure>


<p><em>参数说明</em></p>

<ul>
<li>action：为<code>txlist</code>，表示列出交易记录。</li>
<li>address：要查询交易记录的账号地址。</li>
<li>startblock：起始查询块 id，可选，默认值为 0。</li>
<li>endblock：结束查询块 id，可选，默认值为最后一个区块。</li>
<li>page: 页数（没错，这个 API 还支持分页），可选。</li>
<li>offset: 查询到记录数，可选，默认是查询 10000 条记录。</li>
<li>sort: 排序规则，可以正序<code>asc</code>和倒序<code>desc</code>。</li>
</ul>


<p><em>返回结果</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;OK&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;result&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;blockHash&quot;</span>: <span class="s2">&quot;0x2d0a9228f22fe85596d246040d4fd7dc6b1a55920bae02b68e731d55a890b315&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;blockNumber&quot;</span>: <span class="s2">&quot;47894&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;confirmations&quot;</span>: <span class="s2">&quot;5435815&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;contractAddress&quot;</span>: <span class="s2">&quot;&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;cumulativeGasUsed&quot;</span>: <span class="s2">&quot;21612&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;from&quot;</span>: <span class="s2">&quot;0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;gas&quot;</span>: <span class="s2">&quot;23000&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;gasPrice&quot;</span>: <span class="s2">&quot;400000000000&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;gasUsed&quot;</span>: <span class="s2">&quot;21612&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;hash&quot;</span>: <span class="s2">&quot;0x7e1503d2001cab2f432b56a62a3ee874782c8e33cbd79a664d155a758c1784a2&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;input&quot;</span>: <span class="s2">&quot;0x454e34354139455138&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;isError&quot;</span>: <span class="s2">&quot;0&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;nonce&quot;</span>: <span class="s2">&quot;1&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;timeStamp&quot;</span>: <span class="s2">&quot;1438948043&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;to&quot;</span>: <span class="s2">&quot;0x2910543af39aba0cd09dbb2d50200b3e800a63d2&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;transactionIndex&quot;</span>: <span class="s2">&quot;0&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;txreceipt_status&quot;</span>: <span class="s2">&quot;&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;value&quot;</span>: <span class="s2">&quot;9001000000000000000000&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;status&quot;</span>: <span class="s2">&quot;1&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>获取&#8221;内部&#8221;交易记录</h4>

<p><em>API 示例</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>https://api.etherscan.io/api?module<span class="o">=</span>account&amp;action<span class="o">=</span>txlistinternal&amp;address<span class="o">=</span>0x2c1ba59d6f58433fb1eaee7d20b26ed83bda51a3&amp;startblock<span class="o">=</span>0&amp;endblock<span class="o">=</span>2702578&amp;page<span class="o">=</span>1&amp;offset<span class="o">=</span>10&amp;sort<span class="o">=</span>asc&amp;apikey<span class="o">=</span>YourApiKeyToken
</span></code></pre></td></tr></table></div></figure>


<p><em>参数说明</em></p>

<p>参数与上一个 API 基本相同，只有<code>action</code>是<code>txlistinternal</code>这一点不同，这 2 种交易的区别是什么呢？简单的理解就是“正常”的交易是会记录到区块链上的，而“内部”交易是指不会记录到区块链上的记录，比如交易失败的记录。</p>

<p>另外这个 API 还可以通过交易 hash 查看交易的详情。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>https://api.etherscan.io/api?module<span class="o">=</span>account&amp;action<span class="o">=</span>txlistinternal&amp;txhash<span class="o">=</span>0x40eb908387324f2b575b4879cd9d7188f69c8fc9d87c901b9e2daaea4b442170&amp;apikey<span class="o">=</span>YourApiKeyToken
</span></code></pre></td></tr></table></div></figure>


<p><em>返回结果</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;OK&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;result&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;blockNumber&quot;</span>: <span class="s2">&quot;2547619&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;contractAddress&quot;</span>: <span class="s2">&quot;&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;errCode&quot;</span>: <span class="s2">&quot;Bad jump destination&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;from&quot;</span>: <span class="s2">&quot;0x2c1ba59d6f58433fb1eaee7d20b26ed83bda51a3&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;gas&quot;</span>: <span class="s2">&quot;346878&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;gasUsed&quot;</span>: <span class="s2">&quot;0&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;hash&quot;</span>: <span class="s2">&quot;0x2896441f9d1f167b4a3f987d82233e7d238e6a50a227c4b612dbc82f34bb533d&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;input&quot;</span>: <span class="s2">&quot;&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;isError&quot;</span>: <span class="s2">&quot;1&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;timeStamp&quot;</span>: <span class="s2">&quot;1478013203&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;to&quot;</span>: <span class="s2">&quot;0x20d42f2e99a421147acf198d775395cac2e8b03d&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;traceId&quot;</span>: <span class="s2">&quot;0&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;type&quot;</span>: <span class="s2">&quot;call&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;value&quot;</span>: <span class="s2">&quot;71000000000000000000&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;status&quot;</span>: <span class="s2">&quot;1&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>获取 ERC20 代币交易事件记录</h4>

<p><em>API 示例</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>https://api.etherscan.io/api?module<span class="o">=</span>account&amp;action<span class="o">=</span>tokentx&amp;contractaddress<span class="o">=</span>0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2&amp;address<span class="o">=</span>0x4e83362442b8d1bec281594cea3050c8eb01311c&amp;page<span class="o">=</span>1&amp;offset<span class="o">=</span>100&amp;sort<span class="o">=</span>asc&amp;apikey<span class="o">=</span>YourApiKeyToken
</span></code></pre></td></tr></table></div></figure>


<p><em>参数说明</em></p>

<ul>
<li>action: 值为<code>tokentx</code>，表示查询代币交易记录。</li>
<li>contractaddress: 代币的智能合约地址。</li>
<li>address: 只查询和该账户地址相关的记录，可选。</li>
</ul>


<p><em>返回结果</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;OK&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;result&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;blockHash&quot;</span>: <span class="s2">&quot;0xb3ff25909ae9ae5b65baecab1114dff885fbd5a1607081229ea50b6a2db13ae8&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;blockNumber&quot;</span>: <span class="s2">&quot;5278009&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;confirmations&quot;</span>: <span class="s2">&quot;205861&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;contractAddress&quot;</span>: <span class="s2">&quot;0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;cumulativeGasUsed&quot;</span>: <span class="s2">&quot;1050219&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;from&quot;</span>: <span class="s2">&quot;0x4e83362442b8d1bec281594cea3050c8eb01311c&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;gas&quot;</span>: <span class="s2">&quot;191157&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;gasPrice&quot;</span>: <span class="s2">&quot;4000000000&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;gasUsed&quot;</span>: <span class="s2">&quot;97646&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;hash&quot;</span>: <span class="s2">&quot;0x497f15095877bc06b9e0f422673c1e0f13a2b4224b615ef29ce8c46e249364d1&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;input&quot;</span>: <span class="s2">&quot;0x73b38101000000000000000000000000000000000000000000000000000000000000003d0000000000000000000000000000000000000000000046aefaa28844d7d839d7&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;nonce&quot;</span>: <span class="s2">&quot;730&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;timeStamp&quot;</span>: <span class="s2">&quot;1521386734&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;to&quot;</span>: <span class="s2">&quot;0x69076e44a9c70a67d5b79d95795aba299083c275&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;tokenDecimal&quot;</span>: <span class="s2">&quot;18&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;tokenName&quot;</span>: <span class="s2">&quot;Maker&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;tokenSymbol&quot;</span>: <span class="s2">&quot;MKR&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;transactionIndex&quot;</span>: <span class="s2">&quot;28&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;value&quot;</span>: <span class="s2">&quot;553365126770755906&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;status&quot;</span>: <span class="s2">&quot;1&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>获取已开采的区块列表</h4>

<p><em>API 示例</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>https://api.etherscan.io/api?module<span class="o">=</span>account&amp;action<span class="o">=</span>getminedblocks&amp;address<span class="o">=</span>0x9dd134d14d1e65f84b706d6f205cd5b1cd03a46b&amp;blocktype<span class="o">=</span>blocks&amp;page<span class="o">=</span>1&amp;offset<span class="o">=</span>10&amp;apikey<span class="o">=</span>YourApiKeyToken
</span></code></pre></td></tr></table></div></figure>


<p><em>参数说明</em></p>

<ul>
<li>action: 值为<code>getminedblocks</code>。</li>
<li>blocktype：区块类型，可以选区块<code>blocks</code>和叔块<code>uncles</code>，不了解叔块的可以查看<a href="https://www.bixuncn.com/baike/block/1141.html">这里</a>。</li>
</ul>


<p><em>返回结果</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;message&quot;</span>: <span class="s2">&quot;OK&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;result&quot;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s2">&quot;blockNumber&quot;</span>: <span class="s2">&quot;3462296&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;blockReward&quot;</span>: <span class="s2">&quot;5194770940000000000&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;timeStamp&quot;</span>: <span class="s2">&quot;1491118514&quot;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="s2">&quot;status&quot;</span>: <span class="s2">&quot;1&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>合同 API</h3>

<p>智能合约相关的 API，其实只有一个获取智能合约接口的 API，但是这个 API 非常有用。</p>

<h4>获取智能合约接口</h4>

<p><em>API 示例</em></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>https://api.etherscan.io/api?module<span class="o">=</span>contract&amp;action<span class="o">=</span>getabi&amp;address<span class="o">=</span>0xBB9bc244D798123fDe783fCc1C72d3Bb8C189413&amp;apikey<span class="o">=</span>YourApiKeyToken
</span></code></pre></td></tr></table></div></figure>


<p><em>参数说明</em></p>

<ul>
<li>module: 值为<code>contract</code>。</li>
<li>action: 值为<code>getabi</code>。</li>
<li>address: 智能合约地址。</li>
</ul>


<p>智能合约的 abi 就是一个 json 对象，通过这个对象我们可以调用其接口方法，后面会写一篇文章介绍如何操作 abi 对象，敬请期待。</p>

<p><em>返回结果</em></p>

<p>返回结果内容比较长，这里省略，就是一个 json 对象，感兴趣的可以自行调用该 API 看结果。</p>

<h3>使用限制</h3>

<p>账号和智能合约的 API 已经能满足大部分的业务需求了，其他模块的 API 感觉没什么太大的作用，这里就不介绍了，感兴趣的读者可以自行查阅。</p>

<p>这里再说下 API 的使用限制，刚才提到每个 API 都有一个<code>apikey</code>参数，如果 API 没加上这个参数的话，每个 API 的请求次数不能超过 5 次每秒。</p>

<h2>总结</h2>

<p><code>Etherscan</code>提供的这些 API 有些是和以太坊提供的 API 有重复的，比如说获取账号金额，获取事件日志记录等，但有一些 API 给我们带来了很大的便利性，比如获取账号交易记录，有了这个 API 就不用使用几个原生 API 进行各种数据拼接了。</p>

<p>另外<code>Etherscan</code>的这套 API 在 Rinkeby 测试网络也有一套一模一样的，区别只是前面的 url 不同，Rinkeby 的是：<code>api-rinkeby.etherscan.io</code>，感兴趣的同学可以去试试。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在 Rinkeby 网络赚取以太币及代币]]></title>
    <link href="http://zhaozhiming.github.io/blog/2018/04/18/how-to-earn-eth-and-token-in-rinkeby/"/>
    <updated>2018-04-18T22:41:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2018/04/18/how-to-earn-eth-and-token-in-rinkeby</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2018/04/earn_eth.jpg" width="400" height="300"></p>

<p>在开发以太坊应用时最苦恼的事情莫过于手头账户上没有以太币（以下简称 eth），没有 money 什么事情都干不了，好在以太坊提供了几个测试网络，在测试网络上开发约等同于真实环境的主网络，最重要的是测试网络的 eth<strong>不要钱！不要钱！不要钱！</strong>但刚接触以太坊开发的同学可能还不清楚如何操作，下面就来介绍一下在 Rinkeby 测试网络的赚钱大法。</p>

<!--more-->


<h2>MetaMask 钱包</h2>

<p>首先你需要有一个以太坊钱钱包，这样你才能拥有自己以太坊账号，才能查看自己账号里面是否有金额进账。</p>

<p>最简单的方式是使用 <a href="https://metamask.io">MetaMask</a> 这款轻量级钱包，它以浏览器插件的形式提供功能，现在支持的浏览器包括 Chrome、Firefox、Opera。</p>

<p>安装完插件后你就可以在浏览器插件中进行账户创建、查看余额等一系列操作，以及后面介绍的赚取代币，都可以通过这个钱包应用来完成。</p>

<h3>如何使用 MetaMask 钱包</h3>

<p>网上有很多关于 MetaMask 钱包的使用说明，这里就不多介绍了，可以参考以下链接：</p>

<ul>
<li><a href="https://www.94eth.com/tutorial/metamask">metamask 简明教程</a></li>
<li><a href="https://www.bitansuo.com/articles/metamask-%E6%95%99%E7%A8%8B/">METAMASK 以太坊轻钱包（浏览器插件）使用教程</a></li>
<li><a href="http://8btc.com/thread-76137-1-1.html">以太坊轻钱包 MetaMask 详细图文教程</a></li>
</ul>


<p>最重要的一点是通过 MetaMask 切换网络，如下图所示，<code>Main Ethereum Network</code>是主网络，<code>Rinkeby Test Network</code>是测试网络，我们选择后者。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2018/04/metamask_network.png" width="300" height="400"></p>

<h2>赚取以太币</h2>

<p>Rinkeby 网络的 eth 赚取非常简单，不需要你额外花费一分钱，只要你能上网和访问 Twitter 或者 Google 或者 Facebook 即可获取 eth。</p>

<p>那要如何操作呢？首先你要登陆到这个网站：<a href="https://faucet.rinkeby.io/">faucet.rinkeby.io</a>，这是一个免费发放 eth 的网站，但它只作用在 Rinkeby 网络上。</p>

<h3>发布你的账户地址</h3>

<p>具体方法就是通过以下 3 种方式：</p>

<ul>
<li>使用 <a href="https://twitter.com/">Twitter</a> 发表一个推文，推文的内容是你的以太坊账号地址（可以通过 MetaMask 创建），然后将该推文的链接复制下来，粘贴到上面那个网址的输入框中就可以了。</li>
<li>使用 <a href="https://plus.google.com/">Google Plus</a> 发布一条公共消息，消息的内容同样为你的账号地址，然后把消息的网址链接复制下来粘贴到上面那个网址。</li>
<li>跟上面一样，只不过是换成用 <a href="https://www.facebook.com/">Facebook</a> 来发布公共消息，但因笔者比较少用 Facebook，还不知道怎么获取 Facebook 的消息地址，所以没怎么用这种方式。</li>
</ul>


<h3>选择获取的 eth 数量</h3>

<p>把网址链接粘贴到网站上去后，就可以选择获取多少 eth 了，从下图我们可以看到有 3 种选择：</p>

<p><img src="http://zhaozhiming.github.io/images/post/2018/04/fauce_eth.png" width="400" height="300"></p>

<ul>
<li>获取 3 个 eth，间隔时间 8 小时，也就是说你必须等到 8 小时之后才能再次获取 eth。</li>
<li>获取 7.5 个 eth，间隔时间 1 天。</li>
<li>获取 18.75 个 eth，间隔时间 3 天。</li>
</ul>


<p>当你选择了其中一种之后，差不多等 10~20 秒，你再查看你 MetaMask 的账号你就会发现你的 eth 变多了。</p>

<p>如果你没有钱包应用也可以直接通过这个网址查看你的账号金额，上面还有你的交易记录等信息。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>https://rinkeby.etherscan.io/address/42位账号地址
</span></code></pre></td></tr></table></div></figure>


<h3>赚钱 Tip</h3>

<p>Rinkeby Faucet 网站限制你获取 eth 的规则是根据你的 twitter 账号或者 Google Plus 账号来判断的，也就是说你如果有 2 个 twitter 账号的话，你可以同时使用这 2 个 twitter 账号来为同一个以太坊账号获取 eth，而不会受到间隔时间的限制。</p>

<h2>赚取代币</h2>

<p>以太坊代币（以下简称 token) 其实也是一种智能合约，通过合约地址可以在 Rinkeby 网站上查看 token 的信息，包括总发币量，交易记录等。</p>

<p>大部分以太坊代币都是基于 ERC20 的标准，也就是都实现了 ERC20 的接口，比如获取账户金额，转账等。</p>

<p>那要如何获取 token 呢？</p>

<h3>找到 token 的智能合约地址</h3>

<p>跟主网络的 <a href="https://etherscan.io/">etherscan.io</a> 网站一样，Rinkeby 网络也提供了一个类似的网站，方便大家进行信息查询，这个网站就是刚刚提到的 <a href="https://rinkeby.etherscan.io">rinkeby.etherscan.io</a>。</p>

<p>在这个网站上面我们可以查询已经部署到测试网络的 token，找到 token 后就可以查看其合约地址了。</p>

<ul>
<li>在网站上点击<code>Token</code>下拉框，并选择<code>ERC20 Token Search</code></li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2018/04/token_search.png" width="400" height="200"></p>

<ul>
<li>在输入框中输入要查询的 token 名称，在下拉表格中选择</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2018/04/token_result.png" width="400" height="250"></p>

<ul>
<li>进入 token 详情页面后就可以查询到 token 的合约地址了</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2018/04/token_contract.png" width="400" height="200"></p>

<h3>在 MetaMask 添加代币</h3>

<p>在 MetaMask 的默认账户上是没有显示任何 token 的，如果想查看自己账户上某种 token 的情况，需要自己添加，操作步骤如下：</p>

<ul>
<li>选择<code>TOKENS</code>标签，然后点击<code>ADD TOKEN</code>按钮</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2018/04/add_token1.png" width="400" height="300"></p>

<ul>
<li>在添加 token 页面输入 token 的合约地址，输入完成后 token 的名称会自动显示在<code>Token Symbol</code>中，最后点击添加按钮</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2018/04/add_token2.png" width="400" height="400"></p>

<ul>
<li>添加完成后在账户页面下方会显示新增的 token 种类</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2018/04/add_token3.png" width="400" height="200"></p>

<h3>使用 eth 购买 token</h3>

<p>之前免费获取到的 eth 就可以用来购买 token 了，具体步骤如下：</p>

<ul>
<li>点击账号上的<code>SEND</code>按钮</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2018/04/token_transfer1.png" width="400" height="300"></p>

<ul>
<li>输入 token 的智能合约地址和花费的 eth 数量，点击<code>NEXT</code></li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2018/04/token_transfer2.png" width="400" height="400"></p>

<ul>
<li>确认交易信息，确认没问题点击<code>SUBMIT</code></li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2018/04/token_transfer3.png" width="400" height="600"></p>

<ul>
<li>交易成功后，等个大概 10 秒钟，再次查看 token 的金额，会发现你的 token 数量已经增加了</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2018/04/token_transfer4.png" width="400" height="200"></p>

<h2>总结</h2>

<p>Rinkeby 试网络是一个非常有用的测试环境，在上面获取到 eth 和 token 之后，你就有资源进行各种测试开发工作了。需要注意一点的是测试网络的 token 比较乱，比如说比较出名的 token<code>EOS</code> 就有 10 几种，但这个不影响测试开发工作，只需随便选择其中一种就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[geth 环境搭建及使用说明]]></title>
    <link href="http://zhaozhiming.github.io/blog/2018/04/13/setup-geth-env/"/>
    <updated>2018-04-13T09:09:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2018/04/13/setup-geth-env</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2018/04/geth.png" width="400" height="300"></p>

<p><a href="https://geth.ethereum.org/">Geth</a> 全称是<strong>Go Ethereum</strong>，是使用 Go 语言实现的一个以太坊环境搭建工具，其实也可以用其他语言来搭建以太坊，比如 C++，Python 等，但 Geth 是使用最广泛的。下面就来介绍一下 Geth 环境的搭建和使用。</p>

<!--more-->


<h2>安装方法</h2>

<p>在 Geth 的<a href="https://geth.ethereum.org/">官方网站</a> 上提供了自动安装和手动下载安装两种方式，还有一种安装方式是源码构建，这种方式大部分人都不需要，这里就不介绍了。</p>

<h3>自动安装</h3>

<p>自动安装涵盖了各主流操作系统的安装方法。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2018/04/geth_install.png" width="400" height="300"></p>

<p>以 Mac 为例，最简单的方式就是通过 <a href="https://brew.sh/">Homebrew</a> 进行安装。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>brew install geth
</span></code></pre></td></tr></table></div></figure>


<p>安装完成后，执行命令<code>geth version</code>看到 geth 的版本信息就算安装成功了。</p>

<h3>手动安装</h3>

<p>手动安装其实也很简单，就是下载一个压缩包，然后将其解压就可以了，在官网的下载页面上有各大系统的安装包链接。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2018/04/geth_download.png" width="400" height="300"></p>

<p>解压后执行命令<code>./geth version</code>同样可以得到 geth 的版本信息。</p>

<h2>快速开始</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>geth --datadir <span class="s2">&quot;dev&quot;</span> --dev --rpcapi eth,web3,penersonal --rpc --rpcaddr<span class="o">=</span>0.0.0.0 --rpccorsdomain <span class="s2">&quot;\*&quot;</span> console 2&gt;&gt;geth.log
</span></code></pre></td></tr></table></div></figure>


<p>通过执行以上命令可以快速启动一个开发环境的服务，下面会提到各个参数的作用，最后是将 console 控制台的日志打印到一个 log 文件中。</p>

<h2>命令行参数说明</h2>

<h3>服务启动</h3>

<p>最快速启动 geth 的方式就是创建一个全节点的以太坊主网络，使用命令如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>geth console
</span></code></pre></td></tr></table></div></figure>


<p>其中 console 是指开启交互式命令控制台，我们可以在控制台上输入各种 geth 的命令，比如调用查看账号信息，查看账号金额，转账交易等。</p>

<p>服务启动后过一会就会开始同步主网络的信息，主网络的信息是非常庞大的，以前有人同步了十几天都没有同步完成，如果只是本地测试，可以用下面的方式搭建测试网络。</p>

<h3>文件存储</h3>

<p>geth 的默认存储路径是<code>~/.ethereum</code>，当然你也可以通过<code>--datadir 文件路径</code> 这个命令来改变存储的位置。</p>

<h3>http rpc 参数</h3>

<p>使用 Geth 搭建服务最大的好处就是可以通过 http 请求进行以太坊的 API 调用，下面这些参数就是让 geth 启动 http 服务的。</p>

<h4>rpc</h4>

<p>设置启动 http-rpc 服务，让开发人员可以发 http 请求调用以太坊 API。</p>

<h4>rpcaddr</h4>

<p>设置 http 服务的地址，默认是<code>localhost</code>，如果想让其他机器可以访问你的 geth 服务，需要将其设置为<code>0.0.0.0</code>。</p>

<h4>rpcport</h4>

<p>设置 http 服务的端口，默认值是<code>8545</code>，一般这个选项可以不修改，除非端口被占用了。</p>

<h4>rpcapi</h4>

<p>设置 http 服务可以调用的 API 方法，默认值是<code>eth,net,web3</code>，如果想启用更多的 API 方法，可以通过这个选项进行设置，比如要启用账户管理服务可以添加<code>personal</code>，这样就可以调用账号创建等 API 了。</p>

<h4>rpccorsdomain</h4>

<p>设置 http 服务的跨域域名，如果想别的机器访问你的 geth 服务，通过<code>--rpcaddr</code>将地址设置为<code>0.0.0.0</code>是不够的，还需将<code>--rpccorsdomain</code>设置为<code>*</code>。</p>

<h2>测试节点 Rinkeby 的搭建</h2>

<p>如果你想开发以太坊程序，但是手头上又没有以太币怎么办？其实以太坊有很多测试网络可以用，在上面获取以太币是不需要花钱的（后面再写一篇文章介绍怎么获取测试网络的以太币，敬请期待）。比较常用的有 Rinkeby、Ropsten、Kovan, 这些是以太坊官方或者第三方维护的测试网络。</p>

<p>geth 提供了对 Rinkeby 测试网络的支持，想要搭建一个全节点的 Rinkeby 网络，只要执行以下命令：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>geth --rinkeby console
</span></code></pre></td></tr></table></div></figure>


<p>服务启动后同样会去同步 Rinkeby 网络的数据到本地，但测试网络的数据相对主网络来说是非常少的，截止 2018 年 4 月，同步完 Rinkeyby 的信息大概需要 5G 的磁盘空间，时间取决于网络速度，我本地机器大概同步了 4~5 个小时。可能有人在网上看到过这篇文章——<a href="https://gist.github.com/cryptogoth/10a98e8078cfd69f7ca892ddbdcf26bc">如何在 10 分钟内搭建 Rinkeby 测试网络</a>，这篇文章是写于 2017 年 6 月，当时 Rinkeby 的数据没有多少，要同步完所有数据当然很快了。</p>

<h2>API 的使用</h2>

<p>geth 不仅提供了以太坊的标准 API，另外还提供了 geth 自己的 API。以太坊的标准 API 可以在<a href="https://github.com/ethereum/wiki/wiki/JSON-RPC">这里</a> 查看，分别有<code>web3、eth、db、shh</code>这些 API，比如可以用来执行查询本地节点的账号信息，查询账号金额等操作。</p>

<p>geth 的专属 API 可以查询<a href="https://github.com/ethereum/go-ethereum/wiki/Management-APIs">这里</a>，分别有<code>admin、debug、miner、personal、txpool</code>等 API，比较常用的是 personal 这个 API，可以通过其创建账号，因为标准的 web3
API 暂时还没有实现创建账号这个功能（有个 <a href="https://github.com/ethereum/wiki/wiki/JavaScript-API#web3ethregister">register</a> 方法但还未实现，而且它还是 JS 的 API，需要使用 web3 的 JS 库才能用），所以一般可以 personal 来创建账号。</p>

<h3>调用方式</h3>

<p>geth API 的调用方式有 2 种，分别是控制台输入和发 http 请求。</p>

<h4>控制台</h4>

<p>通过 console 交互命令控制台进行调用：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>eth.accounts
</span><span class='line'>&gt; <span class="o">[</span><span class="s2">&quot;0xab123b7d83af73b873d58eb898828287b08c4d8f&quot;</span>, <span class="s2">&quot;0x8e153bae6d1cd5a2e3438dda89c6ad6d25fbe9a5&quot;</span><span class="o">]</span>
</span><span class='line'>eth.getBalance<span class="o">(</span><span class="s1">&#39;0xab123b7d83af73b873d58eb898828287b08c4d8f&#39;</span><span class="o">)</span>
</span><span class='line'>&gt; 6000000000000000000
</span></code></pre></td></tr></table></div></figure>


<p>注意示例里面的账号金额是 6 个以太币，但以太坊的单位是<code>Wei</code>，一个以太币是 10<sup>18</sup> Wei，具体单位的介绍可以查看<a href="https://www.jianshu.com/p/b56552b1d1a0">这篇文章</a>。</p>

<h4>http 请求</h4>

<p>另一种方式通过 http 请求进行调用：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>http POST :8545 <span class="nv">jsonrpc</span><span class="o">=</span>2.0 <span class="nv">method</span><span class="o">=</span>eth_getBalance params:<span class="o">=</span><span class="s1">&#39;[&quot;0x643551033ae00eb4b62cd41c1cbb98a752e4575d&quot;, &quot;latest&quot;]&#39;</span> <span class="nv">id</span><span class="o">=</span>1
</span><span class='line'>
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Length: 57
</span><span class='line'>Content-Type: application/json
</span><span class='line'>Date: Tue, 17 Apr 2018 13:54:26 GMT
</span><span class='line'>Vary: Origin
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span>: <span class="s2">&quot;1&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;jsonrpc&quot;</span>: <span class="s2">&quot;2.0&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;result&quot;</span>: <span class="s2">&quot;0x6128f15c6c13cbf6&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里要推荐一个类似<code>curl</code>的工具——<a href="https://httpie.org/">httpie</a>，主要是它的用法简单，需要的命令行代码更少，最重要的是返回结果更加清晰好看。</p>

<p>从上面可以看到我们对本地 8545 的端口服务发起 http 请求，需要带上几个请求参数，<code>jsonrpc</code>和<code>id</code>这 2 个参数的值是固定的，<code>method</code>和<code>params</code>分别指要调用的 API 方法以及该方法所需的参数。</p>

<p>需要注意的是<code>method</code>中的方法是<code>eth_getBalance</code>，而在控制台中我们输入的是<code>eth.getBalance</code>，中间的符号有所不同。另外<code>params</code>的值是一个 json 格式的数组，里面不仅包含了账号地址还有<code>latest</code>这个参数，而在控制台调用该命令只需要输入账号地址就足够了，后面这个参数在方法调用时会默认加上。</p>

<p>可以看到返回的结果是有<code>id</code>和<code>jsonrpc</code>这 2 个固定返回值，跟请求参数那 2 个参数一致，另外一个就是方法的返回结果了，注意返回的方法结果是 16 进制的数字。</p>

<h3>常用 API</h3>

<h4>personal.newAccount</h4>

<p>创建 geth 节点的账号，创建完成后会在服务的<code>datadir</code>目录的<code>keystore</code>里面新建一个文件，文件名大概是这个样子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>UTC--2018-03-24T07-18-26.741872893Z--f58397f67c6c148f9f5b816126425fe93cab0f18
</span></code></pre></td></tr></table></div></figure>


<p>文件名分别由创建时间和账号地址组成，这个就是账号的<code>keystore</code>，通过这个文件可以在其他节点导入账号的信息。</p>

<p>可能有人担心在自己节点生成的账号导入到其他节点时发生地址冲突怎么办，其实完全不用担心，以太坊账号地址是通过一系列算法生成的，绝对不会有冲突的情况，想了解钱包地址更多内容可以参考<a href="https://ethfans.org/flfq/articles/142">这篇文章</a>。</p>

<p>而这个文件里面的内容是这样的：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;address&quot;</span><span class="p">:</span><span class="s2">&quot;9f49f0736655c87c7d26edebcfd2407ebccdff65&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="s2">&quot;9b1a1f3b-fb17-44ba-8ab0-9d1fa8badef4&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Crypto&quot;</span><span class="p">:{</span>
</span><span class='line'>    <span class="nt">&quot;cipher&quot;</span><span class="p">:</span><span class="s2">&quot;aes-128-ctr&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;cipherparams&quot;</span><span class="p">:{</span>
</span><span class='line'>      <span class="nt">&quot;iv&quot;</span><span class="p">:</span><span class="s2">&quot;3d921b20e735f27f888a6ed682d4ffdb&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;ciphertext&quot;</span><span class="p">:</span><span class="s2">&quot;bfc78805cef944baf46fce6d710c0de02aef07ab2b1fada26564c3efd83f5d20&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;kdf&quot;</span><span class="p">:</span><span class="s2">&quot;scrypt&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;kdfparams&quot;</span><span class="p">:{</span>
</span><span class='line'>      <span class="nt">&quot;salt&quot;</span><span class="p">:</span><span class="s2">&quot;e913c11f19a644f8fa68c6d661973d106c721b710ff2a78b9bb741037d56431b&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;n&quot;</span><span class="p">:</span><span class="mi">131072</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;dklen&quot;</span><span class="p">:</span><span class="mi">32</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;p&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;r&quot;</span><span class="p">:</span><span class="mi">8</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;mac&quot;</span><span class="p">:</span><span class="s2">&quot;5750c5865d53977c941945925c76911420dbf6c56930c5ffd62f9d9c022a9720&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>里面分别记录和账号的地址和加密信息，包括加密算法、参数以及其他信息，想了解更多内容可以参考<a href="https://medium.com/@julien.m./what-is-an-ethereum-keystore-file-86c8c5917b97">这篇文章</a>。</p>

<h4>eth.accounts 或者 personal.listAccounts</h4>

<p>列出 geth 阶段创建的所有账号。</p>

<h4>eth.getBalance</h4>

<p>查询账号的金额，需要输入账号地址。</p>

<h4>eth.gasPrice</h4>

<p>查询矿工&#8221;工作量&#8221;价格，想了解更多关于<code>gas</code>的内容请参考<a href="https://www.jianshu.com/p/bc1a27adeaa4">这篇文章</a>。</p>

<h4>eth.sendTransaction 或者 personal.sendTransaction</h4>

<p>进行转账交易，需要输入转账的账号地址和转账金额。</p>

<h2>总结</h2>

<p>你的开发环境可以访问互联网的话，其实可以不用搭建自己的以太坊节点服务，直接使用以太坊的测试网络就可以了，在测试网络上可以调用和主网络同等功能的 API，并且测试数据更加接近主网络的真实数据。除非你的服务还需要包含一些自己的定制功能，那就要考虑搭建自己的以太坊节点了。</p>

<p>以上就是 Geth 的搭建及使用介绍，本人水平有限文章中有不对的地方还请指正。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于 React 的 CMS 框架对比：Docusaurus vs. Gatsby]]></title>
    <link href="http://zhaozhiming.github.io/blog/2018/01/30/docusaurus-vs-gatsby/"/>
    <updated>2018-01-30T20:01:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2018/01/30/docusaurus-vs-gatsby</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2018/01/vs.jpg" width="400" height="350"></p>

<p>最近 Facebook 推出了一个文档工具 <a href="http://docusaurus.io/">Docusaurus</a>，既可以用来做产品网站，也可以用来写博客，还提供很多很有用的功能，最重要的是它是基于 React 实现的。</p>

<p>同样基于 React 技术的静态网站生成工具 <a href="https://www.gatsbyjs.org/">Gatsby</a>，也具备了类似的功能，而且它提供了非常丰富的插件。</p>

<p>可见两者各有千秋，那我们应该选择呢？或者说我们应该基于什么场景来使用它们呢？</p>

<!--more-->


<h2>CMS</h2>

<p>首先我们先了解一下什么是 CMS，下面是维基百科的定义：</p>

<blockquote><p>内容管理系统（英语：content management system，缩写为 CMS）是指在一个合作模式下，用于管理工作流程的一套制度。该系统可应用于手工操作中，也可以应用到电脑或网络里。作为一种中央储存器（central repository），内容管理系统可将相关内容集中储存并具有群组管理、版本控制等功能。版本控制是内容管理系统的一个主要优势。</p><footer><strong>维基百科</strong></footer></blockquote>


<p>看完是不是对什么是 CMS 更懵了？没关系，我们接着往下看。</p>

<p>那什么样的网站属于 CMS 呢？其实大部分网站都可以归属于 CMS，但更多时候是指下面这些类型的网站：</p>

<ul>
<li>博客类网站，以个人博客类居多</li>
<li>公司类网站，例如<a href="https://www.knownsec.com">知道创宇的网站</a></li>
<li>产品类网站，比如 <a href="https://reactjs.org">Reactjs 的网站</a></li>
</ul>


<p>总的来说就是指由静态化的页面组成的网站。</p>

<p>一直以来都有很多工具来制作或生成 CMS 网站，下面是几个比较出名的 CMS 框架。</p>

<ul>
<li>Wordpress: 老牌的 CMS 框架，以超多插件功能强大而著称，也以多安全漏洞而受广大黑客喜爱。</li>
<li>Gitbook: 是一个支持 Markdown 格式的文档编写工具，可以很方便地和 github 进行集成。</li>
<li>Hexo: 是用 Nodejs 编写的博客框架，支持多种博客主题，同样支持 Markdown 格式。</li>
</ul>


<p>但在现代化的 web 开发体系中，这些框架在前端技术上显得有些落后，目前 React 是全球范围内最受欢迎的前端框架（没有之一），我们当然希望可以有一个基于 React 技术的静态网站开发工具。</p>

<h2>Gatsby 和 Docusaurus</h2>

<p>其实基于 React 技术的静态网站生成工具也有很多，但是比较出名的要数<code>Gatsby</code>了，一个是因为它出来的时间比较早，另一个是因为它一直在迭代完善，从而让很多开发者都喜欢它。</p>

<p><code>Docusaurus</code>是 Facebook 公司最近刚开源出来的一个建站工具，当然它也是基于 React 的。相比<code>Gatsby</code>，它更多是为产品类网站而服务，集成了很多产品类网站所需要的功能，包括：版本化、国际化、站内检索等。</p>

<h2>Gatsby vs. Docusaurus</h2>

<p>虽然两者都是基于 React 的静态网站工具，但是在很多方面还是不一样的，下面通过几个方面介绍两者的不同之处，希望大家看完之后可以根据自己的需求做出正确的选择。</p>

<h3>入门容易度</h3>

<p>在入门容易度方面，<code>Docusaurus</code>要完胜<code>Gatsby</code>，<code>Docusaurus</code>的文档简单易懂，花半个小时基本上就可以看完了，然后再花个 5 分钟就可以搭建出一个静态网站，用户只需要通过 markdown 来编写文档就可以了。</p>

<p><code>Docusaurus</code>留给用户自定义配置的地方并不多，基本上都集中在<code>siteConfig.js</code>这个文件里面，所以用户要关心的东西并不多。</p>

<p><code>Gatsby</code>虽然也有官方文档，但因为涉及的点比较多所以文档也很长，比如你可能需要了解<code>GraphQL</code>（后台通过它来获取博客文章和站点信息），还需要知道有哪些<code>starter</code>（可以理解为项目模板，里面不仅包含了网站的样式，还包含了网站的配置）可以选择，还需要知道有哪些插件可以使用（包括官方和第三方的很多插件），光看完这些文档就要费不少时间。</p>

<p>看完文档之后你可能还需要去参考其他<code>starter</code>，选择其中一个来作为网站的模板，在其基础上进行修改，如果是用最基本的<code>starter</code>来搭建网站的话，那要做的东西就太多了，所以一般是选择一个适合自己的<code>starter</code>来创建项目会比较好。</p>

<h3>页面定制</h3>

<p><code>Docusaurus</code>是集成度比较高的一个产品，所以用户可扩展的东西并不多，比如首页和博客文章页面的布局用户是无法进行大幅度改动的，但可以进行一些小范围的修改。比如在<code>siteConfig.js</code>里面有个属性是<code>colors</code>，里面可以让用户自定义网站的<code>主颜色</code>和<code>次要颜色</code>。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="cm">/* colors for website */</span>
</span><span class='line'>  <span class="nx">colors</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">primaryColor</span><span class="o">:</span> <span class="s1">&#39;#2E8555&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">secondaryColor</span><span class="o">:</span> <span class="s1">&#39;#205C3B&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外<code>Docusaurus</code>提供了一个<code>custom.css</code>文件，让用户可以在里面通过覆盖原来的 class 来达到改变样式的目的。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/* your custom css */</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-device-width</span><span class="o">:</span> <span class="nt">360px</span><span class="o">)</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-device-width</span><span class="o">:</span> <span class="nt">736px</span><span class="o">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">1024px</span><span class="o">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-width</span><span class="o">:</span> <span class="nt">1023px</span><span class="o">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">1400px</span><span class="o">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">1500px</span><span class="o">)</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Gatsby</code>在这一点上比<code>Docusaurus</code>要好很多，因为<code>Gatsyb</code>上所有页面文件用户都可以随意修改，包括页面的内容和样式。</p>

<p><code>Gatsby</code>的 src 目录结构如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>.
</span><span class='line'>├── components
</span><span class='line'>│   ├── Bio.js
</span><span class='line'>│   └── profile-pic.jpg
</span><span class='line'>├── layouts
</span><span class='line'>│   └── index.js
</span><span class='line'>├── pages
</span><span class='line'>│   ├── hello-world
</span><span class='line'>│   │   ├── index.md
</span><span class='line'>│   │   └── salty_egg.jpg
</span><span class='line'>│   ├── index.js
</span><span class='line'>│   └── my-second-post
</span><span class='line'>│       └── index.md
</span><span class='line'>└── templates
</span><span class='line'>    └── blog-post.js
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>layouts/index.js: 这是网站页面整体布局的文件，可以在这里定义页面头部，底部和侧边栏，然后通过<code>this.props.children</code>来渲染子页面。有 2 种子页面，一种是网站首页页面，另一种是博客文章的页面。</li>
<li>pages/index.js: 这个文件是网站首页的页面文件，在这里可以定义首页页面的内容。</li>
<li>templates/blog-post.js: 这个文件是博客文章的页面文件，在这里可以定义一篇博客文章要如何展示信息，比如标题是什么样式，作者是什么样式等。</li>
</ul>


<p>如果你的网站不需要博客文章，你甚至可以在<code>layout/index.js</code>中去掉<code>this.props.children</code>部分，直接换成你需要的页面内容，这样你也就不需要去编辑<code>pages/index.js</code>文件了。</p>

<p>总之，<code>Gatsby</code>的页面扩展性是非常好的，可以随时将页面修改成你需要的网站样式；而<code>Docusaurus</code> 则只能在其定制好的页面框架下进行一些小修改。</p>

<h3>页面自适应</h3>

<p><code>Docusaurus</code>本身已经做好了页面自适应，用户可以不关心这方面的问题，只要是用<code>Docusaurus</code>搭建出来的网站都是页面自适应的。</p>

<p><code>Gatsby</code>本身是不具备页面自适应功能的，但一些<code>starter</code>会具有页面自适应的能力，只要通过这些<code>starter</code>搭建出来的网站也是页面自适应的，但这种情况相当是受限在这个<code>starter</code>的页面框架里面，如果需要做一些页面样式上的调整，就要检查是否会破坏原来的自适应功能。</p>

<h3>文档检索</h3>

<p><code>Docusaurus</code>本身集成了 <a href="https://www.algolia.com/">algolia</a> 来做站内文档检索功能，用户只需要在<code>siteConfig.js</code>中配置好<code>algolia</code>的选项就好了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">algolia</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">apiKey</span><span class="o">:</span>
</span><span class='line'>      <span class="s2">&quot;your api key&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">indexName</span><span class="o">:</span> <span class="s2">&quot;your index name&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是集成了<code>algolia</code>检索功能的截图：</p>

<p><img src="http://zhaozhiming.github.io/images/post/2018/01/algolia.png"></p>

<p><code>Gatsby</code>本身不具备站内检索功能，但它可以通过<code>GraphQL</code>进行文章查询，所以我觉得可以通过<code>GraphQL</code>来实现站内检索的功能，但这个需要用户自己去实现了。</p>

<p>其实<code>Gatsby</code>也可以集成<code>algolia</code>，大家可以看 <a href="https://reactjs.org/">React</a> 的官方网站，它就是用<code>Gatsby</code>做的，里面集成<code>algolia</code>站内检索功能，感兴趣的可以去看下他们网站关于<code>docsearch</code>这一块的<a href="https://github.com/reactjs/reactjs.org/search?utf8=%E2%9C%93&amp;q=docsearch&amp;type=">源码</a>。</p>

<h3>版本化和国际化</h3>

<p>在一些产品中，文档的版本管理是一个比较常见的需求：文档可以根据不同的版本号进行不同的内容展示，这样可以让老版本用户看到相关文档，老文档不会被新版本的文档所覆盖。</p>

<p>同样的，国际化也是一些跨国产品的强需求，可以通过切换不同的语言来展示不同语言的文档，这样可以吸引更多国家的人来使用产品。</p>

<p><code>Docusaurus</code>本身已经集成了这 2 个功能，这也是它的卖点之一，你可以通过命令行来添加新的版本号。每个版本号都是一个文件夹，在里面存放了这个版本的相关文档。</p>

<p>国际化的功能也是类似的操作。</p>

<p><code>Gatsby</code>本身则不具备这些功能，需要用户自己开发。</p>

<h3>编辑分离</h3>

<p>什么是编辑分离呢？假设我们的网站有成千上百个文档，这些文档如果是让搭建网站的程序员来维护的话可能力不从心，而且文档的专业性也得不到保证，但是专业的文档编辑人员又不懂 markdown 语法，那要让他们怎么进行文档编辑呢？这个时候就需要将编辑功能从网站上分离出去了，比如说网站的外部提供了所见即所得的富文本编辑器，让文档编辑人员进行文档编写，然后将编写完的内容同步到网站。</p>

<p><a href="https://www.contentful.com/"><code>contentful</code></a> 是一个专门做文档编辑功能的产品，可以在上面进行文档编辑，并通过 API 获取到文档内容。</p>

<p>而之前我们说了，<code>Gatsby</code>是一个拥有丰富插件的框架，它就提供了这样一个<a href="https://www.gatsbyjs.org/packages/gatsby-source-contentful/">插件</a> 来让网站和 <code>contentful</code>进行集成，配置内容如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// In your gatsby-config.js</span>
</span><span class='line'><span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">resolve</span><span class="o">:</span> <span class="err">`</span><span class="nx">gatsby</span><span class="o">-</span><span class="nx">source</span><span class="o">-</span><span class="nx">contentful</span><span class="err">`</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">spaceId</span><span class="o">:</span> <span class="err">`</span><span class="nx">your_space_id</span><span class="err">`</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">accessToken</span><span class="o">:</span> <span class="err">`</span><span class="nx">your_access_token</span><span class="err">`</span><span class="p">,</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>而<code>Docusaurus</code>不具备这方面的功能。</p>

<h2>总结</h2>

<p>下面的表格总结上面列的点：</p>

<table>
<thead>
<tr>
<th align="left"> </th>
<th align="center"> Docusaurus </th>
<th align="center"> Gatsby</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">入门难度 </td>
<td align="center"> ⭐️⭐️⭐️ </td>
<td align="center"> ⭐️</td>
</tr>
<tr>
<td align="left">页面定制 </td>
<td align="center"> ⭐️ </td>
<td align="center"> ⭐️⭐️⭐️</td>
</tr>
<tr>
<td align="left">页面自适应 </td>
<td align="center"> ⭐️⭐️⭐️  </td>
<td align="center"> ⭐️⭐️</td>
</tr>
<tr>
<td align="left">文档检索 </td>
<td align="center"> ⭐️⭐️⭐️ </td>
<td align="center"> ⭐️⭐️</td>
</tr>
<tr>
<td align="left">版本化和国际化 </td>
<td align="center"> ⭐️⭐️⭐️ </td>
<td align="center"> ⭐️</td>
</tr>
<tr>
<td align="left">编辑分离 </td>
<td align="center"> ⭐️ </td>
<td align="center"> ⭐️⭐️⭐️</td>
</tr>
</tbody>
</table>


<p>总的来说，<code>Docusaurus</code>是一个为产品类网站量身定做的建站工具，具备了大部分产品类网站所需的功能，包括国际化、版本化和站内检索等；而<code>Gatsby</code>更像一个框架，你甚至可以使用<code>Gatsby</code>来制作一个类似<code>Docusaurus</code>一样的产品，如果你的网站有自己的样式要求，或者只是想搭建一个自己的博客，那么你可以选择<code>Gatsby</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何扩展 Create React App 的 webpack 配置]]></title>
    <link href="http://zhaozhiming.github.io/blog/2018/01/08/create-react-app-override-webpack-config/"/>
    <updated>2018-01-08T20:04:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2018/01/08/create-react-app-override-webpack-config</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2018/01/cra.png" width="400" height="300"></p>

<p><a href="https://github.com/facebookincubator/create-react-app">Create React App</a>（以下简称 CRA）是创建 React 应用的一个脚手架，它与其他脚手架不同的一个地方就是将一些复杂工具（比如 webpack）的配置封装了起来，让使用者不用关心这些工具的具体配置，从而降低了工具的使用难度。</p>

<p>但是对于一些熟悉 webpack 的开发者来说，他们可能想对 webpack 配置做一些修改，这个时候应该怎么办呢？</p>

<!--more-->


<p>其实我们可以通过以下几种方式来修改 webpack 的配置：</p>

<ul>
<li>项目 eject</li>
<li>替换 react-scripts 包</li>
<li>使用 react-app-rewired</li>
<li>scripts 包 + override 组合</li>
</ul>


<p>下面对这几种方式分别进行介绍。</p>

<h2>项目 eject</h2>

<p>使用 CRA 创建完项目以后，项目在<code>package.json</code>里面提供了这样一个命令：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">...</span>
</span><span class='line'>  <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;eject&quot;</span><span class="p">:</span> <span class="s2">&quot;react-scripts eject&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="err">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行完这个命令——<code>yarn run eject</code>后会将封装在 CRA 中的配置全部<code>反编译</code>到当前项目，这样用户就可以完全取得 webpack 文件的控制权，想怎么修改就怎么修改了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># eject 后项目根目录下会出现 config 文件夹，里面就包含了 webpack 配置</span>
</span><span class='line'>config
</span><span class='line'>├── env.js
</span><span class='line'>├── jest
</span><span class='line'>│   ├── cssTransform.js
</span><span class='line'>│   └── fileTransform.js
</span><span class='line'>├── paths.js
</span><span class='line'>├── polyfills.js
</span><span class='line'>├── webpack.config.dev.js // 开发环境配置
</span><span class='line'>├── webpack.config.prod.js // 生产环境配置
</span><span class='line'>└── webpackDevServer.config.js
</span></code></pre></td></tr></table></div></figure>


<p>CRA 与其他脚手架不同的另一个地方，就是可以通过升级其中的<code>react-scripts</code>包来升级 CRA 的特性。比如用老版本 CRA 创建了一个项目，这个项目不具备 <a href="https://developers.google.com/web/progressive-web-apps/">PWA</a> 功能，但只要项目升级了<code>react-scripts</code>包的版本就可以具备 PWA 的功能，项目本身的代码不需要做任何修改。</p>

<p>但如果我们使用了<code>eject</code>命令，就再也享受不到 CRA 升级带来的好处了，因为<code>react-scripts</code>已经是以文件的形式存在于你的项目，而不是以包的形式，所以无法对其升级。</p>

<h2>替换 react-scripts 包</h2>

<p><a href="https://github.com/facebookincubator/create-react-app/tree/8cae659ec5a066eff8ea270346dc8c1ef064f9aa/packages/react-scripts">react-scripts</a> 是 CRA 的一个核心包，一些脚本和工具的默认配置都集成在里面，使用 CRA 创建项目默认就是使用这个包，但是 CRA 还提供了另外一种方式来创建 CRA 项目，即使用自定义 scripts 包的方式。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 默认方式</span>
</span><span class='line'><span class="nv">$ </span>create-react-app foo
</span><span class='line'>
</span><span class='line'><span class="c"># 自定义 scripts 包方式</span>
</span><span class='line'><span class="nv">$ </span>create-react-app foo --scripts-version 自定义包
</span></code></pre></td></tr></table></div></figure>


<p><code>自定义包</code>可以是下面几种形式：</p>

<ul>
<li><code>react-scripts</code>包的版本号，比如<code>0.8.2</code>，这种形式可以用来安装低版本的<code>react-scripts</code>包。</li>
<li>一个已经发布到 npm 仓库上的包的名字，比如<code>your-scripts</code>，里面包含了修改过的 webpack 配置。</li>
<li>一个 tgz 格式的压缩文件，比如<code>/your/local/scripts.tgz</code>，通常是未发布到 npm 仓库的自定义 scripts 包，可以用 <code>npm pack</code> 命令生成。</li>
</ul>


<p>这种方式相对于之前的<code>eject</code>是一种更灵活地修改 webpack 配置的方式，而且可以做到和 CRA 一样，通过升级 scrips 包来升级项目特性。</p>

<p>自定义 scripts 包的结构可以参照<code>react-scripts</code>包的结构，只要修改对应的 webpack 配置文件，并安装上所需的 webpack loader 或 plugin 包就可以了。</p>

<h2>使用 react-app-rewired</h2>

<p>虽然有这两种方式可以扩展 webpack 配置，但是很多开发者还是觉得太麻烦，有没有一种方式可以既不用<code>eject</code>项目又不用创建自己的 scripts 包呢？答案是肯定的，<a href="https://github.com/timarney/react-app-rewired">react-app-rewired</a> 是 react 社区开源的一个修改 CRA 配置的工具。</p>

<p>在 CRA 创建的项目中安装了<code>react-app-rewired</code>后，可以通过创建一个<code>config-overrides.js</code> 文件来对 webpack 配置进行扩展。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/* config-overrides.js */</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">override</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//do stuff with the webpack config...</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">config</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>override</code>方法的第一个参数<code>config</code>就是 webpack 的配置，在这个方法里面，我们可以对 <code>config</code> 进行扩展，比如安装其他 loader 或者 plugins，最后再将这个 <code>config</code> 对象返回回去。</p>

<p>最后再修改<code>package.json</code>中的脚本命令，修改内容请见<a href="https://github.com/timarney/react-app-rewired#3-flip-the-existing-calls-to-react-scripts-in-npm-scripts">这里</a>。</p>

<h2>scripts 包 + override 组合</h2>

<p>虽然<code>react-app-rewired</code>的方式已经可以很方便地修改 webpack 的配置了，但其实我们也可以在自定义的 script 包中实现类似的功能。</p>

<p>在<code>react-app-rewired</code>的源码中可以看到它核心的包也叫 <a href="https://github.com/timarney/react-app-rewired/tree/4954531eaab6da14c4e3c943cb2038b46d5f9125/packages/react-app-rewired">react-app-rewired</a>，里面重新覆盖了<code>react-scripts</code>中的几个脚本文件，包括<code>build.js</code>、<code>start.js</code>和<code>test.js</code>。</p>

<p>具体过程是怎样的呢？以<code>build.js</code>为例：</p>

<ul>
<li>先获取 webpack 的基本配置，然后再调用<code>config-overrides.js</code>（就是在根目录中新增的那个文件）中的<code>override</code>方法，将原先的 webpack 对象作为参数传入，</li>
<li>再取得经过修改后的 webpack 配置对象</li>
<li>最后再调用<code>react-scripts</code>中的<code>build.js</code>脚本，传入修改后的 webpack 对象来执行命令，</li>
</ul>


<p>具体源码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">overrides</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../config-overrides&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">webpackConfigPath</span> <span class="o">=</span> <span class="nx">paths</span><span class="p">.</span><span class="nx">scriptVersion</span> <span class="o">+</span> <span class="s2">&quot;/config/webpack.config.prod&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// load original config</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">webpackConfig</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="nx">webpackConfigPath</span><span class="p">);</span>
</span><span class='line'><span class="c1">// override config in memory</span>
</span><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">require</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">webpackConfigPath</span><span class="p">)].</span><span class="nx">exports</span> <span class="o">=</span>
</span><span class='line'>  <span class="nx">overrides</span><span class="p">.</span><span class="nx">webpack</span><span class="p">(</span><span class="nx">webpackConfig</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span><span class="p">);</span>
</span><span class='line'><span class="c1">// run original script</span>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="nx">paths</span><span class="p">.</span><span class="nx">scriptVersion</span> <span class="o">+</span> <span class="s1">&#39;/scripts/build&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>知道了原理之后，我们也可以修改自定义 scripts 包的脚本文件，还是以<code>build.js</code>为例，在获取基本 webpack 配置对象和使用 webpack 对象之间加入以下代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// override config</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">override</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="nx">paths</span><span class="p">.</span><span class="nx">configOverrides</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">overrideFn</span> <span class="o">=</span> <span class="nx">override</span> <span class="o">||</span> <span class="p">((</span><span class="nx">config</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">config</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">overrideConfig</span> <span class="o">=</span> <span class="nx">overrideFn</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>overrideConfig</code>就是修改后的 webpack 对象，最后修改调用了 webpack 对象的代码，将原来的 webpack 对象替换成修改后的 webpack 对象。</p>

<h2>总结</h2>

<p>CRA 是一个非常棒的 React 脚手架工具，但你如果不满足于它的 webpack 默认配置，你可以通过上述几种方式来扩展自己项目的 webpack 配置，这几种方式各有优缺点，可以结合具体的使用场景来选择合适自己的方式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么公司应该鼓励员工参与开源软件]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/11/26/why-company-should-encourage-employeeto-support-opensource/"/>
    <updated>2017-11-26T15:12:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/11/26/why-company-should-encourage-employeeto-support-opensource</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/11/oss.png" width="400" height="300"></p>

<p>随着软件技术的发展，越来越多的国内外公司加入开源软件的行列，纷纷开源了自己公司内部的软件，这是一件非常好的事情。但可能有人会有这样的疑问，开源软件往往意味着免费，将自己的代码无偿地提供给别人使用，还要帮助他们解决各种问题，这明显是费力不讨好的事情，那为什么还有那么多大公司去做这样的事情呢？</p>

<!--more-->


<h2>让项目得到更多帮助</h2>

<p>很多公司的开源项目都是从公司内部开始推广使用的，但公司内部使用的人毕竟有限，这样给项目的帮助也就十分有限了。</p>

<p>但如果把项目开源出来，一来可以帮助到有需要的人，二来可以让世界各地的开发者给项目提问题或贡献代码，让项目变得更好，从而吸引更多的人来使用，使得项目发展进入一个良性循环。</p>

<p>比如蚂蚁金服的 <a href="https://ant.design/index-cn">antd</a>，其实阿里的开源项目有很多，很多人都说他们的开源项目是 KPI 导向，但至少 antd 这个项目我觉得还是维护得挺好的。这个项目开始的时候有很多 bug，每个用过的人几乎都会提 issue，但是 antd 的开发团队对 issue 的处理非常及时，有时候当天提的 issue 当天就修复了，这样慢慢发展了一段时间之后，项目功能越来越完善，问题越来越少，最终发展成为一个令人交口称赞的项目。如果 antd 项目一开始没有开源，光靠内部人力去使用测试的话，不仅要耗费大量的人力和时间，而且缺少社区的声音项目很难做好，只有开源了才能让项目得到这样的发展。</p>

<p>口碑好的开源项目能吸引更多的人为其贡献代码，比如 Fackbook 的 <a href="https://github.com/facebook/react">React</a>，现在已经全球最火的几个开源项目之一，开发者都以能为其贡献代码为荣。前不久 React 提了一个求助的 <a href="https://github.com/facebook/react/issues/11299">issue</a>，内容是请开发人员为项目重构老的测试用例。issue 提出不到一天，里面的几十个开发任务就被认领完了，这部分工作要是让内部人员来完成的话可能要耗费不少人力，但现在 Facebook 只要付出一点点的人力（review 代码的人力）就可以完成这一项繁杂的工作。</p>

<h2>提升公司的技术影响力</h2>

<p>人们在买东西的时候大多喜欢选择品牌，品牌会让人觉得质量有保障，会觉得大家都在买的东西自己跟着买肯定没有错，影响力就跟品牌一样。对于开发者来说，提升技术影响力，可以让团队成员悉心听取你的意见，让自己的想法更容易地在团队中进行推广和实施，让自己获得更大的尊敬。对于公司来说也一样，提升技术影响力可以建立公司在技术领域的专家形象，甚至可以影响该领域技术的标准规范，让其他企业来遵循这些规范，这样可以极大地提升自己的产品竞争力。</p>

<p>开源无疑是提升公司技术影响力的最好方式，下面图中展示的是 2017 年在 github 上贡献最多的公司，他们无疑已经成为行业技术领域的风向标，只要是他们发布的开源项目大家都会争先使用和参与，同时也会加深对他们产品的喜爱。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2017/11/top-oss.png" width="600" height="500"></p>

<h2>吸引高素质的技术人才</h2>

<p>开发人员往往更倾向于选择技术好的公司，请问：</p>

<ul>
<li>谁不想和技术大牛一起共事？</li>
<li>谁不想参与能学习到前沿技术的项目？</li>
<li>谁不想自己参与的项目是广受好评的？</li>
</ul>


<p>但是怎么知道一家公司里面有没有大牛？开发的项目是不是用到前沿技术？开发的项目是不是广受好评呢？</p>

<p>最简单的方式就是看公司开源项目的数量和质量了，通过 github 上面的源码可以看出该公司的代码质量和技术选型，从项目维护中可以看到团队的水平，开发人员的能力，项目信息一目了然。这也是技术好的公司技术越来越好的原因，因为开源了优秀的项目吸引了优秀的开发人员加入，然后又做出了更多优秀的开源项目，从而吸引到更多优秀的开发人员。</p>

<p><strong>技术好的公司不一定开源做得好，但开源做得好的公司一定是技术好的公司。</strong></p>

<p>通过开源还可以在社区中发现优秀的开发人员，比如 Redux 的作者 <a href="https://github.com/gaearon">Dan</a>，因为在 React 社区中非常活跃，所以 Facebbook 向其抛出了橄榄枝并成功的将其吸纳为 React 团队的成员，Dan 进入 Facebook 之后也为 React 团队做出了不少的贡献。还有微软，虽然微软以前是一家封闭的公司，但这些年来微软一直在寻求改变，开始积极地向开源靠拢，做出了 <a href="https://github.com/Microsoft/TypeScript">TypeScript</a> 和 <a href="https://github.com/Microsoft/vscode">vscode</a> 等一些优秀的开源项目，从而也吸引了一批优秀的开发人员加入，如果是换做以前的微软，这些优秀的开源开发者是绝对不会加入的。</p>

<h2>提高团队成员的技术水平</h2>

<p>开发人员提升技术水平有很多方式，可以看书、看视频、看博客等，更多时候开发人员是通过平时的工作来提升自己，但受限于公司所用的技术和业务的压力往往使得技术水平的提升变得缓慢，那要如何更有效更快速的提升技术水平呢？答案是<strong>参与开源软件</strong>。</p>

<p>受益于现在互联网的发达和 github 等代码托管网站的发展，开发者现在可以毫不费力地查看开源项目的代码，通过阅读优秀源码可以：</p>

<ul>
<li>掌握良好的编程规范</li>
<li>了解技术的最佳实践</li>
<li>加深对技术原理的理解</li>
</ul>


<p>参与开源软件不仅可以参考别人的代码，还可以学习其他团队如何管理项目，比如有些开源项目如果有新的想法要实施，他们会在问题区里先提一个 issue 咨询用户，让用户决定这个想法是否可行；有些开源项目在正式发布重大版本之前，都会先发布 alpha，beta 等预发布版本，让用户进行试用和测试，并让大家反馈问题，等到问题和 bug 修复得差不多了再正式发布新版本。这些都是运营和管理项目的有效方式。</p>

<p>如果团队成员能积极参与到开源项目中，就可以学习到这些优秀的实践，并把它们带到公司内部，从而提升公司和团队的技术水平。</p>

<h2>公司如何参与开源</h2>

<p>如果公司从来没有参与过开源，但想开始加入开源这一行列，可以通过以下方法：</p>

<h3>金钱捐赠</h3>

<p>很多开源项目都是项目作者无偿无私地贡献自己的宝贵时间来进行开发和维护的，如果可以的话就通过金钱捐赠的方式给开源项目维护者提供支持，让维护者更有动力去维护项目。在开源社区有个网站叫 <a href="https://opencollective.com">opencollective</a>，是一个专门给开源项目提供金钱捐赠的网站，个人或者企业可以在上面找到对自己有帮助的开源项目为其提供帮助。</p>

<h3>组织员工参与开源</h3>

<p>以前 Google 公司允许员工每个星期自由支配 20% 的时间来做自己喜欢的事情，可以效仿这种方式，比如每周五的时候抽出一些时间让团队为一些开源项目提供力所能及的帮助，例如帮忙解答 issue，编写文档，贡献代码等，让团队逐渐养成参与开源项目的习惯。如果不知道从何入手的，可以通过这个网站了解更多信息：<a href="https://opensourcefriday.com/">开源星期五</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何运行 react16 之后测试]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/11/08/run-react-test-with-react-version-16/"/>
    <updated>2017-11-08T20:36:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/11/08/run-react-test-with-react-version-16</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/11/react-test.png" width="400" height="300"></p>

<p>React 升级到版本 16 之后，各方面都有不少改进，最重要的是完全向后兼容，功能代码几乎不用怎么修改就可以使用新版本。但是测试代码就不一定了，如果你是使用 <code>enzyme</code> 跑测试的话，以前的测试可能会跑不起来，那么需要如何修改呢？下面我们就来看一下吧。</p>

<!--more-->


<h2>一个简单的测试用例</h2>

<p>让我们来看一个简单的测试，这里面用到了测试 React 组件时常用的 <code>enzyme</code> 包和一个将 <code>enzyme</code> 对象转成 json 的工具<code>enzyme-to-json</code>。</p>

<p>可以暂时不管该测试对应的功能代码是怎么样的，因为校验的结果是组件快照。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Demo.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">World</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Demo.test.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">shallow</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;enzyme&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">toJson</span> <span class="nx">from</span> <span class="s1">&#39;enzyme-to-json&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Demo</span> <span class="nx">from</span> <span class="s1">&#39;./Demo&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Demo Component&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should render correctly&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Demo</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">toJson</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">)).</span><span class="nx">toMatchSnapshot</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>React16 之前</h2>

<p>在升级 React16 之前，我们依赖的第三方库版本如下，跑这个测试是完全没有问题的。</p>

<ul>
<li>react: 15.4.2</li>
<li>react-dom: 15.4.2</li>
<li>enzyme: 2.8.2</li>
<li>enzyme-to-json: 1.5.1</li>
<li>react-addons-test-utils: 15.4.2</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>PASS  src/Demo.test.js
</span><span class='line'>  Demo Component
</span><span class='line'>    ✓ should render correctly <span class="o">(</span>12ms<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Test Suites: 1 passed, 1 total
</span><span class='line'>Tests:       1 passed, 1 total
</span><span class='line'>Snapshots:   1 passed, 1 total
</span></code></pre></td></tr></table></div></figure>


<h2>React16 之后</h2>

<p>但是升级 React16 之后，这个测试就跑不过了，报以下的错误：</p>

<ul>
<li>react: 15.4.2 => 16.0.0</li>
<li>react-dom: 15.4.2 => 16.0.0</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>FAIL  src/Demo.test.js
</span><span class='line'>  ● Test suite failed to run
</span><span class='line'>
</span><span class='line'>    Cannot find module <span class="s1">&#39;react-dom/lib/ReactTestUtils&#39;</span> from <span class="s1">&#39;index.js&#39;</span>
</span><span class='line'>
</span><span class='line'>      at Resolver.resolveModule <span class="o">(</span>node_modules/jest-resolve/build/index.js:179:17<span class="o">)</span>
</span><span class='line'>      at Object.&lt;anonymous&gt; <span class="o">(</span>node_modules/react-addons-test-utils/index.js:1:107<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Test Suites: 1 failed, 1 total
</span><span class='line'>Tests:       0 total
</span><span class='line'>Snapshots:   0 total
</span></code></pre></td></tr></table></div></figure>


<h2>enzyme 的版本升级</h2>

<p>通过报错信息可以发现 React 的一些测试 API 发生了变化，那要如何修正呢？其实在 React 升级到版本 16 以后，<code>enzyme</code> 也对自身做了一次大的重构，我们来看看要怎么使用重构后的<code>enzyme</code>。</p>

<ul>
<li>首先升级 <code>enzyme</code> 的版本到最新版本</li>
<li>然后再安装 <code>enzyme-adapter-react-16</code> 这个包（待会讲这个包是做什么的），原来的 <code>react-addons-test-utils</code> 包可以删掉，新版的 <code>enzyme</code> 已经不需要了</li>
<li>最后在测试的全局配置中增加以下代码（如果是用 <code>create-react-app</code> 创建项目的话，可以在 <code>src/setupTests.js</code>里面修改）</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Enzyme</span> <span class="nx">from</span> <span class="s1">&#39;enzyme&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Adapter</span> <span class="nx">from</span> <span class="s1">&#39;enzyme-adapter-react-16&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Enzyme</span><span class="p">.</span><span class="nx">configure</span><span class="p">({</span> <span class="nx">adapter</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Adapter</span><span class="p">()</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>OK！原来的测试通过了！</p>

<p>新版的<code>enzyme</code> 拆分出来了多个 adapter 包，用来支持多种 React 版本，下面是版本对照表：</p>

<table>
<thead>
<tr>
<th></th>
<th align="center"> Enzyme Adapter Package </th>
<th align="center"> React semver compatibility </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center"> <code>enzyme-adapter-react-16</code> </td>
<td align="center"> <code>^16.0.0</code></td>
</tr>
<tr>
<td></td>
<td align="center"> <code>enzyme-adapter-react-15</code> </td>
<td align="center"> <code>^15.5.0</code></td>
</tr>
<tr>
<td></td>
<td align="center"> <code>enzyme-adapter-react-15.4</code> </td>
<td align="center"> <code>15.0.0-0 - 15.4.x</code></td>
</tr>
<tr>
<td></td>
<td align="center"> <code>enzyme-adapter-react-14</code> </td>
<td align="center"> <code>^0.14.0</code></td>
</tr>
<tr>
<td></td>
<td align="center"> <code>enzyme-adapter-react-13</code> </td>
<td align="center"> <code>^0.13.0</code></td>
</tr>
</tbody>
</table>


<h2>疑难问题</h2>

<p>虽然测试现在已经跑通了，但是你可能会遇到下面这个警告：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>console.error node_modules/fbjs/lib/warning.js:33
</span><span class='line'>    Warning: React depends on requestAnimationFrame. Make sure that you load a polyfill in older browsers. http://fb.me/react-polyfills
</span><span class='line'>
</span><span class='line'> PASS  src/Demo.test.js
</span><span class='line'>  Demo Component
</span><span class='line'>    ✓ should render correctly <span class="o">(</span>8ms<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Test Suites: 1 passed, 1 total
</span><span class='line'>Tests:       1 passed, 1 total
</span><span class='line'>Snapshots:   1 passed, 1 total
</span></code></pre></td></tr></table></div></figure>


<p>原因是测试用到的<code>jsdom</code> 包还没有提供<code>requestAnimationFrame</code>，所以会报这个警告。</p>

<p>具体内容可以看<a href="https://github.com/facebookincubator/create-react-app/issues/3199">这个 ISSUE</a>，<code>create-react-app</code>已经做了相应的修复，修改内容可以看看<a href="https://github.com/facebookincubator/create-react-app/pull/3340">这个 PR</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何处理 Echarts 中的地图散列点点击事件]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/10/27/how-to-handle-map-scatter-click-event-in-echarts/"/>
    <updated>2017-10-27T14:33:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/10/27/how-to-handle-map-scatter-click-event-in-echarts</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/10/echarts.png" width="400" height="300"></p>

<p>Echarts 是百度比较成功的一个开源图形库，现在国内很多公司和项目都使用它。今天介绍一下基于 Echarts 3.0，如何处理地图散列点的点击事件。</p>

<!--more-->


<h2>问题介绍</h2>

<p><img src="http://zhaozhiming.github.io/images/post/2017/10/echarts_map.png"></p>

<p>我们想在地图上处理散列点（图中红点）的点击事件，比如点击某个点的时候弹出一个 Modal 框，或者跳转一个新页面什么的。但是 Echarts 提供给我们的事件 API 非常有限，就只有一个比较笼统的<code>click</code>事件 API，我们如何通过这个 API 来实现我们需要的效果呢？</p>

<h2>地图散列点效果</h2>

<p>首先我们来看下实现该图形的核心代码，如下所示：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">series</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;map&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">geoIndex</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">data</span><span class="o">:</span> <span class="p">[</span><span class="cm">/* 地图相关数据 */</span><span class="p">],</span>
</span><span class='line'>        <span class="nx">zlevel</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;effectScatter&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">animation</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">data</span><span class="o">:</span> <span class="p">[</span><span class="cm">/* 散列点数据 */</span><span class="p">],</span>
</span><span class='line'>        <span class="nx">coordinateSystem</span><span class="o">:</span> <span class="s1">&#39;geo&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">showEffectOn</span><span class="o">:</span> <span class="s1">&#39;render&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">rippleEffect</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">scale</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">brushType</span><span class="o">:</span> <span class="s1">&#39;fill&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">itemStyle</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">normal</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">shadowBlur</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">shadowColor</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">zlevel</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里主要列出 Echarts 里面的 options 参数，对 Echarts 开发比较熟悉的同学应该会知道，options 是每个 Echarts 图形的配置对象。</p>

<p>上面代码显示了中国地图各个省份的指数分布，另外还显示了一些地图上的散列点，所以这里面有 2 种不同类型的数据。</p>

<p>可以看到 options 里面 series 属性包含了 2 种对象，一种 type 是<code>map</code>的对象，表示地图各个省份的指数分布；另外一种对象的 type 是<code>effectScatter</code>，表示的是地图上面的散列点。</p>

<h2>Echarts 的点击事件</h2>

<p>然后我们再来看 Echarts 的点击事件，官方代码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">myChart</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 点击事件操作</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>对，就只有一个<code>click</code>事件，没有针对不同类型图形的点击事件。</p>

<p>我们可以试用一下这个点击事件，看看里面的<code>params</code>参数能不能对我们有所帮助？下面是一个点击全国地图某省份事件的<code>params</code>参数：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">params</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">componentSubType</span><span class="o">:</span> <span class="s2">&quot;map&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">componentType</span><span class="o">:</span><span class="s2">&quot;series&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">data</span><span class="o">:</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;西藏&quot;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="mi">75</span><span class="p">},</span>
</span><span class='line'>    <span class="nx">dataIndex</span><span class="o">:</span><span class="mi">27</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;西藏&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">seriesId</span><span class="o">:</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">seriesIndex</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">seriesName</span><span class="o">:</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">seriesType</span><span class="o">:</span><span class="s2">&quot;map&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="mi">75</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到这个对象里面包含了很多属性，有类型、数据对象，系列名称、值等，但这里面看不出有什么是我们需要的。</p>

<p>那我们再来看下点击了某个散列点后的参数，看看有什么不同。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">params</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">componentSubType</span><span class="err"> </span><span class="o">:</span><span class="err"> </span><span class="s2">&quot;effectScatter&quot;</span><span class="p">,</span><span class="err"> </span>
</span><span class='line'>    <span class="nx">componentType</span><span class="err"> </span><span class="o">:</span><span class="err"> </span><span class="s2">&quot;series&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">data</span><span class="err"> </span><span class="o">:</span><span class="err"> </span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="err"> </span><span class="s2">&quot;point1&quot;</span><span class="p">,</span><span class="err"> </span><span class="nx">value</span><span class="o">:</span><span class="err"> </span><span class="nb">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">)},</span><span class="err"> </span>
</span><span class='line'>    <span class="nx">dataIndex</span><span class="err"> </span><span class="o">:</span><span class="err"> </span><span class="mi">0</span><span class="p">,</span><span class="err"> </span>
</span><span class='line'>    <span class="nx">name</span><span class="err"> </span><span class="o">:</span><span class="err"> </span><span class="s2">&quot;point1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">seriesId</span><span class="err"> </span><span class="o">:</span><span class="err"> </span><span class="s2">&quot;-0&quot;</span><span class="p">,</span><span class="err"> </span>
</span><span class='line'>    <span class="nx">seriesIndex</span><span class="err"> </span><span class="o">:</span><span class="err"> </span><span class="mi">1</span><span class="p">,</span><span class="err"> </span>
</span><span class='line'>    <span class="nx">seriesName</span><span class="err"> </span><span class="o">:</span><span class="err"> </span><span class="s2">&quot;-&quot;</span><span class="p">,</span><span class="err"> </span>
</span><span class='line'>    <span class="nx">seriesType</span><span class="err"> </span><span class="o">:</span><span class="err"> </span><span class="s2">&quot;effectScatter&quot;</span><span class="p">,</span><span class="err"> </span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span><span class="err"> </span><span class="s2">&quot;click&quot;</span><span class="p">,</span><span class="err"> </span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span><span class="p">[</span><span class="mf">125.03</span><span class="p">,</span><span class="err"> </span><span class="mf">46.58</span><span class="p">,</span><span class="err"> </span><span class="mi">20</span><span class="p">],</span><span class="err"> </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对比发现，我们可以通过<code>seriesType</code>知道是哪种类型数据的点击事件，或者通过<code>seriesIndex</code>也可以知道。</p>

<p>然后通过<code>dataIndex</code>我们可以得到数据在原始数组中的位置，或者直接通过<code>data</code>和<code>value</code>来直接获取点的相关数据。</p>

<h2>根据参数判断是哪种图形的点击事件</h2>

<p>其实饶了这么一大圈就是想让大家知道，我们可以在<code>click</code>事件中，通过这些参数来判断哪种图形的点击事件是我们想要处理的，如果不是我们需要处理的点击事件，我们直接跳出函数就可以了。示例代码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">myChart</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="p">{</span> <span class="nx">seriesIndex</span><span class="p">,</span> <span class="nx">seriesType</span><span class="err"> </span><span class="p">}</span> <span class="o">=</span> <span class="nx">params</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// 方法一：通过 seriesIndex 来判断，map 类型的 seriesIndex 为 0</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">seriesIndex</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 方法二：通过 seriesType 来判断</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">seriesType</span> <span class="o">===</span> <span class="s1">&#39;map&#39;</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 通过上面判断逻辑走到这里的就是散列点的事件了</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>缺点分析</h2>

<p>虽然这个方法可以解决问题，但是有个不好的地方需要指出，就是点击散列点的时候，鼠标点击的位置必须非常准确，要点击散列点的中心位置才能捕获到该类型事件，否则看起来就像点击没有效果一样。</p>

<h2>Echarts 的地图数据</h2>

<p>另外在这里提示一下，很多同学可能以为 Echarts 的地图数据不能下载了，因为 <a href="http://ecomfe.github.io/echarts-map-tool/">Echarts 的官方网站</a> 上也是这么写的，但是 Echarts 的 github 项目中并没有删除这些数据 (<a href="https://github.com/ecomfe/echarts/tree/master/map">见这里</a>)，所以大家不要被 Echarts 忽悠了😄。</p>

<p>这些数据包括<code>js</code>和<code>json</code>两种格式的，内容包括中国地图及各省份的地图。</p>

<h2>总结</h2>

<p>文章介绍了处理 Echarts 地图散列点事件的方法，如果大家有更好的方法，希望留言一起讨论，最后附上文章相关的在线 Demo 例子。<a href="https://codesandbox.io/s/lxljr76vp7">本文的 Demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 CSS 显示元素的四个角边框]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/10/21/how-to-add-4-corner-border-with-css/"/>
    <updated>2017-10-21T08:25:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/10/21/how-to-add-4-corner-border-with-css</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/10/css_corner.png" width="400" height="300"></p>

<p>为元素加上边框很简单，但是要单独给每个角加上边框就有点难了，下面介绍下实现该效果的两种方法，以及这两种方法优缺点的总结。</p>

<!--more-->


<h2>伪元素边框法</h2>

<p>在看 CSS 代码之前，让我们先看看 html 的结构。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;outter&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里使用了内外 2 层 div，因为单独使用 1 个 div 来实现 4 个角边框不好实现，所以要用 2 个 div，每个 div 实现 2 个角边框的效果。</p>

<p>咱们再来看看 CSS 代码。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.outter</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">//</span> <span class="err">外层右上有左下</span> <span class="nt">2</span> <span class="err">个角</span>
</span><span class='line'><span class="nc">.outter</span><span class="o">:</span><span class="nd">:before</span><span class="o">,</span>
</span><span class='line'><span class="nc">.outter</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">content</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.outter</span><span class="o">:</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">right</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-right</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-top</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.outter</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">bottom</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-left</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-bottom</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">//</span> <span class="err">内层左上和右下</span> <span class="nt">2</span> <span class="err">个角</span>
</span><span class='line'><span class="nc">.content</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:before</span><span class="o">,</span>
</span><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">content</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">-5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">-5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-left</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-top</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">right</span><span class="o">:</span> <span class="m">-5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">bottom</span><span class="o">:</span> <span class="m">-5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-right</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-bottom</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里主要使用了伪元素来实现角边框，我们知道<code>::before</code> 和 <code>::after</code> 这 2 个伪元素可以添加显示内容，所以我们就用<code>::before</code>来实现其中一个角边框，<code>::after</code>实现另外一个。</p>

<p>但每个元素的<code>::before</code> 和 <code>::after</code>只能出现一次，所以我们需要 2 个 div 来分别实现 4 个角边框的效果。</p>

<p>在实现每个角边框的时候，我们可以通过绝对定位的方式来设置每个角边框的位置，比如外层 div <code>outter</code>的<code>::before</code>伪元素，我们设置其位置为<code>top: 0; right: 0;</code>，它的位置就是右上角。</p>

<p>这里要注意的是，如果内层和外层 div 不是完全重叠的话，内层伪元素的位置就要有所偏移，比如内层 div <code>content</code>的<code>::before</code>伪元素，我们设置其位置为<code>top: -5px; left: -5px;</code>，这是因为外层和内层 div 因为<code>padding</code>而偏移了<code>5px</code>的位置，所以这里的绝对定位就不是<code>top: 0; left: 0;</code>了。</p>

<h3>效果图</h3>

<p><img src="http://zhaozhiming.github.io/images/post/2017/10/border-sloved1.png" width="400" height="300"></p>

<h3>优缺点</h3>

<ul>
<li>优点：灵活性高。</li>
<li>缺点：CSS 代码比较多，html 结构也比较复杂，需要 2 个 div 来实现。</li>
</ul>


<h2>伪元素遮盖法</h2>

<p>我们接着来看第二种方法，还是来先看下 html 的结构，这种方法的 html 结构相对比较简单。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;your/image/path&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的<code>img</code>是我们要用角边框包括起来的内容，所以实际上我们只用到了 1 层 div。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.content</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">2px</span> <span class="k">solid</span> <span class="m">#ca1c1e</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">25px</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">25px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.content</span> <span class="nt">img</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">z-index</span><span class="o">:</span> <span class="m">5</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:before</span><span class="o">,</span>
</span><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">content</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="m">#fff78e</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">100</span><span class="o">%</span> <span class="o">+</span> <span class="m">50px</span> <span class="o">+</span> <span class="m">4px</span> <span class="o">-</span> <span class="m">120px</span><span class="p">);</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">100</span><span class="o">%</span> <span class="o">+</span> <span class="m">4px</span><span class="p">);</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">-2px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">50</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">translateX</span><span class="p">(</span><span class="m">-50</span><span class="o">%</span><span class="p">);</span>
</span><span class='line'>  <span class="k">z-index</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">100</span><span class="o">%</span> <span class="o">+</span> <span class="m">50px</span> <span class="o">+</span> <span class="m">4px</span> <span class="o">-</span> <span class="m">120px</span><span class="p">);</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">100</span><span class="o">%</span> <span class="o">+</span> <span class="m">4px</span><span class="p">);</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">-2px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">50</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">translateY</span><span class="p">(</span><span class="m">-50</span><span class="o">%</span><span class="p">);</span>
</span><span class='line'>  <span class="k">z-index</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方法同样是利用了伪元素，但不是用伪元素来实现边框，而是用来遮盖边框。</p>

<p>我们看到最外层的<code>div</code>设置了一个边框<code>border: 2px solid #ca1c1e</code>，这个就是我们最终会看到的角边框的边框，但是其中一些部分会被遮盖掉。</p>

<p>以<code>::before</code>伪元素的代码来讲解：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">100</span><span class="o">%</span> <span class="o">+</span> <span class="m">50px</span> <span class="o">+</span> <span class="m">4px</span> <span class="o">-</span> <span class="m">120px</span><span class="p">);</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">100</span><span class="o">%</span> <span class="o">+</span> <span class="m">4px</span><span class="p">);</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">-2px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">50</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">translateX</span><span class="p">(</span><span class="m">-50</span><span class="o">%</span><span class="p">);</span>
</span><span class='line'>  <span class="k">z-index</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用伪元素<code>::before</code>遮盖掉了上下两边框的中间部分，可以看到其宽度设置为<code>width: calc(100% + 50px + 4px - 120px)</code>，我们来解读一下这些数字的含义。</p>

<ul>
<li><code>50px</code>是左右<code>padding</code>的宽度</li>
<li><code>4px</code>是<code>border</code>的宽度</li>
<li><code>120px</code>是最后我们想显示的角边框的总宽度，首先它必须大于<code>50px + 4px</code>，不然会把边框完全挡掉，这里设置成<code>120px</code>，那么相当于角边框的宽度就是<code>120 - 50 - 4 = 66</code>，所以每个角边框的宽度就是<code>33px</code>。</li>
</ul>


<p><code>height: calc(100% + 4px)</code>: 高度就是总高度再加上<code>border</code>的宽度。</p>

<p><code>top: -2px</code>: 从边框的上面开始定位，是为了把上边的边框挡住。</p>

<p><code>left: 50%;transform: translateX(-50%);</code>: 水平居中。</p>

<p><code>z-index: 1;</code>: 让伪元素可以挡住外层的 div。</p>

<p><code>::after</code>伪元素原理和<code>::before</code>大致相同，只是把水平和垂直方向调换一下。</p>

<h3>效果图</h3>

<p><img src="http://zhaozhiming.github.io/images/post/2017/10/border-sloved2.png" width="400" height="300"></p>

<h3>优缺点</h3>

<ul>
<li>优点：一层 div 就可以搞定，结构相对简单。</li>
<li>缺点：如果背景色需要透明的话则不适用。</li>
</ul>


<h2>总结</h2>

<p>这就是实现元素角边框的两种方法，其实还有一种方法，就是使用 CSS 的<code>clip-path</code>来实现，但代码相对比较<code>hard code</code>，而且这个特性还是实验性的，所以具体怎么实现这里就不介绍了，感兴趣的同学可以看下这个 <a href="https://codepen.io/bennettfeely/pen/NdVyvR">code pen</a>。</p>

<p>如果还有其他更好的实现方法欢迎留言，大家一起学习进步，谢谢！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[研发面试官的面试指南（三）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part3/"/>
    <updated>2017-09-23T19:33:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part3</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/09/interview3.jpeg" width="400" height="300"></p>

<p>之前讲了面试流程和技术面试环节，最后讲一下技术面试中的注意事项，可以提高面试的效率和准确率。</p>

<!--more-->


<h2>注意事项</h2>

<h3>提前准备</h3>

<p>一般 HR 会在面试之前给你发送一份应聘者的简历，如果有笔试环节的话，会附带一份笔试题答题结果，这个时候需要提前对应聘者有所了解。</p>

<p>通过简历可以了解应聘者的技术背景，提前想好面试时要重点问哪一方面的问题。有笔试题的话可以通过笔试结果对应聘者掌握的知识点和代码规范有一定了解。</p>

<p>准备时间建议不超过 15 分钟，不要让应聘者等待太久。</p>

<h3>结对（组队）面试</h3>

<p>尽量避免一个人去面试，每个人的知识点都有盲区，一个人的主观因素会比较大，容易造成判断失误。</p>

<p>建议是两个人一起面试，面试完后沟通各自观点，如果面试官中有一个人觉得应聘者不合适，则不建议录用，要选择同时让两位面试官都满意的人。</p>

<p>如果对是否录用应聘者感到纠结的话，建议是按不录用来处理，宁可漏招一个牛人，也不错招一个不合适的人。</p>

<h3>提前结束</h3>

<p>如果在考察过程中发现应聘者不是合适的人，或者技能上有所欠缺，建议提前结束面试，以提高面试的效率，也为了节省双方的时间。</p>

<p>但不建议面试不到5分钟就停止面试，要站在应聘者的角度上考虑问题，可能应聘者费了很大的劲才过来面试，结果面试不到5分钟就结束了，这样对应聘者的体验是相当不好的。</p>

<p>建议多问几个不同方面的问题来考察应聘者，可能应聘者某个方面存在知识盲点，但其他方面却能力突出呢。</p>

<h3>控制时间</h3>

<p>有时候应聘者讲起话来会滔滔不绝，如果每问一个问题都要等10分钟的话，那整个面试过程要么很长，要么不能有效地从全方面了解应聘者。</p>

<p>这时候要注意控制时间，可以适当地打断应聘者，让其讲重点内容。</p>

<p>整个面试过程建议是不要超过 1 个小时。</p>

<h2>总结</h2>

<p>以上就是作为面试官的一些经验和总结，希望可以帮助到正在做面试官的同行，也希望大家可以招到自己满意和合适的人。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[研发面试官的面试指南（二）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part2/"/>
    <updated>2017-09-23T19:33:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part2</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/09/interview2.png" width="400" height="300"></p>

<p>除了面试流程，研发面试最关键的还是技术面试环节，这个环节要确认应聘者的技术基本功是否扎实，以及技术的深度和广度，与公司部门的技术栈是否匹配等等。</p>

<!--more-->


<p></p>

<h2>技能考察</h2>

<p>面试过程中除了通过项目了解应聘者外，还需要通过一些技术问题来了解应聘者的真实能力。</p>

<h3>技术基础</h3>

<p>这里以前端岗位为例，技术基础就是JS、CSS和HTML。这方面的问题网上都有很多人做过总结，所以尽量不要问一些烂大街的问题，可以结合平时工作遇到的问题来进行提问，或者内部团队专门设计一些巧妙的面试问题来考验应聘者。</p>

<p>技术问题可以结合公司的技术栈提问，比如公司用的<code>React</code>和<code>Nodejs</code>，就可以问一些这方面相关的问题。</p>

<h3>手写代码</h3>

<p>很多人讨厌 Google 公司的“白板面试”环节，我觉得讨厌的原因主要是要让应聘者手写二叉树查询算法这种太过困难的任务，在很多实际项目开发中很少涉及到复杂算法，更不要说手写了。<br/>
但是我觉得考察应聘者手写代码的能力还是有必要的，特别是没有笔试环节的情况下。可以出一道简单的编程题目，让应聘者通过编写实际代码或者伪代码来解答，主要考察的是编程思路，代码编写规范等。<br/>
有些应聘者在自己的项目上说的头头是道，但是一旦要实际写代码却困难重重，这个时候就要质疑应聘者的实际能力了，如果是天天和代码打交道的人是不会写不出代码的。</p>

<h3>项目管理（可选）</h3>

<p>如果面试的岗位需要带团队做项目，就可以提问一些项目管理相关的问题。可以从以下方面了解：</p>

<ul>
<li>如何把控项目进度</li>
<li>如何保证项目质量</li>
<li>如何汇报项目进展</li>
<li>如何让新人快速融入团队</li>
<li>等等</li>
</ul>


<h3>代码质量</h3>

<p>优秀的研发人员对代码是有要求甚至是有洁癖的，可以从以下方面了解：</p>

<ul>
<li>有没有做过code review？有的话是怎么做的？一般会对哪些代码提出建议？</li>
<li>最不能忍受的代码是什么样的？</li>
<li>项目中有没有做自动化代码检查？（比如前端的话是否有用Lint类的工具）</li>
<li>有没有写过单元测试？平时单元测试用的框架是什么？好的单元测试一般是什么样的？</li>
<li>等等</li>
</ul>


<h3>过程控制</h3>

<p>效率高的研发人员会对软件开发的流程有一定的了解和关注，并且有自己的一套方法方式，可以从以下方面了解：</p>

<ul>
<li>什么是持续集成和持续部署？持续集成用的哪些工具？</li>
<li>平时项目中的持续集成一般会做一些什么事情？</li>
<li>对敏捷开发是否了解？平时的开发流程是怎么样的？</li>
<li>拿到开发任务后有没有对任务进行拆解？有的话是如何拆分任务的？</li>
<li>等等</li>
</ul>


<h3>学习和分享</h3>

<p>爱分享的研发人员一般能力不会差，可以从以下方面了解：</p>

<ul>
<li>最近了解到的最新技术是哪些？</li>
<li>平时是通过什么渠道了解技术资讯的？</li>
<li>是否经常写博客？</li>
<li>是否参与开源项目？</li>
<li>等等</li>
</ul>


<h3>其他方面</h3>

<p>最后可以从其他方面了解应聘者的综合能力，可以从以下方面了解：</p>

<ul>
<li>感兴趣的技术方向（看是否与公司部门的技术方向匹配）</li>
<li>文档能力（具备良好的文档编写能力绝对是加分项）</li>
<li>沟通能力（是主动沟通还是被动沟通）</li>
<li>抗压能力（面对压力时如何应对）</li>
<li>等等</li>
</ul>


<h2>总结</h2>

<p>仅凭一次面试就想真正了解一个人是很难的，但通过以上方面可以把握一些正确的选人方向，后面再继续讨论面试过程应该注意的一些事项，以及如何提高面试的效率，敬请期待。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[研发面试官的面试指南（一）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part1/"/>
    <updated>2017-09-23T19:33:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part1</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/09/interview.jpg" width="400" height="300"></p>

<p>面试研发人员，如果面试过程处理地不好，不仅招不到合适的人，而且会给应聘者带来不好的体验，从而影响公司的整体形象。最近整理了一些面试官的经验，写出来和大家分享一下。</p>

<!--more-->


<h1>面试流程</h1>

<p>如果把面试比作软件开发，那面试流程就是系统架构，只有把架构设计好了，你才知道面试过程中的每一步要怎么走，才能更好地把握面试的节奏。</p>

<h2>自我介绍</h2>

<p>这里的自我介绍是指双方的自我介绍。</p>

<h3>面试官</h3>

<p>首先作为面试官，出于礼貌应该先介绍自己，可以介绍自己的<code>名字</code>和<code>职务</code>，并说明这次的面试是流程中的哪个环节（初试、复试或其他），这也是一个礼貌且友好的开场。</p>

<h3>简要问题</h3>

<p>介绍完自己后可以简单地问下应聘者的重要信息，这些信息可以帮助你快速判断这个人是否值得招聘，还可以了解到招募的可能性和招聘所需的代价等信息。</p>

<p>对于社招岗位，可以了解以下方面：</p>

<ul>
<li>是否在职？</li>
<li>在职的话要找工作的原因是什么？</li>
<li>离职的话离职原因是什么？</li>
</ul>


<p>对于实习岗位，可以了解以下方面：</p>

<ul>
<li>是大学 / 研究生几年级？</li>
<li>一周可以实习几天？</li>
<li>学习开发（前端）多长时间？</li>
</ul>


<h3>应聘者</h3>

<p>接着请应聘者开始做自我介绍，同时保持倾听。<br/>
注意这时候不要光顾看简历而不听应聘者讲话，提前了解简历内容是面试前就应该做的事情，而且一般应聘者讲的内容都会比简历上写的更详细。</p>

<h2>项目介绍</h2>

<p>应聘者在做完自我介绍后，如果对他的某个项目感兴趣，可以让他再详细讲下这个项目，比如：</p>

<ul>
<li>项目团队有多少人？</li>
<li>他在这个项目中主要负责什么工作？</li>
<li>在项目期间遇到过什么印象比较深刻的问题？</li>
<li>这些问题是如何解决的？</li>
<li>等等</li>
</ul>


<p>如果没有感兴趣的项目，也可以让应聘者挑一个他自己觉得印象深刻的项目来讲。</p>

<h2>让应聘者提问</h2>

<p>在流程的最后，在这个时候面试官已经问了一堆问题了，对应聘者也有一定了解，但应聘者对招聘方还不够了解，这时候需要给应聘者一个机会来进行了解，就是让应聘者提问问题，面试官进行解答。</p>

<p>如果是技术面试，而应聘者问道了薪酬或者福利相关的问题你又不方便回答，可以礼貌地回应说<code>这方面的信息后面 HR 会和你聊</code>。</p>

<p>这一环节结束后，就可以根据面试情况，看是安排应聘者进行复试呢，还是让应聘者先行回去。如果让应聘者先回去，需要告之多久时间（一般是一个星期）内会回复他。</p>

<p>最后把面试结果告诉 HR，整个面试过程结束。</p>

<p>上面介绍的是面试的一个通用流程，在下一篇文章会介绍面试的关键环节——技术考察，敬请期待。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Sharedarraybuffers 中使用 Atomics 来避免竞态条件]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/06/21/avoiding-race-conditions-in-sharedarraybuffers-with-atomics-zh/"/>
    <updated>2017-06-21T15:53:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/06/21/avoiding-race-conditions-in-sharedarraybuffers-with-atomics-zh</id>
    <content type="html"><![CDATA[<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_29.png" width="400" height="350"></p>

<p>这是 3 篇文章中的第三篇：</p>

<ul>
<li><a href="http://zhaozhiming.github.io/blog/2017/06/20/a-crash-course-in-memory-management-zh/">内存管理速成教程</a></li>
<li><a href="http://zhaozhiming.github.io/blog/2017/06/20/a-cartoon-intro-to-arraybuffers-and-sharedarraybuffers-zh/">通俗漫画介绍 ArrayBuffers 和 SharedArrayBuffers</a></li>
<li>在 Sharedarraybuffers 中使用 Atomics 来避免竞态条件</li>
</ul>


<p>原文链接：<a href="https://hacks.mozilla.org/2017/06/avoiding-race-conditions-in-sharedarraybuffers-with-atomics/">Avoiding race conditions in SharedArrayBuffers with Atomics</a></p>

<!--more-->


<h1>在 Sharedarraybuffers 中使用 Atomics 来避免竞态条件</h1>

<p>在<a href="http://zhaozhiming.github.io/blog/2017/06/20/a-cartoon-intro-to-arraybuffers-and-sharedarraybuffers-zh/">上一篇文章</a> 中，我讲述了使用 SharedArrayBuffers 会导致竞态条件，这让 SharedArrayBuffers 使用困难，我们不希望应用开发人员直接使用 SharedArrayBuffers。</p>

<p>但在其他语言上有多线程开发经验的库开发人员可以使用新的底层 API 来创建高级别的工具，应用开发人员就可以使用这些工具而无需直接接触 SharedArrayBuffers 和 Atomics。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_15.png" width="400" height="350"></p>

<p>尽管你可能不会直接同 SharedArrayBuffers 和 Atomics 打交道，但我觉得了解它们的工作原理还是比较有意思的，所以在这篇文章中，我将讲解它们会带来哪种类型的竞态条件，然后 Atomics 是如何帮助我们避开它们的。</p>

<p>但首先，什么是竞态条件？</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_13.png" width="400" height="350"></p>

<h2>竞态条件：一个你之前可能看过的例子</h2>

<p>一个相当简单的竞态条件的例子就是，你在两个线程间共享一个变量。说具体一些，一个线程想要加载一个文件，另外一个线程想检查文件是否存在，它们共享了一个变量叫<code>fileExists</code>，通过它来进行通信。</p>

<p>开始时，<code>fileExists</code>被设置为 false。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_03.png" width="400" height="350"></p>

<p>只要线程 2 的代码先运行，文件将会被加载。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_04.png" width="400" height="350"></p>

<p>但如果线程 1 的代码先运行，那么它将给用户一个错误记录，说文件不存在。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_05.png" width="400" height="350"></p>

<p>但文件是否存在不是问题所在，真正的问题是竞态条件。</p>

<p>即使是在单线程代码中，很多 JavaScript 开发人员也会遇到这类竞态条件。要了解为什么这是竞态，并不需要明白什么是多线程。</p>

<p>尽管如此，有些类型的竞态条件在单线程代码中不会出现，但在你进行共享内存的多线程编程时会出现。</p>

<h2>不同类型的竞态条件和 Atomics 如何辅助</h2>

<p>让我们来探索一些你在多线程代码中会遇到的不同类型的竞态条件，然后 Atomics 如何帮助我们避开它们。这里没有覆盖所有的竞态条件，但告诉了你关于为什么 API 会提供这些方法的一些想法。</p>

<p>在我们开始之前，我想要再次申明：你不应该直接使用 Atomics。编写多线程代码是公认的难题，相反地，你应该在你的多线程代码中使用可靠的库来和共享内存打交道。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_06.png" width="400" height="350"></p>

<h2>单个操作中的竞态条件</h2>

<p>比方说我们有两个线程来递增相同的变量，你可能会认为不管哪个线程先执行，最终的结果都是一样的。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_07.png" width="400" height="350"></p>

<p>尽管在源码中，递增一个变量看起来是一个单步操作，但在编译后的代码中，它并不是一个单步操作。</p>

<p>在 CPU 层面，递增变量分为三个指令，那是因为计算机既有长期内存也有短期内存（我在<a href="https://hacks.mozilla.org/2017/02/a-crash-course-in-assembly/">另外一篇文章</a> 讲过它们是如何工作的）。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_08.png" width="400" height="350"></p>

<p>所有线程都共享长期内存，但线程间不共享短期内存（注册者）。</p>

<p>每个线程需要从内存中取到值并放入到短期内存中，然后在短期内存中执行运算，然后把结果从短期内存写回到长期内存。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_09.png" width="400" height="350"></p>

<p>如果线程 1 的所有操作都先发生，然后线程 2 的所有操作接着发生，那么我们将得到期望的结果。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_10.png" width="400" height="350"></p>

<p>但如果它们交叉进行，线程 2 放入它的注册者中的值不是内存中同步运行后的结果，这意味着线程 2 没有考虑线程 1 的计算结果，它放弃了线程 1 将自己的值写入到内存的结果。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_11.png" width="400" height="350"></p>

<p>原子操作做的就是把这些计算机觉得是多步的操作作为单步操作，并让计算机也把它们看成是单步操作。</p>

<p>这就是为什么它们叫做原子操作，因为它们执行一个操作，通常这个操作会有多个指令（指令可以暂停和恢复），让所有指令看似瞬间发生，就好像它是一条指令，就像一个不可分割的原子。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_12.png" width="400" height="350"></p>

<p>使用原子操作，递增变量的代码看起来有点不一样。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_13.png" width="400" height="350"></p>

<p>现在我们使用<code>Atomics.add</code>，递增变量的多个步骤将不会在线程间相互交叉，相反，一个线程在完成它的原子操作前不会让其他线程先开始，等本身线程操作执行完了后再让其他线程执行自己的原子操作。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_14.png" width="400" height="350"></p>

<p>Atomics 的方法帮助避免这类竞态：</p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/add">Atomics.add</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/sub">Atomics.sub</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/and">Atomics.and</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/or">Atomics.or</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/xor">Atomics.xor</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/exchange">Atomics.exchange</a></li>
</ul>


<p>你会发现这个列表相当有限，甚至没有包括乘除操作，虽然库开发人员可以创建类似的原子操作。</p>

<p>开发人员可以使用<code>Atomics.compareExchange</code>来做到这点，通过这个方法，你可以从 SharedArrayBuffer 中取到一个值，然后执行操作，如果你是第一个检出的，就没有其他线程会更新它，执行完了再把它写回到 SharedArrayBuffer 里面；如果其他线程更新了它，那么你可以获取最新的值，然后再操作一次。</p>

<h2>在多操作中的竞态条件</h2>

<p>Atomic 的操作可以帮助你在“单步操作”中避免竞态条件，但有时候你需要改变一个对象的多个值（通过多操作的方式），同时不希望在同一时刻有其他人来更新这个对象。基本上，这意味着每次对象的改变，对象本身相对其他线程来说是锁定并且不可访问的。</p>

<p>Atomics 对象没有提供工具来直接处理这个问题，但它提供了库开发人员可以用来解决这个问题的工具，库开发人员可以创建一个锁。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_15.png" width="400" height="350"></p>

<p>如果代码想要锁住数据，它必须要有数据的锁，然后它可以用锁来防住其他线程，只有当锁可以用的时候才可以对数据进行访问和更新。</p>

<p>为了创建一个锁，库开发人员可以使用<code>Atomics.wait</code> 和 <code>Atomics.wake</code>，还有其他的方法比如<code>Atomics.compareExchange</code> 和<code>Atomics.store</code>。如果你想要了解这些方法是如何工作的，可以看一下<a href="https://github.com/lars-t-hansen/js-lock-and-condition">这个基本的锁实现</a>。</p>

<p>在这个例子中，线程 2 会要求数据的锁并把<code>locked</code>的值设为 true，这意味着在线程 2 解锁之前线程 1 不能访问数据。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_16.png" width="400" height="350"></p>

<p>如果线程 1 想要访问数据，它会尝试获取锁，但因为锁已经被占用了，所以它获取不到，线程会等待（所以会有阻塞）直到锁可用。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_17.png" width="400" height="350"></p>

<p>一旦线程 2 完成了，它会调用解锁操作，完了锁会通知那些一直在等待锁的线程们：我现在可以用了。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_18.png" width="400" height="350"></p>

<p>然后线程会取到锁，为它自己能单独使用而将数据锁住。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_19.png" width="400" height="350"></p>

<p>一个关于锁的库会使用 Atomics 对象多个不同的方法，但在这种情况下最重要的方法是：</p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait">Atomics.wait</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wake">Atomics.wake</a></li>
</ul>


<h2>指令重排序引起的竞态条件</h2>

<p>这是 Atomics 负责的第三种同步问题，这一个会让人惊讶。</p>

<p>你可能没有意识到这一点，但这是一个好机会（让你了解它），你写的代码没有按照你的预期顺序运行，编译器和 CPU 会重新排序代码让其跑得更快。</p>

<p>打个比方，假如说你要写代码来计算总数，你想要在总数计算完成后设置一个标示。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_20.png" width="400" height="350"></p>

<p>为了编译这些代码，我们需要为每个变量决定使用哪个注册机，然后我们可以将源码翻译成指令给计算机看。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_21.png" width="400" height="350"></p>

<p>到目前为止，所有事情都按预期进行。</p>

<p>如果你不理解计算机是如何在限制条件下工作的（和如何使用管道来执行代码），那么这看起来会不明显，第二行代码会在它执行之前稍微等一会。</p>

<p>大部分计算机会把执行指令的过程分成多个步骤，这样确保了 CPU 在不同区域都能保持一直忙碌，这样可以充分利用 CPU。</p>

<p>这里是一个指令的过程步骤示例：</p>

<ul>
<li>从内存中获取下个指令</li>
<li>计算出指令告诉我们要做什么（比如解码指令），然后从注册者中取到值</li>
<li>执行指令</li>
<li>把结果写回注册者</li>
</ul>


<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_22.png" width="400" height="350"></p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_23.png" width="400" height="350"></p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_24.png" width="400" height="350"></p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_25.png" width="400" height="350"></p>

<p>这就是一个指令是经过管道的过程。理想情况下，我们想要紧接着执行第二个命令，一旦我们进入第二步，我们就会去获取下个指令。</p>

<p>问题在于指令#1 和指令#2 之间会有依赖。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_26.png" width="400" height="350"></p>

<p>我们可以暂停 CPU 直到指令#1 在注册机中更新完<code>subTotal</code>，但这会减慢速度。</p>

<p>为了让事情更有效率，大部分编译器和 CPU 将会重新排序代码，他们会寻找那些没有使用<code>subTotal</code>或<code>total</code>的指令，然后把它们移动到这两行代码中间。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_27.png" width="400" height="350"></p>

<p>这可以让指令源源不断地移动通过管道。</p>

<p>因为第 3 行没有依赖第 1 或 2 行的值，所以编译器或者 CPU 计算出它重排序是安全的。当你在一个单线程中运行时，没有其他代码会看到这一部分值，直到整个函数执行完成。</p>

<p>但当你在另外一个处理器上有其他的线程在同时运行时，情况就不一样了。其它线程不用等方法完成后再去看这些变化，它可以在回写内存时马上看到它们，所以<code>isDone</code>标示在被告知总数前就被设置好了。</p>

<p>如果你想要用<code>isDone</code>来表示总数已经计算完成并准备用于其他线程，那么这种重排序将产生竞态条件。</p>

<p>Atomics 尝试解决其中的一些缺陷，当你使用一个 Atomic 写操作，就好比在代码的两部分中间放入一个栅栏。</p>

<p>Atomic 没有彼此间的重排序操作，也没有其他操作可以移动它们。实际上，有两个操作经常用于控制顺序：</p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/load">Atomics.load</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/store">Atomics.store</a></li>
</ul>


<p>在同一方法的代码中，所有在<code>Atomics.store</code>上面的变量，它们的更新在其写回内存之前都会在<code>Atomics.store</code>完成之前完成，即使有非原子指令在彼此间重新排序，它们中任何一个指令也不能移动到<code>Atomics.store</code>下面去执行。</p>

<p>在同一方法的代码中，所有在<code>Atomics.load</code>下面的变量，它们的加载都会在<code>Atomics.load</code>完成之后完成，同样地，即使有非原子指令在彼此间重新排序，它们中任何一个指令也不能移动到<code>Atomics.load</code>上面去执行。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_28.png" width="400" height="350"></p>

<p>注意，我在这里展示的 while 循环叫做自旋锁，它的效率是非常低的。如果它在主线程中，它可能会让你的应用挂起，你肯定不会在真实代码中使用它。</p>

<p>再次申明，在应用代码中不要直接使用这些方法，相反地，库会用它们来创建锁。</p>

<h2>总结</h2>

<p>共享内存的多线程编程是困难的，有很多种不同类型的竞态条件的坑等着你去踩。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_29.png" width="400" height="350"></p>

<p>这就是为什么不要在你的应用代码中直接用 SharedArrayBuffers 和 Atomics，你应该依赖那些有多线程开发经验的开发者开发出来的库，他们花了很多时间在研究内存模型。</p>

<p>现在离 SharedArrayBuffer 和 Atomics 的到来还有点早，这些库也还没创建出来，但这些新的 API 提供了基础功能来创建它们。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通俗漫画介绍 ArrayBuffers 和 SharedArrayBuffers]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/06/20/a-cartoon-intro-to-arraybuffers-and-sharedarraybuffers-zh/"/>
    <updated>2017-06-20T22:44:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/06/20/a-cartoon-intro-to-arraybuffers-and-sharedarraybuffers-zh</id>
    <content type="html"><![CDATA[<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_15.png" width="400" height="350"></p>

<p>这是 3 篇文章中的第二篇：</p>

<ul>
<li><a href="http://zhaozhiming.github.io/blog/2017/06/20/a-crash-course-in-memory-management-zh/">内存管理速成教程</a></li>
<li>通俗漫画介绍 ArrayBuffers 和 SharedArrayBuffers</li>
<li><a href="http://zhaozhiming.github.io/blog/2017/06/21/avoiding-race-conditions-in-sharedarraybuffers-with-atomics-zh/">在 Sharedarraybuffers 中使用 Atomics 来避免竞态条件</a></li>
</ul>


<p>原文链接：<a href="https://hacks.mozilla.org/2017/06/a-cartoon-intro-to-arraybuffers-and-sharedarraybuffers/">A cartoon intro to ArrayBuffers and SharedArrayBuffers</a></p>

<!--more-->


<h1>通俗漫画介绍 ArrayBuffers 和 SharedArrayBuffers</h1>

<p>在<a href="http://zhaozhiming.github.io/blog/2017/06/20/a-crash-course-in-memory-management-zh/">上一篇文章中</a>，我解释了像 JavaScript 这样的内存自动管理语言如何操作内存，我也解释了像 C 语言这样的手动内存管理语言如何工作的。</p>

<p>为什么当我们讨论 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer">ArrayBuffers</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer">SharedArrayBuffers</a> 时这部分内容很重要呢？</p>

<p>这是因为 ArrayBuffers 提供了一种让你可以手动操作数据的方式，即使你是使用像 JavaScript 这种内存自动管理的语言。</p>

<p>为什么你将来会去做这件事（指内存管理）？</p>

<p>正如上一篇文章所说的，这是自动内存管理的一个权衡，它方便开发人员，但增加了开销，某些情况下，这种开销会导致性能问题。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_01.png" width="400" height="350"></p>

<p>举个例子，当你要在 JS 中创建一个变量，引擎必须猜测这个变量是哪种类型，如何在内存中展示。因为这种猜测，JS 引擎通常会为变量预留比实际占用的更多的空间，依赖于变量，内存槽容量可能比实际需要的要大 2 到 8 倍，这将导致很多内存的浪费。</p>

<p>另外，某些创建和使用 JS 对象的模式可能让垃圾回收难以进行，如果你可以手动管理内存，你就可以在工作中选择一个正确分配和释放内存的策略。</p>

<p>大部分情况下，这不会有什么问题。大部分系统性能不会如此敏感，以致要你使用手动内存管理，而且通常情况下，手动管理内存甚至可能让程序变得更慢。</p>

<p>但有时候你需要处理一些底层的工作来让你的代码运行得尽可能的快，ArrayBuffers 和 SharedArrayBuffers 给你另外一个选择。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_02.png" width="400" height="350"></p>

<h2>那么 ArrayBuffer 是如何工作的？</h2>

<p>基本上它就像 JavaScript 中的其他数组，但是你不能在里面放任何类型的数据，比如字符串和对象，你只能在里面放二进制字节（可以用来表示数字的那个东西）。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_03.png" width="400" height="350"></p>

<p>有件事情我必须在这里澄清，实际上你不能直接添加二进制字节到 ArrayBuffer，ArrayBuffer 本身不知道这个字节应该多大，不同类型的数字应该如何转换成字节。</p>

<p>ArrayBuffer 本身只是一个 0 和 1 存放在一行里面的一个集合，ArrayBuffer 不知道第一个和第二个元素在数组中该如何分配。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_04.png" width="400" height="350"></p>

<p>为了能提供上下文，为了能真正分解数据并放入到盒子中，我们需要将其封装在一个叫做 view 的东西里面。这些在数据上的 view 可以被添加进确定类型的数组，而且我们有很多种确定类型的数据可以使用。</p>

<p>例如，你可以使用一个 Int8 的确定类型数组来分离存放 8 位二进制字节。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_05.png" width="400" height="350"></p>

<p>或者你可以使用一个无符号的 Int16 数组来分离存放 16 位二进制字节，这样如果是一个无符号的整数也能处理。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_06.png" width="400" height="350"></p>

<p>你甚至可以在相同基础的 buffer 上使用不同的 view，同样的操作不同的 view 会给你不同的结果。</p>

<p>比如，如果我们在这个 ArrayBuffer 中从 Int8 view 里获取了元素 0 和 1，在 Uint16 view 中元素 0 会返回给我们不同的值，尽管它们包含的是完全相同的二进制字节。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_07.png" width="400" height="350"></p>

<p>在这种方式中，ArrayBuffer 基本上扮演了一个原生内存的角色，它模拟了像 C 语言才有的那种直接访问内存的方式。</p>

<p>你可能想知道为什么我们不让程序直接访问内存，而是添加了这种抽象层。直接访问内存将导致一些安全漏洞，我会在以后的文章中解释。</p>

<h2>那么什么是 SharedArrayBuffer？</h2>

<p>为了解释 SharedArrayBuffers，我需要解释一点关于并行运行代码和 JavaScript 的知识。</p>

<p>你可以并行运行代码让你的代码跑的更快，或者让其更快地响应用户事件。为了做到这点，你需要分离你的工作。</p>

<p>在一个典型的 app 中，所有工作都在一个单独独立的主线程中被照看着，我以前讲过这个。主线程就像一个全栈开发，它负责 JavaScript，DOM 结构和页面布局。</p>

<p>如果你能减少主线程的工作量，不管是什么事情都对工作负载有帮助，在某些情况下，ArrrayBuffer 可以减少主线程的工作量。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_08.png" width="400" height="350"></p>

<p>但是有些时候减少主线程的工作负载是不够的，有时候你需要一些援助，你需要分离工作。</p>

<p>在大部分编程语言中，通常分离工作的方式就是使用一种叫做线程的东西，基本上这就像有多个人在做同一个项目。如果你的任务都比较独立，你就可以将任务分配给不同的线程，这样所有线程都可以在相同的时间内独立完成任务。</p>

<p>在 JavaScript 中，你可以使用一个叫做 web worker 的东西来做这件事情，这些 web worker 跟你在其他语言中用到的线程有些许差别，它们默认不共享内存。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_09.png" width="400" height="350"></p>

<p>这意味着如果你想要共享一些数据给其他线程，你需要复制它们，方法 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage"><code>postMessage</code></a> 可以做到这点。</p>

<p>postMessage 获取你放进去的任何数据，序列化它们，再将其发送给其他 web worker，然后其他 web worker 反序列数据再将其放入到内存。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_10.png" width="400" height="350"></p>

<p>这是一个非常慢的过程。</p>

<p>某些类型的数据，像 ArrayBuffer，你能做的操作叫做转移内存，这意味着移动指定的内存块让其他 web worker 可以访问数据。<br/>
但第一个 web worker 就不能再访问移动后的数据了。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_11.png" width="400" height="350"></p>

<p>在某些情况下这可以工作，但大部分情况是你需要高性能的并行方式，你真正需要的是拥有可以共享的内存。</p>

<p>这就是需要 SharedArrayBuffers 的原因。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_12.png" width="400" height="350"></p>

<p>通过 SharedArrayBuffer，不管是 web worker，还是线程，都可以从相同的内存块中读写数据。</p>

<p>这意味着你不会有使用 postMessage 时的交流开销和延迟。所有 web worker 都可以立即访问数据。</p>

<p>在同一时刻所有线程都访问同一数据会有些危险，可能引起一个叫竞态条件的问题。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_13.png" width="400" height="350"></p>

<p>我将在<a href="http://zhaozhiming.github.io/blog/2017/06/21/avoiding-race-conditions-in-sharedarraybuffers-with-atomics-zh/">下一篇文章</a> 中解释。</p>

<h2>SharedArrayBuffers 当前的现状是怎样的？</h2>

<p>SharedArrayBuffers 不久将会出现在所有主流浏览器中。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_14.png" width="400" height="350"></p>

<p>它们已经在 Safari（在 Safari 10.1）里了，Firefox 和 Chrome 将在他们的 7/8 月的发布中引进它们，而且 Edge 也将在秋季的 Windows 更新中引进它们。</p>

<p>不过即使它们在所有主流浏览器中都可用，我们也不希望应用开发人员直接使用它们。实际上，我们推荐不用它们，你应该使用最高级别的抽象封装。</p>

<p>我们希望 JavaScript 库开发人员来创建对应的库来让你更方便和安全地使用 SharedArrayBuffers。</p>

<p>另外，一旦 SharedArrayBuffers 内置到平台中，WebAssembly 就可以使用它们来实现多线程支持。一旦到位，你就可以使用像 Rust 那样的并发抽象技术，Rust 的主要目标之一就是让你无所畏惧地使用并发编程。</p>

<p>在<a href="http://zhaozhiming.github.io/blog/2017/06/21/avoiding-race-conditions-in-sharedarraybuffers-with-atomics-zh/">下一篇文章</a>中，我们将介绍这些库作者使用的工具（Atomics），他们用来构建抽象层同时避免竞态条件。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_15.png" width="400" height="350"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[内存管理速成教程]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/06/20/a-crash-course-in-memory-management-zh/"/>
    <updated>2017-06-20T19:29:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/06/20/a-crash-course-in-memory-management-zh</id>
    <content type="html"><![CDATA[<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_07.png" width="400" height="350"></p>

<p>我一直很佩服那些能将复杂原理讲得通俗易懂的人，<a href="http://code-cartoons.com/">Lin Clark 女神</a> 就是其中一个，拜读完她新发布的系列文章“通俗漫画介绍 SharedArrayBuffers”之后，深深为之折服，文章不仅一如既往地通俗易懂，作者亲自画的图更是和文章相得益彰。看完萌生出了翻译该系列文章的想法，不过本人英文能力有限，如果觉得翻译地不好的还请看英文原版，英文版也是很容易理解的。</p>

<p>这是 3 篇文章中的第一篇：</p>

<ul>
<li>内存管理速成教程</li>
<li><a href="http://zhaozhiming.github.io/blog/2017/06/20/a-cartoon-intro-to-arraybuffers-and-sharedarraybuffers-zh/">通俗漫画介绍 ArrayBuffers 和 SharedArrayBuffers</a></li>
<li><a href="http://zhaozhiming.github.io/blog/2017/06/21/avoiding-race-conditions-in-sharedarraybuffers-with-atomics-zh/">在 Sharedarraybuffers 中使用 Atomics 来避免竞态条件</a></li>
</ul>


<p>原文链接：<a href="https://hacks.mozilla.org/2017/06/a-crash-course-in-memory-management/">A crash course in memory management</a></p>

<!--more-->


<h1>内存管理速成教程</h1>

<p>为了搞明白我们为什么把 SharedArrayBuffer 加入到 JavaScript，你首选需要搞懂一点关于内存管理方面的知识。</p>

<p>你可以把机器中的内存想象成一堆盒子，我觉得这个有点像你工作中的办公邮箱，或者学校学生的储物柜。</p>

<p>如果你想给学生们留一些东西，你可以把东西放到盒子里面。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_01.png" width="400" height="350"></p>

<p>在每个盒子旁边都有一个数字，这就是内存地址，这用来让你告诉别人留给他们的东西在哪个位置。</p>

<p>每个盒子都有相同的大小，能容纳一定量的信息。盒子的容量指定给了机器，这个容量就叫字长。字长一般是 32 位或者 64 位，但为了让它容易演示，我会使用 8 位的字长。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_02.png" width="400" height="350"></p>

<p>如果我们想要把数字 2 放到其中的一个盒子里，我们可以很容易地做到，因为数字很容易<a href="https://www.khanacademy.org/math/algebra-home/alg-intro-to-algebra/algebra-alternate-number-bases/v/decimal-to-binary">表现成二进制</a>。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_03.png" width="400" height="350"></p>

<p>如果我们想要放一个不是数字的东西呢？比如字母 H ？</p>

<p>我们需要一个方法将其展示成数字，为了做到这一点，我们需要编码格式，比如 <a href="https://en.wikipedia.org/wiki/UTF-8">UTF-8</a>，然后我们需要一个东西将其转换成数字。比如一个编码环，这样我们就可以存储它了。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_04.png" width="400" height="350"></p>

<p>当我们想要从盒子中取出它时，我们需要一个解码器将其转换回字符 H 。</p>

<h2>自动内存管理</h2>

<p>当你使用 JavaScript 时，实际上你不需要过多考虑内存的事情，它是远离你的一个抽象概念，这意味着你不会直接和内存打交道。</p>

<p>JS 引擎作为一个中间人的角色来代替你打交道，它替你管理着内存。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_05.png" width="400" height="350"></p>

<p>让我们写一些 JS 代码，比如 React，需要创建一个变量。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_06.png" width="400" height="350"></p>

<p>JS 引擎做的事情就是运行通过编码器转换成二进制表示的值。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_07.png" width="400" height="350"></p>

<p>然后它找到可以存放二进制表示值的空间，这个过程叫做分配内存。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_08.png" width="400" height="350"></p>

<p>然后，引擎会跟踪这个变量是否仍然在程序中被引用，如果变量不在被使用，内存将被回收，这样 JS 引擎就可以存放新的值了。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_09.png" width="400" height="350"></p>

<p>观察内存中的变量（包括字符串，对象和其他类型的值），当它们不再有用的时候清除它们的过程，叫做垃圾回收。</p>

<p>像 JavaScript 这种不用直接处理内存的语言，叫做内存自动管理语言。</p>

<p>内存自动管理可以让开发人员开发程序更加简单，但也增加了程序的开销，这些开销有时候会让性能变得不可预测。</p>

<h2>手动管理内存</h2>

<p>手动管理内存的语言不一样。举个例子，让我们看一下如果用 C 语言来写 React 的话（现在可以使用 WebAssembly 做到这一点），将如何处理内存。</p>

<p>C 语言没有像 JavaScript 那样有一个抽象层来管理内存，相反，你可以直接操作内存，你可以从内存中加载数据，你也可以直接在内存中存储数据。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_10.png" width="400" height="350"></p>

<p>当你编译 C 或者其他语言成 WebAssembly 时，你使用的工具会添加一些辅助代码到你的 WebAssembly，例如添加编码和解码二进制字节的代码。这个代码叫做运行时环境。运行时代码会做一些像 JS 引擎在 JS 中做的事情。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_11.png" width="400" height="350"></p>

<p>但对于一个手动管理内存语言来说，运行期不包括垃圾回收。</p>

<p>这并不意味着你什么事情都要自己做，即使是在手动管理内存语言里，你也会常受到语言运行期的帮助，拿 C 语言来说，运行期会跟踪自由列表中打开的内存地址。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_12.png" width="400" height="350"></p>

<p>你可以使用<code>malloc</code>方法（内存分配）来让运行期找到哪些内存地址可以来存放你的数据，这将从自由列表中取出这些地址，当你处理完这些数据，你必须使用<code>free</code>方法来释放内存，然后这些地址将重新回到自由列表中。</p>

<p>你必须计算出什么时候来调用这些方法，这就是为什么我们叫它做手动内存管理了，你要自己来管理内存。</p>

<p>对于一个开发人员来说，计算出什么时候该释放哪个区域的内存是很难的，如果你的计算时间出错了，那么将可能引发缺陷甚至会导致一个安全漏洞，如果你不释放内存，那么内存终将会耗尽。</p>

<p>这就是为什么很多现代语言会使用自动内存管理，为了避免人为的错误，但这也带来了性能上的开销，我会在<a href="http://zhaozhiming.github.io/blog/2017/06/20/a-cartoon-intro-to-arraybuffers-and-sharedarraybuffers-zh/">下一篇文章</a> 讲更多这方面的内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[超乎你想像的 styled-components]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/06/18/styled-component-beyond-the-expected/"/>
    <updated>2017-06-18T11:32:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/06/18/styled-component-beyond-the-expected</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/06/styled-components.png" width="400" height="350"></p>

<p>Css 在 React 中的写法一直在持续改进，从原生的 Css 到 <a href="https://github.com/css-modules/css-modules">CSS Modules</a>，再到 Css In Js，目标是让开发者更高效地写组件的样式。</p>

<p><a href="https://www.styled-components.com/"><code>styled-components</code></a> 是基于 Css In Js 方式实现的一个库，刚开始看到这个库时，我简单地以为它只是使用了内联方式来实现 React 组件的样式，但试用了之后，才发现不仅它的实现不是内联的方式，而且因为样式是写在 JS 里面，所以它的强大远超过我的预期。</p>

<!--more-->


<h2>使用 ES6 的字符串模板</h2>

<p>使用过 React 的同学可能比较清楚，如果要在一个组件通过 JS 来定义 css 样式，就必须在 React 组件里面通过<code>style</code>属性来写。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Home</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=</span><span class="p">{{</span> <span class="nx">marginLeft</span><span class="o">:</span> <span class="mi">10</span> <span class="p">}}</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">World</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式有很多<code>缺点</code>：</p>

<ul>
<li>样式属性与原生 css 的写法不一致，样式名称必须用驼峰的命名方式来命令，而不是多个单词用<code>-</code>号分隔；单位的写法也不一致，百分比是用字符串形式，而<code>pixel</code>值是用数字型形式。</li>
<li>无法写伪元素，要实现<code>hover</code>的话就必须使用<code>onMouseOver</code>事件来实现，而且要写很多 JS 代码，像<code>before</code>和<code>after</code>这类伪元素则根本没法通过这种方式实现。</li>
</ul>


<p><code>styled-components</code> 最吸引开发者的是使用了 ES6 的字符串模板方式来定义 css 样式，这样使得 css 的写法与原生的 css 写法基本一致，克服了上述的缺点。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Button</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">a</span><span class="err">`</span>
</span><span class='line'>  <span class="nx">display</span><span class="o">:</span> <span class="nx">inline</span><span class="o">-</span><span class="nx">block</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">border</span><span class="o">-</span><span class="nx">radius</span><span class="o">:</span> <span class="mi">3</span><span class="nx">px</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">padding</span><span class="o">:</span> <span class="mf">0.5</span><span class="nx">rem</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">margin</span><span class="o">:</span> <span class="mf">0.5</span><span class="nx">rem</span> <span class="mi">1</span><span class="nx">rem</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">width</span><span class="o">:</span> <span class="mi">11</span><span class="nx">rem</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">background</span><span class="o">:</span> <span class="nx">transparent</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">color</span><span class="o">:</span> <span class="nx">white</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">border</span><span class="o">:</span> <span class="mi">2</span><span class="nx">px</span> <span class="nx">solid</span> <span class="nx">white</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&amp;</span> <span class="nx">hover</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">color</span><span class="o">:</span> <span class="nx">blue</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&amp;</span> <span class="nx">before</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么 <code>styled-components</code> 的底层原理是什么？为什么通过 ES6 的字符串模板可以实现这种功能？感兴趣的同学可以看下下面<code>推荐阅读</code>的文章<code>styled-components-magic-explained</code>。</p>

<p>这里列举几个例子简单感受一下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 我们有个方法来打印方法参数</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">logArgs</span> <span class="o">=</span> <span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">favoriteFood</span> <span class="o">=</span> <span class="s1">&#39;pizza&#39;</span>
</span><span class='line'><span class="c1">// 用正常的方法调用，输出结果跟预期一样，是一句完整的句子。</span>
</span><span class='line'><span class="nx">logArgs</span><span class="p">(</span><span class="err">`</span><span class="nx">I</span> <span class="nx">like</span> <span class="nx">$</span><span class="p">{</span><span class="nx">favoriteFood</span><span class="p">}.</span><span class="err">`</span><span class="p">)</span> <span class="c1">// -&gt; I like pizza.</span>
</span><span class='line'><span class="c1">// 而用字符串模板的方式来调用方法，则会变成这样：句子会被变量分隔成 2 个字符串，变量值变成数组后面的参数。</span>
</span><span class='line'><span class="nx">logArgs</span><span class="err">`</span><span class="nx">I</span> <span class="nx">like</span> <span class="nx">$</span><span class="p">{</span><span class="nx">favoriteFood</span><span class="p">}.</span><span class="err">`</span> <span class="c1">// -&gt; [&quot;I like &quot;, &quot;.&quot;] &quot;pizza&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>生成一个随机的 class 名称</h2>

<p>开始看到 <code>styled-components</code> 时我天真地以为它的样式是通过内联的方式放入到组件里面，其实不是，它的样式最终还是封装成一个 class 然后再放到组件里面。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2017/06/styled-components-class1.png">
<img src="http://zhaozhiming.github.io/images/post/2017/06/styled-components-class2.png">
<img src="http://zhaozhiming.github.io/images/post/2017/06/styled-components-class3.png"></p>

<p>这样不仅避免了内联样式的局限性，而且class 的名称是一个随机的字符串，这样也完美解决了 Css 的一个大难题：样式名称重复的问题。</p>

<h2>Css In Js 的好处</h2>

<p>使用 JS 来写 css 的好处，就是可以利用 JS 的语法来封装 CSS 对象，比如可以使用<code>if</code>语句来判断需要使用哪个样式值。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 这里利用了 `styled-components` 的特性</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">Button</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="err">`</span>
</span><span class='line'>  <span class="nx">color</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">props</span> <span class="o">=&gt;</span> <span class="nx">props</span><span class="p">.</span><span class="nx">isActive</span> <span class="o">?</span> <span class="s1">&#39;blue&#39;</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span><span class="p">};</span>
</span><span class='line'><span class="err">`</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者通过一个方法来返回一个样式对象，通过参数来动态定义样式。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Button</span> <span class="o">=</span> <span class="p">(</span><span class="nx">color</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="err">`</span>
</span><span class='line'>    <span class="nx">color</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">color</span><span class="p">};</span>
</span><span class='line'>  <span class="err">`</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个是不是很眼熟？有点像<code>sass</code>等 css 预处理器中的方法？没错！通过 JS 的特性就可以让你在 JS 中做预处理器中做的事情。</p>

<h2><code>styled-components</code> 的预处理工具</h2>

<p>说到 CSS 的预处理器，其实 <code>styled-components</code> 也有一套用 JS 实现的预处理器工具库——<a href="https://github.com/styled-components/polished">polished</a>，其中包括一些常用的 CSS 方法，比如 clearfix、hsl、mix 等，让开发者可以完全不再使用 css 预处理器来写 css 了。</p>

<h2><code>theme</code> 特性</h2>

<p><code>styled-components</code> 里面还有一个比较特别的特性是<code>theme</code>，它利用了 React 的<code>context</code>特性来传递其中的参数，可以让样式对象直接从最上层的组件传递到最下层的组件。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 首先定义一个`theme`样式对象</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">styleGuide</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">cloudy</span><span class="o">:</span> <span class="s1">&#39;#F2F4F7&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">darkGray</span><span class="o">:</span> <span class="s1">&#39;#4A637C&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">gray</span><span class="o">:</span> <span class="s1">&#39;#7A8D9F&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// ...more colors or mixins</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="p">(</span>
</span><span class='line'>  <span class="c1">// 将`theme`对象传递给上层组件`ThemeProvider`（这也是 `styled-components` 的一个 API），这样下层组件就可以通过&quot;props.theme.gray&quot;来引用其中的样式了</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">ThemeProvider</span> <span class="nx">theme</span><span class="o">=</span><span class="p">{</span><span class="nx">styleGuide</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">App</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">Switch</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">AuthRoute</span> <span class="nx">auth</span><span class="o">=</span><span class="p">{</span><span class="nx">auth</span><span class="p">}</span> <span class="nx">exact</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/&quot;</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">DashboardView</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">AuthRoute</span> <span class="nx">auth</span><span class="o">=</span><span class="p">{</span><span class="nx">auth</span><span class="p">}</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/profile&quot;</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">DashboardView</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/login&quot;</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">LoginView</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/logout&quot;</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">LogoutView</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="cm">/* ...more routes */</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">NotFoundView</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/Switch&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/App&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/ThemeProvider&gt;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Define our button, but with the use of props.theme this time</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">Button</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">button</span><span class="err">`</span>
</span><span class='line'>  <span class="nx">font</span><span class="o">-</span><span class="nx">size</span><span class="o">:</span> <span class="mi">1</span><span class="nx">em</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">margin</span><span class="o">:</span> <span class="mi">1</span><span class="nx">em</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">padding</span><span class="o">:</span> <span class="mf">0.25</span><span class="nx">em</span> <span class="mi">1</span><span class="nx">em</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">border</span><span class="o">-</span><span class="nx">radius</span><span class="o">:</span> <span class="mi">3</span><span class="nx">px</span><span class="p">;</span>
</span><span class='line'>  <span class="cm">/* Color the border and text with theme properties */</span>
</span><span class='line'>  <span class="nx">color</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">props</span> <span class="o">=&gt;</span> <span class="nx">props</span><span class="p">.</span><span class="nx">theme</span><span class="p">.</span><span class="nx">darkGray</span><span class="p">};</span>
</span><span class='line'>  <span class="nx">border</span><span class="o">:</span> <span class="mi">2</span><span class="nx">px</span> <span class="nx">solid</span> <span class="nx">$</span><span class="p">{</span><span class="nx">props</span> <span class="o">=&gt;</span> <span class="nx">props</span><span class="p">.</span><span class="nx">theme</span><span class="p">.</span><span class="nx">darkGray</span><span class="p">};</span>
</span><span class='line'><span class="err">`</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>可以对样式对象下面的子元素进行样式定义</h2>

<p>在使用原生 css 的时候，经常会这样写样式。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.foo</span> <span class="nt">h1</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">16px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.foo</span> <span class="nt">h2</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>很多 <code>styled-components</code> 新手（比如我）会为每个 h1 和 h2 定义一个样式对象，这样其实多写了很多代码，也没有必要，其实可以通过这种方式来定义子元素的样式。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">const</span> <span class="nt">FooDiv</span> <span class="o">=</span> <span class="nt">styled</span><span class="nc">.div</span><span class="err">`</span>
</span><span class='line'>  <span class="o">&amp;</span> <span class="nt">h1</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">16px</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&amp;</span> <span class="nt">h2</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">`</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>独立样式文件</h2>

<p>在一般的 React 组件中，样式和组件文件是分离的（比如 App.js 和 style.css），使用了 <code>styled-components</code> 后其实也可以沿用这种方式来组织文件，定义一个<code>style.js</code>文件来写样式对象，然后在组件文件中引入该样式文件。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// style.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">styled</span> <span class="nx">from</span> <span class="s1">&#39;styled-components&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">AppDiv</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="err">`</span>
</span><span class='line'>  <span class="nx">display</span><span class="o">:</span> <span class="nx">flex</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">justify</span><span class="o">-</span><span class="nx">content</span><span class="o">:</span> <span class="nx">space</span><span class="o">-</span><span class="nx">between</span><span class="p">;</span>
</span><span class='line'><span class="err">`</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// App.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">css</span> <span class="nx">from</span> <span class="s1">&#39;./style&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">css</span><span class="p">.</span><span class="nx">AppDiv</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">World</span><span class="o">&lt;</span><span class="err">/css.AppDiv&gt;;</span>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>缺点</h2>

<h3>不能用 stylelint 检查你的 Css 代码</h3>

<p>在使用 <code>styled-components</code> 的过程中也会遇到一些问题，比如我们的项目会用<code>stylelint</code>来做样式代码的检查，但是使用了 styled-compoents 后就没办法让<code>stylelint</code>的规则生效了。</p>

<h3>不能用 prettier 来格式化你的 Css 代码</h3>

<p>现在<code>prettier</code>不仅可以帮你格式化 JS 代码，还可以格式化 CSS 代码，但如果使用了<code>styled-components</code>的话，JS 中的字符串模板内容没有办法使用<code>prettier</code>来格式化，这个也比较尴尬。</p>

<h2>推荐阅读</h2>

<ul>
<li><a href="http://mxstbr.blog/2016/11/styled-components-magic-explained/">styled-components-magic-explained</a></li>
<li><a href="https://building.sentisis.com/embracing-the-power-of-styled-components-7b79a166c01b">embracing-the-power-of-styled-components</a></li>
<li><a href="https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660">a-unified-styling-language</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何安全地使用 React 的 context]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/02/19/how-to-safely-use-react-context-zh-cn/"/>
    <updated>2017-02-19T19:38:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/02/19/how-to-safely-use-react-context-zh-cn</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/02/react-context.jpeg"></p>

<p>在自己的 React 项目中使用了大量的 context，虽然知道这是一个不推荐使用的特性，但还是用了很多，想看看别人是怎么使用 context，所以翻译了下面这篇文章，注意文章中引用了嵌套的twitter内容，所以访问时最好是翻墙访问，以免影响阅读。</p>

<!--more-->


<h2>如何安全地使用 React 的 context</h2>

<p>Context 是 React 里面一个有着很多免费声明的、非常强大的特性，就像乐园里面的禁果一样。</p>

<p><img src="https://cdn-images-1.medium.com/max/1600/1*rbUZNOyFC64KmJaRhF2Kww.png"></p>

<p>这应该可以让你远离 context 了对吧？当然不是，它虽然是一个被禁用的 React 特性，但它的存在是一个不争的事实！context 可以把数据传递给组件树底层的组件，无需中间组件的参与。context 的经典用法是定制主题，本地化和路由这些方面。</p>

<p><a href="https://medium.com/@dan_abramov">Dan Abramov</a> 设计了一些明智的规则让你知道什么时候不该使用 context：</p>

<p><img src="https://cdn-images-1.medium.com/max/1600/1*b6Ev2SZ8SBlqhKVrOGDZaA.jpeg"></p>

<p>现在你可能已经按照这个明智的建议来做，但同时，使用一些使用了 context 的库，比如 <a href="https://github.com/ReactTraining/react-router">react-router</a>，当它和其他库像 <a href="https://github.com/reactjs/react-redux">react-redux</a> 或 <a href="https://github.com/mobxjs/mobx-react">mbox-react</a>组合时，甚至是和你自己的 shouldeComponentUpdate，又或者是由 React.PureComponent 提供的这个方法组合时，都仍然可能让你有陷入困境。长期存在的<a href="https://github.com/facebook/react/issues/2517">问题</a> 可以在 React 或 React 相关的第三方库的问题跟踪列中找到。</p>

<blockquote class="twitter-tweet" data-lang="zh-cn"><p lang="en" dir="ltr">Redux implements sCU, making setState + context break, forces &quot;subscribe&quot; on everybody else. Seems like React needs a generic solution.</p>&mdash; Ryan Florence (@ryanflorence) <a href="https://twitter.com/ryanflorence/status/779320581678174208">2016 年 9 月 23 日</a></blockquote>


<script async src="http://zhaozhiming.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>所以，为什么这篇博客跟你有关？这是因为：</p>

<ul>
<li>你是一个库的作者</li>
<li>你使用的库使用了 context，或者你自己使用 context，然后你想安全地使用 shouldComponentUpdate (SCU)，或者一些基于此的已有实现（比如 PureComponent, Redux 的 connect, 或者 MobX 的 observer）。</li>
</ul>


<h3>为什么 Context + ShouldComponentUpdate 有问题？</h3>

<p>Context 用来和嵌套很深的组件交流，例如，一个根组件定义了一个主题，然后这个组件树中的任何组件可能（也可能不）对这个信息感兴趣，就像<a href="https://facebook.github.io/react/docs/context.html#passing-info-automatically-through-a-tree">官方的 context 示例</a>。</p>

<p>shouldComponentUpdate (SCU) 另一方面在重新渲染组件树（包括子组件）的一部分中起到短路作用，例如如果 props 或者组件的 state 没有被明确的修改，组件就不会重新渲染，但这可能意外中断 context 的传播。</p>

<blockquote class="twitter-tweet" data-lang="zh-cn"><p lang="en" dir="ltr"><a href="https://twitter.com/dan_abramov">@dan_abramov</a> <a href="https://twitter.com/iammerrick">@iammerrick</a> <a href="https://twitter.com/ryanflorence">@ryanflorence</a> specifically, anything that uses context will break. Seems unfair to the rest of us :(</p>&mdash; MICHAEL JACKSON (@mjackson) <a href="https://twitter.com/mjackson/status/779329979741904896">2016 年 9 月 23 日</a></blockquote>


<p></p>

<script async src="http://zhaozhiming.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p></p>

<blockquote class="twitter-tweet" data-lang="zh-cn"><p lang="en" dir="ltr"><a href="https://twitter.com/mjackson">@mjackson</a> <a href="https://twitter.com/iammerrick">@iammerrick</a> <a href="https://twitter.com/ryanflorence">@ryanflorence</a> The thing here is that React Redux doesn’t rely on context updating correctly. It knows React is broken.</p>&mdash; Dan Abramov (@dan_abramov) <a href="https://twitter.com/dan_abramov/status/779335426377183232">2016 年 9 月 23 日</a></blockquote>


<script async src="http://zhaozhiming.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>让我们通过一个简单的 app 来模拟这个有冲突的问题：</p>

<script async src="http://zhaozhiming.github.io//jsfiddle.net/mweststrate/3ay25feh/embed/"></script>


<p>在 context 和 SCU 中产生问题的地方显而易见，当你按了“Red please!”按钮（在“Result”栏上面）时，按钮本身的颜色刷新了，但待办列表没有被更新。原因很简单，我们的 TodoList 组件是智能的，它知道当它没有接收到新的待办子项它就不需要重新渲染（最聪明的地方是继承了 PureCompnent，其重新实现了 shouldComponentUpdate方法）。</p>

<p>尽管如此，正因为这个最智能的地方（指继承了 PureCompnent，这个在大型应用是非常有必要的，因为它可以提供更好的性能），让 TodoList 中的 ThemedText 组件没有接收到更新了颜色的新 context！因为不管是 TodoList 或它的后代更新了，SCU 都返回 false。</p>

<p><img src="https://cdn-images-1.medium.com/max/1600/1*pnkWX7uEzCeY-7r5Ii_Y-A.png"></p>

<p>更糟的是，我们不能在 TodoList 中手工修改 SCU，因为它是固定了的一个方法。因为 SCU 不能接收相关的 context 数据（颜色），它不能（也不该）被订阅到指定的context数据中，毕竟它本身不是一个theme-aware的组件。</p>

<p>总的来说，shouldComponentUpdate 返回 false 导致任何 context 更新不再传播到子组件中去，非常糟不是吗？我们可以修复这个问题吗？</p>

<h3>ShouldComponentUpdate 和 Context 可以一起工作！</h3>

<p>你注意到了问题只发生在我们更新 context 的时候吗？这个是解决问题的关键所在，只要确保你一直不更新 context就可以了，换句话说：</p>

<ul>
<li>Context 不应该改变，它应该不可变</li>
<li>组件应该在其构造时只接收 context 一次</li>
</ul>


<blockquote><p>或者，为了使其不同，我们不应该直接把 state 保存到 context 中，取而代之，我们应该像依赖注入系统一样使用 conext。</p></blockquote>


<p>这意味着 SCU 不再干涉 context 需要传什么，因为不再需要传递新的 context 给子组件。棒极了！这解决了我们所有问题！</p>

<h3>通过基于 context 的依赖注入来和变更进行交流</h3>

<p>如果我们想要改变主题颜色，很简单，我们在适当的地方有一个依赖注入系统（DI），所以我们可以向下传递一个仓库来管理我们的主题并订阅它，我们绝不会传递一个新的仓库，但要确保仓库本身是有状态的，并且可以观察到组件的变化：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Theme 组件存储当前的主题状态，并允许组件订阅将来变化（的数据）</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">Theme</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">color</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">color</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">subscriptions</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">setColor</span><span class="p">(</span><span class="nx">color</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">color</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">f</span> <span class="o">=&gt;</span> <span class="nx">f</span><span class="p">())</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">subscribe</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">ThemeProvider</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// 主题提供者在它的整个生命周期中使用同样的主题对象</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">theme</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Theme</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 必要时更新主题，更新的内容会传播给订阅的主键</span>
</span><span class='line'>  <span class="nx">componentWillReceiveProps</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">theme</span><span class="p">.</span><span class="nx">setColor</span><span class="p">(</span><span class="nx">next</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">getChildContext</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span><span class="nx">theme</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">theme</span><span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">ThemeProvider</span><span class="p">.</span><span class="nx">childContextTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">theme</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">object</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">ThemedText</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 订阅未来改变的主题</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="p">.</span><span class="nx">theme</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">forceUpdate</span><span class="p">())</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">ThemedText</span><span class="p">.</span><span class="nx">contextTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">theme</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">object</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整的可运行列表：</p>

<script async src="http://zhaozhiming.github.io//jsfiddle.net/mweststrate/pc327358/embed/"></script>


<p>注意到在这个示例里面颜色的改变已经正确了，但它仍然使用 PureComponent，而且重要组件 TodoList 和 ThemedText 的 API 并没有改变。</p>

<p>虽然我们的 ThemeProvider 的实现变得更复杂了，它创建了一个Theme 对象来保持了我们主题的状态，Theme对象同时也是一个事件发射器，这可以让像 ThemeText 一样的组件来订阅未来的变化，Theme 对象通过 ThemeProvider 在组件树中传递。context 仍然是用来做这个的，但只有刚开始的时候传递了 context，后面的更新都通过 Theme 自己来传播，并没有重新创建一个 context。</p>

<p><img src="https://cdn-images-1.medium.com/max/1600/1*ul_3UcymigXysL-JzgF8dQ.png"></p>

<p>这个实现有点过于简单，更好的实现方式是需要在 componentWillUnmount 中清理事件监听器，并且应该使用 setState 来代替 forceUpdate，但好消息是你关注的内容已经有第三方库在开发了，它不会影响库的使用者，以后中间组件意外的 shouldComponentUpdate 实现将不再破坏库的行为。</p>

<h3>总结</h3>

<p>通过依赖注入系统而不是状态的容器来限制使用 context，我们可以同时构造基于 context 的库和正确行为的 shouldComponentUpdate，而不会被干涉和破坏消费者的 API，还有非常重要的一点是，在当前受限的 React context 系统中可以正常工作，只要你遵守这条简单的规则：</p>

<blockquote><p>Context 在每个组件中应该只被接收一次。</p></blockquote>




<blockquote class="twitter-tweet" data-lang="zh-cn"><p lang="en" dir="ltr"><a href="https://twitter.com/ryanflorence">@ryanflorence</a> <a href="https://twitter.com/mweststrate">@mweststrate</a> <a href="https://twitter.com/dan_abramov">@dan_abramov</a> <a href="https://twitter.com/sebmarkbage">@sebmarkbage</a> huh. i never thought of context as a &quot;dependency&quot; before. i guess it is.</p>&mdash; MICHAEL JACKSON (@mjackson) <a href="https://twitter.com/mjackson/status/779375007579287552">2016 年 9 月 23 日</a></blockquote>


<script async src="http://zhaozhiming.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>最后的提醒：context 仍然是实验性的特性，你应该避免直接使用 context（看上面 Dan Abramov 的规则），作为代替使用抽象过的 context 库（看下面的一些例子），但如果你是一个库的作者，或者如果你在写一些很好的高阶组件来处理 context，坚持上面的解决方案将避免一些令人讨厌的意外。</p>

<p><strong>更新于 2016-9-29：</strong> <a href="https://medium.com/@ryanflorence">Ryan Florence</a> 刚发布了一个通用包，包含了上面讲的这个模式，所以你可以不用自己写这些代码了 <a href="https://github.com/ReactTraining/react-context-emission">react-context-emission</a>。</p>

<h3>奖励：使用 MobX observables 作为 context 来简化事情</h3>

<p>（如果你在使用或对 MobX 感兴趣那你对这一章也会感兴趣）</p>

<p>如果你使用 MobX，你完全可以跳过整个事件触发器这个东西，并且作为替代在 context 中使用仓库 observables，并通过使用 observer decorator 或高阶组件来订阅他们，这使得你不必自己管理数据的订阅。</p>

<script async src="http://zhaozhiming.github.io//jsfiddle.net/mweststrate/xpw6a5Ld/embed/"></script>


<p>实际上，更简单的方法是使用 MobX 中的 <a href="https://github.com/mobxjs/mobx-react#provider-and-inject">Provider / inject</a> 的机制，它是对 React conext 机制的一个抽象化后的结果。它移除了 contextTypes 声明和类似其他东西的代码，注意这个类似的概念可以在一些库比如 <a href="https://github.com/acdlite/recompose/blob/master/docs/API.md#withcontext">recompose</a> 或 <a href="https://github.com/gnoff/react-tunnel">react-tunnel</a> 中找到。</p>

<script async src="http://zhaozhiming.github.io//jsfiddle.net/mweststrate/b537yvcj/embed/"></script>


<p>它是很值得尝试的，注意看，虽然我们初始基于依赖注入解决方案的代码量是原始代码的 1.5 倍，但最终的解决方案的代码和原来有问题的实现方案代码一样多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[物极必反]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/01/17/too-much-is-bad/"/>
    <updated>2017-01-17T20:02:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/01/17/too-much-is-bad</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/01/too_much.jpg" width="400" height="300"></p>

<p>物极必反是很多人都明白的一个道理，在软件开发中也一样，比如过度设计，这也是为什么Fackbook推崇“完成比完美更重要”的原因。</p>

<!--more-->


<p></p>

<h2>读书</h2>

<p>读书绝对是一件好事情，但是读书多就一定有帮助吗？在软件开发领域，读了一本技术书后，如果没有动手再实践一下，那知识永远只存在于理论中，并没有真正成为自己的东西。只有动手做了项目或者demo之后，才能真正记住书里的东西，在动手的过程中可能还能发现比书里更好的方法来解决问题。</p>

<p>人的时间精力是有限的，如果把时间都花在看书上，那实践能力肯定好不到哪里去，代码只有动手写过才能真正记住。“读万卷书不如走万里路”说的也是这个道理。技术领域的发展是迅速的，没有一种技术可以一直保持领先，没有一本技术书可以不过时，所以读书我觉得要看经典的，不用太多，每月保持1~2本是比较合适的。</p>

<p>当然，如果是新项目要了解的技术比较多，那这个时候就要多读几本书恶补一下，但切记读完书后还是要动手实践，这样才能真正巩固自己的知识。</p>

<h2>代码覆盖率</h2>

<p>最近看到有个大牛说过，百分百的覆盖率就像看报纸时要看完报纸上每个字一样，没有必要。根据二八原则，当你的代码覆盖率达到80%后，你还想往上涨，那意味着你要付出的代价就越大，得到的价值就越小，与其花那么大精力在百分百覆盖率上面，还不如把精力放到其他能保证产品质量的事情上。</p>

<p>百分百的覆盖率不能保证就有好的产品质量，但高的覆盖率肯定是要有很多的测试案例来支持的，越多的测试案例就意味着需要付出越多的精力来维护，会让团队越来越讨厌单元测试。</p>

<h2>重复代码</h2>

<p>DRY原则大家都知道，<code>Don't repeat yourself</code>，但是不是一发现有重复代码就要抽取成公共代码呢？其实经常做重构的同学应该比较清楚，一开始就想把代码写得很漂亮很完美那是不可能的，漂亮的代码都是重构出来的。先用丑陋的代码把功能实现，然后再用重构的手法把代码写得更具可读性和维护性，这是一个正常可行的过程，如果一开始就想写出完美的代码，那到最后写出来的代码可能是既不好看又不实用。</p>

<p>在编码的过程中，可以稍微让重复的代码增长一些，等重复的代码多到一定的程度后，你会从这些重复代码中发现一定的规律，这个时候再来抽取公共代码，这样的话公共代码的可用性、适用范围会更好一些。</p>

<h2>舒适区</h2>

<p>以前在一些敏捷开发的书或者培训中经常听到“跳出自己的舒适区”这一说法，意思是要敢于尝试不同的编程语言或技术领域，当你在“不舒适的区域”呆习惯了，你的舒适区就扩大了，从而你的能力也就增强了。</p>

<p>但最近看到有些人开始滥用这个说法，比如有人要求团队没日没夜加班，然后美其名曰说是要<strong>逼团队每个人走出自己的舒适区</strong>，这种说法我觉得是没搞懂什么是“非舒适区”。把学习新技能（比如学习新的编程语言）作为非舒适区我可以理解，这种一旦掌握了技能就不会像原来一样不适应了，这个过程不舒适程度是随着时间慢慢减少的，是有时间限制的，除非你一直学不会新技能（其实是不想学吧-_-）。</p>

<p>但是加班不一样，加班久了你就会觉得加班很舒服吗？人的精力是有限的，熬夜加班势必导致第二天无法以正常状态上班，更何况长期的加班。加班不是让人呆在一个“非舒适区”，而是一个“不健康区域”或者叫“危险区域”，在这个区域没有办法从“不舒适”变成“舒适”，改变的只有作息规律，可能长期加班后晚上精神一点，但白天就没什么状态了，但这样做又有什么意义。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grid 的完整介绍（三）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/01/10/complete-guide-grid-zhcn-part3/"/>
    <updated>2017-01-10T19:30:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/01/10/complete-guide-grid-zhcn-part3</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/01/css_grid3.jpeg" width="400" height="350"></p>

<p>接着上篇 blog，这篇继续介绍 Grid 的网格子项属性，内容没有那么长了。</p>

<p>原文地址见这里：<a href="https://css-tricks.com/snippets/css/complete-guide-grid/">A Complete Guide to Grid</a>。</p>

<ul>
<li><a href="http://zhaozhiming.github.io/blog/2017/01/08/complete-guide-grid-zhcn-part1/">Grid 的完整介绍（一）</a></li>
<li><a href="http://zhaozhiming.github.io/blog/2017/01/09/complete-guide-grid-zhcn-part2/">Grid 的完整介绍（二）</a></li>
</ul>


<!--more-->


<h2>Grid 的完整介绍（三）</h2>

<h3>网格子项的属性</h3>

<ul>
<li><a href="#grid-column-start">grid-column-start</a></li>
<li><a href="#grid-column-end">grid-column-end</a></li>
<li><a href="#grid-row-start">grid-row-start</a></li>
<li><a href="#grid-row-end">grid-row-end</a></li>
<li><a href="#grid-column">grid-column</a></li>
<li><a href="#grid-row">grid-row</a></li>
<li><a href="#grid-area">grid-area</a></li>
<li><a href="#justify-self">justify-self</a></li>
<li><a href="#align-self">align-self</a></li>
</ul>


<h4>grid-column-start</h4>

<h4>grid-column-end</h4>

<h4>grid-row-start</h4>

<h4>grid-row-end</h4>

<p>通过参考指定的网格线来决定网格中一个网格子项的位置，<code>grid-column-start/grid-row-start</code>是指网格子项开始的线，<code>grid-column-end/grid-row-end</code>是指网格子项结束的线。</p>

<p>值有：</p>

<ul>
<li><code>&lt;line&gt;</code> &ndash; 可以是一个数字以适用被标记了数字号的网格线，或者是一个名字以适用命名了的网格线</li>
<li>span <code>&lt;number&gt;</code> &ndash; 子项将跨越指定数字的网格轨迹</li>
<li>span <code>&lt;name&gt;</code> &ndash; 子项将跨越到指定名字之前的网格线</li>
<li>auto &ndash; 表示自动布局，自动跨越或者默认跨越一个</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">start</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="k">auto</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">end</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="k">auto</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">start</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="k">auto</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">end</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="k">auto</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举个例子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">start</span><span class="o">:</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">end</span><span class="o">:</span> <span class="n">five</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">start</span><span class="o">:</span> <span class="n">row1</span><span class="o">-</span><span class="n">start</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">end</span><span class="o">:</span> <span class="m">3</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-start-end-a.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-b</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">start</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">end</span><span class="o">:</span> <span class="n">span</span> <span class="n">col4</span><span class="o">-</span><span class="n">start</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">start</span><span class="o">:</span> <span class="m">2</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">end</span><span class="o">:</span> <span class="n">span</span> <span class="m">2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://chris.house/images/grid-start-end-b.png"></p>

<p>如果<code>grid-column-end/grid-row-end</code>没有生命，网格子项将默认跨越一个网格轨迹。</p>

<p>网格子项可以互相重叠，你可以使用<code>z-index</code>来控制他们的层叠顺序。</p>

<h4>grid-column</h4>

<h4>grid-row</h4>

<p><code>grid-column-start</code> + <code>grid-column-end</code>，和<code>grid-row-start</code> + <code>grid-row-end</code>的简写，分别独立。</p>

<p>值有：</p>

<ul>
<li>&lt;start-line> / &lt;end-line> &ndash; 每一个属性都可以接收普通模式的值，包括<code>span</code></li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">start</span><span class="o">-</span><span class="n">line</span><span class="o">&gt;</span> <span class="o">/</span> <span class="o">&lt;</span><span class="n">end</span><span class="o">-</span><span class="n">line</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">start</span><span class="o">-</span><span class="n">line</span><span class="o">&gt;</span> <span class="o">/</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">start</span><span class="o">-</span><span class="n">line</span><span class="o">&gt;</span> <span class="o">/</span> <span class="o">&lt;</span><span class="n">end</span><span class="o">-</span><span class="n">line</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">start</span><span class="o">-</span><span class="n">line</span><span class="o">&gt;</span> <span class="o">/</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-c</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">:</span> <span class="m">3</span> <span class="o">/</span> <span class="n">span</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">:</span> <span class="n">third</span><span class="o">-</span><span class="n">line</span> <span class="o">/</span> <span class="m">4</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-start-end-c.png"></p>

<p>如果没有声明结束网格线的值，那么网格子项将默认跨越 1 个网格轨迹。</p>

<h4>grid-area</h4>

<p>给网格子项取一个名字以让它被由<code>grid-template-areas</code>属性创建的模板引用。同时，这个属性也可以用来更简短地表示<code>grid-row-start</code>+ <code>grid-column-start</code> + <code>grid-row-end</code>+ <code>grid-column-end</code>。</p>

<p>值有：</p>

<ul>
<li><code>&lt;name&gt;</code> &ndash; 一个你选择的名字</li>
<li>&lt;row-start> / &lt;column-start> / &lt;row-end> / &lt;column-end> &ndash; 可以是网格线的数字或名字</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">area</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">row</span><span class="o">-</span><span class="n">start</span><span class="o">&gt;</span> <span class="o">/</span> <span class="o">&lt;</span><span class="n">column</span><span class="o">-</span><span class="n">start</span><span class="o">&gt;</span> <span class="o">/</span> <span class="o">&lt;</span><span class="n">row</span><span class="o">-</span><span class="n">end</span><span class="o">&gt;</span> <span class="o">/</span> <span class="o">&lt;</span><span class="n">column</span><span class="o">-</span><span class="n">end</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<p>作为分配一个名字给网格子项的一种方式：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span><span class="p">{</span>
</span><span class='line'><span class="o">.</span><span class="n">item</span><span class="o">-</span><span class="n">d</span><span class="err">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">area</span><span class="o">:</span> <span class="n">header</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>作为<code>grid-row-start</code>+ <code>grid-column-start</code> + <code>grid-row-end</code>+ <code>grid-column-end</code>的一种简写：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-d</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">area</span><span class="o">:</span> <span class="m">1</span> <span class="o">/</span> <span class="n">col4</span><span class="o">-</span><span class="n">start</span> <span class="o">/</span> <span class="n">last</span><span class="o">-</span><span class="n">line</span> <span class="o">/</span> <span class="m">6</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-start-end-d.png"></p>

<h4>justify-self</h4>

<p>让网格子项的内容以列轴对齐（与之相反<code>align-self</code>是跟行轴对齐），这个值可以应用在单个网格子项的内容中。</p>

<p>值有：</p>

<ul>
<li>start &ndash; 让内容在网格区域左对齐</li>
<li>end &ndash; 让内容在网格区域右对齐</li>
<li>center &ndash; 让内容在网格区域中间对齐</li>
<li>stretch &ndash; 填充着呢个网络区域的宽度（默认值）</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="k">center</span> <span class="o">|</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-start.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-end.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-center.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-stretch.png"></p>

<p>为了让网格中的所有子项都对齐，这个行为也可以通过设置网格容器中的<code>justify-items</code>属性来实现。</p>

<h4>align-self</h4>

<p>让网格子项的内容以行轴对齐（与之相反<code>justify-self</code>是跟列轴对齐），这个值可以应用在单个网格子项的内容中。</p>

<p>值有：</p>

<ul>
<li>start &ndash; 让内容在网格区域上对齐</li>
<li>end &ndash; 让内容在网格区域下对齐</li>
<li>center &ndash; 让内容在网格区域中间对齐</li>
<li>stretch &ndash; 填充着呢个网络区域的高度（默认值）</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="k">center</span> <span class="o">|</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-start.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-end.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-center.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-stretch.png"></p>

<p>为了让网格中的所有子项都对齐，这个行为也可以通过设置网格容器中的<code>align-items</code>属性来实现。</p>
]]></content>
  </entry>
  
</feed>
