<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2016-12-04T15:46:58+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[微信小程序之槽点一二三]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/09/28/some-complain-about-weixin-mini-app/"/>
    <updated>2016-09-28T11:02:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/09/28/some-complain-about-weixin-mini-app</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/09/wechat.jpg"></p>

<p>微信小程序最近火爆IT界，抱着尝鲜的心理我也下载了<strong>微信web开发者工具</strong>并撸了一个Demo小程序，撸完之后发现微信小程序就开发过程而言，就像背影很美正面像鬼的女子，远没有外界所说的那么好，在实际开发过程中有各种不爽，下面我就来一一说下。</p>

<!--more-->


<p></p>

<h2>不能npm install</h2>

<p>微信小程序最大的一个痛点是不能使用第三方包，只能用原生的JavaScript的功能，虽然可以支持ES6了，但是像Lodash这种工具包要是能用的话，可以少写很多代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 用原生的JavaScript</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">todos</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">todo</span> <span class="o">=</span> <span class="nx">todos</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">Number</span><span class="p">(</span><span class="nx">todoId</span><span class="p">)</span> <span class="o">===</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">todo</span><span class="p">.</span><span class="nx">completed</span> <span class="o">=</span> <span class="o">!</span><span class="nx">todo</span><span class="p">.</span><span class="nx">completed</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">todos</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">todo</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setData</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">todos</span><span class="o">:</span> <span class="nx">todos</span><span class="p">,</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用了lodash</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">todos</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">todoId</span><span class="o">===</span> <span class="nx">x</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'><span class="nx">_</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">todos</span><span class="p">,</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">index</span><span class="p">}.</span><span class="nx">completed</span><span class="err">`</span><span class="p">,</span> <span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">todos</span><span class="p">,</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">index</span><span class="p">}.</span><span class="nx">completed</span><span class="err">`</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">setData</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">todos</span><span class="o">:</span> <span class="nx">todos</span><span class="p">,</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>不能使用第三方包的最大坏处是不能复用代码，想象一下我在一个项目有几个组件写的非常好，可以在提供给其他项目使用，但由于小程序不能使用第三方包，就只能把原来的代码拷贝到新项目里面去。这样导致的结果就是每个小程序项目充斥着重复的代码，一旦公共代码要改动会要牵扯到很多个地方的修改。</p>

<h2>css调试器不能自动补全</h2>

<p><img class="right" src="http://zhaozhiming.github.io/images/post/2016/09/chrome_css.png" width="400" height="300"></p>

<p>我们在调试页面样式时，很多时候会借助Chrome浏览器的开发者工具，在里面对某个元素添加样式非常方便，而且在输入css属性和值时工具会有自动补全的提示，这一点非常有用，即使你忘记了一些css也可以完成调试样式的工作。</p>

<p><img class="right" src="http://zhaozhiming.github.io/images/post/2016/09/wechat_css.png" width="400" height="300"></p>

<p>但是在微信开发者工具里面就不是这样了，工具不会自动补全css属性和值，作为开发者不可能记住每个css的属性，没有了自动补全让开发效率低了很多。</p>

<h2>UI组件不好用</h2>

<p>微信开发者工具提供了很多UI组件，基本上可以满足大部分的开发场景，但还是不得不吐槽里面一些组件的缺点。</p>

<h4><code>checkbox</code>不能单独使用</h4>

<p>开放的<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/component/checkbox.html?t=1474974357075"><code>checkbox</code></a>组件需要包含在<code>checkbox-group</code>里面才能使用，如果直接使用<code>checkbox</code>组件，一个是不能监听change事件，二个是通过tap事件不能获取到check值。</p>

<p>所以只能结合<code>checkbox-group</code>一起使用，而多个<code>checkbox</code>的场景又比较少，所以感觉这个UI组件很鸡肋。</p>

<h4>icon 太少</h4>

<p>还有要吐槽的一个组件是<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/component/icon.html?t=1475052051701">icon</a>，里面提供的icon非常非常的少，只有可怜的15个。可以预想到以后随着小程序逐渐复杂，开发者需要开发自己的icon组件，但开发出来的组件又不能复用（参见上面第一条），所以小程序项目会到处充斥着重复的代码。</p>

<h2>刷新没用，每次都要重新编译</h2>

<p>微信开发者工具的动作菜单有<code>项目重建</code>和<code>刷新</code>两个子菜单，把这两个菜单放在一起很容易给人这样一种错觉，<code>项目重建</code>是重新编译项目，而<code>刷新</code>是不重新编译项目只刷新页面。<code>项目重建</code>没有什么问题，但是<code>刷新</code>菜单就不知道有什么用了，按了之后页面有进度条加载，但是并没有发生变化，而且大部分时候会导致console报错，真心不知道这个菜单有什么鸟用。</p>

<h2>不能写测试</h2>

<p>测试是项目质量的保障，但在小程序里面没有示例代码和文档来指导你如何写测试代码，其实根本没法让你写单元测试。微信团队你们难道指望每个小程序都是靠手工测试来保证质量吗？我猜测微信开发者工具的开发团队（可能是腾讯的前端团队）平时也很少甚至不写单元测试，所以在开发者工具中就没有关于单元测试的考虑👎。</p>

<h2>总结</h2>

<p>微信小程序刚推出不久，有一些缺点毛病是正常的，但如果腾讯希望小程序以后能掀起一股开发热潮，就请在开发者工具上加强开发体验，让开发者开发爽了，才能做出让用户爽的小程序来。</p>

<p>最后附上我练手的小玩意儿，项目地址是：<a href="https://github.com/zhaozhiming/wechat-todolist">https://github.com/zhaozhiming/wechat-todolist</a></p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/09/wechat-todo.gif"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 GitHub Page 来发布属于你自己的网站]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/08/20/use-gitpage-to-publis-your-site-with-custom-domain/"/>
    <updated>2016-08-20T14:51:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/08/20/use-gitpage-to-publis-your-site-with-custom-domain</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/08/github-pages.jpg"></p>

<p>GitHub Page 是一个由 Github 公司推出的一个静态网站托管服务，可以结合 GitHub 中的用户或者项目来发布相关的静态网站，适用于发布项目 Demo，个人博客，产品介绍等，下面介绍一下 GitHub Page 的使用方法，并介绍如何绑定自定义域名，包括如何在 <a href="https://www.namesilo.com/">namesilo</a> 上购买域名，以及如何配置 DNS 解析服务等操作。</p>

<!--more-->


<h2>GitHub Page 的使用</h2>

<p>Github Page 的使用非常简单，在官网的首页里面就有图文并茂的操作介绍，<a href="https://pages.github.com/">官网请看这里</a>。创建静态网站有 2 种方式，一种是为用户或者组织创建网站，有些框架甚至集成了从编写博客到发布 GitHub Page 的功能，比如 <a href="http://octopress.org/">Octopress</a>；另外一种是为项目创建网站，下面着重介绍项目网站，其实跟用户网站差不多。</p>

<h3>创建网站的 2 种方法</h3>

<ul>
<li>通过 setting 配置</li>
</ul>


<p>为项目创建网站可以参照官网首页上面的那种方式，直接在项目 setting 里面进行配置（具体操作请看官网），但这种方式的缺点是只能添加一个 Markdown 的页面，虽然有网站模板可以选择，但自定义的功能还是十分有限。</p>

<ul>
<li>通过命令行方式</li>
</ul>


<p>创建网站的另外一种方法跟 GitHub Page 的个人网站比较类似，通过命令行的操作，包括创建分支，添加网站内容等来发布你的网站，这种方式可以定制的功能就比较多了，甚至可以制作出一些内容非常丰富的网站。具体操作如下：</p>

<pre><code>* 首先新建一个叫 gh-pages 的 git 分支，并且这个分支跟其他分支没有任何关系，`git checkout --orphan gh-pages`
* 在这个分支下面将原有的内容都去掉，`git rm -rf .`
* 添加网站内容比如 index.html，然后`git commit &amp;&amp; git push`
* 在 GitHbu 项目的 setting 中选择 GitHub Page 通过 gh-pages 分支来发布
* 在浏览器中访问你的网站，`http(s)://&lt;username&gt;.github.io/&lt;projectname&gt;`
</code></pre>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/gh-pages.png" width="200" height="300"></p>

<h3>发布的 3 种方式</h3>

<p>上面介绍的通过<code>gh-pages</code>分支来发布网站是老的发布方式，GitHub Page 最近推出新发布方式，可以通过<code>master</code>分支和 master 分支里面的<code>docs</code>文件夹来发布网站。</p>

<ul>
<li><p>通过 master 分支来发布跟之前介绍的通过 gh-pages 分支发布差不多，区别是不需要单独创建一个分支，直接在 master 分支里面添加网站内容即可，然后在项目 setting 里面选择通过 master 分支来发布。</p></li>
<li><p>通过 master 分支的 docs 文件夹发布，首先需要在 master 分支下面新建一个 docs 文件夹，然后在文件夹中添加网站内容，这样在项目 setting 里面就可以看到<code>master branch/docs folder</code>这个选项了。这种方式的好处是可以在项目中同时放置项目源码和生产代码，将打包后的生产文件放到 docs 里面就可以发布网站了。</p></li>
</ul>


<h2>自定义域名</h2>

<p>使用 GitHub Page 创建的网站域名一般是<code>http(s)://&lt;username&gt;.github.io/&lt;projectname&gt;</code>，但可以配置自己的域名，当然，首先你需要有一个自己的域名。</p>

<h3>namesilo</h3>

<p>之前准备使用 <a href="https://www.godaddy.com/">Godaddy</a> 这个域名注册商，但看了一下 Godaddy 的续费价格比较贵，而且网站不知道为什么老是卡在提交支付方式这一环节上，所以就放弃了。namesilo 是另外一个口碑较好的域名注册商，服务质量与 Godaddy 比有过之而不及，而且续费不加价，虽然界面丑了点但是不影响使用。</p>

<h3>折扣网站</h3>

<p>在购买域名之前，可以先到这个域名折扣网站 <a href="https://www.domcomp.com/">DomComp</a>看看，在上面可以看到各个域名注册商的最新优惠码，而且可以通过分享链接得到购买域名的返利。</p>

<p>比如下面这个截图是 DomComp 网站上的一个 namesilo 的优惠码信息，上面的是优惠码，下面的是有效截止时间。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/domcomp.png" width="300" height="300"></p>

<p>PS: 网站上面有很多<code>1&amp;1</code>这个域名注册商的优惠码，他们的域名价格比较便宜，但是口碑不是很好，图便宜的同学请谨慎考虑。</p>

<p>关于 DomComp 的返利功能可以看下知乎的<a href="://www.zhihu.com/question/19551906/answer/31986656">这个回答</a>，这里面的介绍比较详细，我也是从这个答案了解到相关信息的。</p>

<h2>GitHub Page 配置自定义域名</h2>

<p>购买完域名后，就可以配置到 GitHub 的项目中了。</p>

<h3>项目 setting 配置</h3>

<p>首先在项目的 setting 中，GitHub Pages 那一栏的 Custom domain 填写自己的域名，填写完成后因为域名的 DNS 信息还没有配置，所以会出现黄色的警告信息。</p>

<h3>namesilo DNS 配置</h3>

<p>登陆 namesilo 进到域名管理的界面，点击域名那一栏后面那个蓝色图标。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/namesilo_dns1.png" width="250" height="100"></p>

<p>下面有很多网站的 DNS 配置模板供你选择，我们选择 Github 这个模板。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/namesilo_dns2.png"></p>

<p>模板会为你添加一个类型为<code>A</code>，地址为<code>192.30.252.153</code>的记录和类型为 CNAME 的子域名记录，子域名那一行的地址要填上自己的 github 用户域名<code>&lt;username&gt;.github.io</code>。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/namesilo_dns3.png"></p>

<p>配置成功后，一般要等几个小时后才能生效，生效后 GitHub 项目 setting 里面的提示信息会变成绿色。</p>

<h2>国内 DNS 解析加速</h2>

<p>namesilo 是国外的域名注册商，国内访问速度会比较慢，这个时候可以加个 DNS 解析来提高域名的访问速度。这里当然要首选 <a href="https://www.dnspod.cn">DNSPod</a> 这个免费的 DNS 解析服务商，对于一些个人博客等非盈利的网站是免费使用的。</p>

<p>配置非常简单，还是进到 namesilo 的域名管理界面，选中域名那一栏最前面的勾选框，然后上面一排灰色的图标会显示出颜色，选择其中的<code>Change Namesevers</code>图标。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/namesilo_ns1.png"></p>

<p>在<code>NameServer1</code>和<code>NameServer2</code>中填写 DNSPod 的 nameserver 地址<code>f1g1ns1.dnspod.net</code>，<code>f1g1ns2.dnspod.net</code>。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/namesilo_ns2.png" width="300" height="100"></p>

<p>配置完成后网站的访问速度绝对是一个质的飞跃！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让你的 SQL 脚本自动升级]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/07/17/make-your-sql-script-auto-upgrade/"/>
    <updated>2016-07-17T17:12:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/07/17/make-your-sql-script-auto-upgrade</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/07/sql_upgrade.png" width="400" height="300"></p>

<p>以前的公司在部署 SQL 脚本的时候比较麻烦，需要写一份部署文档，上面写了这次部署需要执行的 SQL 脚本，然后由部署人员人工来执行这些脚本。现在发现一种比较简便的方法，可以让系统自己检查要执行哪些 SQL 脚本然后执行，减少了人力成本并提高了效率。</p>

<!--more-->


<h2>背景</h2>

<p>项目使用 <a href="https://www.sqlite.org/">sqlite</a> 来存储数据，因为还没上生产环境，开发人员在升级数据表结构时都是删掉数据库文件然后重新生成，这种方法一旦在生产环境执行的话就会将生产数据全部清除，所以需要使用增量升级数据库的方法来维护数据库。</p>

<h2>设计</h2>

<p>因为程序员都比较懒，加上又没有专职的部署人员，所以我们决定写个程序来让我们的数据库自动增量更新。大概的思路是这样的：</p>

<p><strong>在数据库中和系统文件中各记录一个版本号，系统启动时对比这 2 个版本号，如果数据库版本号小于等于系统文件版本号，则循环执行<code>数据库版本号 + 1</code>的脚本，每循环一次数据库版本号递增 1，直到数据库版本号大于系统文件版本号</strong></p>

<h2>步骤</h2>

<p>上面是概要设计，下面是具体的步骤：</p>

<ul>
<li>在数据库中记录一个版本号，然后在系统文件（比如<code>package.json</code>）也记录一个版本号</li>
<li>数据库版本号初始值为 0，系统文件版本号为部署 SQL 脚本的次数，比如还没执行过任何 SQL 脚本值为 0，执行了 1 次值为 1</li>
<li>系统启动时对比这 2 个版本号，如果数据库版本号小于等于系统文件版本号，则开始循环执行 SQL 脚本</li>
<li>每一次循环根据不同的版本号执行不同的 SQL 脚本，然后将数据库版本号值加 1</li>
<li>当数据库版本号大于系统文件版本号时，退出循环</li>
</ul>


<h2>流程</h2>

<p><img src="http://zhaozhiming.github.io/images/post/2016/07/flow_chart.png"></p>

<h2>结论</h2>

<p>这样实现后，以后如果有新的 SQL 脚本改动，只需要修改相应循环里面代码，增加新版本的 SQL 脚本的 if 分支，然后把系统文件版本加 1 即可，系统启动就会自动执行了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发团队里是否需要测试人员？]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/06/12/do-we-need-tester-in-our-team/"/>
    <updated>2016-06-12T20:06:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/06/12/do-we-need-tester-in-our-team</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/06/qa.png" width="400" height="300"></p>

<p>最近在看“<a href="https://book.douban.com/subject/4163938">软件随想录</a>”，里面有个非常有名的“<a href="http://www.joelonsoftware.com/articles/fog0000000043.html">乔尔测试</a>”，其中有一个问题是“你的团队里面是否有测试人员”，如果有的话就加分，表明团队对产品质量比较重视。</p>

<p>但是在现在的软件开发团队中是否真的需要测试人员呢？</p>

<!--more-->


<p></p>

<h2>如何替代测试人员的工作</h2>

<p>我们先来看一下测试人员的工作是什么？测试人员的工作是尽可能的找出bug，然后提交给开发人员进行修复。如果团队里面没有测试人员，开发人员要如何找bug呢？</p>

<p>首先我们来看测试人员做的最多的测试——功能测试，对于功能测试我们有什么办法可以来替代呢？</p>

<h4>单元测试</h4>

<p>单元测试是开发人员找出代码中潜在bug的自我救赎行为，相比手工测试功能，开发人员一般更倾向于写代码来测试功能代码，即所谓的单元测试。只要能想到相应的测试案例，就能写出单元测试，可以测试包括正常，异常，分支，边界等情况下的问题。</p>

<h4>集成测试</h4>

<p>单元测试虽然可以找到一些bug，但还不能完全替代测试人员的工作，单元测试只能测试细粒度级别的功能，比如某个方法的功能，如果需要对几个功能点一起测试的话，单元测试就满足不了了。但没有关系，开发同样可以用代码来写测试，这种粒度稍大的测试就是集成测试，比如测试一个后端的api，验证输入参数和输出结果，这个api的真正功能可能是后端调用数据库等一系列的操作，你一个测试方法就可以把这个api的各个功能点串起来一起验证。</p>

<h4>UI测试</h4>

<p>还有粒度更大的测试，一个页面上的按钮的点击可以看成是UI测试，相对于集成测试，这个测试的范围涉及了前端和后端，测试包括验证前端的页面是否正确，到点击按钮后触发的后端功能是否正确。现在市面上有很多端到端的测试框架，涵盖各种语言和浏览器。</p>

<h4>性能测试</h4>

<p>除了功能测试，测试人员还会做一些性能测试，同样地，开发可以通过代码或者脚本来调用性能测试工具来对系统进行性能测试。</p>

<h4>持续集成</h4>

<p>如果不想像测试人员一样每天做重复性的劳动，就可以将以上那些测试代码放到持续集成上面，让机器帮你运行，想象一下，几百上千个测试，如果手工跑的话可能要花不止一天的时间，而通过持续集成，可能在一天就能跑完好几轮所有测试。</p>

<h2>不能替代的测试工作</h2>

<p>如果我们做到了以上这些，是否就可以完全代替测试人员了呢？其实有些测试是机器无法测试的，比如网页的样式，机器只能判断是否有显示，但无法判断显示的是否好看。还有一些交互效果，也只有通过人工才能识别效果是否正确，还有其他各个领域的测试，目前是不能通过代码或者机器来替代的。</p>

<h2>高级测试工程师</h2>

<p>可能有人会说上面提到的用代码来执行测试的工作，高级测试工程师也能做。其实我觉得软件开发和软件测试到了越高的位置，技能重合的领域就越大，两者都同时会写代码，做测试，可能还会部署，会运维，这个时候我觉得不如就叫高级工程师好了，或者全栈工程师。</p>

<h2>结论</h2>

<p>说了这么多，所以结论是什么呢？</p>

<p>具体情况要具体分析，不能一概而论说完全不需要测试人员，团队不需要测试人员的条件是：</p>

<ul>
<li>团队的开发人员可以写的单元测试，集成测试和UI测试</li>
<li>没有太多需要人工测试的功能，比如团队开发的是常规的web系统或者纯后端应用等</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何写好办公室邮件]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/05/31/how-to-write-email-in-office/"/>
    <updated>2016-05-31T08:12:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/05/31/how-to-write-email-in-office</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/05/email.jpg" width="400" height="300"></p>

<p>一封电子邮件可以让人看出你的职业素养和专业水平，以前我在平安科技公司工作，在那里沟通主要是通过电子邮件的方式来进行，所以我也学到了一些关于电子邮件的规范和注意事项，在这里分享给大家。</p>

<!--more-->


<p></p>

<h2>收件人</h2>

<p>可能大家觉得收件人这一块没什么好注意的，把邮件地址放到收件人栏里不就可以了吗？我只能说：<code>图样图森破</code>。</p>

<h4>收件人的顺序很重要</h4>

<p>如果收件人中有本部门的同事和领导，应该先将领导的名字放在前面，其他同事的名字后面放在后面，已显示对领导的尊重。请注意，这不是拍马屁，而是一种职场礼仪，而且是每个行业都会有的规则，比如VIP总会被优先接待。</p>

<p>如果收件人中有本部门和其他部门的人，先将其他部门的人放在前面，后面才放本部门的人。不管其他部门的人职位高低，其顺序总是先于本部门的人，同一部门的人按照领导前同事后的顺序排列。</p>

<h3>抄送人 !== 收件人</h3>

<p>有些人发送邮件喜欢把邮件地址一股脑都放到收件人那一栏中，而没有真正想过收件人和抄送人的区别。收件人是你发邮件的主要接收方，而抄送人并不是，发邮件给抄送人起到的是一个知会的目的，将抄送人的邮件地址放到收件人里会给抄送人带来困扰。</p>

<h2>标题</h2>

<p>标题要体现邮件的主题和重点，有几点需要注意：</p>

<ul>
<li>如果要引起别人注意，可以用中括号<code>【】</code>或<code>[]</code>把主题括起来，比如：<code>【 XX 活动通知】</code></li>
<li>如果需要别人帮助或者反馈，可以在标题中加上<code>求助</code>或<code>请反馈</code>的字样，比如：<code>【请反馈】上周例会待办事项进展</code></li>
<li>如果是会议邀请，可以在标题上写上时间和地点等信息，比如：<code>【会议邀请】部门例会(本周二下午2点)</code></li>
</ul>


<h2>正文</h2>

<h3>开门见山</h3>

<p>邮件内容建议开门见山，直述主题，同时言简意赅，以免浪费大家的时间。在以邮件为主要沟通手段的公司里，每人每天可能要处理几十上百封邮件，如果你发的邮件又臭又长，那收件人会很快失去耐心。</p>

<h3>套用模板</h3>

<p>邮件内容建议分成3个部分：称呼，正文，结尾，比如：XXX 您好，正文&hellip;，谢谢。不管你的邮件内容有多少，即使只有一句话，也请按照这种方式发送邮件，这样会让人觉得你发的邮件更加正式和专业。</p>

<h3>善用分段</h3>

<p>如果你看到一封邮件里面有很长的一段文字，那么你有很大的可能不会读完整封邮件。要如何避免这种情况呢？其实最好的办法就是将一大段文字拆成几个小段，建议一段文字不要超过一行，这样阅读者会非常容易读懂你的邮件，并有耐心看完全部内容。</p>

<h3>吸引眼球</h3>

<p>如果邮件内容比较长，需要收件人了解的内容又比较多怎么办呢？这个时候可以适当地将一段文字标成<code>红色</code>或者将其<code>加粗字号加大</code>，这样阅读者在读邮件的时候就会被<code>重点</code>标注的地方所吸引了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『我』的产品说明书]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/05/17/use-my-product-manual-to-introduce-team/"/>
    <updated>2016-05-17T07:54:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/05/17/use-my-product-manual-to-introduce-team</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/05/product_manual.png" width="400" height="300"></p>

<p>最近使用引导者方法——<code>我</code>的产品说明书，为团队做了一次沟通交流，让大家彼此加深了了解，同时从中得到了团队成员的喜好、特长等信息，大家觉得这种方式挺有意思，所以今天在这里分享一下。</p>

<!--more-->


<p></p>

<h2>什么是<code>我</code>的产品说明书</h2>

<p>产品说明书大家应该都知道，比如家电的使用说明，软件的说明文档等，说明书主要介绍了产品的使用范围，注意事项，功能说明，保养事宜等。而<code>我</code>的产品说明书的方式呢，就是让团队每个人以产品说明书的方式来介绍自己，把自己当成一件很牛B的产品，说出自己的想法，比如自己有什么特长，使用<code>我</code>的时候有什么注意事项等，通过这样的一种方式介绍自己，会让人有种耳目一新的感觉。</p>

<p>下面是<code>我</code>的产品说明书的内容清单：</p>

<ul>
<li>规格： 专长，值得记录的经验，强项，卖点等</li>
<li>用途： 特别建议在 OO 时候 或 XX 场合 使用</li>
<li>我喜欢被委托的事与被委托的方式</li>
<li>会让我觉得开心的称赞或激发干劲的环境</li>
<li>偏爱的指正、斥责的方式</li>
<li>周围的人不能说的“禁忌字眼”和不能做的“NG行为”</li>
<li>状态不佳时，会有以下症状&hellip;&hellip;（症状、原因、处理方法）</li>
<li>周遭的人若能这样做，那就太好了</li>
<li>自己做得到的事</li>
</ul>


<h2>流程步骤</h2>

<p>作为一种会议引导方式，我们有必要了解会议的流程和步骤。</p>

<ul>
<li>首先为团队介绍会议的目的和流程，目的可能是为了让新团队成员互相了解，或者是改变团队现有的状态。</li>
<li>然后让团队成员填写一份产品说明书表格（右面有模板可以参考），时间大概为20~30分钟。</li>
<li>大家填写完后，让每个人逐一分享自己的说明书，如果人数比较多，可以分成几个小组，每个小组派代表发言</li>
<li>在成员分享的过程中，注意要引导分享者讲一些实际的例子，或者引导其讲出真正的原因，同时注意气氛的调节，保持轻松幽默的氛围可以更好地吸引其他成员倾听。每个人的分享大概控制在10分钟内为宜。</li>
<li>全部介绍完后，让大家总结一下今天的收获，感想等。</li>
</ul>


<h2>心得体会</h2>

<p>团队通过这次分享，我觉得有以下收获：</p>

<ul>
<li>加深彼此了解——平时大家上班沟通都比较少（不在同一个项目组），通过这次机会能更好的了解彼此。</li>
<li>搜集成员信息——除了表格中的信息外，还包括一些平时不为人知的<code>秘密</code>，比如有些人的特长还有<code>撩妹</code>这一项技能，让人颇感意外：）</li>
<li>创造发言环境——其实无论哪种引导方式，目的就是为了让大家能畅所欲言，说出心中的想法，通过这种特殊的方式，大家更愿意说出心理话。</li>
</ul>


<h2>说明书表格</h2>

<p>最后附上<code>我</code>的产品说明书模板，大家也可以在团队中尝试做一下哈。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/05/my_product_manual_1.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/05/my_product_manual_2.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用AVA和Enzyme测试React组件（三）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/03/29/use-ava-and-enzyme-to-test-react-component-part3/"/>
    <updated>2016-03-29T20:42:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/03/29/use-ava-and-enzyme-to-test-react-component-part3</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/03/react.png"></p>

<p><strong>React组件的测试要点</strong>：React组件要怎么测试，有哪些需要注意的地方，今天我们通过一些例子来说明。</p>

<!--more-->


<p></p>

<h2>render逻辑的测试</h2>

<p>React中存在逻辑的地方有一部分是在render方法中，React通过props或state的值可以render出不同的页面，所以我们可以通过设置不同的props值来测试是否能render出我们期望的页面。比如有下面这样的一个组件：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">Footer</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">renderFooterButtons</span><span class="p">(</span><span class="nx">completedCount</span><span class="p">,</span> <span class="nx">clearCompleted</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 测试点1</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">completedCount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;clear-completed&quot;</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">clearCompleted</span><span class="p">()</span> <span class="p">}</span><span class="o">&gt;</span><span class="nx">Clear</span> <span class="nx">completed</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="p">{</span> <span class="nx">todos</span><span class="p">,</span> <span class="nx">actions</span><span class="p">,</span> <span class="nx">onShow</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>
</span><span class='line'>    <span class="kr">const</span> <span class="p">{</span> <span class="nx">clearCompleted</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">actions</span><span class="p">;</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">activeCount</span> <span class="o">=</span> <span class="nx">todos</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">count</span><span class="p">,</span> <span class="nx">todo</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">completed</span> <span class="o">?</span> <span class="nx">count</span> <span class="o">:</span> <span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">completedCount</span> <span class="o">=</span> <span class="nx">todos</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">activeCount</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">footer</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;footer&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;todo-count&quot;</span><span class="o">&gt;&lt;</span><span class="nx">strong</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">activeCount</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/strong&gt; item left&lt;/span&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;filters&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="c1">// 测试点2</span>
</span><span class='line'>          <span class="p">{[</span><span class="nx">SHOW_ALL</span><span class="p">,</span> <span class="nx">SHOW_ACTIVE</span><span class="p">,</span> <span class="nx">SHOW_COMPLETED</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="nx">filter</span> <span class="o">=&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">filter</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">classnames</span><span class="p">({</span> <span class="nx">selected</span><span class="o">:</span> <span class="nx">filter</span> <span class="o">===</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">filter</span> <span class="p">})}</span>
</span><span class='line'>                <span class="nx">style</span><span class="o">=</span>
</span><span class='line'>                <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">onShow</span><span class="p">(</span><span class="nx">filter</span><span class="p">)</span> <span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">FILTER_TITLES</span><span class="p">[</span><span class="nx">filter</span><span class="p">]}</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'>          <span class="p">)}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">renderFooterButtons</span><span class="p">(</span><span class="nx">completedCount</span><span class="p">,</span> <span class="nx">clearCompleted</span><span class="p">)}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/footer&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到这个组件其实是比较简单的，在一个<code>footer</code>标签里面有个<code>span</code>和一个<code>ul</code>，<code>ul</code>里面有一些<code>li</code>，最下面是个<code>button</code>。</p>

<ul>
<li>在最上面有一个render button的方法，这个方法存在逻辑判断，如果completedCount大于0，则render一个button出来，否则不render button，这里是我们第一个测试点。测试代码如下，分别测试render和不render的情况：</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">props</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">todos</span><span class="o">:</span> <span class="p">[],</span> <span class="c1">// 空的数组</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">clearCompleted</span><span class="o">:</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">(),</span> <span class="c1">// mock方法</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">onShow</span><span class="o">:</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">(),</span> <span class="c1">// mock方法</span>
</span><span class='line'>  <span class="nx">filter</span><span class="o">:</span> <span class="s1">&#39;SHOW_ALL&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;do not render button&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Footer</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;render button correctly&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Footer</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">wrapper</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span> <span class="nx">todos</span><span class="o">:</span> <span class="p">[{</span> <span class="nx">completed</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}]</span> <span class="p">});</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>要让completedCount不大于0，只要给个空的todos集合就可以了，如果要大于0的话，则需要在todos里面添加一个<code>completed</code>为true的对象，这里需要搞清楚completedCount的声明逻辑。</p>

<ul>
<li>第二个测试点是map方法里面的逻辑，因为是从一个有3个元素的数组里面做map，所以可以校验是否确实render出来3个<code>li</code>，以及其中某个<code>li</code>链接的class和文本内容。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;render 3 li correctly&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Footer</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">wrapper</span><span class="p">.</span><span class="nx">setProps</span><span class="p">({</span> <span class="nx">todos</span><span class="o">:</span> <span class="p">[{</span> <span class="nx">completed</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}]</span> <span class="p">});</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;a.selected&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;a.selected&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(),</span> <span class="s1">&#39;All&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到通过enzyme的text方法可以很方便地得到<code>a</code>标签的文本内容。</p>

<p>这个组件其实还继续做测试，比如<code>span</code>里面的render逻辑等，但这里就不详细举例了。</p>

<h2>组件的事件逻辑</h2>

<p>除了在render方法中有逻辑以外，在组件的事件中也会存在逻辑，要测试这部分代码，我们需要模拟触发组件的事件。请看下面这个组件：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">TodoInput</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">,</span> <span class="nx">context</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">text</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">text</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">handleChange</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">handleBlur</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">newTodo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onSave</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">trim</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>        <span class="nx">classnames</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">edit</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">editing</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;new-todo&#39;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">newTodo</span><span class="p">,</span>
</span><span class='line'>        <span class="p">})}</span>
</span><span class='line'>        <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span>
</span><span class='line'>        <span class="nx">placeholder</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">placeholder</span><span class="p">}</span>
</span><span class='line'>        <span class="nx">autoFocus</span><span class="o">=</span><span class="s2">&quot;true&quot;</span>
</span><span class='line'>        <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">text</span><span class="p">}</span>
</span><span class='line'>        <span class="nx">onBlur</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleBlur</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span>
</span><span class='line'>        <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleChange</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span>
</span><span class='line'>      <span class="o">/&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到这个组件的render方法里面没有什么逻辑，只有一个<code>input</code>标签，但是在标签中存在了<code>change</code>和<code>blur</code>事件，组件的逻辑隐藏在对应的事件方法中。</p>

<ul>
<li>首先是对<code>change</code>事件的测试，我们可以看到<code>handleChange</code>方法其实是修改state里面text的值，所以测试代码可以这样写：</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">props</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">placeholder</span><span class="o">:</span> <span class="s1">&#39;foo placeholder&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">editing</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">newTodo</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">onSave</span><span class="o">:</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">(),</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;input change value correctly&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">TodoInput</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">).</span><span class="nx">simulate</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">target</span><span class="o">:</span> <span class="p">{</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}</span> <span class="p">});</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;text&#39;</span><span class="p">),</span> <span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过调用<code>simulate</code>方法对<code>change</code>事件进行模拟，然后调用<code>state</code>方法对组件的state进行校验。</p>

<ul>
<li>接着我们测试<code>blur</code>事件，<code>handleBlur</code>方法先做判断，如果为真则调用props中的<code>onSave</code>方法，我们可以用sinon来mock onSave方法，校验其调用次数。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;input blur correctly&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">TodoInput</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">).</span><span class="nx">simulate</span><span class="p">(</span><span class="s1">&#39;blur&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">target</span><span class="o">:</span> <span class="p">{</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}</span> <span class="p">});</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">onSave</span><span class="p">.</span><span class="nx">callCount</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>模拟事件触发的方法差不多，都是传入事件名和所需的方法对象就可以了，这里校验<code>onSave</code>是否被调用了1次。</p>

<p>在写单元测试的时候，有一点要注意的是要避免过度测试，因为测试代码也是需要维护的，如果测试过多过细，那一旦生产代码有所改变，就可能会修改很多测试代码，需要开发人员需要在质量和开发效率上面做好均衡。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用AVA和Enzyme测试React组件（二）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/03/29/use-ava-and-enzyme-to-test-react-component-part2/"/>
    <updated>2016-03-29T20:42:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/03/29/use-ava-and-enzyme-to-test-react-component-part2</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/03/airbnb.png" width="400" height="300"></p>

<p>Enzyme是<a href="http://www.airbnb.com/">Airbnb</a>公司推出的一个针对React组件的测试工具。Airbnb我觉得是国外继Google和Facebook之后技术实力十分强大的一家科技公司，有很多开源项目获得广大开发人员的认可，Enzyme就是其中的一个。</p>

<!--more-->


<p></p>

<h2>React的测试方式</h2>

<p>Facebook在推出React的时候也推出一个测试套件，可以使用shallow render（浅渲染）和renderIntoDocument（完整渲染）的方式对React组件进行渲染，然后通过查找DOM来做测试结果校验。两者的主要区别是shallow render只渲染出组件的第一层DOM，其嵌套的DOM不会渲染出来，这样渲染的效率更高，单元测试的速度更快，在做单元测试的时候建议使用shallow render的方式。</p>

<p>Enzyme对Facebook的测试套件做了封装，并提供了一套API来让开发者做React单元测试的时候更加方便，下面的例子可以对比使用了Enzyme前后的区别。</p>

<p>使用Enzyme前：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">setup</span><span class="p">({...</span><span class="nx">props</span><span class="p">});</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">ul</span> <span class="o">=</span> <span class="nx">output</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">li</span> <span class="o">=</span> <span class="nx">ul</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">li</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span>
</span><span class='line'><span class="nx">express</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">size</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用Enzyme后：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Foo</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'><span class="nx">express</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>最明显的变化是测试代码变少了，原来需要逐层查找DOM，现在只需要一个<code>find()</code>方法就可以搞定。</p>

<h2>Shallow Rendering &amp; Full DOM Rendering</h2>

<p>Enzyme针对这两种渲染方式都提供了各自一套API方法，但其实这2套API的方法差不多相同，只有个别方法不一样。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">children</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">parent</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">closest</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">unmount</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">text</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span>
</span><span class='line'><span class="p">.</span><span class="nx">state</span><span class="p">([</span><span class="nx">key</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="nx">Any</span>
</span><span class='line'><span class="p">.</span><span class="nx">simulate</span><span class="p">(</span><span class="nx">event</span><span class="p">[,</span> <span class="nx">data</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="nx">nextState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">setProps</span><span class="p">(</span><span class="nx">nextProps</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">ShallowWrapper</span>
</span><span class='line'><span class="p">.</span><span class="nx">debug</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">String</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里只列出了一小部分API，不但可以通过find方法查找DOM元素，还可以模拟DOM的事件，比如Click，Change等。</p>

<h2>常用的方法</h2>

<ul>
<li>find方法</li>
</ul>


<p>find方法可以让你方便的查找到DOM元素，支持通过class名称查找，html标签查找，id查找，甚至是自定义组件的查找等。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MyComponent</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="c1">// compound selector</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;div.some-class&#39;</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="c1">// CSS id selector</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;#foo&#39;</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Component</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">Foo</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">length</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>simulate方法</li>
</ul>


<p>simulate方法让你可以模拟DOM元素的事件，传入参数是事件名和事件参数。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">MyComponent</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">simulate</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">wrapper</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">simulate</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">target</span><span class="o">:</span> <span class="p">{</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span> <span class="p">}</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>debug方法</li>
</ul>


<p>debug方法可以让你打印出组件的DOM信息，方便测试遇到问题进行调试。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">wrapper</span> <span class="o">=</span> <span class="nx">shallow</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Book</span> <span class="nx">title</span><span class="o">=</span><span class="s2">&quot;Huckleberry Finn&quot;</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">wrapper</span><span class="p">.</span><span class="nx">debug</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Outputs</span> <span class="nx">to</span> <span class="nx">console</span><span class="o">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;title&quot;</span><span class="o">&gt;</span><span class="nx">Huckleberry</span> <span class="nx">Finn</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>props和state等方法</li>
</ul>


<p>对应React组件的props和state，Enzyme也有一些方法可以让你set和get其中的值，对于重置React组件的状态非常有用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用AVA和Enzyme测试React组件（一）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/03/28/use-ava-and-enzyme-to-test-react-component-part1/"/>
    <updated>2016-03-28T20:20:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/03/28/use-ava-and-enzyme-to-test-react-component-part1</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/03/ava.png" width="400" height="300"></p>

<p>React的出现让页面的测试发生了变化，原来一些耗时耗性能的自动化测试可以转化成快速的单元测试，今天介绍一下如何做React的单元测试，以及AVA和Enzyme的使用。</p>

<!--more-->


<p></p>

<h2><a href="https://github.com/sindresorhus/ava">AVA</a>是什么</h2>

<p>AVA是一个JS的单元测试框架，与其他测试框架相比最大的特点是可以并发运行测试，并行地执行每个测试文件，让CPU的利用率达到最大化。有个项目使用AVA让单元测试的执行时间从31秒（原来是用Mocha）下降到11秒。另外AVA的团队也是几个开源社区的大神，为首的<a href="https://github.com/sindresorhus">sindresorhus</a>是github上获得星星最多的人。</p>

<h2>为什么选择AVA</h2>

<p>前端也有很多不错的测试框架，比如<a href="https://github.com/mochajs/mocha">Mocha</a>、<a href="https://testanything.org/">Tap</a>和<a href="https://github.com/substack/tape">Tape</a>等，但AVA这个后起之秀是青出于蓝而胜于蓝，除了上面说的并发测试这个优点外，还有配置简单，多种报告，环境隔离等优点。Mocha的作者<a href="https://github.com/tj">TJ</a>也是个牛人，他对AVA推崇有加，说如果让他来重新开发Mocha的话他也会按照AVA这种思路来做。</p>

<h2>AVA的语法</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">test</span> <span class="nx">from</span> <span class="s1">&#39;ava&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;my first test&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="nx">same</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>test方法可以带一个字符串的标题和一个回调函数，这个回调函数就是你的测试代码，使用过其他测试框架的开发人员可以很快熟悉它的API并写出自己的测试。</p>

<h2>AVA的配置</h2>

<p>AVA的配置也十分简单，虽然Mocha的配置也不复杂，但相对于后者AVA的配置特点是灵活和集中，你可以用多种方式来配置AVA，就拿配置Babel来说，你可以将Babel配置一起写在<code>package.json</code>里面，也可以将Babel配置写在原来的Babel配置文件中，而在<code>package.json</code>文件里面写上<code>babel: inherit</code>的配置就可以了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;babel&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;presets&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;es2015&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;stage-0&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;react&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;ava&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;babel&quot;</span><span class="p">:</span> <span class="s2">&quot;inherit&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>AVA的断言</h2>

<p>AVA内置了断言库，几个常用的断言方法已经可以满足大部分的断言需求，无需再用其他的断言库。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">.</span><span class="nx">pass</span><span class="p">([</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">fail</span><span class="p">([</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">ok</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">notOk</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="kc">true</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="kc">false</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">not</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">same</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">notSame</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">expected</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="kr">throws</span><span class="p">(</span><span class="kd">function</span><span class="o">|</span><span class="nx">promise</span><span class="p">,</span> <span class="p">[</span><span class="nx">error</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">]])</span>
</span><span class='line'><span class="p">.</span><span class="nx">notThrows</span><span class="p">(</span><span class="kd">function</span><span class="o">|</span><span class="nx">promise</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">regex</span><span class="p">(</span><span class="nx">contents</span><span class="p">,</span> <span class="nx">regex</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">ifError</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="p">[</span><span class="nx">message</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然你也可以集成其他的第三方断言库，比如<a href="http://chaijs.com/">chai</a>，但这样的话你可能就使用不到测试方法中<code>t</code>这个测试对象了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">exppect</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;chai&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">test</span> <span class="nx">from</span> <span class="s1">&#39;ava&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;my first test&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">expect</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]).</span><span class="nx">to</span><span class="p">.</span><span class="nx">deep</span><span class="p">.</span><span class="nx">equal</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>AVA的多种支持</h2>

<ul>
<li>支持Promise</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">somePromise</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="s1">&#39;unicorn&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>支持Async</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="nx">async</span> <span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">promiseFn</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">t</span><span class="p">.</span><span class="kc">true</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>支持Callback</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">.</span><span class="nx">cb</span><span class="p">(</span><span class="nx">t</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">&#39;data.txt&#39;</span><span class="p">,</span> <span class="nx">t</span><span class="p">.</span><span class="nx">end</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在有了async和promise一般不推荐再使用callback，AVA的callback支持是为了方便测试使用了callback的遗留代码。<br/>
<strong>注意，测试callback需要调用<code>t.end</code>方法来结束测试。</strong></p>

<h2>隔离环境</h2>

<p>AVA会为每个测试环境单独启动一个进程来跑测试，这样的好处就保证了每个测试文件的环境不会受到其他测试文件的影响，也要求你写测试的时候更注重原子性，要求测试不依赖其他测试的运行结果或者测试数据，让测试具有独立性。</p>

<p>但并发测试也会带来一些测试方法上的改变，比如说以前串行测试要测试文件的IO操作，可能会临时创建一个文件来进行读写，串行测试时由于每个测试都是顺序进行的，所以只需要一个文件就可以满足需求。但如果是并发测试，一个临时文件可能会被多个测试同时进行读写，这样就会导致冲突，最好的做法是为每个测试都单独创建一个临时文件来做测试。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何快速熟悉新系统]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/02/28/how-to-know-well-new-project-quickly/"/>
    <updated>2016-02-28T17:05:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/02/28/how-to-know-well-new-project-quickly</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/02/new_guy.jpg"></p>

<p>很多工程师都会遇到这样一种情况：被指派到另外一个项目参与开发工作，这个项目已经开发了一段时间了，代码还比较多，作为一个项目的新人，要如何尽快地熟悉项目融入团队呢？</p>

<!--more-->


<p></p>

<h2>对系统进行测试</h2>

<p>作为一名新系统的小白，首先当然是要熟悉系统的功能，还有操作流程。</p>

<ul>
<li>如果有相关的系统说明文档（帮助手册）的话先阅读这些资料，了解系统是如何工作的，有哪些功能点。</li>
<li>了解了系统如何操作以后，对系统的各个功能点进行功能测试，通过手动操作来加深对系统的了解，并帮助系统找到bug。</li>
<li>发现bug后将bug记录起来，比如github（gitlab）上项目里的issue区域，并提醒其他开发人员关注这些问题。</li>
</ul>


<h2>尝试修复bug</h2>

<p>操作了一段时间系统后，可能你对系统功能已经有了一个大概的了解，但实际的代码可能还了解不多，这个时候你可以通过修复一些小bug来达到了解系统的目的。</p>

<ul>
<li>首先找到bug对应的页面或者文件，设置断点，运行程序，查看是什么原因导致发生bug。</li>
<li>搞清楚bug发生的原因后，动手修复这个bug。</li>
<li>修复bug后，如果有测试案例要保证不破坏其他测试案例，如果有测试案例失败了，这可能表示你修复的代码破坏了其他正常的功能。</li>
<li>对其他相关模块进行测试，保证没有其他副作用。</li>
<li>如果可以的话，让其他资深的开发人员给你review一下代码，看看你有没有改出问题，或者是有没有其他更好的解决方案。</li>
</ul>


<h2>为系统添加测试案例</h2>

<p>除了修复bug，还可以为系统添加测试案例。这里的测试案例是指单元测试、集成测试或者一些自动化测试。</p>

<ul>
<li>如果是写单元测试的话，要先读懂对应的功能代码，知道功能代码的逻辑是怎样的，有多少个分支需要写多少个测试案例才能覆盖完整。然后编写测试案例，并保证测试案例运行通过。</li>
<li>如果是集成测试或者自动化测试，先了解要测试的功能的流程是怎样的，是要读取数据库数据做校验，还是可以直接在页面上面校验等。然后编写测试案例，因为自动化测试可能由于网络延迟等原因会让你的测试有时成功有时失败，请记住要避免这种情况，确保测试是百分之百运行成功的。</li>
</ul>


<h2>对代码进行重构</h2>

<p>有时候系统开发久了，就会不知不觉产生一些烂代码，如果没有及时修复，整个系统可能就会慢慢腐烂，然后崩溃，最后维护都维护不了只能重做。所以如果你有一些代码重构的经验的话，可以在熟悉系统的过程中，通过代码重构的方式了解系统的代码。</p>

<ul>
<li>要重构代码，就要先熟悉你要改动的那一块代码，读懂它们并确保你做的重构不会影响到其他功能。</li>
<li>如果要重构的代码之前有单元测试那是最好的，你可以边重构边运行测试，只要不破坏测试就可以了，但如果没有单元测试的话，你最好是先加上单元测试，以保证你的重构不会破坏原来的功能。</li>
<li>这里的重构不是指哪种伤筋动骨的大改动，而是一些代码上的小修改，以让你的代码更具可读性和可维护性，比如变量名或方法名的重命名，相同代码的提取，长方法的分解等。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Mocha + chai + sinon 测试React + Redux的web应用]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/12/19/use-mocha-and-chai-and-sinon-to-test-react-and-redux-webapp/"/>
    <updated>2015-12-19T19:29:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/12/19/use-mocha-and-chai-and-sinon-to-test-react-and-redux-webapp</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-12/front_end_test.png"></p>

<p>今天来介绍一下如何使用Mocha + Chai + Sinon测试基于Redux + React的web应用，以及介绍一些在使用过程中遇到的问题和解决方法。</p>

<!--more-->


<p></p>

<h2>Mocha</h2>

<p><a href="https://mochajs.org">Mocha</a>是一个JS的测试框架，类似于Java中的Junit、Python中的nose。Mocha的使用非常简单，使用<code>describe</code>和<code>it</code>就可以写单元测试，下面是代码示例。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">expect</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;chai&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Array&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;#indexOf()&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should return -1 when the value is not present&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">5</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">0</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Chai</h2>

<p><a href="http://chaijs.com">Chai</a>是一个单元测试的验证框架，它有3种不同形式的校验：expect、should和assert。expect和should的方式让写出来的测试代码更像自然语言，让业务人员也可以看懂，而assert方式是传统单元测试断言的方式，如果以前习惯写Java的单元测试会对这种方式比较熟悉。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-12/chai.png"></p>

<h2>Sinon</h2>

<p><a href="http://sinonjs.org/">Sinon</a>是一个mock框架，类似Java的mockito。它可以对任何对象进行mock，更重要的是它提供了一些对mock对象的校验方法。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 创建mock对象</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">callback</span> <span class="o">=</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">();</span>
</span><span class='line'><span class="c1">// 调用测试方法</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">proxy</span> <span class="o">=</span> <span class="nx">once</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 校验mock对象是否被调用;</span>
</span><span class='line'><span class="nx">assert</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">called</span><span class="p">);</span>
</span><span class='line'><span class="c1">// 校验被调用了多少次</span>
</span><span class='line'><span class="nx">assert</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">calledOnce</span><span class="p">);</span>
</span><span class='line'><span class="nx">assert</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">callCount</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="c1">// 校验被哪个对象调用</span>
</span><span class='line'> <span class="nx">assert</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">calledOn</span><span class="p">(</span><span class="nx">obj</span><span class="p">));</span>
</span><span class='line'><span class="c1">// 校验被调用时传入了哪些参数</span>
</span><span class='line'><span class="nx">assert</span><span class="p">(</span><span class="nx">callback</span><span class="p">.</span><span class="nx">calledWith</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Redux + React</h2>

<p>React不用介绍了，今年最火的一个前端框架，而<a href="https://github.com/rackt/redux">Redux</a>是一个传递、处理state数据的JS框架，配合React可以很方便的处理staet数据，从而达到通过state控制渲染页面的目的。作者<code>Dan Abramov</code>自己拍了一个Redux的教学视频，里面通过一个个demo演示了如何写react和redux，视频可以见<a href="https://egghead.io/series/getting-started-with-redux">这里</a>。</p>

<p>对于Redux和React的应用，最主要的代码有3个部分，分别是actions，reducers，components。actions是发送一个状态到reducers，reducers根据状态返回修改后的state，components接收到state后刷新页面，所以我们的测试主要针对这3个部分。</p>

<h3>actons测试</h3>

<p>action的代码可能是这样的，接收从component传过来的一个参数，返回一个带有type属性的一个对象。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">export</span> <span class="kd">function</span> <span class="nx">addTodo</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="nx">ADD_TODO</span><span class="p">,</span> <span class="nx">text</span><span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>actions的测试比较简单，就是返回一个对象，测试代码可以这样写：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">expect</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;chai&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">actions</span> <span class="nx">from</span> <span class="s1">&#39;actions/todos&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;todo actions&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;add todo should create ADD_TODO action&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">actions</span><span class="p">.</span><span class="nx">addTodo</span><span class="p">(</span><span class="s1">&#39;Use Redux&#39;</span><span class="p">)).</span><span class="nx">to</span><span class="p">.</span><span class="nx">deep</span><span class="p">.</span><span class="nx">equal</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;add_todo&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;Use Redux&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里使用了chai的expect校验方式，传入一个字符串，验证是否返回正确的对象，这里使用了<code>to.deep.equal</code>这个校验方法，可以校验对象的属性是否相等，而对于number、bool等基本类型的校验可以使用<code>to.be.equal</code>这个校验方法。</p>

<h3>reducers测试</h3>

<p>reducers代码如下，在原来的state基础上加上一个新的todo对象。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">todos</span><span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">initState</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nx">ADD_TODO</span><span class="o">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nx">text</span><span class="o">:</span> <span class="nx">action</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">completed</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">id</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">(),</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>    <span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试代码可以这样写：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;reducers&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;todos&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should add todo correctly&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">todos</span><span class="p">({},</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="nx">ADD_TODO</span><span class="p">,</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="p">});</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">length</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">state</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">text</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">state</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">completed</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试时传入一个空的state对象和一个action对象，验证返回的state是否增加了一个todo对象。</p>

<h3>components测试</h3>

<p>components的测试比较复杂，除了测试render后的页面，还需要测试一些component的DOM方法，比如click，change，doubleclick等。下面是一个Header组件，它有<code>h1</code>和另外一个自定义组件<code>TodoInput</code>，其中还有一个<code>handleSave</code>的自定义方法，所以我们要测试的就主要是render和这个方法。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">PropTypes</span><span class="p">,</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">TodoInput</span> <span class="nx">from</span> <span class="s1">&#39;./TodoInput&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">Header</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">handleSave</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">text</span> <span class="o">&amp;&amp;</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">addTodo</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">header</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;header&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Todo</span> <span class="nx">List</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">TodoInput</span> <span class="nx">newTodo</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s2">&quot;请录入...&quot;</span> <span class="nx">onSave</span><span class="o">=</span><span class="p">{(</span><span class="nx">text</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleSave</span><span class="p">(</span><span class="nx">text</span><span class="p">)}</span><span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/header&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Header</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="nx">PropTypes</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">isRequired</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Header</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试React的component，需要用到react的一个测试组件<a href="https://facebook.github.io/react/docs/test-utils.html">Test Utils</a>，在写测试代码之前，需要先构造组件render的页面，渲染页面的props参数和render页面的对象，这些在后面的测试中非常有用。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">sinon</span> <span class="nx">from</span> <span class="s1">&#39;sinon&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">expect</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;chai&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">TestUtils</span> <span class="nx">from</span> <span class="s1">&#39;react-addons-test-utils&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Header</span> <span class="nx">from</span> <span class="s1">&#39;components/Header&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">TodoInput</span> <span class="nx">from</span> <span class="s1">&#39;components/TodoInput&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">actions</span> <span class="o">=</span> <span class="p">{</span><span class="nx">addTodo</span><span class="o">:</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">()};</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">props</span> <span class="o">=</span> <span class="p">{</span><span class="nx">actions</span><span class="o">:</span> <span class="nx">actions</span><span class="p">};</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">renderer</span> <span class="o">=</span> <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">createRenderer</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">renderer</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Header</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">renderer</span><span class="p">.</span><span class="nx">getRenderOutput</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="nx">props</span><span class="p">,</span> <span class="nx">output</span><span class="p">,</span> <span class="nx">renderer</span><span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>构造完这些对象后，我们先对render方法进行测试。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Header&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should render correctly&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>     <span class="kr">const</span> <span class="p">{</span> <span class="nx">output</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">setup</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">output</span><span class="p">.</span><span class="nx">type</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;header&#39;</span><span class="p">);</span>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">output</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">className</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;header&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="kr">const</span> <span class="p">[</span> <span class="nx">h1</span><span class="p">,</span> <span class="nx">input</span> <span class="p">]</span> <span class="o">=</span> <span class="nx">output</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">h1</span><span class="p">.</span><span class="nx">type</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">);</span>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">h1</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;Todo List&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">type</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">TodoInput</span><span class="p">);</span>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">newTodo</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>     <span class="nx">expect</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">placeholder</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;请录入...&#39;</span><span class="p">);</span>
</span><span class='line'>   <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先测试component的第一层——header，验证其type和className，然后通过children获取其下层组件<code>h1</code>和<code>TodoInput</code>，再对这2个组件进行校验。</p>

<p>接着测试TodoInput的onSave方法，它实际调用的是<code>handleSave</code>方法，方法会判断参数text的长度是否为0来决定是否调用actions的addTodo方法。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should call addTodo if length of text is greater than 0&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="p">{</span> <span class="nx">output</span><span class="p">,</span> <span class="nx">props</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">setup</span><span class="p">();</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">output</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">input</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onSave</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">addTodo</span><span class="p">.</span><span class="nx">callCount</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">input</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onSave</span><span class="p">(</span><span class="s1">&#39;Use Redux&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">addTodo</span><span class="p">.</span><span class="nx">callCount</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里使用sinon把action的addTodo方法mock掉了，然后再验证该方法是否有调用。</p>

<h2>React组件使用了CSS文件</h2>

<p>在写React的components时可能会加上自己定义的一些css文件（或者是less和sass等），这在mocha运行测试时会报错，报无法解析css语法的错误。我们可以通过编写自定义的mocha css编译器来解决这个问题。</p>

<figure class='code'><figcaption><span>css-null-compiler.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">noop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="s1">&#39;.styl&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">noop</span><span class="p">;</span>
</span><span class='line'><span class="c1">// you can add whatever you wanna handle</span>
</span><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="s1">&#39;.scss&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">noop</span><span class="p">;</span>
</span><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="s1">&#39;.css&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">noop</span><span class="p">;</span>
</span><span class='line'><span class="c1">// ..etc</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在运行mocha时加上刚写的编译器：<code>mocha /your/test.spec.js --compilers css:css-null-compiler.js</code>。</p>

<h2>webpack使用了alias</h2>

<p>在使用webpack时我们会通过别名（alias）的方法来简化我们import其他文件时的路径，比如原来import时需要这样写：</p>

<figure class='code'><figcaption><span>css-null-compiler.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Header</span> <span class="nx">from</span> <span class="s1">&#39;../../src/components/Header&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用了alias之后可以这样：</p>

<figure class='code'><figcaption><span>css-null-compiler.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Header</span> <span class="nx">from</span> <span class="s1">&#39;src/components/Header&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是这种路径在测试的时候就会报找不到文件路径的错误，因为直接使用Mocha运行测试时并没有设置路径别名。</p>

<p>因此我们需要使用几个工具来解决这个问题，分别是<a href="https://www.npmjs.com/package/mock-require">mock-require</a>和<a href="https://www.npmjs.com/package/proxyquire">proxyquire</a>。</p>

<p>首先在mocha的before方法中通过mock-require来替换别名路径，然后在mocha的beforeEach中用proxyquire来调用被测试的module，具体代码如下：</p>

<figure class='code'><figcaption><span>css-null-compiler.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">proxyquire</span> <span class="nx">from</span> <span class="s1">&#39;proxyquire&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">mockrequire</span> <span class="nx">from</span> <span class="s1">&#39;mock-require&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">before</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// mock the alias path, point to the actual path</span>
</span><span class='line'>  <span class="nx">mockrequire</span><span class="p">(</span><span class="s1">&#39;actions/youractions&#39;</span><span class="p">,</span> <span class="s1">&#39;your/actual/action/path/from/your/test/file&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// or mock with a function</span>
</span><span class='line'>  <span class="nx">mockrequire</span><span class="p">(</span><span class="s1">&#39;actions/youractions&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">actionMethod</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{...}));</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">app</span><span class="p">;</span>
</span><span class='line'><span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span> <span class="o">=</span> <span class="nx">proxyquire</span><span class="p">(</span><span class="s1">&#39;./app&#39;</span><span class="p">,</span> <span class="p">{});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//test code</span>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;xxxx&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>React的组件中使用了DOM变量</h2>

<p>在做components测试时还会遇到一个问题，比如在某些组件中使用了DOM的一些全局变量，比如<code>window</code>，<code>document</code>等，这些只有在浏览器中才会有，而mocha测试我们是在命令行中执行的，并没有浏览器的这些变量。</p>

<p>要解决这个问题有2种方法，一种是使用<a href="http://karma-runner.github.io/0.13/index.html">Karma</a>来做单元测试。Karma是一个测试运行器，它会启动一个浏览器来运行测试，比较适合端到端的页面测试。但单元测试要使用浏览器来运行就显得有点浪费了，而且会影响测试的速度。</p>

<p>所以我们使用第二种方法，使用<a href="https://github.com/tmpvar/jsdom">jsdom</a>来模拟DOM结构，首先我们要创建一个js文件来模拟DOM。</p>

<figure class='code'><figcaption><span>dom.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">jsdom</span> <span class="nx">from</span> <span class="s1">&#39;jsdom&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">mockrequire</span> <span class="nx">from</span> <span class="s1">&#39;mock-require&#39;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// setup the simplest document possible</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">jsdom</span><span class="p">.</span><span class="nx">jsdom</span><span class="p">(</span><span class="s1">&#39;&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// get the window object out of the document</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">win</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">defaultView</span><span class="p">;</span>
</span><span class='line'><span class="c1">// set globals for mocha that make access to document and window feel</span>
</span><span class='line'><span class="c1">// natural in the test environment</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nb">document</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">;</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nb">window</span> <span class="o">=</span> <span class="nx">win</span><span class="p">;</span>
</span><span class='line'><span class="c1">// from mocha-jsdom https://github.com/rstacruz/mocha-jsdom/blob/master/index.js#L80</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">propagateToGlobal</span><span class="p">(</span><span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">key</span> <span class="k">in</span> <span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">window</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">key</span><span class="p">))</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">key</span> <span class="k">in</span> <span class="nx">global</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">global</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span> <span class="o">||</span> <span class="kd">function</span> <span class="nx">matchMedia</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">matches</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">addListener</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{},</span>
</span><span class='line'>      <span class="nx">removeListener</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{},</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">propagateToGlobal</span><span class="p">(</span><span class="nx">win</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在<code>mocha.opts</code>文件中加入对这个文件的引用，<code>mocha.opts</code>文件是mocha的配置文件，一般放在test目录下面，通过配置该文件可以在调用mocha命令时少写一些参数。</p>

<figure class='code'><figcaption><span>dom.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">--</span><span class="nx">require</span> <span class="nx">test</span><span class="o">/</span><span class="nx">dom</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="o">--</span><span class="nx">reporter</span> <span class="nx">dot</span>
</span><span class='line'><span class="o">--</span><span class="nx">ui</span> <span class="nx">bdd</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样以后在运行mocha时就会自动加载<code>dom.js</code>文件了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端学习之道]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/12/06/how-to-learn-front-end/"/>
    <updated>2015-12-06T15:29:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/12/06/how-to-learn-front-end</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-12/front-end-learn.png" width="400" height="350"></p>

<p>最近一直在学习前端，今天看到一篇关于前端学习的文章，文中的观点深以为然，于是简单翻译了一下，文章是根据自己理解翻译的，不是直译，在翻译过程中会穿插介绍一些相关的学习资料。<br/>
原文地址见这里：<a href="https://medium.com/@djsmith42/what-web-framework-should-i-learn-a9285925ca1f#.g49ru17as">我应该学习什么web框架</a>。</p>

<!--more-->


<p></p>

<h2>我应该学习什么web框架</h2>

<p>很多人问我这个问题，以前我会反问你问这个问题的动机是什么，是想提高你收割offer的能力，还是对个人学习比较感兴趣？现在我已不再相信这些问题的答案了，因为我已经有了这个问题的“通用”答案。</p>

<p>在即将迈进2016年的今天，明显感觉web开发的技术更新步伐越来越快，现在已经没有一种“框架”可以终身使用，事实上现在已经没有任何一种“东西”（包括语言，工具等）可以使用终身。比如在今年我在工作中就使用了3种构建工具，3种web框架，3种编程语言（译者注：作者经历跟我有点相似，我今年web开发框架用了3种，前端框架用了2种，编程语言用了3种，构建工具用了3种）。</p>

<p><strong> 所以我觉得值得持续做的事情就是不断学习。</strong></p>

<p>新技术不断涌现，推陈出新的速度越来越快，特别是在前端开发这个生态体系里面。我不认为未来会长期依赖某一项技术，即使这门技术现在看来非常热门，甚至是现在火遍全球的<code>React</code>我也觉得不会。</p>

<p>如果你想学习一样以后可以长期使用的技能，那只有一样：提高你学习的能力。那么问题来了，你怎么学习如何学习？</p>

<p>因为我们讨论的是前端开发，所以我推荐最开始的时候应该学习JavaScript这门语言的基础知识，这方面的知识学习得越多越好，不管是书籍，博客，视频，练习还是其他，找到一种适合你的学习方式，然后<strong>深入学习</strong>（译者注：这里我推荐<a href="http://book.douban.com/subject/1232061/">《JavaScript权威指南》</a>和<a href="http://book.douban.com/subject/10546125/">《JavaScript高级程序设计》</a>）。这可能是一个长期的过程，但我推荐你花一个月的时间来专注学习它，这可能是你将来成功的基石。我的意思并不是说让你完全不管工作和家庭中的事情，而是说将除了工作和家庭之外用来学习的时间，全部花在学习JavaScript上。如果你已经是一个JavaScript大师的话可能用不到一个月的时间，但还是值得花些时间来学习，因为有时候你不知道有哪些知识是你不知道的（译者注：所谓‘温故而知新’嘛）。</p>

<p>下一个阶段就是学习前端的另外一样基础知识——<code>DOM</code>了，同样地持续学习直到你觉得自己能熟练地掌握它（译者注：推荐<a href="http://book.douban.com/subject/6038371/">JavaScript DOM编程艺术</a>）。</p>

<p>当你在这方面打好坚实的地基以后，你可能会了解到更多的框架，关于这一点我推荐尽可能地学习更多的框架和工具。我的意思不是说要把所有新框架都用到你的生产环境上，但你应该通过开发一个小应用来学会如何使用它。在学习这些框架的过程中你会发现你的学习速度越来越快，以前可能需要几天，现在只要几个小时就学会了。</p>

<p>这段时间的学习目的不是为了掌握所有你学过的框架，而是为了锻炼你<strong>快速掌握</strong>一种新技术的能力。我并不是说你不能专门研究某一个框架，你可以选择一两个框架来专门研究，然后在你的工作中使用它们，或者是在未来的工作中使用它们（除非它过时了，当然每个框架都会过时的）。这个阶段的练习是为了实践如何学习，持续地学习。</p>

<p>大部分人没办法在工作中保持这种学习，因为这需要占用工作之外的时间。可能在未来的某一天，我们的企业会完善到可以在工作中提供我们学习的时间，因为这种学习最终会让企业受益，但在今天，大部分公司还做不到。所以你只能通过自己的时间来学习，我推荐你通过一个好玩的小项目来学习，比如<a href="https://www.youtube.com/watch?v=m3jMWnrbUZA">watering your lawn</a>，你可以一遍又一遍的使用这个项目来学习新的框架和工具。</p>

<p>如果你把这些都做好了，你不仅仅是一个牛逼的前端工程师，而且你会得到快速进入其他领域的能力。想要进入移动端？没有问题！想要进入后端开发？没有问题！想要进入嵌入式设备？没有问题！你已经很擅长学习新知识了。</p>

<p>总的来说，在你的学习能力上面进行投资比对某一个框架，编程语言或者技术投资更为重要，在持续学习过程中学会如何学习。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitlab CI runner的创建和配置]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/11/30/gitlab-ci-runner-create-and-config/"/>
    <updated>2015-11-30T22:13:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/11/30/gitlab-ci-runner-create-and-config</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-11/gitlab-ci-runner.png" width="400" height="350"></p>

<p><a href="https://gitlab.com/">gitlab</a>不仅是一个代码托管的开源框架，同时它还集成了CI的功能，可以方便地为gitlab上的项目添加CI功能。</p>

<!--more-->


<p></p>

<h2>创建Runner</h2>

<ul>
<li>Runner服务器</li>
</ul>


<p>首先要找一台服务器来创建Runner，因为是要跟你的gitlab服务关联，所以服务器要可以访问你的gitlab服务。</p>

<ul>
<li>安装gitlab-CI-multi-runner</li>
</ul>


<p>gitlab-ci-multi-runner是CI runner的运行程序，这里有多种安装方式（<a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner#installation/">见这里</a>），这里我们使用了第一种：在linux中安装软件。</p>

<h2>gitlab-ci-multi-runner命令介绍</h2>

<p>执行<code>gitlab-ci-multi-runner help</code>可以看到所有命令的简介，在每个命令加<code>--help</code>可以看到更加具体的参数，比如<code>gitlab-ci-multi-runner start --help</code>，命令的执行顺序为：<code>register(注册runner)--&gt;install(安装服务)--&gt;start(运行服务)</code>。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>COMMANDS:
</span><span class='line'>   run          run multi runner service
</span><span class='line'>   register     register a new runner
</span><span class='line'>   install      install service
</span><span class='line'>   uninstall    uninstall service
</span><span class='line'>   start        start service
</span><span class='line'>   stop         stop service
</span><span class='line'>   restart      restart service
</span><span class='line'>   run-single   start single runner
</span><span class='line'>   unregister   unregister specific runner
</span><span class='line'>   verify       verify all registered runners
</span><span class='line'>   <span class="nb">help</span>, h      Shows a list of commands or <span class="nb">help </span><span class="k">for </span>one <span class="nb">command</span>
</span><span class='line'>
</span><span class='line'>GLOBAL OPTIONS:
</span><span class='line'>   --debug                      debug mode <span class="o">[</span><span class="nv">$DEBUG</span><span class="o">]</span>
</span><span class='line'>   --log-level, -l <span class="s2">&quot;info&quot;</span>       Log level <span class="o">(</span>options: debug, info, warn, error, fatal, panic<span class="o">)</span>
</span><span class='line'>   --help, -h                   show <span class="nb">help</span>
</span><span class='line'>   --version, -v                print the version
</span></code></pre></td></tr></table></div></figure>


<h2>gitlab CI配置</h2>

<ul>
<li>打开网址（比如你的gitlab服务地址是：<code>http://gitlab.your.company/</code>，那gitlab CI的地址就是：<code>http://gitlab.your.company/ci</code>），找到想要配置CI的项目，点击后面的按钮<code>Add project to CI</code>，给项目配置CI功能。</li>
<li>进入CI项目，进入<code>Runners</code>标签页面，可以看到CI的url和token，这2个值是待会用命令注册runner时所需要的。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>How to setup a new project specific runner
</span><span class='line'>Install GitLab Runner software. Checkout the GitLab Runner section to install it
</span><span class='line'>Specify following URL during runner setup:
</span><span class='line'>http://gitlab.your.company/ci
</span><span class='line'>Use the following registration token during setup:
</span><span class='line'>7c92da80317b5f5e1fe1c62a1b0767
</span><span class='line'>Start runner!
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在runner的服务器上注册runner，执行命令<code>gitlab-ci-multi-runner register</code>，下面是执行命令后的交互信息。<br/>
<code>PS：如果你用的是docker的执行方式，可以先把对应的docker的image下载下来，不然第一次执行CI会比较慢。</code></li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>root@cloudeye:~# gitlab-ci-multi-runner register
</span><span class='line'>Please enter the gitlab-ci coordinator URL <span class="o">(</span>e.g. https://gitlab.com/ci<span class="o">)</span>: <span class="c">## 输入你CI服务器的地址</span>
</span><span class='line'>http://gitlab.your.company/ci
</span><span class='line'>Please enter the gitlab-ci token <span class="k">for </span>this runner: <span class="c">## 输入你CI项目的token</span>
</span><span class='line'>7c92da80317b5f5e1fe1c62a1b0767
</span><span class='line'>Please enter the gitlab-ci description <span class="k">for </span>this runner: <span class="c">## 描述信息，只是表述不是很重要</span>
</span><span class='line'><span class="o">[</span>your-project<span class="o">]</span>: your-project
</span><span class='line'>Please enter the gitlab-ci tags <span class="k">for </span>this runner <span class="o">(</span>comma separated<span class="o">)</span>: <span class="c">## runner的标签</span>
</span><span class='line'>dev
</span><span class='line'>INFO<span class="o">[</span>0032<span class="o">]</span> fc6e1ee6 Registering runner... succeeded
</span><span class='line'>Please enter the executor: docker-ssh, ssh, shell, parallels, docker: <span class="c">## runner的执行方式，有5种，这里我选择了docker</span>
</span><span class='line'>docker
</span><span class='line'>Please enter the Docker image <span class="o">(</span>eg. ruby:2.1<span class="o">)</span>: <span class="c">## docker镜像</span>
</span><span class='line'>node:0.12.7
</span><span class='line'>If you want to <span class="nb">enable </span>mysql please enter version <span class="o">(</span>X.Y<span class="o">)</span> or enter latest? <span class="c">## 不需要的话直接空格就可以了 </span>
</span><span class='line'>
</span><span class='line'>If you want to <span class="nb">enable </span>postgres please enter version <span class="o">(</span>X.Y<span class="o">)</span> or enter latest? <span class="c">## 不需要的话直接空格就可以了 </span>
</span><span class='line'>
</span><span class='line'>If you want to <span class="nb">enable </span>redis please enter version <span class="o">(</span>X.Y<span class="o">)</span> or enter latest? <span class="c">## 不需要的话直接空格就可以了 </span>
</span><span class='line'>
</span><span class='line'>If you want to <span class="nb">enable </span>mongo please enter version <span class="o">(</span>X.Y<span class="o">)</span> or enter latest? <span class="c">## 不需要的话直接空格就可以了 </span>
</span><span class='line'>
</span><span class='line'>INFO<span class="o">[</span>0043<span class="o">]</span> Runner registered successfully. Feel free to start it, but <span class="k">if </span>it<span class="err">&#39;</span>s running already the config should be automatically reloaded!
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>注册完成后，打开runner的配置文件：<code>vi /etc/gitlab-runner/config.toml</code>，可以看到配置文件里面增加了刚才注册的相关信息，更多参数的信息可以看<a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/configuration/advanced-configuration.md">官方文档</a>。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>root@cloudeye:~# gitlab-ci-multi-runner register
</span><span class='line'><span class="nv">concurrent</span> <span class="o">=</span> 2
</span><span class='line'>
</span><span class='line'><span class="o">[[</span>runners<span class="o">]]</span>
</span><span class='line'>  <span class="nv">url</span> <span class="o">=</span> <span class="s2">&quot;http://gitlab.your.company/ci&quot;</span>
</span><span class='line'>  <span class="nv">token</span> <span class="o">=</span> <span class="s2">&quot;79bf814ac37a52427345b01e135a78&quot;</span>
</span><span class='line'>  <span class="nv">name</span> <span class="o">=</span> <span class="s2">&quot;your-project&quot;</span>
</span><span class='line'>  <span class="nv">executor</span> <span class="o">=</span> <span class="s2">&quot;docker&quot;</span>
</span><span class='line'>  <span class="o">[</span>runners.docker<span class="o">]</span>
</span><span class='line'>    <span class="nv">image</span> <span class="o">=</span> <span class="s2">&quot;node:0.12.7&quot;</span>
</span><span class='line'>    <span class="nv">privileged</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="nb">    </span><span class="nv">disable_cache</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nb">    </span><span class="nv">volumes</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;/cache:/cache:rw&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装服务，执行命令<code>gitlab-ci-multi-runner install -n "服务名"</code>，后面的服务名是自己定义的名称，用来后面启动命名使用，与其相对的命令是<code>uninstall</code>。</li>
<li>启动服务，执行命令<code>gitlab-ci-multi-runner start -n "服务名"</code>，与其相类似的命令有<code>stop</code>和<code>restart</code>。</li>
<li>验证runner，执行<code>gitlab-ci-multi-runner verify</code>，可以看到runner的运行情况。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>root@cloudeye:~# gitlab-ci-multi-runner verify
</span><span class='line'>INFO<span class="o">[</span>0000<span class="o">]</span> 79bf814a Veryfing runner... is alive
</span><span class='line'>INFO<span class="o">[</span>0000<span class="o">]</span> 207a4b34 Veryfing runner... is alive
</span><span class='line'>INFO<span class="o">[</span>0000<span class="o">]</span> 20f849f7 Veryfing runner... is alive
</span><span class='line'>INFO<span class="o">[</span>0000<span class="o">]</span> 6e07e13a Veryfing runner... is alive
</span><span class='line'>INFO<span class="o">[</span>0000<span class="o">]</span> 23be6deb Veryfing runner... is alive
</span><span class='line'>INFO<span class="o">[</span>0000<span class="o">]</span> 4e348964 Veryfing runner... is alive
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>启动服务后，可以在刚才的CI runners页面看到已经有runner出现了。</li>
</ul>


<h2>gitlab-ci.yaml文件</h2>

<p>配置好了runner，要让CI跑起来，还需要在项目根目录放一个<code>.gitlab-ci.yaml</code>文件，在这个文件里面可以定制CI的任务，下面是简单的示例文件，更多的用法可以看<a href="http://doc.gitlab.com/ci/yaml/README.html">官方文档</a>。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">efore_script</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">bundle_install</span>
</span><span class='line'><span class="l-Scalar-Plain">job1</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">execute-script-for-job1</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[保存并恢复你的tmux]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/11/22/save-and-restore-your-tmux/"/>
    <updated>2015-11-22T19:11:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/11/22/save-and-restore-your-tmux</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-11/tmux.jpg" width="400" height="350"></p>

<p><a href="https://tmux.github.io/">Tmux</a>是一个终端下的工具，可以方便地在一个终端窗口下进行分屏，配合vim可以打造任何IDE所需要的窗口模式，让你的生产力大大提升。介绍Tmux的文章网上有很多，所以我就不赘述了，今天介绍Tmux的一款工具，可以方便的保存Tmux的状态并在任何时候进行恢复。</p>

<!--more-->


<p></p>

<h2>为什么需要恢复这个工具</h2>

<p>Tmux虽然功能十分强大，但却不能像IDE一样保存已经定制好的窗口模式，每次电脑重启后，你需要重新划分你的终端屏幕。程序员都是比较懒的，为了不用每次重启机器都要重新设置一遍Tmux，我们找到了<a href="https://github.com/tmux-plugins/tmux-resurrect">tmux-resurrect</a>这个工具。在介绍这个工具之前，我们先介绍tmux的插件管理工具，因为tmux-resurrect推荐使用它来进行安装。</p>

<h2>Tmux插件管理工具</h2>

<p>Tmux也像Vim等其他软件一样可以通过安装插件来扩充其强大的功能，推荐的方式是使用Tmux的插件管理工具<a href="https://github.com/tmux-plugins/tpm">TPM</a>（Tmux Plugin Manager）来安装插件。安装TPM非常简单，参考其github工程的README文档就可以了。</p>

<p>安装了TPM之后，以后要安装Tmux插件就很方便了，首先在<code>~/tmux.conf</code>中写入你要安装的插件名：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">set</span> -g @plugin <span class="s1">&#39;...&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在tmux中按<code>前缀键+大写I</code>就可以提示你进行插件安装了，安装过程如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Already installed <span class="s2">&quot;tpm&quot;</span>                                                                                                                                                         <span class="o">[</span>0/0<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>TMUX environment reloaded.
</span><span class='line'>
</span><span class='line'>Done, press ENTER to <span class="k">continue</span>.
</span></code></pre></td></tr></table></div></figure>


<h2>tmux-resurrect</h2>

<p>安装完TPM后，我们再来安装tmux-resurrect，跟安装其他插件一样，先在<code>~/tmux.conf</code>下录入tmux-resurrect：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">set</span> -g @plugin <span class="s1">&#39;tmux-plugins/tmux-resurrect&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后按<code>前缀键+I</code>就可以了。</p>

<p>tmux-resurrect的使用非常简单，在Tmux窗口中按<code>前缀键+ctrl+s</code>就是保存你的tmux窗口，按<code>前缀键+ctrl+r</code>是恢复你的tmux窗口。以后只要在开机后，进入Tmux，然后用<code>前缀键+ctrl+r</code>就可以一键恢复你之前的tmux窗口了:&ndash;)</p>

<h2>tmux-sessionist</h2>

<p>刚用tmux-resurrect的同学可能还以为它只是保存Tmux当前一个窗口，其实它保存的是Tmux的所有窗口。那要如何切换Tmux的窗口呢？那就要用到另外一个Tmux的插件——<a href="https://github.com/tmux-plugins/tmux-sessionist">tmux-sessionist</a>了，它可以快速的切换Tmux之间的seesion窗口，安装之后通过<code>前缀键+g</code>就可以了，感兴趣的小伙伴赶紧试一试吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD已死之论战]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/11/13/the-points-about-tdd-is-dead/"/>
    <updated>2015-11-13T20:11:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/11/13/the-points-about-tdd-is-dead</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-11/tdd_dead.png"></p>

<p>公司最近组织了一次关于TDD的培训，从而引发了同事关于TDD的一些讨论，这让我想起了一年前DHH（Ruby On Rails之父）那篇有名的文章<a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">《TDD is dead. Long live testing.》</a>，突然想聊一下关于TDD的一些事情。</p>

<!--more-->


<p></p>

<h2>DHH的观点</h2>

<p>如果不想费劲看英文的话，可以看一下台湾同胞翻译的这篇<a href="http://blog.littlelin.info/posts/2014/04/26/tdd-is-dead-long-live-testing">译文</a>，翻译得很好。其实在国内外早就有一些对TDD质疑的看法，比如<a href="http://coolshell.cn/articles/3649.html">《TDD并不是看上去的那么美》</a>，<a href="http://www.cnblogs.com/weidagang2046/archive/2011/02/23/1963277.html">《TDD到底美不美？》</a>等，这些都是对TDD的一些独立思考，是否软件开发过程是一定要使用TDD？使用了TDD是否就一定能让我们的开发变得更好更快？DHH在一开始也是觉得TDD挺好的，但在尝试TDD的过程中发现TDD并不是那么好实施且容易破坏设计，文章中有几个观点我是比较赞同的，下面我逐一说一下。</p>

<h2>TDD不是一个标准</h2>

<p>TDD是极限编程的一个工程实践，通过先写测试用例再写功能代码的方式来完成软件功能的开发，TDD的好处在网上一搜就可以找到很多，但是一些以敏捷布道为职业的人夸大了TDD的作用，他们会说如果不做TDD就不是敏捷开发，甚至以会不会TDD、用不用TDD来衡量是否一个工程师是否优秀。这种做法是不妥的，TDD就像一项技术、一种框架、一类语言一样，工程师有权利选择使用它也可以不使用。</p>

<p>大家在看Martin Flow、Kent Beck、Uncle Bob使用TDD的时候可能会觉得很厉害，但这并不是TDD很厉害，而是那3位大师很厉害，任何一种招式到了高手手里都是一件很厉害的武器，就像金庸小说下的虚竹用少林基本功就可以对抗鸠摩智这样的高手道理一样。所以我们不应该以会不会用不用TDD为标准来衡量工程师，术业有专攻，就算是在现在使用比较少的ASP、.NET开发工程师里面也有很多优秀的人，更不用说世界上最好的语言PHP了，虽然PHP网站的漏洞很多，但就是这些网站让人们对网络安全更加重视了不是吗:)</p>

<h2>系统测试越来越方便</h2>

<p>DHH还说道TDD让开发多了很多像Mock、Stub之类的东西，让代码更加不容易维护，其实可以使用更高粒度的系统测试来代替单元测试。对于这点我也是比较赞同的，在硬件效率越来越高，带宽越来越大，框架越来越轻量级的今天，一些系统级的测试（比如连接网络，读取数据库，访问第三方系统）的测试也会变得跟单元测试一样快。</p>

<p>在TDD中使用Mock技术也是有一些历史原因，在以前的企业级开发中，数据库用的是Oracle，web容器用的是Weblogic等比较重量级的中间件，使用这些中间件一个是速度慢，另外一个是配置困难，如果要在单元测试里面连接数据库启动web服务的话，一个测试用例的编写和运行都要耗费大量时间，所以就有了很多对中间件Mock的技术，让开发人员在测试中使用假冒的中间件服务，已达到快速测试的目的。</p>

<p>但在技术日新月异的这个时代，Nosql，内存数据库，轻量级web容器等慢慢成为开发的主流，而且硬件资源越来越好，网络速度也越来越快，这让一些系统测试可以运行得跟单元测试一样快，而写系统测试最大的好处就是不用写那么多Mock的代码，不需要把代码隔离的那么厉害，测试案例不会太多太杂。</p>

<h2>我自身的TDD体会</h2>

<p>我以前也是比较喜欢TDD的，并尽量要求自己在工作中使用TDD的方式来开发，但现在并没有要求自己一定必须使用TDD的方式开发，在大部分开发工作中我还是先写功能代码，然后再写单元测试。我觉得一个比较适合TDD的场景是修复BUG，当测试人员向你提交一个BUG的使用，你可以先写一个测试用例来让你的BUG重现，这样测试案例运行肯定会失败，然后在修复你的BUG让测试用例通过，然后再重构代码，这样就完成了一个TDD的过程，而且也保证了你的BUG以后不会再出现。</p>

<p>另外我觉得一个好技术的标准还包括其学习曲线要低，让人容易学会，如果花费大量时间还不能学好的技术可能本身就存在一些问题，抑或者是与人们的习惯相差太大而不能被普遍接受。但不管怎样，如果没有使用过TDD的人就说TDD不好也是不对的，“没有实践就没有发言权”，要证明TDD不够好还是先用TDD写写代码吧，或许能在使用TDD的过程中发现一些对自己有用的东西呢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[科学上网利器Shadowsocks]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/11/07/use-shadowsocks-and-vps/"/>
    <updated>2015-11-07T10:31:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/11/07/use-shadowsocks-and-vps</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-11/ss_vultr.jpg" width="400" height="350"></p>

<p>前段时间AppStore出了一款神器<a href="https://itunes.apple.com/cn/app/surge-web-developer-tool-proxy/id1040100637?ls=1&amp;mt=8">Surge</a>，可以让iOS像其他平台使用<a href="https://github.com/shadowsocks/shadowsocks/wiki">Shadowsocks</a>（以下简称ss）一样地轻松科学上网，因为以前都是用买的SSH或VPN科学上网，所以对自建的VPN服务这一块没有太多关注，甚至错过了ss这种成熟的工具。最近试用了过后觉得非常方便，所以在这里记录一下。</p>

<!--more-->


<p></p>

<h2>ss介绍</h2>

<p>简单的说，ss就是帮助你翻过伟大的GFW的一个工具，只要你有一台可以访问国外网站的服务器，你就可以建立自己的VPN服务。它的方案十分完备，有服务端和各种操作系统的客户端，而且还内置了一个路由列表，在访问网站时会自动识别该网站是否需要科学上网，如果需要的则走国外线路，否则走本地线路，非常智能。</p>

<h2>vps选择</h2>

<p>要搭建自己的VPN，首先需要一台国外的服务器。老牌的vps有<a href="http://www.linode.com">Linode</a>和<a href="https://www.digitalocean.com">DigitalOcean</a>，都是不错的选择，后起之秀有<a href="https://www.vultr.com/">vultr</a>，我选择vultr是因为它最近在做活动，每个新用户送50美元，但是50美元需要在2个月内使用完，相当于头2个月可以选择25美元/月的服务器，这种价位的服务器性能是很高的。</p>

<p>vultr50美元的活动链接是这个：<a href="https://www.vultr.com/freetrial/">50美元活动</a>，需点击页面中的<code>TRY VULTR CLOUD SERVERS FREE</code>按钮来注册用户，注册之后会要求绑定银行信用卡，绑定成功后vultr会在信用卡上预约扣款2.5美元，放心这个钱后面会退的。因为vultr需要24小时来审核你的账户，vultr要求每个人只能有一个账号，不允许一个人建立多个账号。</p>

<p>当过了2个月之后，还可以使用其他优惠码来对账户进行充值，优惠码链接请看这里：<a href="http://vultr.youhuima.cc/">vultr优惠码</a>。</p>

<h2>vps使用</h2>

<p>vps就是一台云服务器，创建的时候要选择机房的物理位置、对应的操作系统和服务器配置，vultr最低的配置是5美元/月，对普通的搭搭博客和搭建VPN的需求是绰绰有余了。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-11/vultr_size.png"></p>

<p>搭建完后就可以对机器进行相关的配置了，最常用的就是配置自己的访问电脑<code>SSH KEYS</code>，这样每次ssh登陆就可以不用输入密码了。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-11/vultr_ssh.png"></p>

<h2>ss服务端</h2>

<p>搭建ss服务器的说明请看这里：<a href="https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E">ss服务器搭建</a>，操作比较简单，先安装pip，然后再通过pip安装ss，pip是Python的下载包工具，现在的linux操作系统一般都默认安装了Python。</p>

<p>然后是设置端口、密码和加密算法，建议用后台方式启动服务，我是用配置文件的方式启动ss服务，这种方式可以将配置信息放在文件中维护。</p>

<p>如果连接有问题，可以通过查看日志文件来看是什么问题，文件路径：<code>/var/log/shadowsock.log</code>。</p>

<h2>ss客户端——android</h2>

<p>ss安卓客户端的下载地址在这里：<a href="https://github.com/shadowsocks/shadowsocks-android/releases">ss安卓客户端</a>。App中文名字叫<code>影梭</code>，安装完成后打开配置界面，填写服务器ip，远程端口，本地端口，密码和加密方法，这些都是和服务端的配置文件内容一致的，完了点击连接，然后你的手机就可以科学上网了，赶紧把Fackbook, Twitter这些下下来玩一下吧。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-11/ss_android.jpg" width="200" height="150"></p>

<h2>ss客户端——mac</h2>

<p>ss在Mac上的客户端在这里：<a href="https://github.com/shadowsocks/shadowsocks-iOS/wiki/Shadowsocks-for-OSX-%E5%B8%AE%E5%8A%A9">ssMac客户端</a>。下载后直接安装即可，安装完成后在右上角菜单栏有个箭头的Logo就是ss了。如下图所示，进入ss的Server来配置服务端的信息。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-11/ss_mac.png" width="200" height="150"></p>

<p>配置完成后，点击<code>Turn Shadowsocks On</code>就可以开启ss客户端了，然后在Chrome浏览器中安装SwitchySharp插件，配置信息如下，以后只要选择了这个代理就可以科学上网了。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-11/chrome_proxy.png" width="400" height="350"></p>

<h2>proxifier</h2>

<p>在Mac上安装了ss的客户端之后，虽然可以通过浏览器科学上网了，但是如果想让其他软件，比如邮箱，terminal等也能科学上网的话，就需要将你的ss代理全局化了。这里介绍一个软件<a href="https://www.proxifier.com/">proxifier</a>，它可以很方便地将ss的服务设置为全局服务。</p>

<ul>
<li>首先创建代理</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-11/proxy_create.png" width="400" height="350"></p>

<ul>
<li>然后再创建规则，注意这时要将Mac上的ss客户端ShadowsocksX设为<code>直连</code>，其他应用设为走ss代理。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-11/proxy_rule.png" width="400" height="350"></p>

<ul>
<li>最后观看proxifier的连接信息，就可以看到电脑上应用的网络连接信息了。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Alfred和一些有用的workflow介绍]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/10/25/alfred-intro-and-good-workflow/"/>
    <updated>2015-10-25T13:36:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/10/25/alfred-intro-and-good-workflow</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred.png"></p>

<p>最近发现了一个超级好用的工具——<a href="https://www.alfredapp.com/">Alfred</a>，可以通过快捷方式找到任何你MAC上的任何应用、文件，甚至可以自定义工作流的方式找到或者打开你想要的资源，后面会推荐几个有用的workflow。</p>

<!--more-->


<p></p>

<h2>Alfred vs. Spotlight</h2>

<p>有人可能会说Mac从Yosemite版本开始就有了类似Alfred的自带工具Spotlight，但仔细使用后会发现Spotlight的功能只是Alfred免费版的一小部分而已，如果使用Alfred付费的Powerpack后功能更加强大，可以配合各种软件快速定位你想要的资源。</p>

<p>所以如果你使用Alfred的话，完全可以替代MAC系统默认的Spotlight，替换方法如下：</p>

<ul>
<li>Spotlight的默认快捷键是<code>⌘ + 空格</code>，可以在系统配置中取消该快捷键。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/spotlight.png"></p>

<ul>
<li>安装Alfred后，在Alfred设置页面将弹出快捷键设置为<code>⌘ + 空格</code>。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_config.png"></p>

<h2>Alfred使用介绍</h2>

<p>网上有比较多的关于Alfred的介绍，我这里就不一一列举其功能了，就挑一些重点的讲。</p>

<h4>设置默认搜索引擎</h4>

<p>Alfred默认使用google，amazon和维基百科来做前3个搜索引擎（可能不同的MAC机器有不同的默认设置，至少我机器上是这3个，这些搜索是在本地应用、文件查找不到之后通过网络进行搜索的设置。</p>

<p>当然你可以更改这些默认设置，操作如下图所示：<br/>
   
<img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_search_config1.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_search_config2.png"></p>

<p>在<code>Fetures-&gt;Default Results-&gt;Setup fallback resULT</code>中设置，虽然百度搜索不怎么样，但是在国内找一些非科技的东西还是需要的，将其设为默认搜索引擎，去掉原来的amazon和维基百科，效果如下图。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_search_config6.png"></p>

<h4>自定义Web搜索</h4>

<p>在上图中可以看到百度是一个自定义的搜索，因为在我的机器上没有百度搜索，所以需要自己添加，添加的步骤如下：</p>

<ul>
<li>在<code>Fetures-&gt;Web Search-&gt;Add Custom Search</code>中添加，如下图所示：</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_search_config3.png"></p>

<ul>
<li>在弹出窗口中设置url, 其中<code>{query}</code>就是你要查询的东西，再填上标题和关键字，有logo图片的话拖放到右边的框框上，最下面的<code>Validation</code>是来测试新建的搜索是否有用的。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_search_config4.png"></p>

<ul>
<li>这样在Alfred输入框中输入<code>baidu Alfred</code>就可以用百度来搜<code>Alfred</code>了。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_search_config5.png"></p>

<h4>其他使用技巧</h4>

<p>Alfred还有其他比较方便的使用方法，比如：</p>

<ul>
<li>当计算器使用</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_use1.png"></p>

<ul>
<li>输入<code>&gt;</code>直接执行bash命令</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_use2.png"></p>

<p>还有其他更多的使用技巧可以在网上找到。</p>

<h2>workflow</h2>

<p>Alfred的这部分功能是需要付费的，最便宜的个人版本折合人民币大概160多。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-10/alfred_price.png"></p>

<p>workflow的安装非常简单，把后缀为alfredworkflow的文件下下来后，点击文件就会提示你是否安装了，这个网站涵盖了很多workflow——<a href="http://www.alfredworkflow.com/">alfredworkflow</a>，有需要的可以在这上面招，我在这里推荐一些程序员比较有用的workflow：</p>

<ul>
<li>Dash workflow : <a href="https://kapeli.com/dash">Dash</a>是一个api查询工具，不仅可以查询各种语言的api，还可以查各种工具或者框架的api，对于程序员来讲非常有用，当然首先你需要安装Dash，再来安装这个workflow——<a href="https://github.com/Kapeli/Dash-Alfred-Workflow">Dash-Alfred-Workflow</a>。</li>
<li>Stackoverflow workflow : Stackoverflow是程序员经常上的网站，通过Alfred可以快速查看网站上的相关问题——<a href="https://github.com/xhinking/Alfred">st-workflow</a>。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/workflow1.png"></p>

<ul>
<li>pkgman workflow: 这个workflow可以查找各种语言和工具的依赖包信息，对程序开发非常有用——<a href="https://github.com/willfarrell/alfred-pkgman-workflow">pkgman-workflow</a>。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/workflow2.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-10/workflow3.png"></p>

<p>下面这些workflow跟程序员不是很相关，但是也是非常有用的，个人推荐：</p>

<ul>
<li>youdao workflow: 经常看到不会的单词要先打开翻译器，再把要翻译的单词拷贝到里面翻译，是不是很麻烦，有了这个workflow就很方便了，直接在Alfred上翻译就可以了——<a href="https://github.com/wensonsmith/YoudaoTranslate">yd-workflow</a>。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/workflow4.png"></p>

<ul>
<li>douban workflow: 这个workflow可以查看豆瓣上的书籍，电影和音乐，非常方便——<a href="https://github.com/lucifr/Alfredv2-Extensions">douban-workflow</a>。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/workflow5.png"></p>

<ul>
<li>evernote workflow: 使用evernote的同学可以使用这个workflow快速找到自己的笔记——<a href="https://github.com/hzlzh/AlfredWorkflow.com">evernote-workflow</a>。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-10/workflow6.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发人员神秘的工具箱]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/09/21/the-mysterious-tools-of-developer/"/>
    <updated>2015-09-21T10:06:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/09/21/the-mysterious-tools-of-developer</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-9/toolbox.jpeg" width="400" height="300"></p>

<p>需求、时间和质量是项目管理的三个平衡点，如果需求多、开发时间短必将会导致项目质量下降，那开发人员有什么办法在短时间内交付大量的需求（虽然质量低）呢？其实每个开发人员都有一套“神秘”的工具箱，在万不得已的时候就会开始使用它（这部分内容是以前参加<a href="https://www.linkedin.com/in/dteng">Daniel</a>的CSM课程的时候听到的，觉得很有意思，想和大家分享一下）。</p>

<!--more-->


<p></p>

<blockquote><p>天下武功，唯快不破</p><footer><strong>火云邪神</strong></footer></blockquote>


<h2>复制粘贴</h2>

<p>最常见的就是复制粘贴了，天下文章一大抄，何况代码了，把以前可以工作的代码拷贝过来，改改就可以用了，甚至改都不改一下就直接上线也是可以的。别人敲了半天的代码我按2次按键就搞定了，这就是效率！</p>

<p>别跟我说神马重复代码导致改一处地方要变成改多处地方，修改还容易遗漏这些balbal，我们听多了，Who care，明天的事情明天再说，现在最要紧的是赶紧把功能做出来上线，不然奖金泡汤你负责啊？</p>

<h2>在网上搜索代码然后拷过来直接用</h2>

<p>每当我没有灵感的时候，我都会上网搜一下有没有实现我想要的功能的代码，发现了的话就拷贝粘贴到我的代码里面，呵呵我的工作就算完成了。</p>

<p>你说什么？！不弄清楚代码原理直接用危险大？别人的代码不一定适用于我的工程？拜托，我弄清楚那些代码原理的时间，我都可以自己写一个实现了好吗？跟你说了现在最要紧的是上线，别跟我扯这些没用的！另外我用百度搜代码，那速度杠杠的，谁用谁知道啊，现在谁还费那么大劲翻墙访问google啊？！</p>

<h2>功能变成Bug</h2>

<p>上面2招都不好使了肿么办，系统明天就要上线了，功能完不成老板又要找我麻烦了。。。机智的我还是想到了办法，我轻轻地在键盘上敲下了实现该功能的方法名，然后。。。就完了，我已经把功能实现了，可以上线了。</p>

<p>什么？上线后发现啥功能都没有？额。。。我看看。。。哦，这里有个<strong>BUG</strong>，等下个版本一起修复吧！懂了吗？现在这里不是一个未完成的功能，而是一个<strong>BUG</strong>了，呵呵这种办法还不是一般人能想的出来的。</p>

<h2>没有测试</h2>

<p>测试？现在连睡觉的时间都没有，还要我做测试？Are you kidding me？这些东西交给用户不就可以了吗？用户是什么，不就是我们的小白鼠嘛呵呵。</p>

<p>单元测试是什么鬼？用代码来测试代码？我看你吃撑了吧？我写了一堆的代码实现了功能，然后还要写同样多的一堆代码来测试我原来那堆代码，但老板并没有给我双倍工资来做这个事情啊，所以还是省省吧！</p>

<h2>没有代码评审</h2>

<p>让一大群人围观我的代码，还要在上面鸡蛋里挑骨头，想想我也是醉了，我的代码我做主，不想那么多人来judge我的代码。</p>

<p>我知道代码评审是保证质量的有利手段，也有知识传递、宣传团队规则的好处，但为了快速上线，这些活动能砍就砍掉吧。</p>

<h2>没有重构</h2>

<p>重构我有时候也是会做的，像以前我的变量名称都是拼音首字母来命名的，后来我把我系统里面的变量名称重构了一遍，在每个变量名加上了我的名字缩写前缀，像这样：<code>sb_xxx</code>，是不是很机智呢呵呵。</p>

<p>但是为了让项目赶紧上线，我还是别浪费太多时间在重构上面了，等以后有时间再来做吧，或者都后面维护的兄弟来重构吧，前提是他能看懂我的代码：）</p>

<h2>硬编码</h2>

<p>为了更快的提高我编码速度，遇到一些可以直接硬编码我一般都不定义变量，这样可以保证我的思路不被起变量名这种麻烦事情打断，反正这些以后都是改的，到时候再来修改代码就好了。</p>

<p>你看隔壁那个老王又写测试又重构的，还说什么这样以后方便维护，可以快速定位问题，但尼玛搞了2天才完成，而我才花了2个小时，这才是效率啊！什么？后面我花了2个月才修复1个Bug，你是怎么知道的？</p>

<h2>加班</h2>

<p>加班是我能力的重要证明啊，加班让我多了一倍时间来做项目，还怕完不成么？！</p>

<p>加班除了聊天吃饭打游戏外，最重要的是让BOSS知道我在加班，凌晨半夜发个邮件到整个公司邮箱是必须的，下班走的时候在朋友圈晒张&#8221;加班的夜晚真美&#8221;之类的照片也是极好的。让BOSS知道我就算没有功劳也有苦劳，到时候项目完不成也不要怪我，因为我已经加班了。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-9/sb1.jpeg" width="300" height="300"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过TDD聊软件开发]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/09/15/say-something-about-develop-by-tdd/"/>
    <updated>2015-09-15T14:35:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/09/15/say-something-about-develop-by-tdd</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-9/tdd.png" width="400" height="300"></p>

<p>TDD是由<a href="https://en.wikipedia.org/wiki/Extreme_programming">极限编程</a>提出的一个编程实践，与通常的编程行为相反，TDD是先编写测试案例，然后再编写功能代码，重复这样的一个过程直到功能实现完成为止。</p>

<!--more-->


<p></p>

<h2>TDD</h2>

<p>大家可能听过“六顶思考帽子”，说的是一种思维训练方式或者是一个全面思考问题的模型，我们借鉴思考帽子来说明TDD，可以看到最上面的那个图，三顶帽子分别表示TDD的三个步骤。</p>

<ul>
<li>红帽子: 编写一个测试案例，然后运行它，得到失败的测试结果</li>
<li>绿帽子: 编写功能代码，让失败的测试案例跑通过</li>
<li>蓝帽子: 对功能代码和测试代码进行重构</li>
</ul>


<p>为什么红代表失败，绿代表通过呢？可以想象成交通灯，红灯停绿灯行，在最早的时候是<a href="https://en.wikipedia.org/wiki/Kent_Beck">Kent Beck</a>开发的Junit，用它来跑单元测试的时候，失败会出现一个红色的进度条，成功会变成绿色的，所以红代表失败，绿代表成功。</p>

<p>需要注意的几点:</p>

<ul>
<li>在完成绿帽子的过程中，只需要添加让失败测试案例跑通过的功能代码，不要过渡设计。把整个功能代码都写完了，再来补单元测试，这种不是TDD。</li>
<li>在蓝帽子阶段，不仅要对功能代码进行重构，对测试代码也要进行重构，因为测试代码也是以后维护工作的一部分，如果你不认真对待它，它以后也不会好好对待你，烂测试比没有测试更恼火。</li>
</ul>


<p>一直重复这3个步骤，直到你的功能开发完成，这就是TDD。</p>

<h2>软件质量</h2>

<p>先抛开TDD，我们来聊一下项目管理。项目管理三要素:功能，时间，质量，这3者遵守着质量守恒定律。想象一个面积不变的三角形，如果把其中任意2个点往中心点外面拉伸，那第三个点肯定会往中心点靠近。</p>

<p>在传统的项目管理中，功能和时间往往是不可妥协的，比如领导要在xx日之前完成oo功能，开发团队没办法在规定时间完成指定功能，那要怎么办呢？这时候往往就会降低软件质量来达到目的。</p>

<p>而在敏捷开发中，软件质量是不可妥协的点，在保证高质量的软件基础上对其他2个要素进行裁剪，如果你的时间是deadline，一旦改了会影响产品推广，那我们就保证完成核心功能，其他不是那么重要的功能放到下一个版本；如果功能全部都是必须的，那么请把交付时间延后。</p>

<h2>Which One</h2>

<p>在TDD三顶帽子中，你最喜欢哪一个呢？可能大部分人都喜欢绿帽子（你才喜欢绿帽子!!你全家都喜欢绿帽子!!!&hellip;&ndash;_&ndash;#），因为绿帽子表示你的测试通过了，功能完成了，系统可以上线了。但我觉得蓝帽子和红帽子更加重要，为什么呢？</p>

<p>重构在软件开发中不是一项单独的活动，有的开发人员会说等开发完了所有功能之后，再单独找时间做重构，其实这是不对的，重构不是一个很”大“的事情，而是一个个编写好代码的手法或者技巧，这是一项贯穿软件开发整个过程的一个活动，比如在开发功能的时候进行重构，抽取重复代码进行功能复用，又或者在修复Bug时对之前不合理的代码进行重构，使之更具可维护性，各个阶段我们都可以进行重构。</p>

<p>重构是提高软件质量的重要手段之一，在极限编程中有很多实践都是用于提高软件质量的，包括单元测试，持续集成，TDD，结对编程等，而重构是贯穿在这些实践中的一个活动。</p>

<p>红帽子也比较重要，TDD——测试驱动开发，要先写出测试案例和验收条件，而这需要先分析需求、提炼需求，将需求转化为测试用例，测试驱动开发实际上是需求驱动开发，所以能写出一个好的测试用例，实际上就等于已经对功能代码做好了设计。经历过结对编程的人就有这种感觉，一个人写好测试案例，再由另外一个人来写功能代码，第二个人基本上不用费什么劲就可以写出功能代码，为什么呢？因为思路已经在测试案例中体现出来了，你只要照着写就可以了。</p>

<p>要学习TDD网上有很多资料，甚至还有不少视频是演示怎么做TDD的，这里就不详细举例子了，大家可以自行在网上查阅。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何学习Python]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/09/05/how-to-learn-python/"/>
    <updated>2015-09-05T15:01:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/09/05/how-to-learn-python</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-9/python.jpg" width="400" height="300"></p>

<p>Python语言相对Java来说，最大的特点就是易用易学，基本上每个linux系统都有安装python，不像Java一样还需要自己下JVM、安装、设置环境变量等。有了其他编程语言的基础再来学习Python其实是非常简单的，因为Python语言是基于<a href="https://en.wikipedia.org/wiki/ABC_(programming_language)">ABC</a>语言开发出来的，ABC语言是以教学为目的的语言，其宗旨是让编程变得容易阅读和理解，所以Python语言也很容易理解和学习。</p>

<!--more-->


<p></p>

<h2>Pyhotn学习介绍</h2>

<p>关于Python的学习网上有很多介绍，我在这里介绍一下我的学习过程，包括书籍，网站和一些工具等。</p>

<h4>书籍</h4>

<p>关于Python的书我推荐<a href="http://book.douban.com/subject/3112503/">《Python核心编程（第二版）》</a>，这本书看起来很厚其实读起来非常浅显易懂，重点可以看看下面这几章。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>第4章 Python对象
</span><span class='line'>6.8 Unicode
</span><span class='line'>8.11 迭代器和iter<span class="o">()</span>函数
</span><span class='line'>第9章 文件的输入和输出
</span><span class='line'>第10章 错误和异常
</span><span class='line'>第11章 函数和函数式编程
</span><span class='line'>第12章 模块
</span><span class='line'>第13章 面向对象编程
</span><span class='line'>第14章 执行环境
</span><span class='line'>第15章 正则表达式
</span><span class='line'>第18章 多线程编程
</span><span class='line'>20.2 使用Python进行Web应用：创建一个简单的Web客户端
</span></code></pre></td></tr></table></div></figure>


<p>如果不想看这种太多理论的书的话，可以看这本实战的书<a href="http://learnpythonthehardway.org/">《Learn Python The Hard Way》</a>，里面的例子从浅到深让你一步步的学习Python，比较适合没有编程经验的新手。里面的例子不要只是把它们打出来，最好自己可以举一反三做一些关于知识点的挑战和扩展。</p>

<h4>网站</h4>

<p>除了看书编码外，平时业余时间可以订阅一些Python的blog和网站，下面是我最近收集的一些Python博客，分享一下:</p>

<ul>
<li><a href="http://planetpython.org/">Planet Python</a>: 这是最出名的python博客其中之一，快去看看，我希望你能找到对你有用的东西。</li>
<li><a href="http://lucumr.pocoo.org/">lucumr</a>: 博主是flask（一个python web框架）的创始人</li>
<li><a href="https://doughellmann.com">Doug Hellmann</a>: 博主是PYMOTW(Python Module Of the Week)成员之一，博客里面包含了很多python library的知识。如果你是在寻找一些实用的python库的话，你可以在这里找找。</li>
<li><a href="http://www.blog.pythonlibrary.org/">Mouse Vs Python</a>: 这个博客更新也比较频繁。</li>
<li><a href="http://www.pydanny.com/">pydanny</a>: 这是一个主要关注Django的博客，但也有很多关于Python的东西。</li>
</ul>


<h4>工具 &amp; 技巧</h4>

<p>pip和setuptools就不说了，Python开发必备，下载管理依赖包就靠他们了，其他最有用的Python工具要数<a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/">virtualenv</a>了，它可以创建一个虚拟的Python执行环境，因为Python的虚拟机不像JVM那么大，创建出来之后的文件夹非常小（大概只有10M），在这个虚拟环境里面安装执行Python程序不会污染你操作系统的主Python环境。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 安装virtualenv</span>
</span><span class='line'>pip install virtualenv
</span><span class='line'><span class="c"># 创建Python虚拟环境</span>
</span><span class='line'>virtualenv venv
</span><span class='line'><span class="c"># 让虚拟环境生效</span>
</span><span class='line'><span class="nb">source </span>venv/bin/activate
</span><span class='line'><span class="c"># 取消虚拟环境</span>
</span><span class='line'>deactivate
</span></code></pre></td></tr></table></div></figure>


<p>另外Pyhton的调试也非常方便，只要在需要设置断点的地方添加代码<code>import pdb;pdb.set_trace()</code>即可，然后执行程序就会在断点出停止，你可以通过打印下面命令进行调试:</p>

<ul>
<li><code>c</code>: 让程序继续往下走，continue的意思</li>
<li><code>s</code>: 进入子方法内部，相当于step into</li>
<li><code>n</code>: 跳到下一句
这里介绍的只是一些基本的命令，更多的命令可以看<a href="https://docs.python.org/2/library/pdb.html">这里</a>，另外还可以打印断点处的各种变量和执行各种语句。</li>
</ul>


<h2>简洁的Python</h2>

<p>在Python中执行<code>import this</code>可以看到Python之禅。</p>

<blockquote><p>The Zen of Python, by Tim Peters</p><p>Beautiful is better than ugly.<br/>Explicit is better than implicit.<br/>Simple is better than complex.<br/>Complex is better than complicated.<br/>Flat is better than nested.<br/>Sparse is better than dense.<br/>Readability counts.<br/>Special cases aren&#8217;t special enough to break the rules.<br/>Although practicality beats purity.<br/>Errors should never pass silently.<br/>Unless explicitly silenced.<br/>In the face of ambiguity, refuse the temptation to guess.<br/>There should be one&#8211; and preferably only one &#8211;obvious way to do it.<br/>Although that way may not be obvious at first unless you&#8217;re Dutch.<br/>Now is better than never.<br/>Although never is often better than *right* now.<br/>If the implementation is hard to explain, it&#8217;s a bad idea.<br/>If the implementation is easy to explain, it may be a good idea.<br/>Namespaces are one honking great idea &#8211; let&#8217;s do more of those!</p></blockquote>


<p>从Python之禅中我们可以看到Python是一门追求简洁，追求优雅的语言，语言设计者对代码质量要求比较高，希望编写Python代码的开发人员也能写出高质量的代码。</p>

<p>由于Python简洁而强大的函数式编程，我们可以很方便的创建结构稍微复杂的对象，特别复杂的还是建议使用class来创建对象。</p>

<p>比如我们有这样的一个数据结构，一个字典里面包含多个集合，用Java来初始化大概是这个样子:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">list1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;foo1&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">list1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;bar1&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;list1&quot;</span><span class="o">,</span> <span class="n">list1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">list2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;foo2&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">list2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;bar2&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;list2&quot;</span><span class="o">,</span> <span class="n">list2</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>而用Python一行代码就可以搞定:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">my_map</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;list1&#39;</span><span class="p">:</span> <span class="p">[</span><span class="n">foo1</span><span class="p">,</span> <span class="n">bar1</span><span class="p">],</span> <span class="s">&#39;list2&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;foo2&#39;</span><span class="err">，</span><span class="s">&#39;bar2&#39;</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以说Java是一门很啰嗦的语言，虽然新版本的Java加了lambda，然而并不能减少多少Java语言本身的繁杂性。</p>

<h2>Djaogo学习介绍</h2>

<p>Python来实现一些小工具小应用是十分方便的，但Python也可以用来做Web开发，Python比较有名的Web框架有Django，Flask，Tormado等，其中Djaongo使用最为广泛，集成的东西也比较多，不管你是使用关系系数据库还是非关系数据库，是否使用缓存等都可以使用Django，其最好的一个特点是集成了管理员功能，可以省却开发者很大的一部分开发量。</p>

<p>有人可能会说Django比较重，对于新手来说学习成本比较高，对于这个我没有什么意见，因为工作需要使用Django，对于其他的框架还没有接触过，但我使用后的体验是Django虽然要配置的东西比较多，但只要配置好了，开发效率还是挺快的，也可能是我以前大部分时间使用Spring来开发，相对Spring来说Django的配置还算比较轻的，所以对我来说没有什么感觉:)</p>

<p>学习Django可以上Django的<a href="http//www.djangoproject.com">官网</a>，上面有startup的向导，通过向导一步步的操作可以让你快速了解一个web项目的开发，另外上面还有很多文档，可以知道Django的所有内容。</p>

<p>另外一个学习Django比较好的是《Django Book》这本书，这里有它的<a href="http://www.djangobook.com/en/2.0/index.html">网站</a>，书很浅显易读，详细讲解了Django各个部分的内容，有时候是先通过一个比较简单的实现方案实现需求，然后利用Django的特性让代码得到优化，更少的代码来实现更多的内容，这也体现了Django的思想，简洁优雅，复用性高。</p>

<p>理论知识学习的差不多了，最后当然是做项目练手了，可以自己动手做一个web项目来熟悉Python和Django，在实际操作的过程中遇到不懂的问题就google一下，然后记录下来，做过一两个项目之后你应该对Python和Django比较了解了:)</p>
]]></content>
  </entry>
  
</feed>
