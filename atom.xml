<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2015-05-11T14:23:15+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何在Spring中配置Websocket]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/05/11/spring-websocket-config/"/>
    <updated>2015-05-11T09:41:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/05/11/spring-websocket-config</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-5/websockets.png"></p>

<p>Websocket是HTML5的一项新技术，可以让服务端和客户端进行实时的通信，主要的使用场景有: 实时的聊天系统，对实时性要求比较高的游戏，或者金融行业对股票市场数据的及时获取等。在Spring3的时候就已经有了对Websocket的支持，不过需要一些高版本的web容器来运行，比如Tomcat7.0.47+，Jetty9等。</p>

<!--more-->


<p></p>

<p>在Spring的官网上有关于Websocket的示例工程，<a href="https://spring.io/guides/gs/messaging-stomp-websocket/">https://spring.io/guides/gs/messaging-stomp-websocket/</a>，里面简单介绍了如何通过Spring-boot来进行Websocket系统的构建。我们的例子将基于这个例子进行修改，但是是使用传统的Spring的方式进行配置。</p>

<h2>依赖包</h2>

<p>首先我们需要添加相关的依赖包:</p>

<ul>
<li>Websocket需要servlet3.1的版本</li>
<li>spring-websocket和spring-messaging是Spring关于Websocket的组件</li>
<li>使用Jackson进行json数据的处理</li>
</ul>


<figure class='code'><figcaption><span>build.gradle </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">String</span> <span class="n">springVersion</span> <span class="o">=</span> <span class="s2">&quot;4.1.4.RELEASE&quot;</span>
</span><span class='line'><span class="n">String</span> <span class="n">jacksonDatabindVersion</span> <span class="o">=</span> <span class="s2">&quot;2.5.0&quot;</span>
</span><span class='line'><span class="n">String</span> <span class="n">jacksonVersion</span> <span class="o">=</span> <span class="s2">&quot;1.9.13&quot;</span>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//websocket</span>
</span><span class='line'>    <span class="n">compile</span><span class="o">(</span><span class="s2">&quot;javax.websocket:javax.websocket-api:1.1&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">compile</span><span class="o">(</span><span class="s2">&quot;javax.servlet:javax.servlet-api:3.1.0&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//spring</span>
</span><span class='line'>    <span class="n">compile</span><span class="o">(</span><span class="s2">&quot;org.springframework:spring-messaging:&quot;</span> <span class="o">+</span> <span class="n">springVersion</span><span class="o">)</span>
</span><span class='line'>    <span class="n">compile</span><span class="o">(</span><span class="s2">&quot;org.springframework:spring-websocket:&quot;</span> <span class="o">+</span> <span class="n">springVersion</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//json</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s2">&quot;com.fasterxml.jackson.core:jackson-databind:&quot;</span> <span class="o">+</span> <span class="n">jacksonDatabindVersion</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s2">&quot;org.codehaus.jackson:jackson-mapper-asl:&quot;</span> <span class="o">+</span> <span class="n">jacksonVersion</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s2">&quot;org.codehaus.jackson:jackson-core-asl:&quot;</span> <span class="o">+</span> <span class="n">jacksonVersion</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>xml配置（类配置）</h2>

<p>我们有两种方式进行Websocket的配置，一种是通过xml文件的方式，在这里我们定义了websocket的配置信息，这样服务器往客户端发送消息就可以通过<code>/topic/xx</code>来发送，客户端则可以通过<code>/app/hello</code>来发送消息到服务端。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>       <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>       <span class="na">xmlns:websocket=</span><span class="s">&quot;http://www.springframework.org/schema/websocket&quot;</span>
</span><span class='line'>       <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span>
</span><span class='line'><span class="s">        http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    ...... // other configurations
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;websocket:message-broker</span> <span class="na">application-destination-prefix=</span><span class="s">&quot;/app&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;websocket:stomp-endpoint</span> <span class="na">path=</span><span class="s">&quot;/hello&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;websocket:sockjs/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/websocket:stomp-endpoint&gt;</span>
</span><span class='line'>        <span class="nt">&lt;websocket:simple-broker</span> <span class="na">prefix=</span><span class="s">&quot;/topic&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/websocket:message-broker&gt;</span>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外一种方式是通过类的方式，代码如下，功能与上面的xml配置相同:</p>

<figure class='code'><figcaption><span>WebSocketConfig.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.messaging.simp.config.MessageBrokerRegistry</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.socket.config.annotation.StompEndpointRegistry</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="nd">@EnableWebSocketMessageBroker</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebSocketConfig</span> <span class="kd">extends</span> <span class="n">AbstractWebSocketMessageBrokerConfigurer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configureMessageBroker</span><span class="o">(</span><span class="n">MessageBrokerRegistry</span> <span class="n">config</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">config</span><span class="o">.</span><span class="na">enableSimpleBroker</span><span class="o">(</span><span class="s">&quot;/topic&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">config</span><span class="o">.</span><span class="na">setApplicationDestinationPrefixes</span><span class="o">(</span><span class="s">&quot;/app&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerStompEndpoints</span><span class="o">(</span><span class="n">StompEndpointRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">registry</span><span class="o">.</span><span class="na">addEndpoint</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">).</span><span class="na">withSockJS</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>消息类和Controller定义</h2>

<p>Controller定义:</p>

<figure class='code'><figcaption><span>WebSocketConfig.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.zzm.wechat.model.Greeting</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.zzm.wechat.model.HelloMessage</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.messaging.handler.annotation.MessageMapping</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.messaging.handler.annotation.SendTo</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GreetingController</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@MessageMapping</span><span class="o">(</span><span class="s">&quot;/hello&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@SendTo</span><span class="o">(</span><span class="s">&quot;/topic/greetings&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Greeting</span> <span class="nf">greeting</span><span class="o">(</span><span class="n">HelloMessage</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span> <span class="c1">// simulated delay</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Greeting</span><span class="o">(</span><span class="s">&quot;Hello, &quot;</span> <span class="o">+</span> <span class="n">message</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>消息model的定义:</p>

<figure class='code'><figcaption><span>WebSocketConfig.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Greeting</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Greeting</span><span class="o">(</span><span class="n">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getContent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloMessage</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在web.xml中设置controller的url前缀，这样可以避免一些页面的url被controller拦截。</p>

<figure class='code'><figcaption><span>web.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>      <span class="nt">&lt;servlet-name&gt;</span>mvc-dispatcher<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>      <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'>        <span class="nt">&lt;load-on-startup&gt;</span>1<span class="nt">&lt;/load-on-startup&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>      <span class="nt">&lt;servlet-name&gt;</span>mvc-dispatcher<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>      <span class="nt">&lt;url-pattern&gt;</span>/api/*<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/servlet-mapping&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>客户端页面</h2>

<p>首先下载<code>stomp.js</code>和<code>sockjs.js</code>，然后编写一个html页面进行客户端websocket的连接，并实现发送消息和接收消息的功能。我们使用SockJS的方式来创建Websocket连接，注意url要加上domain名称(这里是<code>server</code>)和<code>api</code>前缀。</p>

<figure class='code'><figcaption><span>demo.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Hello WebSocket<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;resources/sockjs-0.3.4.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;resources/stomp.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">stompClient</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">setConnected</span><span class="p">(</span><span class="nx">connected</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;connect&#39;</span><span class="p">).</span><span class="nx">disabled</span> <span class="o">=</span> <span class="nx">connected</span><span class="p">;</span>
</span><span class='line'>            <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;disconnect&#39;</span><span class="p">).</span><span class="nx">disabled</span> <span class="o">=</span> <span class="o">!</span><span class="nx">connected</span><span class="p">;</span>
</span><span class='line'>            <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;conversationDiv&#39;</span><span class="p">).</span><span class="nx">style</span><span class="p">.</span><span class="nx">visibility</span> <span class="o">=</span> <span class="nx">connected</span> <span class="o">?</span> <span class="s1">&#39;visible&#39;</span> <span class="o">:</span> <span class="s1">&#39;hidden&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;response&#39;</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">connect</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SockJS</span><span class="p">(</span><span class="s1">&#39;/server/api/hello&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">stompClient</span> <span class="o">=</span> <span class="nx">Stomp</span><span class="p">.</span><span class="nx">over</span><span class="p">(</span><span class="nx">socket</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">stompClient</span><span class="p">.</span><span class="nx">connect</span><span class="p">({},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">frame</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">setConnected</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Connected: &#39;</span> <span class="o">+</span> <span class="nx">frame</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">stompClient</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="s1">&#39;/topic/greetings&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">greeting</span><span class="p">){</span>
</span><span class='line'>                    <span class="nx">showGreeting</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">greeting</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">content</span><span class="p">);</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">disconnect</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">stompClient</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">stompClient</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">setConnected</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Disconnected&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">sendName</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">stompClient</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;/app/hello&quot;</span><span class="p">,</span> <span class="p">{},</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="nx">name</span> <span class="p">}));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">showGreeting</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;response&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">p</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">wordWrap</span> <span class="o">=</span> <span class="s1">&#39;break-word&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">p</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="nx">message</span><span class="p">));</span>
</span><span class='line'>            <span class="nx">response</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body</span> <span class="na">onload=</span><span class="s">&quot;disconnect()&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;noscript&gt;&lt;h2</span> <span class="na">style=</span><span class="s">&quot;color: #ff0000&quot;</span><span class="nt">&gt;</span>Seems your browser doesn&#39;t support Javascript! Websocket relies on Javascript being enabled. Please enable
</span><span class='line'>    Javascript and reload this page!<span class="nt">&lt;/h2&gt;&lt;/noscript&gt;</span>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;connect&quot;</span> <span class="na">onclick=</span><span class="s">&quot;connect();&quot;</span><span class="nt">&gt;</span>Connect<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>        <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;disconnect&quot;</span> <span class="na">disabled=</span><span class="s">&quot;disabled&quot;</span> <span class="na">onclick=</span><span class="s">&quot;disconnect();&quot;</span><span class="nt">&gt;</span>Disconnect<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;conversationDiv&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label&gt;</span>What is your name?<span class="nt">&lt;/label&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;name&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;sendName&quot;</span> <span class="na">onclick=</span><span class="s">&quot;sendName();&quot;</span><span class="nt">&gt;</span>Send<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">&quot;response&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果：</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-5/websocket-run.png"></p>

<p>浏览器console信息:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Disconnected
</span><span class='line'>chrome-extension://fhhdlnnepfjhlhilgmeepgkhjmhhhjkh/js/detector.js:505 detector
</span><span class='line'>chrome-extension://fhhdlnnepfjhlhilgmeepgkhjmhhhjkh/js/detector.js:506 Object
</span><span class='line'>stomp.js:130 Opening Web Socket...
</span><span class='line'>stomp.js:130 Web Socket Opened...
</span><span class='line'>stomp.js:130 &gt;&gt;&gt; CONNECT
</span><span class='line'>accept-version:1.1,1.0
</span><span class='line'>heart-beat:10000,10000
</span><span class='line'>
</span><span class='line'><span class="o">&lt;&lt;&lt;</span> CONNECTED
</span><span class='line'>version:1.1
</span><span class='line'>heart-beat:0,0
</span><span class='line'>
</span><span class='line'>connected to server undefined
</span><span class='line'>demo.html:22 Connected: CONNECTED
</span><span class='line'>heart-beat:0,0
</span><span class='line'>version:1.1
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; SUBSCRIBE
</span><span class='line'>id:sub-0
</span><span class='line'>destination:/topic/greetings
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; SEND
</span><span class='line'>destination:/app/hello
</span><span class='line'>content-length:14
</span><span class='line'>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;name&quot;</span>:<span class="s2">&quot;zzm&quot;</span><span class="o">}</span>
</span><span class='line'><span class="o">&lt;&lt;&lt;</span> MESSAGE
</span><span class='line'>destination:/topic/greetings
</span><span class='line'>content-type:application/json;charset<span class="o">=</span>UTF-8
</span><span class='line'>subscription:sub-0
</span><span class='line'>message-id:3657pj5u-0
</span><span class='line'>content-length:25
</span><span class='line'>
</span><span class='line'><span class="o">{</span><span class="s2">&quot;content&quot;</span>:<span class="s2">&quot;Hello, zzm!&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>gradle运行jetty9</h2>

<p>gradle内置的Jetty版本是Jetty6，由于版本较低不支持websocket，所以我们测试的话需要打包并部署到Jetty9或Tomcat7.0.47+上，但我们可以通过其他gradle插件来把我们的本地服务运行到Jetty9上。这里介绍2个插件，<a href="https://github.com/akhikhl/gretty">Gretty</a>和<a href="https://github.com/bmuschko/gradle-cargo-plugin">Cargo</a>。</p>

<h4>Gretty</h4>

<p>在<code>build.gradle</code>中添加如下脚本:</p>

<figure class='code'><figcaption><span>build.gradle </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">url</span> <span class="s2">&quot;http://maven.oschina.net/content/groups/public/&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s1">&#39;org.akhikhl.gretty:gretty:+&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;org.akhikhl.gretty&#39;</span>
</span><span class='line'><span class="c1">// apply plugin: &#39;jetty&#39; 注意要注释掉原来的jetty插件</span>
</span><span class='line'>
</span><span class='line'><span class="n">gretty</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">httpPort</span> <span class="o">=</span> <span class="mi">9898</span> <span class="c1">// 指定web服务的http端口</span>
</span><span class='line'>    <span class="n">servletContainer</span> <span class="o">=</span> <span class="s1">&#39;jetty9&#39;</span> <span class="c1">// 这里可以指定tomcat,jetty的几个版本</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后运行<code>gradle appRun</code>即可。</p>

<h4>Cargo</h4>

<p>在<code>build.gradle</code>中添加如下脚本，注意要先下载jetty9的安装包并解压:</p>

<figure class='code'><figcaption><span>build.gradle </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">url</span> <span class="s2">&quot;http://maven.oschina.net/content/groups/public/&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="s1">&#39;com.bmuschko:gradle-cargo-plugin:2.1&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;com.bmuschko.cargo&#39;</span>
</span><span class='line'><span class="n">cargo</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">containerId</span> <span class="o">=</span> <span class="s1">&#39;jetty9x&#39;</span>
</span><span class='line'>    <span class="n">port</span> <span class="o">=</span> <span class="mi">9898</span>
</span><span class='line'>    <span class="n">local</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">homeDir</span> <span class="o">=</span> <span class="n">file</span><span class="o">(</span><span class="s1">&#39;/Users/zhaozhiming/tools/jetty-distribution-9.2.10.v20150310&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后运行<code>gradle war CargoRunLocal</code>，注意首先要打出war包，然后插件会自动部署war包到Jetty9的安装目录下，这种方式不大灵活，比如一些页面的修改都需要重新部署才能进行测试。</p>

<p>最后附上Spring关于Websocket的文档链接，请见<a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html">这里</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Openfire和Smack进行即时通讯消息开发]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/04/20/openfire-smack-useage/"/>
    <updated>2015-04-20T09:41:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/04/20/openfire-smack-useage</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-4/openfire.png"></p>

<p><a href="http://www.igniterealtime.org/index.jsp">Openfire</a>是由Ignite Realtime公司用Java开发的一个开源即时通讯服务器，基于XMPP协议（Jabber）进行消息交互，最新版本是3.9.3。该公司旗下有多个Java客户端可供使用，较常使用的是<a href="http://www.igniterealtime.org/projects/smack/index.jsp">Smack</a>，最新的版本是4.1.0，最新的版本与以前的版本相比有较大改动，下面我们就来介绍一下Openfire和Smack的使用。</p>

<!--more-->


<p></p>

<h2>Openfire安装</h2>

<p>Openfire的安装非常简单，你可以通过下面几种方式进行安装。</p>

<h4>docker镜像</h4>

<p>最简单的方式你可以通过docker下载<a href="https://registry.hub.docker.com/u/sameersbn/openfire/dockerfile/">Openfire的镜像</a>，然后执行下面的命令启动openfire容器。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker run --name<span class="o">=</span>myopenfire -d <span class="se">\ </span>
</span><span class='line'>  -p 9090:9090 -p 5222:5222 -p 5223:5223 <span class="se">\ </span>
</span><span class='line'>  -p 7777:7777 -p 7070:7070 -p 7443:7443 <span class="se">\ </span>
</span><span class='line'>  -p 5229:5229 -p 5269:5269 sameersbn/openfire:3.9.3-2
</span></code></pre></td></tr></table></div></figure>


<h4>直接安装</h4>

<p>这里是openfire的<a href="http://www.igniterealtime.org/builds/openfire/docs/latest/documentation/install-guide.html">安装向导</a>，有各个平台的指南，不过首先要安装JDK1.5+，然后按照指南进行安装即可。</p>

<h2>Smack</h2>

<p>最新的Smack版本是4.1.0，跟之前版本的API有很大区别，据说4.2.0的API差别会更大，<a href="https://www.igniterealtime.org/builds/smack/docs/latest/documentation/">这里</a>是Smack4.1.0的代码使用示例。</p>

<h4>创建连接</h4>

<p>不同于以前版本的是ConnectionConfig不再是new出来的，而是通过builder来创建。这个导致Spring的integration-xmpp组件不支持使用，只能自己写连接的类了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="n">XMPPTCPConnection</span> <span class="nf">createConnection</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">XMPPTCPConnectionConfiguration</span> <span class="n">connectionConfig</span> <span class="o">=</span> <span class="n">XMPPTCPConnectionConfiguration</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setUsernameAndPassword</span><span class="o">(</span><span class="s">&quot;username&quot;</span><span class="o">,</span> <span class="s">&quot;password&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setServiceName</span><span class="o">(</span><span class="s">&quot;your.server.name&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setHost</span><span class="o">(</span><span class="s">&quot;your.server.ip&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setConnectTimeout</span><span class="o">(</span><span class="mi">3000</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setSendPresence</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span> <span class="c1">// 设置用户是否上线</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setSecurityMode</span><span class="o">(</span><span class="n">ConnectionConfiguration</span><span class="o">.</span><span class="na">SecurityMode</span><span class="o">.</span><span class="na">disabled</span><span class="o">)</span> <span class="c1">//不使用安全模式</span>
</span><span class='line'>                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">XMPPTCPConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XMPPTCPConnection</span><span class="o">(</span><span class="n">connectionConfig</span><span class="o">);</span>
</span><span class='line'>        <span class="n">connection</span><span class="o">.</span><span class="na">connect</span><span class="o">().</span><span class="na">login</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//这里的login方法如果没传username和password，就是以之前set的用户登录，传了的话就是以传入的用户登录</span>
</span><span class='line'>        <span class="k">return</span>  <span class="n">connection</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>创建用户</h4>

<p>像AccountManager这类对象也不再是new出来的，而是通过getInstance传入connection对象得到。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createUser</span><span class="o">(</span><span class="n">XMPPTCPConnectionConfiguration</span> <span class="n">connection</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">AccountManager</span> <span class="n">accountManager</span> <span class="o">=</span> <span class="n">AccountManager</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>        <span class="n">accountManager</span><span class="o">.</span><span class="na">createAccount</span><span class="o">(</span><span class="s">&quot;username&quot;</span><span class="o">,</span> <span class="s">&quot;password&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>发送消息</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendMessage</span><span class="o">(</span><span class="n">XMPPTCPConnectionConfiguration</span> <span class="n">connection</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ChatManager</span> <span class="n">chatManager</span> <span class="o">=</span> <span class="n">ChatManager</span><span class="o">.</span><span class="na">getInstanceFor</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Chat</span> <span class="n">chat</span> <span class="o">=</span> <span class="n">chatManager</span><span class="o">.</span><span class="na">createChat</span><span class="o">(</span><span class="s">&quot;jid like username@your.server.name&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">chat</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="s">&quot;Hello word1!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>获取离线消息</h4>

<p>注意在创建连接时如果setSendPresence没有设为false，那么在获取离线消息时是始终获取不到的，因为setSendPresence表示已上线，一旦用户上线离线消息就没有了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">receiveOfflineMessages</span><span class="o">(</span><span class="n">XMPPTCPConnectionConfiguration</span> <span class="n">connection</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">OfflineMessageManager</span> <span class="n">offlineMessageManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OfflineMessageManager</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">&gt;</span> <span class="n">messages</span> <span class="o">=</span> <span class="n">offlineMessageManager</span><span class="o">.</span><span class="na">getMessages</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Message</span> <span class="n">message</span> <span class="o">:</span> <span class="n">messages</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>删除离线消息</h4>

<p>离线消息是根据时间来删除的，我们可以在header中获取到消息的时间戳。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteOfflineMessages</span><span class="o">(</span><span class="n">XMPPTCPConnectionConfiguration</span> <span class="n">connection</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">OfflineMessageManager</span> <span class="n">offlineMessageManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OfflineMessageManager</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">OfflineMessageHeader</span><span class="o">&gt;</span> <span class="n">headers</span> <span class="o">=</span> <span class="n">offlineMessageManager</span><span class="o">.</span><span class="na">getHeaders</span><span class="o">();</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stamps</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">OfflineMessageHeader</span> <span class="n">header</span> <span class="o">:</span> <span class="n">headers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">stamps</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">header</span><span class="o">.</span><span class="na">getStamp</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">offlineMessageManager</span><span class="o">.</span><span class="na">deleteMessages</span><span class="o">(</span><span class="n">stamps</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>消息的时间我们还可以通过这种方式获取，这里获取到的时间是一个Date对象，而上面的方式是获取一个时间的String。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getMessageTime</span><span class="o">(</span><span class="n">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">DelayInformation</span> <span class="n">delay</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="na">getExtension</span><span class="o">(</span><span class="n">DelayInformation</span><span class="o">.</span><span class="na">ELEMENT</span><span class="o">,</span> <span class="n">DelayInformation</span><span class="o">.</span><span class="na">NAMESPACE</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">delay</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">delay</span><span class="o">.</span><span class="na">getStamp</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">delay</span><span class="o">.</span><span class="na">getStamp</span><span class="o">().</span><span class="na">getTime</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>创建聊天室</h4>

<p>Smack还可以创建多人聊天，openfire服务器搭建好后会默认创建一个名为conference的分组聊天服务，我们可以在上面创建聊天室。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createRoom</span><span class="o">(</span><span class="n">XMPPTCPConnectionConfiguration</span> <span class="n">connection</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">MultiUserChatManager</span> <span class="n">multiUserChatManager</span> <span class="o">=</span> <span class="n">MultiUserChatManager</span><span class="o">.</span><span class="na">getInstanceFor</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>        <span class="n">MultiUserChat</span> <span class="n">muc</span> <span class="o">=</span> <span class="n">multiUserChatManager</span><span class="o">.</span><span class="na">getMultiUserChat</span><span class="o">(</span><span class="s">&quot;room jid like roomname@conference.your.server.name&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">muc</span><span class="o">.</span><span class="na">createOrJoin</span><span class="o">(</span><span class="s">&quot;nickname&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Form</span> <span class="n">form</span> <span class="o">=</span> <span class="n">muc</span><span class="o">.</span><span class="na">getConfigurationForm</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Form</span> <span class="n">submitForm</span> <span class="o">=</span> <span class="n">form</span><span class="o">.</span><span class="na">createAnswerForm</span><span class="o">();</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">FormField</span><span class="o">&gt;</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">form</span><span class="o">.</span><span class="na">getFields</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">FormField</span> <span class="n">field</span> <span class="o">:</span> <span class="n">fields</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">FormField</span><span class="o">.</span><span class="na">Type</span><span class="o">.</span><span class="na">hidden</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">field</span><span class="o">.</span><span class="na">getType</span><span class="o">())</span> <span class="o">&amp;&amp;</span> <span class="n">field</span><span class="o">.</span><span class="na">getVariable</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">submitForm</span><span class="o">.</span><span class="na">setDefaultAnswer</span><span class="o">(</span><span class="n">field</span><span class="o">.</span><span class="na">getVariable</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">// 这里设置聊天室为公共聊天室</span>
</span><span class='line'>        <span class="n">submitForm</span><span class="o">.</span><span class="na">setAnswer</span><span class="o">(</span><span class="s">&quot;muc#roomconfig_publicroom&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// 这里设置聊天室是永久存在的</span>
</span><span class='line'>        <span class="n">submitForm</span><span class="o">.</span><span class="na">setAnswer</span><span class="o">(</span><span class="s">&quot;muc#roomconfig_persistentroom&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">muc</span><span class="o">.</span><span class="na">sendConfigurationForm</span><span class="o">(</span><span class="n">submitForm</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>发送多人聊天消息</h4>

<p>注意: 在发送聊天室消息之前，必须先加入聊天室(调用join方法)，否则发送的消息实际上是没有发送成功的。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendRoomMessage</span><span class="o">(</span><span class="n">XMPPTCPConnectionConfiguration</span> <span class="n">connection</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">MultiUserChatManager</span> <span class="n">multiUserChatManager</span> <span class="o">=</span> <span class="n">MultiUserChatManager</span><span class="o">.</span><span class="na">getInstanceFor</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>        <span class="n">MultiUserChat</span> <span class="n">muc</span> <span class="o">=</span> <span class="n">multiUserChatManager</span><span class="o">.</span><span class="na">getMultiUserChat</span><span class="o">(</span><span class="s">&quot;room jid like roomname@conference.your.server.name&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">muc</span><span class="o">.</span><span class="na">createOrJoin</span><span class="o">(</span><span class="s">&quot;nickname&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">muc</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="s">&quot;hello world&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>获取聊天室消息</h4>

<p>获取聊天室消息，是在加入聊天室时传入一个DiscussionHistory对象，这个对象可以设置需要获取多少条聊天记录，或者从什么时候开始的聊天记录等。<br/>
注意: nextMessage方法如果不带超时参数，会使用默认的连接超时时间，一般是5S，加入时间参数可以缩短整个方法的执行时间。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">&gt;</span> <span class="nf">getRoomChat</span><span class="o">(</span><span class="n">XMPPTCPConnectionConfiguration</span> <span class="n">connection</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">MultiUserChatManager</span> <span class="n">multiUserChatManager</span> <span class="o">=</span> <span class="n">MultiUserChatManager</span><span class="o">.</span><span class="na">getInstanceFor</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>        <span class="n">MultiUserChat</span> <span class="n">muc</span> <span class="o">=</span> <span class="n">multiUserChatManager</span><span class="o">.</span><span class="na">getMultiUserChat</span><span class="o">(</span><span class="s">&quot;room jid like roomname@conference.your.server.name&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">DiscussionHistory</span> <span class="n">discussionHistory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DiscussionHistory</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//取某个时间点开始的聊天室消息</span>
</span><span class='line'>        <span class="n">discussionHistory</span><span class="o">.</span><span class="na">setSince</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">(</span><span class="mi">1427090003460L</span><span class="o">));</span>
</span><span class='line'>        <span class="n">muc</span><span class="o">.</span><span class="na">createOrJoin</span><span class="o">(</span><span class="s">&quot;nick&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">discussionHistory</span><span class="o">,</span> <span class="n">connection</span><span class="o">.</span><span class="na">getPacketReplyTimeout</span><span class="o">());</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">&gt;</span> <span class="n">messages</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">//这里超时时间设置为100毫秒</span>
</span><span class='line'>            <span class="n">Message</span> <span class="n">message</span> <span class="o">=</span> <span class="n">muc</span><span class="o">.</span><span class="na">nextMessage</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">message</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>            <span class="n">messages</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">messages</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>保存聊天消息</h2>

<p>Openfire一般是不保存历史消息的，包括P2P(个人对个人)或MUC(多人聊天)的都不保存，离线消息会暂时保存在<code>ofOffline</code>这张表中，如果离线消息已读就会从该表中删除。</p>

<p>如果我们需要保存历史消息可以通过添加插件的方式来记录。</p>

<ul>
<li>在Openfire控制台，进入<code>插件</code>页面，选择<code>有效的插件</code>，在里面选择Monitoring Service进行添加。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-4/monitoring_service.png"></p>

<ul>
<li>安装完成后可以在<code>插件</code>页面看到已经安装好的插件。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-4/openfire_plugin.png"></p>

<ul>
<li>在<code>服务器</code>页面会看到新增了2个子页面，<code>归档文件</code>和<code>统计表</code>，进入<code>归档文件</code>页面的存档设置勾上<code>Archive one-to-one chats</code>和<code>Archive group chats</code>选项。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-4/openfire_archive.png"></p>

<ul>
<li>设置好后以后不管是个人聊天还是聊天室的聊天记录都会记录到数据库的<code>ofMessageArchive</code>表中，不过消息是异步保存的，大概会在消息发送后1分钟左右再存到数据库。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Spring-data进行Redis操作]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/04/12/spring-data-redis/"/>
    <updated>2015-04-12T15:15:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/04/12/spring-data-redis</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-4/spring-redis.jpg"></p>

<p><a href="http://redis.io/">Redis</a>相信大家都听说过，它是一个开源的key-value缓存数据库，有很多Java的客户端支持，比较有名的有Jedis，JRedis等（见<a href="http://redis.io/clients#java">这里</a>）。当然我们可以使用客户端的原生代码实现redis的操作，但实际上在spring中就已经集成了这些客户端的使用，下面我们就以Jedis为例来介绍一下Spring中关于Redis的配置。</p>

<!--more-->


<p></p>

<h2>下载相关依赖包</h2>

<p>首先要下载spring和redis相关的依赖包，最新的jedis版本是2.6.2，还需要下载jackson的包，这个后面会介绍为什么需要，以gradle脚本示例如下。</p>

<figure class='code'><figcaption><span>build.gradle </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>    compile<span class="o">(</span><span class="s2">&quot;redis.clients:jedis:&quot;</span> + jedisVersion<span class="o">)</span>
</span><span class='line'>    compile <span class="s2">&quot;org.springframework.data:spring-data-redis:&quot;</span> + springDataRedisVersion
</span><span class='line'>
</span><span class='line'>    //json
</span><span class='line'>    compile <span class="s2">&quot;com.fasterxml.jackson.core:jackson-databind:&quot;</span> + jacksonDatabindVersion
</span><span class='line'>    compile <span class="s2">&quot;org.codehaus.jackson:jackson-mapper-asl:&quot;</span> + jacksonVersion
</span><span class='line'>    compile <span class="s2">&quot;org.codehaus.jackson:jackson-core-asl:&quot;</span> + jacksonVersion
</span></code></pre></td></tr></table></div></figure>


<h2>spring配置jedis</h2>

<p>在spring的xml配置文件中，做如下配置。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="c">&lt;!-- 配置redis池，依次为最大实例数，最大空闲实例数，(创建实例时)最大等待时间，(创建实例时)是否验证 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;jedisPoolConfig&quot;</span> <span class="na">class=</span><span class="s">&quot;redis.clients.jedis.JedisPoolConfig&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxTotal&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.maxTotal}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxIdle&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.maxIdle}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxWaitMillis&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.maxWaitMillis}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;testOnBorrow&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.testOnBorrow}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- redis连接配置，依次为主机ip，端口，是否使用池，(usePool=true时)redis的池配置 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;jedisFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;hostName&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.host}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;port&quot;</span> <span class="na">value=</span><span class="s">&quot;${redis.port}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;usePool&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;poolConfig&quot;</span> <span class="na">ref=</span><span class="s">&quot;jedisPoolConfig&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- redis模板配置 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;redisTemplate&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.data.redis.core.RedisTemplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;connectionFactory&quot;</span> <span class="na">ref=</span><span class="s">&quot;jedisFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;defaultSerializer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>序列化</h2>

<p>在spring中进行redis存储，如果没有对key和value进行序列化，保存到redis中会出现乱码。注意看上面的redis模板配置，有个配置项是defaultSerializer，这里表示redis中的key和value遇到需要序列化的时候，都默认使用StringRedisSerializer这个类来进行序列化。如果不指定序列化的话，内容会带乱码。</p>

<p>spring-data-redis的序列化类有下面这几个:</p>

<ul>
<li>GenericToStringSerializer: 可以将任何对象泛化为字符串并序列化</li>
<li>Jackson2JsonRedisSerializer: 跟JacksonJsonRedisSerializer实际上是一样的</li>
<li>JacksonJsonRedisSerializer: 序列化object对象为json字符串</li>
<li>JdkSerializationRedisSerializer: 序列化java对象</li>
<li>StringRedisSerializer: 简单的字符串序列化</li>
</ul>


<p>一般如果key-value都是string的话，使用StringRedisSerializer就可以了，如果需要保存对象为json的话推荐使用JacksonJsonRedisSerializer，它不仅可以将对象序列化，还可以将对象转换为json字符串并保存到redis中，但需要和jackson配合一起使用。</p>

<h2>简单的redis操作</h2>

<p>代码示例如下，使用redis进行set和get操作。</p>

<figure class='code'><figcaption><span>MyUserRepository.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Repository</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyUserRepository</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//直接使用autowire就可以引用到配置文件中的redis-template</span>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">RedisTemplate</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">MyUser</span><span class="o">&gt;</span> <span class="n">template</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ValueOperations</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">MyUser</span><span class="o">&gt;</span> <span class="n">operations</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@PostConstruct</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//这里设置value的序列化方式为JacksonJsonRedisSerializer </span>
</span><span class='line'>        <span class="n">template</span><span class="o">.</span><span class="na">setValueSerializer</span><span class="o">(</span><span class="k">new</span> <span class="n">JacksonJsonRedisSerializer</span><span class="o">&lt;&gt;(</span><span class="n">MyUser</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>        <span class="n">operations</span> <span class="o">=</span> <span class="n">template</span><span class="o">.</span><span class="na">opsForValue</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">MyUser</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">operations</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">MyUser</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">operations</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// model</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyUser</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">// ... setter and getter</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 在Controller中调用</span>
</span><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MyUserRepository</span> <span class="n">myUserRepository</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/test&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span>
</span><span class='line'>    <span class="nd">@ResponseBody</span>
</span><span class='line'>    <span class="n">ResponseEntity</span><span class="o">&lt;?&gt;</span> <span class="n">test</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">MyUser</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyUser</span><span class="o">(</span><span class="s">&quot;zhaozhiming&quot;</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="s">&quot;my:user:zhaozhiming&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">myUserRepository</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
</span><span class='line'>        <span class="n">MyUser</span> <span class="n">myUser</span> <span class="o">=</span> <span class="n">myUserRepository</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;my user:%s&quot;</span><span class="o">,</span> <span class="n">myUser</span><span class="o">));</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="n">result</span><span class="o">,</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用set方法后，可以在日志中看到get后的MyUser对象。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> - my user:MyUser<span class="o">{</span><span class="nv">age</span><span class="o">=</span>100, <span class="nv">username</span><span class="o">=</span><span class="s1">&#39;zhaozhiming&#39;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以在redis里面看到保存后的json字符串了。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-4/redis_result.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB简介]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/02/26/hello-mongodb/"/>
    <updated>2015-02-26T16:42:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/02/26/hello-mongodb</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-2/mongodb.jpeg"></p>

<p><a href="http://www.mongodb.org/">MongoDB</a>是一个<a href="http://en.wikipedia.org/wiki/NoSQL">NoSQL</a>(Not only SQL)数据库，使用C++语言编写，当前最新版本为3.0(beta)。</p>

<!--more-->


<p></p>

<h2>安装</h2>

<p>在MongoDB官网上有各个OS的安装指导，但在docker横行的时代，使用docker来安装无疑是最方便的，这里是<a href="https://registry.hub.docker.com/_/mongo/">MongoDB的docker镜像地址</a>，使用非常简单，执行以下命令，docker就会自动下载镜像并启动MongoDB容器了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker run --name somename -d -p 27017:27017 mongo:tag
</span></code></pre></td></tr></table></div></figure>


<h2>客户端</h2>

<p>对比了几个MongoDB的GUI客户端，发现一个比较好用的客户端<a href="http://robomongo.org/">Robomongo</a>，而且是跨平台的，安装完成后点击添加连接，输入ip和端口号就可以连接到你的MongoDB服务器了。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-2/robomongo.png"></p>

<p>PS:因为我是OS系统，用boot2docker来启动docker的，所以我的ip不是<code>localhost</code>，而是<code>192.168.59.103</code>。</p>

<h2>sql查询</h2>

<p>MongoDB是用表达式语言进行数据库操作的，这里<a href="http://www.cnblogs.com/hoojo/archive/2011/06/01/2066426.html">有一篇blog</a>介绍了MongoDB的一些简单操作，并有SQL语句与之对应，下面简单介绍几个命令。</p>

<h4>关系型数据库 vs NoSQL</h4>

<p>在介绍命令之前，需要先理解与关系型数据库两者概念上的区别。</p>

<ul>
<li>表：table vs collection</li>
<li>行：view/row(s) vs json document</li>
<li>索引：index vs index</li>
</ul>


<h4>简单命令</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 创建一个聚集集合（table）</span>
</span><span class='line'>db.createCollection<span class="o">(</span>“collName”, <span class="o">{</span>size: 20, capped: 5, max: 100<span class="o">})</span>;
</span><span class='line'>
</span><span class='line'><span class="c"># 查询集合所有记录</span>
</span><span class='line'>db.userInfo.find<span class="o">()</span>;
</span><span class='line'>相当于: <span class="k">select</span> * from userInfo;
</span><span class='line'>
</span><span class='line'><span class="c"># 查询age = 22的记录</span>
</span><span class='line'>db.userInfo.find<span class="o">({</span><span class="s2">&quot;age&quot;</span>: 22<span class="o">})</span>;
</span><span class='line'>相当于: <span class="k">select</span> * from userInfo where <span class="nv">age</span> <span class="o">=</span> 22;
</span><span class='line'>
</span><span class='line'><span class="c"># 查询name中包含 mongo的数据</span>
</span><span class='line'>db.userInfo.find<span class="o">({</span>name: /mongo/<span class="o">})</span>;
</span><span class='line'>相当于: <span class="k">select</span> * from userInfo where name like ‘%mongo%’;
</span><span class='line'>
</span><span class='line'><span class="c"># 查询name = zhangsan, age = 22的数据</span>
</span><span class='line'>db.userInfo.find<span class="o">({</span>name: <span class="s1">&#39;zhangsan&#39;</span>, age: 22<span class="o">})</span>;
</span><span class='line'>相当于: <span class="k">select</span> * from userInfo where <span class="nv">name</span> <span class="o">=</span> ‘zhangsan’ and <span class="nv">age</span> <span class="o">=</span> ‘22’;
</span><span class='line'>
</span><span class='line'><span class="c"># 更新记录</span>
</span><span class='line'>db.users.update<span class="o">({</span>age: 25<span class="o">}</span>, <span class="o">{</span><span class="nv">$set</span>: <span class="o">{</span>name: <span class="s1">&#39;changeName&#39;</span><span class="o">}}</span>, <span class="nb">false</span>, <span class="nb">true</span><span class="o">)</span>;
</span><span class='line'>相当于: update users <span class="nb">set </span><span class="nv">name</span> <span class="o">=</span> ‘changeName’ where <span class="nv">age</span> <span class="o">=</span> 25;
</span><span class='line'>
</span><span class='line'><span class="c"># 删除</span>
</span><span class='line'>db.users.remove<span class="o">({</span>age: 132<span class="o">})</span>;
</span><span class='line'>相当于: delete from users where <span class="nv">age</span> <span class="o">=</span> 132;
</span></code></pre></td></tr></table></div></figure>


<h2>Java示例</h2>

<p>使用Java来操作MongoDB也比较简单，首先要下载Java驱动，在Maven库上可以查询到，下面是驱动的Gradle定义。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>org.mongodb:mongo-java-driver:3.0.0-beta2
</span></code></pre></td></tr></table></div></figure>


<p>驱动最新的版本是3.0，语法上跟2.x有一些差别，具体示例可以参考<a href="http://docs.mongodb.org/ecosystem/tutorial/getting-started-with-3.0-java-driver/">MongoDB官网的Java示例</a>。</p>

<h4>简单示例</h4>

<figure class='code'><figcaption><span>MyMongoDB.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.BasicDBObject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.MongoClient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.client.FindIterable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.client.MongoCollection</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.mongodb.client.MongoDatabase</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.bson.Document</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyMongoDb</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">MongoClient</span> <span class="n">mongo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MongoClient</span><span class="o">(</span><span class="s">&quot;192.168.59.103&quot;</span><span class="o">,</span> <span class="mi">27017</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 根据名称查找数据库</span>
</span><span class='line'>        <span class="n">MongoDatabase</span> <span class="n">mydb</span> <span class="o">=</span> <span class="n">mongo</span><span class="o">.</span><span class="na">getDatabase</span><span class="o">(</span><span class="s">&quot;mydb&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// 根据名称查找集合</span>
</span><span class='line'>        <span class="n">MongoCollection</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="n">collection</span> <span class="o">=</span> <span class="n">mydb</span><span class="o">.</span><span class="na">getCollection</span><span class="o">(</span><span class="s">&quot;collectName&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 查询该集合的所有记录</span>
</span><span class='line'>        <span class="n">FindIterable</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="n">documents</span> <span class="o">=</span> <span class="n">collection</span><span class="o">.</span><span class="na">find</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Document</span> <span class="n">document</span> <span class="o">:</span> <span class="n">documents</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">document</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 插入一条记录</span>
</span><span class='line'>        <span class="n">Document</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Document</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;time&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;sex&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;address&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">BasicDBObject</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;china&quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;province&quot;</span><span class="o">,</span> <span class="s">&quot;Sichuan&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">collection</span><span class="o">.</span><span class="na">insertOne</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 更新一条记录</span>
</span><span class='line'>        <span class="n">collection</span><span class="o">.</span><span class="na">updateOne</span><span class="o">(</span><span class="k">new</span> <span class="n">Document</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;time&quot;</span><span class="o">),</span> <span class="k">new</span> <span class="n">Document</span><span class="o">(</span><span class="s">&quot;$set&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Document</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">,</span> <span class="mi">101</span><span class="o">)));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>数据库设计原则</h2>

<p>MongoDB的数据模式有2种结构：引用(References)和内嵌(Embedded)。</p>

<ul>
<li>引用和关系型数据库的表设计比较像，不同的对象放在不同的集合(表)中。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-2/mongo-references.png"></p>

<ul>
<li>内嵌比较特殊，是把对象的关联对象放到一个集合(表)中，这个恰恰是关系系数据库做不到的。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-2/mongo-embedded.png"></p>

<p>那问题来了，什么时候使用引用，什么时候使用内嵌呢？下面是官方给的一些建议，总结如下:</p>

<ul>
<li>顶级对象，一般使用独立的collection，区别于内嵌</li>
<li>线性明细对象如订单里的订单项，一般使用内嵌</li>
<li>包含关系的对象通常使用内嵌</li>
<li>多对多的关系通常采用引用，dbref</li>
<li>只有少量数据的可以单独作为一个collection，这样可以快速缓存到应用服务器内存</li>
<li>内嵌对象比顶级对象难引用，至少现在还不能对它使用dbref</li>
<li>内嵌对象的获取有时候会比较难，例如各科分数内嵌到学生对象，从所有学生中获取前100个高分，不内嵌会更简单</li>
<li>如果内嵌对象数量很多，可以限制其大小</li>
<li>性能存在问题（应是查询的性能），使用内嵌</li>
</ul>


<p>总而言之，数据库的设计需要考虑需求的使用场景，能一次查询到结果的尽量不要分多次进行查询，更多内容可以参考MongoDB官网<a href="http://docs.mongodb.org/manual/core/data-modeling-introduction/">Data Modeling</a>的章节。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信公众账号开发part2——用户消息接收]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/02/04/wechat-public-account-dev-part-2/"/>
    <updated>2015-02-04T16:03:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/02/04/wechat-public-account-dev-part-2</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-2/wechat_part2.jpg"></p>

<p>上一篇写了如何通过微信开发者认证，今天来讲下如何接收用户的消息，我们以接收用户的订阅消息为例。</p>

<!--more-->


<p></p>

<h2>微信用户消息格式</h2>

<p>在开发者文档的<a href="http://mp.weixin.qq.com/wiki/2/5baf56ce4947d35003b86a9805634b1e.html">接收事件推送</a>文档中，说明了用户订阅消息的请求实体，内容如下:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;xml&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ToUserName&gt;</span><span class="cp">&lt;![CDATA[toUser]]&gt;</span><span class="nt">&lt;/ToUserName&gt;</span>
</span><span class='line'>  <span class="nt">&lt;FromUserName&gt;</span><span class="cp">&lt;![CDATA[FromUser]]&gt;</span><span class="nt">&lt;/FromUserName&gt;</span>
</span><span class='line'>  <span class="nt">&lt;CreateTime&gt;</span>123456789<span class="nt">&lt;/CreateTime&gt;</span>
</span><span class='line'>  <span class="nt">&lt;MsgType&gt;</span><span class="cp">&lt;![CDATA[event]]&gt;</span><span class="nt">&lt;/MsgType&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Event&gt;</span><span class="cp">&lt;![CDATA[subscribe]]&gt;</span><span class="nt">&lt;/Event&gt;</span>
</span><span class='line'><span class="nt">&lt;/xml&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ToUserName: 开发者微信号</li>
<li>FromUserName: 用户微信账号的OpenID</li>
<li>CreateTime: 消息发送时间，秒数</li>
<li>MsgType: 消息类型，事件消息为event</li>
<li>Event: 事件类型，订阅消息为subscribe</li>
</ul>


<h2>消息真实性验证</h2>

<blockquote><p>每次开发者接收用户消息的时候，微信也都会带上前面三个参数（signature、timestamp、nonce）访问开发者设置的URL，开发者依然通过对签名的效验判断此条消息的真实性。效验方式与首次提交验证申请一致。</p><footer><strong>微信公众平台开发者文档</strong> <cite><a href='http://mp.weixin.qq.com/wiki/4/2ccadaef44fe1e4b0322355c2312bfa8.html'>验证消息真实性</a></cite></footer></blockquote>


<p>所以每个订阅消息的http请求都会带有（signature、timestamp、nonce）这3个参数和上面的xml请求实体，服务端可以选择是否校验消息的真实性，建议校验，这样会比较安全。</p>

<h2>接收消息后的响应内容</h2>

<p>了解了消息请求的入参后，还需要知道我们处理请求后，需要返回什么样的内容给用户，这个在开发者文档里面好像没有提及，参考各方资料后知道需要返回一段xml内容，格式如下:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;xml&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Content&gt;</span>感谢您关注我的公众账号[愉快]<span class="nt">&lt;/Content&gt;</span>
</span><span class='line'>    <span class="nt">&lt;CreateTime&gt;</span>1423022113<span class="nt">&lt;/CreateTime&gt;</span>
</span><span class='line'>    <span class="nt">&lt;FromUserName&gt;</span>zzm<span class="nt">&lt;/FromUserName&gt;</span>
</span><span class='line'>    <span class="nt">&lt;FuncFlag&gt;</span>0<span class="nt">&lt;/FuncFlag&gt;</span>
</span><span class='line'>    <span class="nt">&lt;MsgType&gt;</span>text<span class="nt">&lt;/MsgType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ToUserName&gt;</span>zzm<span class="nt">&lt;/ToUserName&gt;</span>
</span><span class='line'><span class="nt">&lt;/xml&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ToUserName: <code>用户微信账号的OpenID</code></li>
<li>FromUserName: <code>开发者微信号</code></li>
<li>CreateTime: 消息发送时间，秒数</li>
<li>FuncFlag: 这个暂时不知道是什么，默认值为0</li>
<li>MsgType: 消息类型，文档消息可以为text和其他，这里我们以最简单的text文本消息为例</li>
<li>Content: 返回给订阅用户的消息内容，可以加表情</li>
</ul>


<p>PS: ToUserName和FromUserName这2个参数和请求的xml实体要相反，这个也比较好理解，用户发了条消息过来，你要发个消息回去，ToUserName就变成了用户，FromUserName变成了你自己的公众账号了。</p>

<h2>服务端开发</h2>

<ul>
<li>了解了http请求的入参和出参，我们可以来开发我们的API了，<code>talk is cheap, show me code</code>。</li>
</ul>


<figure class='code'><figcaption><span>MainController.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="c1">//这里我们定义跟之前认证api相同的url，但方法是POST</span>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/index&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span>
</span><span class='line'>    <span class="nd">@ResponseBody</span>
</span><span class='line'>    <span class="c1">//3个校验消息真实性的参数，还有一个request实体body，里面是xml文本</span>
</span><span class='line'>    <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">receive</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;signature&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">signature</span><span class="o">,</span>
</span><span class='line'>                                   <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;timestamp&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">timestamp</span><span class="o">,</span>
</span><span class='line'>                                   <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;nonce&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">nonce</span><span class="o">,</span>
</span><span class='line'>                                   <span class="nd">@RequestBody</span> <span class="n">String</span> <span class="n">body</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;receive message start&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;signature:%s, timestamp:%s, nonce:%s&quot;</span><span class="o">,</span> <span class="n">signature</span><span class="o">,</span> <span class="n">timestamp</span><span class="o">,</span> <span class="n">nonce</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//先校验消息的真实性，如果校验失败，则返回400</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">wechatAuth</span><span class="o">(</span><span class="n">signature</span><span class="o">,</span> <span class="n">timestamp</span><span class="o">,</span> <span class="n">nonce</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;wechat auth failed&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="s">&quot;wechat auth failed.&quot;</span><span class="o">,</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;body:%s&quot;</span><span class="o">,</span> <span class="n">body</span><span class="o">));</span>
</span><span class='line'>        <span class="c1">//我们定义了一个util来解析xml，将其转换为一个object</span>
</span><span class='line'>        <span class="n">TextMessage</span> <span class="n">requestMessage</span> <span class="o">=</span> <span class="n">XmlUtil</span><span class="o">.</span><span class="na">toTextMessage</span><span class="o">(</span><span class="n">body</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;requestMessage:%s&quot;</span><span class="o">,</span> <span class="n">requestMessage</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">TextMessage</span> <span class="n">textMessage</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">msgType</span> <span class="o">=</span> <span class="n">requestMessage</span><span class="o">.</span><span class="na">getMsgType</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">toUserName</span> <span class="o">=</span> <span class="n">requestMessage</span><span class="o">.</span><span class="na">getToUserName</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">fromUserName</span> <span class="o">=</span> <span class="n">requestMessage</span><span class="o">.</span><span class="na">getFromUserName</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//判断消息类型，如果是event，且事件类型为subscribe，则新建一个文本消息</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">MessageType</span><span class="o">.</span><span class="na">event</span><span class="o">.</span><span class="na">name</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">msgType</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">EventType</span><span class="o">.</span><span class="na">subscribe</span><span class="o">.</span><span class="na">name</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">requestMessage</span><span class="o">.</span><span class="na">getEvent</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&quot;感谢您关注我的公众账号[愉快]&quot;</span><span class="o">;</span>
</span><span class='line'>                <span class="n">textMessage</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TextMessage</span><span class="o">(</span><span class="n">toUserName</span><span class="o">,</span> <span class="n">fromUserName</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">MessageType</span><span class="o">.</span><span class="na">text</span><span class="o">.</span><span class="na">name</span><span class="o">(),</span> <span class="n">message</span><span class="o">,</span> <span class="n">TimeUtil</span><span class="o">.</span><span class="na">currentSeconds</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//将文本消息转换为xml文本</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">responseMessage</span> <span class="o">=</span> <span class="n">XmlUtil</span><span class="o">.</span><span class="na">toXml</span><span class="o">(</span><span class="n">textMessage</span><span class="o">);</span>
</span><span class='line'>        <span class="n">HttpHeaders</span> <span class="n">responseHeaders</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpHeaders</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//设置返回实体的编码，不设置的话可能会变成乱码</span>
</span><span class='line'>        <span class="n">responseHeaders</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Content-Type&quot;</span><span class="o">,</span> <span class="s">&quot;text/html; charset=utf-8&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;response message: %s&quot;</span><span class="o">,</span> <span class="n">responseMessage</span><span class="o">));</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;receive message finish&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="n">responseMessage</span><span class="o">,</span> <span class="n">responseHeaders</span><span class="o">,</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这里使用java原生的JAXB来解析xml。</li>
</ul>


<figure class='code'><figcaption><span>XmlUtil.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.zzm.wechat.model.TextMessage</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.io.IOUtils</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.JAXBContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.Marshaller</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.Unmarshaller</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.StringReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.StringWriter</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">XmlUtil</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toXml</span><span class="o">(</span><span class="n">TextMessage</span> <span class="n">textMessage</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">textMessage</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">JAXBContext</span> <span class="n">context</span> <span class="o">=</span> <span class="n">JAXBContext</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">TextMessage</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Marshaller</span> <span class="n">m</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">createMarshaller</span><span class="o">();</span>
</span><span class='line'>        <span class="n">m</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="n">Marshaller</span><span class="o">.</span><span class="na">JAXB_FORMATTED_OUTPUT</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">m</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="n">Marshaller</span><span class="o">.</span><span class="na">JAXB_FRAGMENT</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">StringWriter</span> <span class="n">sw</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">();</span>
</span><span class='line'>        <span class="n">m</span><span class="o">.</span><span class="na">marshal</span><span class="o">(</span><span class="n">textMessage</span><span class="o">,</span> <span class="n">sw</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sw</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">TextMessage</span> <span class="nf">toTextMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">xml</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">JAXBContext</span> <span class="n">jaxbContext</span> <span class="o">=</span> <span class="n">JAXBContext</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">TextMessage</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Unmarshaller</span> <span class="n">jaxbUnmarshaller</span> <span class="o">=</span> <span class="n">jaxbContext</span><span class="o">.</span><span class="na">createUnmarshaller</span><span class="o">();</span>
</span><span class='line'>        <span class="n">StringReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringReader</span><span class="o">(</span><span class="n">xml</span><span class="o">);</span>
</span><span class='line'>        <span class="n">TextMessage</span> <span class="n">textMessage</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextMessage</span><span class="o">)</span> <span class="n">jaxbUnmarshaller</span><span class="o">.</span><span class="na">unmarshal</span><span class="o">(</span><span class="n">reader</span><span class="o">);</span>
</span><span class='line'>        <span class="n">IOUtils</span><span class="o">.</span><span class="na">closeQuietly</span><span class="o">(</span><span class="n">reader</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">textMessage</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>定义消息的model类，这里需要用到xml的一些annotation。</li>
</ul>


<figure class='code'><figcaption><span>XmlUtil.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlElement</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlRootElement</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//定义命名空间，如果不写的话，xml会以类名开头: &lt;TextMessage&gt;...&lt;/TextMessage&gt;，写了就会以xml开头: &lt;xml&gt;...&lt;/xml&gt;</span>
</span><span class='line'><span class="nd">@XmlRootElement</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;xml&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TextMessage</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">fromUserName</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">toUserName</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">msgType</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">funcFlag</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">event</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">long</span> <span class="n">createTime</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">TextMessage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">TextMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">fromUserName</span><span class="o">,</span> <span class="n">String</span> <span class="n">toUserName</span><span class="o">,</span> <span class="n">String</span> <span class="n">msgType</span><span class="o">,</span> <span class="n">String</span> <span class="n">content</span><span class="o">,</span> <span class="kt">long</span> <span class="n">createTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">fromUserName</span> <span class="o">=</span> <span class="n">fromUserName</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">toUserName</span> <span class="o">=</span> <span class="n">toUserName</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">msgType</span> <span class="o">=</span> <span class="n">msgType</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">createTime</span> <span class="o">=</span> <span class="n">createTime</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getToUserName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">toUserName</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//定义xml子项的名称，不写这个annotation的话，转换后的xml是: &lt;toUserName&gt;xxx&lt;/toUserName&gt;，首字母变小写了，会导致消息传输错误</span>
</span><span class='line'>    <span class="nd">@XmlElement</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;ToUserName&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setToUserName</span><span class="o">(</span><span class="n">String</span> <span class="n">toUserName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">toUserName</span> <span class="o">=</span> <span class="n">toUserName</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//other setter and getter</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>方法写完以后，同样的打包，部署SAE。</p></li>
<li><p>打开手机，关注你的公众账号后，就可以看到服务端传过来的消息内容了。</p></li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-2/wechat_subscribe.png"></p>

<p>我的公众账号是<code>赵芝明的公账号</code>，有兴趣的也可以加一下，以后这个公共账号的功能肯定会慢慢丰富的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信公众账号开发part1——开发者验证]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/02/04/wechat-public-account-dev-part-1/"/>
    <updated>2015-02-04T13:51:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/02/04/wechat-public-account-dev-part-1</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-2/wechat.jpg"></p>

<p>最近在了解微信公众账号的开发，准备边学边写一些文章来记录学习的过程，主要是基于微信的开发者模式来进行公共账号的开发，服务器选择新浪云SAE，语言还是选择比较熟悉的JAVA。</p>

<!--more-->


<p></p>

<h2>基本准备</h2>

<ul>
<li>登陆微信公众平台网站: <code>https://mp.weixin.qq.com</code>，进行账号注册，具体可以参考<a href="http://segmentfault.com/blog/zetd/1190000000356021">青龙老贼的这篇文章</a>，虽然内容有点老跟现在的不大一样，但不影响参考。</li>
<li>在SAE上面新建一个JAVA应用，这里还是可以参照<a href="http://segmentfault.com/blog/zetd/1190000000356067">青龙老贼的文章</a>，跟里面不同的是我们要创建一个JAVA的应用，而不是PHP的。</li>
</ul>


<h2>修改开发者中心的配置</h2>

<ul>
<li>登陆进到微信公众平台后，点击左下角的开发者中心，再点击图中的修改配置按钮，就可以进到修改配置页面。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-2/wechat_config_1.png"></p>

<ul>
<li>填写配置项

<ul>
<li>输入你的SAE的应用URL，比如:<code>http://xxx.sinaapp.com</code>，不一定要写应用的基本URL，可以在上面加一些扩展，比如<code>http://xxx.sinaapp.com/xxx</code>，这个要看你的应用的restful怎么定了。</li>
<li>TOKEN随便输入一个字符串就可以，这个值后面是要配置到java应用里面的，可以理解为一个加密的密钥。</li>
<li>EncodingAESKey随机生成。</li>
<li>消息加解密方式暂时选择明文模式。</li>
</ul>
</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-2/wechat_config_2.png"></p>

<h2>微信服务端开发</h2>

<ul>
<li><p>新建一个spring mvc工程，可以参照<a href="https://confluence.jetbrains.com/display/IntelliJIDEA/Getting+Started+with+Spring+MVC,+Hibernate+and+JSON">这个文章</a>，但我们暂时不需要数据库和页面，只需要定义restful接口就可以了。</p></li>
<li><p>新建Controller并定义认证的api，可以参考微信公众平台开发者文档里面的<a href="http://mp.weixin.qq.com/wiki/17/2d4265491f12608cd170a95559800f2d.html">接入指南</a>，里面有段php代码是指导服务端怎么开发的，我们要做的只是把它翻译成JAVA。</p></li>
</ul>


<figure class='code'><figcaption><span>MainController.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.google.common.base.Joiner</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.common.collect.Lists</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.logging.Log</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.logging.LogFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.http.HttpStatus</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.http.ResponseEntity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.security.MessageDigest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
</span><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainController</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Log</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LogFactory</span><span class="o">.</span><span class="na">getLog</span><span class="o">(</span><span class="n">MainController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//从配置文件获取的token值，就是刚才在修改配置项里面定义的那个Token</span>
</span><span class='line'>    <span class="nd">@Value</span><span class="o">(</span><span class="s">&quot;${token}&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">token</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//定义一个GET请求，url为xxx/index</span>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/index&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="n">produces</span> <span class="o">=</span> <span class="s">&quot;text/html;charset=UTF-8&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span>
</span><span class='line'>    <span class="nd">@ResponseBody</span>
</span><span class='line'>    <span class="c1">//接收新手指南里面提到的那4个参数</span>
</span><span class='line'>    <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">auth</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;signature&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">signature</span><span class="o">,</span>
</span><span class='line'>                                <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;timestamp&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">timestamp</span><span class="o">,</span>
</span><span class='line'>                                <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;nonce&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">nonce</span><span class="o">,</span>
</span><span class='line'>                                <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;echostr&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">echostr</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;wechat auth start&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;signature:%s, timestamp:%s, nonce:%s, echostr:%s&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="n">signature</span><span class="o">,</span> <span class="n">timestamp</span><span class="o">,</span> <span class="n">nonce</span><span class="o">,</span> <span class="n">echostr</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//如果认证通过，原样返回echostr值，并返回200的response</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">wechatAuth</span><span class="o">(</span><span class="n">signature</span><span class="o">,</span> <span class="n">timestamp</span><span class="o">,</span> <span class="n">nonce</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;wechat auth success&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="n">echostr</span><span class="o">,</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//如果失败，则返回400，并提示认证失败</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;wechat auth failed&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="s">&quot;wechat auth failed.&quot;</span><span class="o">,</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">wechatAuth</span><span class="o">(</span><span class="n">String</span> <span class="n">signature</span><span class="o">,</span> <span class="n">String</span> <span class="n">timestamp</span><span class="o">,</span> <span class="n">String</span> <span class="n">nonce</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//将这3个string放到一个list里</span>
</span><span class='line'>        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="n">token</span><span class="o">,</span> <span class="n">timestamp</span><span class="o">,</span> <span class="n">nonce</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;before sort array:%s&quot;</span><span class="o">,</span> <span class="n">strings</span><span class="o">));</span>
</span><span class='line'>        <span class="c1">//按字母顺序做一下排序</span>
</span><span class='line'>        <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">strings</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;after sort array:%s&quot;</span><span class="o">,</span> <span class="n">strings</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//将list里面所有string组合成一个string，这里用到了guava的Joiner</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">groupString</span> <span class="o">=</span> <span class="n">Joiner</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">).</span><span class="na">join</span><span class="o">(</span><span class="n">strings</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;groupString string:%s&quot;</span><span class="o">,</span> <span class="n">groupString</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//用SHA1加密该string</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">sha1</span><span class="o">(</span><span class="n">groupString</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;sha1:%s&quot;</span><span class="o">,</span> <span class="n">result</span><span class="o">));</span>
</span><span class='line'>        <span class="c1">//加密后的值和signature进行比较，注意用java加密后都是字母都是大写的，而传过来的signature是小写字母，所以要大小写转换一下</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">compareResult</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">signature</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">());</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;compare result:%b&quot;</span><span class="o">,</span> <span class="n">compareResult</span><span class="o">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">compareResult</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//类似php的sha1方法</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="nf">sha1</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Create MD5 Hash</span>
</span><span class='line'>            <span class="n">MessageDigest</span> <span class="n">digest</span> <span class="o">=</span> <span class="n">MessageDigest</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">&quot;SHA-1&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">digest</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'>            <span class="kt">byte</span> <span class="n">messageDigest</span><span class="o">[]</span> <span class="o">=</span> <span class="n">digest</span><span class="o">.</span><span class="na">digest</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Create Hex String</span>
</span><span class='line'>            <span class="n">StringBuilder</span> <span class="n">hexString</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">aMessageDigest</span> <span class="o">:</span> <span class="n">messageDigest</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">hexString</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%02X&quot;</span><span class="o">,</span> <span class="mh">0xFF</span> <span class="o">&amp;</span> <span class="n">aMessageDigest</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">hexString</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;sha1 failed&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将工程打包成war，上传到SAE完成部署，启动应用</li>
</ul>


<h2>启用开发者模式</h2>

<ul>
<li>进到微信公众平台的开发者中心，点击服务器配置那一行后面的启用按钮，如果服务器正常启动的话，就可以看到启用成功的提示了。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-2/wechat_start.png"></p>

<p>更多代码可以看这里: <a href="https://github.com/zhaozhiming/wechat-blog%EF%BC%8C%E8%A7%89%E5%BE%97%E5%A5%BD%E7%9A%84%E8%AF%9D%E8%AF%B7Star%E4%B8%80%E4%B8%8B%E5%90%A7%EF%BC%8C%E8%B0%A2%E8%B0%A2">https://github.com/zhaozhiming/wechat-blog%EF%BC%8C%E8%A7%89%E5%BE%97%E5%A5%BD%E7%9A%84%E8%AF%9D%E8%AF%B7Star%E4%B8%80%E4%B8%8B%E5%90%A7%EF%BC%8C%E8%B0%A2%E8%B0%A2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSGi的简单代码示例]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/01/25/hello-osgi/"/>
    <updated>2015-01-25T20:35:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/01/25/hello-osgi</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-1/osgi.gif"></p>

<p>OSGi(Open Service Gateway Initiative)是面向Java的动态模型系统，使用OSGi可以进行模块的动态加载，无需停止重启服务器，而模块就是我们下面要开发的Bundle。OSGi在电信或其他大型企业里面用的比较多，Eclipse现在也是用osgi的方式来添加插件。</p>

<!--more-->


<p></p>

<h2>IntelliJ IDEA的OSGi环境搭建</h2>

<ul>
<li>我们使用<a href="http://felix.apache.org/">Felix</a>这个OSGi框架来进行OSGi代码的开发，首先我们下载最新版本的Felix包并解压</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-1/felix_download.png"></p>

<ul>
<li>在IDEA进行OSGi的设置，选择刚才解压好的felix目录</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-1/felix_idea_setting_1.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-1/felix_idea_setting_2.png"></p>

<ul>
<li>写一个简单的Activator，下面要用到</li>
</ul>


<figure class='code'><figcaption><span>HelloActivator.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">zzm</span><span class="o">.</span><span class="na">osgi</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.osgi.framework.BundleActivator</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.osgi.framework.BundleContext</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloActivator</span> <span class="kd">implements</span> <span class="n">BundleActivator</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">BundleContext</span> <span class="n">bundleContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello World Bundle started!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">(</span><span class="n">BundleContext</span> <span class="n">bundleContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello World Bundle stop!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在工程设置页面进行设置，写上bundle对应的Activator</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-1/idea_project_setting_1.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-1/idea_project_setting_2.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-1/idea_project_setting_3.png"></p>

<ul>
<li>在Run菜单中添加osgi的运行配置，Run->Edit Configurations&hellip;</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-1/felix_idea_run_setting_1.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-1/felix_idea_run_setting_2.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-1/felix_idea_run_setting_3.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-1/felix_idea_run_setting_4.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-1/felix_idea_run_setting_5.png"></p>

<ul>
<li>运行felix</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2015-1/felix_idea_running_1.png"></p>

<p>可以看到IDEA已经帮我们自动启动了我们的Activator，打印了<code>Hello World Start</code>的语句。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-1/felix_idea_running_2.png"></p>

<p>输入<code>lb</code>查看所有bundle的信息，可以看到最下面是我们的bundle，已经激活。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-1/felix_idea_running_3.png"></p>

<p>我们停掉bundle，再显示所有bundle状态，可以看到我们的bundle的状态已经是<code>Resolved</code>了。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2015-1/felix_idea_running_4.png"></p>

<h2>使用felix的Maven Bundle插件来创建bundle</h2>

<p>上面是通过IDE来启动和创建bundle，我们再来看下使用felix maven插件的方式创建bundle，这里是官网地址说明: <a href="http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html">http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html</a>。</p>

<ul>
<li>首先新建Maven的pom.xml文件

<ul>
<li>在dependencies加入felix的jar包，最新的版本是1.4.0</li>
<li>在plugin中定义我们的bundle，包括我们的Activator等信息。</li>
<li>packaging需要修改为<code>bundle</code></li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span>pom.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>
</span><span class='line'>         <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>         <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>com.zzm<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>osgi<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;packaging&gt;</span>bundle<span class="nt">&lt;/packaging&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;build&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>org.apache.felix<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>maven-bundle-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;version&gt;</span>2.4.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>                <span class="nt">&lt;extensions&gt;</span>true<span class="nt">&lt;/extensions&gt;</span>
</span><span class='line'>
</span><span class='line'>                <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;instructions&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;Bundle-SymbolicName&gt;</span>${pom.groupId}.${pom.artifactId}<span class="nt">&lt;/Bundle-SymbolicName&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;Bundle-Vendor&gt;</span>Apache Felix<span class="nt">&lt;/Bundle-Vendor&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;Bundle-Activator&gt;</span>com.zzm.osgi.HelloActivator<span class="nt">&lt;/Bundle-Activator&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;Private-Package&gt;</span>com.zzm.osgi<span class="nt">&lt;/Private-Package&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/instructions&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/build&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.apache.felix<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>org.osgi.core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>1.4.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>还是使用我们之前的Activator，在工程根目录下使用maven进行打包，打包完后可以在target目录下面看到打好的bundle包。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mvn clean install
</span><span class='line'>...balabala
</span><span class='line'>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> --- maven-bundle-plugin:2.4.0:bundle <span class="o">(</span>default-bundle<span class="o">)</span> @ osgi ---
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> --- maven-install-plugin:2.5.2:install <span class="o">(</span>default-install<span class="o">)</span> @ osgi ---
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Installing /Users/zhaozhiming/projects/hello_osgi/bundles/osgi-1.0-SNAPSHOT.jar to /Users/zhaozhiming/.m2/repository/com/zzm/osgi/1.0-SNAPSHOT/osgi-1.0-SNAPSHOT.jar
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Installing /Users/zhaozhiming/projects/hello_osgi/pom.xml to /Users/zhaozhiming/.m2/repository/com/zzm/osgi/1.0-SNAPSHOT/osgi-1.0-SNAPSHOT.pom
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span>
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> --- maven-bundle-plugin:2.4.0:install <span class="o">(</span>default-install<span class="o">)</span> @ osgi ---
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Installing com/zzm/osgi/1.0-SNAPSHOT/osgi-1.0-SNAPSHOT.jar
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Writing OBR metadata
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> BUILD SUCCESS
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Total <span class="nb">time</span>: 3.898s
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Finished at: Sat Jan 31 10:44:49 HKT 2015
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Final Memory: 18M/216M
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>target
</span><span class='line'><span class="nv">$ </span>ls -l
</span><span class='line'>total 8
</span><span class='line'>drwxr-xr-x  4 zhaozhiming  staff   136 Jan 31 10:57 classes
</span><span class='line'>drwxr-xr-x  3 zhaozhiming  staff   102 Jan 31 10:57 maven-status
</span><span class='line'>-rw-r--r--  1 zhaozhiming  staff  2901 Jan 31 10:57 osgi-1.0-SNAPSHOT.jar
</span><span class='line'>drwxr-xr-x  4 zhaozhiming  staff   136 Jan 31 10:57 surefire-reports
</span><span class='line'>drwxr-xr-x  3 zhaozhiming  staff   102 Jan 31 10:57 <span class="nb">test</span>-classes
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>打完包后，在target/classes/META-INF目录下，可以看到maven会产生一个MANIFEST.MF文件，显示了bundle的具体信息。</li>
</ul>


<figure class='code'><figcaption><span>MANIFEST.MF </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Manifest-Version: 1.0
</span><span class='line'>Bnd-LastModified: 1422673028905
</span><span class='line'>Build-Jdk: 1.8.0_25
</span><span class='line'>Built-By: zhaozhiming
</span><span class='line'>Bundle-Activator: com.zzm.osgi.HelloActivator
</span><span class='line'>Bundle-ManifestVersion: 2
</span><span class='line'>Bundle-Name: osgi
</span><span class='line'>Bundle-SymbolicName: com.zzm.osgi
</span><span class='line'>Bundle-Vendor: Apache Felix
</span><span class='line'>Bundle-Version: 1.0.0.SNAPSHOT
</span><span class='line'>Created-By: Apache Maven Bundle Plugin
</span><span class='line'>Export-Package: com.zzm.osgi;uses:<span class="o">=</span><span class="s2">&quot;org.osgi.framework&quot;</span>;<span class="nv">version</span><span class="o">=</span><span class="s2">&quot;1.0.0.S</span>
</span><span class='line'><span class="s2"> NAPSHOT&quot;</span>
</span><span class='line'>Import-Package: org.osgi.framework;version<span class="o">=</span><span class="s2">&quot;[1.5,2)&quot;</span>
</span><span class='line'>Tool: Bnd-2.1.0.20130426-122213
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在felix中运行bundle</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 拷贝bundle包</span>
</span><span class='line'><span class="nv">$ </span>cp osgi-1.0-SNAPSHOT.jar /your/felix/parent/folder
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /your/felix/parent/folder
</span><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>drwxr-xr-x@ 12 zhaozhiming  staff   408 Jan 30 13:39 felix
</span><span class='line'>-rw-r--r--   1 zhaozhiming  staff  2901 Jan 31 11:18 osgi-1.0-SNAPSHOT.jar
</span><span class='line'>
</span><span class='line'><span class="c"># 启动felix</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>felix
</span><span class='line'><span class="nv">$ </span>java -jar bin/felix.jar
</span><span class='line'>____________________________
</span><span class='line'>Welcome to Apache Felix Gogo
</span><span class='line'>
</span><span class='line'>g!
</span><span class='line'>
</span><span class='line'><span class="c"># 查看所有bundle</span>
</span><span class='line'>g! lb
</span><span class='line'>START LEVEL 1
</span><span class='line'>   ID|State      |Level|Name
</span><span class='line'>    0|Active     |    0|System Bundle <span class="o">(</span>4.6.0<span class="o">)</span>
</span><span class='line'>    1|Active     |    1|Apache Felix Bundle Repository <span class="o">(</span>2.0.2<span class="o">)</span>
</span><span class='line'>    2|Active     |    1|Apache Felix Gogo Command <span class="o">(</span>0.14.0<span class="o">)</span>
</span><span class='line'>    3|Active     |    1|Apache Felix Gogo Runtime <span class="o">(</span>0.12.1<span class="o">)</span>
</span><span class='line'>    4|Active     |    1|Apache Felix Gogo Shell <span class="o">(</span>0.10.0<span class="o">)</span>
</span><span class='line'>    5|Active     |    1|Sample01 <span class="o">(</span>1.0.0.SNAPSHOT<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 安装我们的bundle</span>
</span><span class='line'>g! install file:../osgi-1.0-SNAPSHOT.jar
</span><span class='line'>Bundle ID: 253
</span><span class='line'>
</span><span class='line'><span class="c"># 查看bundle信息</span>
</span><span class='line'>g! lb
</span><span class='line'>START LEVEL 1
</span><span class='line'>   ID|State      |Level|Name
</span><span class='line'>   ...
</span><span class='line'>  253|Installed  |    1|osgi <span class="o">(</span>1.0.0.SNAPSHOT<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 启动我们的bundle</span>
</span><span class='line'>g! start 253
</span><span class='line'>Hello World Bundle start!
</span><span class='line'>g! lb
</span><span class='line'>START LEVEL 1
</span><span class='line'>   ID|State      |Level|Name
</span><span class='line'>    ...
</span><span class='line'>  253|Active     |    1|osgi <span class="o">(</span>1.0.0.SNAPSHOT<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 停掉我们的bundle</span>
</span><span class='line'>g! stop 253
</span><span class='line'>Hello World Bundle stop!
</span><span class='line'>g! lb
</span><span class='line'>START LEVEL 1
</span><span class='line'>   ID|State      |Level|Name
</span><span class='line'>   ...
</span><span class='line'>  253|Resolved   |    1|osgi <span class="o">(</span>1.0.0.SNAPSHOT<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 卸载我们的bundle，可以看到已经没有出现在所有bundle信息中了</span>
</span><span class='line'>g! uninstall 253
</span><span class='line'>g! lb
</span><span class='line'>START LEVEL 1
</span><span class='line'>   ID|State      |Level|Name
</span><span class='line'>    0|Active     |    0|System Bundle <span class="o">(</span>4.6.0<span class="o">)</span>
</span><span class='line'>    1|Active     |    1|Apache Felix Bundle Repository <span class="o">(</span>2.0.2<span class="o">)</span>
</span><span class='line'>    2|Active     |    1|Apache Felix Gogo Command <span class="o">(</span>0.14.0<span class="o">)</span>
</span><span class='line'>    3|Active     |    1|Apache Felix Gogo Runtime <span class="o">(</span>0.12.1<span class="o">)</span>
</span><span class='line'>    4|Active     |    1|Apache Felix Gogo Shell <span class="o">(</span>0.10.0<span class="o">)</span>
</span><span class='line'>    5|Active     |    1|Sample01 <span class="o">(</span>1.0.0.SNAPSHOT<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 最后`ctl+c`退出felix</span>
</span></code></pre></td></tr></table></div></figure>


<h2>在bundle中添加第三方包</h2>

<p>在bundle中使用第三方包比较麻烦，查看了各方资料，只找到了把第三方jar包一起打进bundle的方法，我们以引入<a href="https://code.google.com/p/guava-libraries/"><code>guava</code></a>包为例，下面代码加注释的就是修改的地方。</p>

<figure class='code'><figcaption><span>pom.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>
</span><span class='line'>         <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>         <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>com.zzm<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>osgi<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.0-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;packaging&gt;</span>bundle<span class="nt">&lt;/packaging&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;build&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>org.apache.felix<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>maven-bundle-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;version&gt;</span>2.4.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>                <span class="nt">&lt;extensions&gt;</span>true<span class="nt">&lt;/extensions&gt;</span>
</span><span class='line'>
</span><span class='line'>                <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                <span class="c">&lt;!--修改bundle配置  --&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;instructions&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;Bundle-SymbolicName&gt;</span>${pom.groupId}.${pom.artifactId}<span class="nt">&lt;/Bundle-SymbolicName&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;Bundle-Vendor&gt;</span>Apache Felix<span class="nt">&lt;/Bundle-Vendor&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;Bundle-Activator&gt;</span>com.zzm.osgi.HelloActivator<span class="nt">&lt;/Bundle-Activator&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;Private-Package&gt;</span>com.zzm.osgi<span class="nt">&lt;/Private-Package&gt;</span>
</span><span class='line'>
</span><span class='line'>                        <span class="nt">&lt;Embed-Dependency&gt;</span>
</span><span class='line'>                            *;scope=compile|runtime;inline=false
</span><span class='line'>                        <span class="nt">&lt;/Embed-Dependency&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;_exportcontents&gt;</span>*<span class="nt">&lt;/_exportcontents&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;Bundle-ClassPath&gt;</span>.,{maven-dependencies}<span class="nt">&lt;/Bundle-ClassPath&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;Embed-Transitive&gt;</span>true<span class="nt">&lt;/Embed-Transitive&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;Embed-Directory&gt;</span>jars<span class="nt">&lt;/Embed-Directory&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;Embed-StripGroup&gt;</span>true<span class="nt">&lt;/Embed-StripGroup&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;_failok&gt;</span>true<span class="nt">&lt;/_failok&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;_nouses&gt;</span>true<span class="nt">&lt;/_nouses&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/instructions&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c">&lt;!-- 添加依赖包copy插件 --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>maven-dependency-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;id&gt;</span>copy-dependencies<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;phase&gt;</span>package<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;goal&gt;</span>copy-dependencies<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;outputDirectory&gt;</span>jars<span class="nt">&lt;/outputDirectory&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/build&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.apache.felix<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>org.osgi.core<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>1.4.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!-- 在pom中添加guava依赖 --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>com.google.guava<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>guava<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>18.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在Activator中添加guava的代码</li>
</ul>


<figure class='code'><figcaption><span>HelloActivator.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloActivator</span> <span class="kd">implements</span> <span class="n">BundleActivator</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">BundleContext</span> <span class="n">bundleContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello World Bundle start!&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="s">&quot;I&quot;</span><span class="o">,</span> <span class="s">&quot;use&quot;</span><span class="o">,</span> <span class="s">&quot;guava&quot;</span><span class="o">,</span> <span class="s">&quot;here&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">strings</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>打包运行我们的bundle</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mvn clean install
</span><span class='line'><span class="nv">$ </span>cp osgi-1.0-SNAPSHOT.jar /your/felix/parent/folder
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /your/felix/parent/folder
</span><span class='line'><span class="nv">$ </span>java -jar bin/felix.jar
</span><span class='line'>____________________________
</span><span class='line'>Welcome to Apache Felix Gogo
</span><span class='line'>
</span><span class='line'>g! install file:../osgi-1.0-SNAPSHOT.jar
</span><span class='line'>Bundle ID: 258
</span><span class='line'>g! start 258
</span><span class='line'>Hello World Bundle start!
</span><span class='line'><span class="o">[</span>I, use, guava, here<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>可以解压我们的bundle jar包看一下结构</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mkdir jar_tar
</span><span class='line'><span class="nv">$ </span>cp osgi-1.0-SNAPSHOT.jar jar_tar/
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>jar_tar/
</span><span class='line'><span class="nv">$ </span>tar -xvf osgi-1.0-SNAPSHOT.jar
</span><span class='line'><span class="nv">$ </span>ls -l <span class="c"># 可以看到有个jars的文件夹</span>
</span><span class='line'>drwxr-xr-x  4 zhaozhiming  staff      136 Jan 31 11:56 META-INF
</span><span class='line'>drwxr-xr-x  3 zhaozhiming  staff      102 Jan 31 11:44 com
</span><span class='line'>drwxr-xr-x  3 zhaozhiming  staff      102 Jan 31 11:44 jars
</span><span class='line'>-rw-r--r--  1 zhaozhiming  staff  1998876 Jan 31 11:55 osgi-1.0-SNAPSHOT.jar
</span><span class='line'><span class="nv">$ </span>ls -l jars <span class="c"># jars里面是我们的第三方包</span>
</span><span class='line'>-rwxr-xr-x  1 zhaozhiming  staff  2256213 Jan 30 10:07 guava-18.0.jar
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>再看一下MANIFEST.MF文件，如下所示。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Manifest-Version: 1.0
</span><span class='line'>Bnd-LastModified: 1422675843327
</span><span class='line'>Build-Jdk: 1.8.0_25
</span><span class='line'>Built-By: zhaozhiming
</span><span class='line'>Bundle-Activator: com.zzm.osgi.HelloActivator
</span><span class='line'>Bundle-ClassPath: .,jars/guava-18.0.jar
</span><span class='line'>Bundle-ManifestVersion: 2
</span><span class='line'>Bundle-Name: osgi
</span><span class='line'>Bundle-SymbolicName: com.zzm.osgi
</span><span class='line'>Bundle-Vendor: Apache Felix
</span><span class='line'>Bundle-Version: 1.0.0.SNAPSHOT
</span><span class='line'>Created-By: Apache Maven Bundle Plugin
</span><span class='line'>Embed-Dependency: *;scope<span class="o">=</span>compile|runtime;inline<span class="o">=</span><span class="nb">false</span>
</span><span class='line'>Embed-Directory: jars
</span><span class='line'>Embed-StripGroup: <span class="nb">true</span>
</span><span class='line'>Embed-Transitive: <span class="nb">true</span>
</span><span class='line'>Embedded-Artifacts: jars/guava-18.0.jar;g<span class="o">=</span><span class="s2">&quot;com.google.guava&quot;</span>;<span class="nv">a</span><span class="o">=</span><span class="s2">&quot;guava&quot;</span>;<span class="nv">v</span>
</span><span class='line'> <span class="o">=</span><span class="s2">&quot;18.0&quot;</span>
</span><span class='line'>Export-Package: com.google.common.annotations;version<span class="o">=</span><span class="s2">&quot;18.0.0&quot;</span>,com.googl
</span><span class='line'> e.common.base;version<span class="o">=</span><span class="s2">&quot;18.0.0&quot;</span>,com.google.common.base.internal;version<span class="o">=</span>
</span><span class='line'> <span class="s2">&quot;1.0.0.SNAPSHOT&quot;</span>,com.google.common.cache;version<span class="o">=</span><span class="s2">&quot;18.0.0&quot;</span>,com.google.co
</span><span class='line'> mmon.collect;version<span class="o">=</span><span class="s2">&quot;18.0.0&quot;</span>,com.google.common.escape;version<span class="o">=</span><span class="s2">&quot;18.0.0&quot;</span>
</span><span class='line'> ,com.google.common.eventbus;version<span class="o">=</span><span class="s2">&quot;18.0.0&quot;</span>,com.google.common.hash;ver
</span><span class='line'> <span class="nv">sion</span><span class="o">=</span><span class="s2">&quot;18.0.0&quot;</span>,com.google.common.html;version<span class="o">=</span><span class="s2">&quot;18.0.0&quot;</span>,com.google.common
</span><span class='line'> .io;version<span class="o">=</span><span class="s2">&quot;18.0.0&quot;</span>,com.google.common.math;version<span class="o">=</span><span class="s2">&quot;18.0.0&quot;</span>,com.google
</span><span class='line'> .common.net;version<span class="o">=</span><span class="s2">&quot;18.0.0&quot;</span>,com.google.common.primitives;version<span class="o">=</span><span class="s2">&quot;18.0</span>
</span><span class='line'><span class="s2"> .0&quot;</span>,com.google.common.reflect;version<span class="o">=</span><span class="s2">&quot;18.0.0&quot;</span>,com.google.common.util.c
</span><span class='line'> oncurrent;version<span class="o">=</span><span class="s2">&quot;18.0.0&quot;</span>,com.google.common.xml;version<span class="o">=</span><span class="s2">&quot;18.0.0&quot;</span>,com.g
</span><span class='line'> oogle.thirdparty.publicsuffix;version<span class="o">=</span><span class="s2">&quot;1.0.0.SNAPSHOT&quot;</span>,com.zzm.osgi;ver
</span><span class='line'> <span class="nv">sion</span><span class="o">=</span><span class="s2">&quot;1.0.0.SNAPSHOT&quot;</span>,jars;version<span class="o">=</span><span class="s2">&quot;1.0.0.SNAPSHOT&quot;</span>
</span><span class='line'>Import-Package: javax.annotation,org.osgi.framework;version<span class="o">=</span><span class="s2">&quot;[1.5,2)&quot;</span>,su
</span><span class='line'> n.misc
</span><span class='line'>Tool: Bnd-2.1.0.20130426-122213
</span></code></pre></td></tr></table></div></figure>


<p><code>PS</code>:在Import-Package中有sun.misc的字样，表示bundle引入了jdk的一些包，有时候在运行bundle的时候会看到下面的错误:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>org.osgi.framework.BundleException: Unresolved constraint in bundle <span class="o">[</span>8<span class="o">]</span>: Unable to resolve 8.0: missing requirement <span class="o">[</span>8.0<span class="o">]</span> osgi.wiring.package; <span class="o">(</span>osgi.wiring.package<span class="o">=</span>sun.misc<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>解决办法有2个，执行解决办法意味着你清楚并明确运行bundle时可以缺少这些包:</p>

<p>way1:是在pom文件中的&lt;Import-Package>中加入!sum.misc，这样打出来的MANIFEST.MF的Import-Package就不会有sun.misc字样了。</p>

<figure class='code'><figcaption><span>pom.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;Bundle-SymbolicName&gt;</span>${project.groupId}.${project.artifactId}<span class="nt">&lt;/Bundle-SymbolicName&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Bundle-Vendor&gt;</span>joyotime<span class="nt">&lt;/Bundle-Vendor&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Bundle-Version&gt;</span>${project.version}<span class="nt">&lt;/Bundle-Version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Bundle-Activator&gt;</span>com.morewifi.chinatelecom.MoreWifiActivator<span class="nt">&lt;/Bundle-Activator&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Private-Package&gt;</span>com.morewifi.chinatelecom<span class="nt">&lt;/Private-Package&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>    <span class="nt">&lt;Import-Package&gt;</span>
</span><span class='line'>        !sun.misc,*
</span><span class='line'>    <span class="nt">&lt;/Import-Package&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>way2:在felix解压包下有个conf/config.properties文件，在里面配置缺少的包。</p>

<figure class='code'><figcaption><span>felix/conf/config.properties </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">org.osgi.framework.system.packages.extra</span><span class="o">=</span><span class="s">sun.misc</span>
</span></code></pre></td></tr></table></div></figure>


<h2>在bundle中保存文件</h2>

<p>有时候在bundle中需要写一些数据到文件保存起来，可以使用<code>bundleContext</code>的<code>getDataFile</code>方法来获取文件，下面代码使用了guava的io方法。</p>

<figure class='code'><figcaption><span>HelloActivator.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloActivator</span> <span class="kd">implements</span> <span class="n">BundleActivator</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">BundleContext</span> <span class="n">bundleContext</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello World Bundle start!&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="s">&quot;I&quot;</span><span class="o">,</span> <span class="s">&quot;use&quot;</span><span class="o">,</span> <span class="s">&quot;guava&quot;</span><span class="o">,</span> <span class="s">&quot;here&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">strings</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//保存文件</span>
</span><span class='line'>        <span class="n">File</span> <span class="n">dataFile</span> <span class="o">=</span> <span class="n">bundleContext</span><span class="o">.</span><span class="na">getDataFile</span><span class="o">(</span><span class="s">&quot;save.txt&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Files</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">strings</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">dataFile</span><span class="o">,</span> <span class="n">Charsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 读取文件</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">fileContent</span> <span class="o">=</span> <span class="n">Files</span><span class="o">.</span><span class="na">readFirstLine</span><span class="o">(</span><span class="n">dataFile</span><span class="o">,</span> <span class="n">Charsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fileContent</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>打印结果如下:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>g! start 263
</span><span class='line'>Hello World Bundle start!
</span><span class='line'><span class="o">[</span>I, use, guava, here<span class="o">]</span>
</span><span class='line'><span class="o">[</span>I, use, guava, here<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>在felix的目录下，有个felix-cache目录，下面是各个bundle对应的文件夹，我们的save.txt就存放在bundle的data文件夹里面。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>felix-cache/bundle263/
</span><span class='line'><span class="nv">$ </span>ls -l
</span><span class='line'>-rw-r--r--  1 zhaozhiming  staff   54 Jan 31 13:51 bundle.info
</span><span class='line'>drwxr-xr-x  3 zhaozhiming  staff  102 Jan 31 13:50 data
</span><span class='line'>drwxr-xr-x  5 zhaozhiming  staff  170 Jan 31 13:50 version0.0
</span><span class='line'><span class="nv">$ </span>ls -l data
</span><span class='line'>-rw-r--r--  1 zhaozhiming  staff  21 Jan 31 13:50 save.txt
</span><span class='line'><span class="nv">$ </span>cat data/save.txt
</span><span class='line'><span class="o">[</span>I, use, guava, here<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Thrift的简单代码示例]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/01/25/hello-thrift/"/>
    <updated>2015-01-25T19:07:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/01/25/hello-thrift</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2015-1/thrift.jpeg"></p>

<p><a href="https://thrift.apache.org/">Thrift</a>是Fackbook推出的一个跨语言通讯框架，相比常用的以json为载体的rest http方式来说，性能上更加优越。另外Thrift集成了RPC（Remote Procedure Call Protocol）的实现，比同类型的产品<a href="https://code.google.com/p/protobuf/">Protobuf</a>功能要更全面。</p>

<!--more-->


<p></p>

<h2>安装和镜像源</h2>

<ul>
<li>以Ubuntu14.04为例，首先安装Thrift所需要的软件。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get install libboost-dev libboost-test-dev libboost-program-options-dev libboost-system-dev libboost-filesystem-dev libevent-dev automake libtool flex bison pkg-config g++ libssl-dev
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>接着安装对应语言的编译器，以Java为例，需要安装JDK和Ant，顺便把Maven也装上。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get install openjdk-7-jdk ant maven
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>下载Thrift的包，最新的版本是0.9.2，但不知道什么原因，0.9.2版本安装会有问题，退一个版本就OK了，我们安装0.9.1版本。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>wget http://apache.fayea.com/thrift/0.9.1/thrift-0.9.1.tar.gz
</span><span class='line'>tar -zxvf thrift-0.9.1.tar.gz
</span><span class='line'><span class="nb">cd </span>thrift-0.9.1
</span><span class='line'>sudo ./configure --without-tests
</span><span class='line'>sudo make
</span><span class='line'>sudo make install
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>最后跑一下thrift的命令测试一下是否安装成功</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>thrift --version
</span><span class='line'>Thrift version 0.9.1
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果嫌安装比较麻烦，也可以使用下面Vagrant或者Docker的Thrift镜像。

<ul>
<li><a href="https://registry.hub.docker.com/u/evarga/thrift/">docker镜像</a></li>
<li><a href="https://github.com/apache/thrift/blob/master/contrib/Vagrantfile">vagrant镜像</a></li>
</ul>
</li>
</ul>


<h2>接口定义</h2>

<p>安装完成Thrift之后，我们来编写一个thrift文件，定义服务端的接口。</p>

<figure class='code'><figcaption><span>hello.thrift </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">namespace</span> <span class="n">java</span> <span class="n">service</span><span class="o">.</span><span class="na">demo</span>
</span><span class='line'> <span class="n">service</span> <span class="n">Hello</span><span class="o">{</span>
</span><span class='line'>  <span class="n">string</span> <span class="nf">helloString</span><span class="o">(</span><span class="mi">1</span><span class="o">:</span><span class="n">string</span> <span class="n">para</span><span class="o">)</span>
</span><span class='line'>  <span class="n">i32</span> <span class="nf">helloInt</span><span class="o">(</span><span class="mi">1</span><span class="o">:</span><span class="n">i32</span> <span class="n">para</span><span class="o">)</span>
</span><span class='line'>  <span class="n">bool</span> <span class="nf">helloBoolean</span><span class="o">(</span><span class="mi">1</span><span class="o">:</span><span class="n">bool</span> <span class="n">para</span><span class="o">)</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">helloVoid</span><span class="o">()</span>
</span><span class='line'>  <span class="n">string</span> <span class="nf">helloNull</span><span class="o">()</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到我们定义了5个不同的接口，接着使用Thrift对文件进行编译，产生对应语言的程序文件，下面以Java为例。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>thrift —gen java hello.thrift
</span></code></pre></td></tr></table></div></figure>


<p>命令执行完成后，会生成一个Hello.java的文件。</p>

<h2>接口实现</h2>

<p>前面只是定义了接口的签名，现在我们来对接口进行实现，实现类需要实现Hello.Iface，代码如下:</p>

<figure class='code'><figcaption><span>HelloServiceImpl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">service</span><span class="o">.</span><span class="na">demo</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.thrift.TException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServiceImpl</span> <span class="kd">implements</span> <span class="n">Hello</span><span class="o">.</span><span class="na">Iface</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">helloBoolean</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">para</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">TException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;hello true/false&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">para</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">helloInt</span><span class="o">(</span><span class="kt">int</span> <span class="n">para</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">TException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;hello times: &quot;</span> <span class="o">+</span> <span class="n">para</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">para</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">helloNull</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">TException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;hello null&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">helloString</span><span class="o">(</span><span class="n">String</span> <span class="n">para</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">TException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;hello &quot;</span> <span class="o">+</span> <span class="n">para</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">para</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">helloVoid</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">TException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello World&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>服务端代码的实现</h2>

<p>接着我们来编写我们的服务器代码:</p>

<figure class='code'><figcaption><span>HelloServiceImpl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">service</span><span class="o">.</span><span class="na">server</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.thrift.TProcessor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.thrift.server.TServer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.thrift.server.TThreadPoolServer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.thrift.transport.TServerSocket</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.thrift.transport.TTransportException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">service.demo.Hello</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">service.demo.HelloServiceImpl</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServiceServer</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// 设置服务端口为 9527 </span>
</span><span class='line'>            <span class="n">TServerSocket</span> <span class="n">serverTransport</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TServerSocket</span><span class="o">(</span><span class="mi">9527</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">// 关联处理器与 Hello 服务的实现</span>
</span><span class='line'>            <span class="n">TProcessor</span> <span class="n">processor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Hello</span><span class="o">.</span><span class="na">Processor</span><span class="o">(</span><span class="k">new</span> <span class="n">HelloServiceImpl</span><span class="o">());</span>
</span><span class='line'>            <span class="n">TServer</span> <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TThreadPoolServer</span><span class="o">(</span><span class="k">new</span> <span class="n">TThreadPoolServer</span><span class="o">.</span><span class="na">Args</span><span class="o">(</span><span class="n">serverTransport</span><span class="o">).</span><span class="na">processor</span><span class="o">(</span><span class="n">processor</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Start server on port 9527...&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">server</span><span class="o">.</span><span class="na">serve</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">TTransportException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>客户端代码的实现</h2>

<p>最后来完成我们的客户端代码，客户端我们也是用Java来实现。</p>

<figure class='code'><figcaption><span>HelloServiceImpl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">service</span><span class="o">.</span><span class="na">client</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.thrift.TException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.thrift.protocol.TBinaryProtocol</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.thrift.protocol.TProtocol</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.thrift.transport.TSocket</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.thrift.transport.TTransport</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.thrift.transport.TTransportException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">service.demo.Hello</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServiceClient</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// 设置调用的服务地址为本地，端口为 9527</span>
</span><span class='line'>            <span class="n">TTransport</span> <span class="n">transport</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TSocket</span><span class="o">(</span><span class="s">&quot;localhost&quot;</span><span class="o">,</span> <span class="mi">9527</span><span class="o">);</span>
</span><span class='line'>            <span class="n">transport</span><span class="o">.</span><span class="na">open</span><span class="o">();</span>
</span><span class='line'>            <span class="c1">// 设置传输协议为 TBinaryProtocol</span>
</span><span class='line'>            <span class="n">TProtocol</span> <span class="n">protocol</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TBinaryProtocol</span><span class="o">(</span><span class="n">transport</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Hello</span><span class="o">.</span><span class="na">Client</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Hello</span><span class="o">.</span><span class="na">Client</span><span class="o">(</span><span class="n">protocol</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">// 调用服务的 helloVoid 方法</span>
</span><span class='line'>            <span class="n">client</span><span class="o">.</span><span class="na">helloVoid</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">transport</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">TTransportException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">TException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码完成后，可以先运行HelloServiceServer的main方式，然后再运行HelloServiceClient的main方法，可以在HelloServiceServer的输出结果中看到客户端打印的<code>Hello World</code>字样。</p>

<h2>部署</h2>

<p>参考了一些资料后，决定使用Jar包来启动thrift服务，并使用<a href="http://supervisord.org/">Supervisor</a>来进行进程的监控和自动重启，下面是supervisor的配置文件，里面配置了我们的thrift程序。</p>

<figure class='code'><figcaption><span>/etc/supervisord.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>program:thrift<span class="o">]</span>
</span><span class='line'><span class="nb">command</span><span class="o">=</span>/usr/bin/java -jar /home/vagrant/thrift-hello/demo.jar
</span><span class='line'><span class="nv">stderr_logfile</span><span class="o">=</span>/home/vagrant/logs/err.log
</span><span class='line'><span class="nv">stdout_logfile</span><span class="o">=</span>/home/vagrant/logs/out.log
</span><span class='line'><span class="nv">autostart</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>unix_http_server<span class="o">]</span>
</span><span class='line'><span class="nv">file</span> <span class="o">=</span> /tmp/supervisor.sock
</span><span class='line'><span class="nv">chmod</span> <span class="o">=</span> 0777
</span><span class='line'><span class="nv">chown</span><span class="o">=</span> nobody:nogroup
</span><span class='line'>
</span><span class='line'><span class="o">[</span>inet_http_server<span class="o">]</span>
</span><span class='line'><span class="nv">port</span> <span class="o">=</span> 127.0.0.1:9001
</span><span class='line'>
</span><span class='line'><span class="o">[</span>supervisord<span class="o">]</span>
</span><span class='line'><span class="nv">logfile</span> <span class="o">=</span> /tmp/supervisord.log
</span><span class='line'><span class="nv">logfile_maxbytes</span> <span class="o">=</span> 50MB
</span><span class='line'><span class="nv">logfile_backups</span><span class="o">=</span>10
</span><span class='line'><span class="nv">loglevel</span> <span class="o">=</span> info
</span><span class='line'><span class="nv">pidfile</span> <span class="o">=</span> /tmp/supervisord.pid
</span><span class='line'><span class="nv">nodaemon</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>supervisorctl<span class="o">]</span>
</span><span class='line'><span class="nv">serverurl</span> <span class="o">=</span> unix:///tmp/supervisor.sock
</span><span class='line'>
</span><span class='line'><span class="o">[</span>rpcinterface:supervisor<span class="o">]</span>
</span><span class='line'>supervisor.rpcinterface_factory <span class="o">=</span> supervisor.rpcinterface:make_main_rpcinterface
</span></code></pre></td></tr></table></div></figure>


<p>参考资料: <a href="http://stackoverflow.com/questions/17639442/deploy-and-serve-a-thrift-server">http://stackoverflow.com/questions/17639442/deploy-and-serve-a-thrift-server</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RequireJS的简单使用]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/12/19/requirejs-simple-use/"/>
    <updated>2014-12-19T11:05:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/12/19/requirejs-simple-use</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-12/requirejs.png"></p>

<p>在没有<a href="http://requirejs.org/">RequireJS</a>以前，我们的html页面都需要配置很多js文件，有了RequireJS以后，我们只需要简单的一个RequireJS的文件就可以了。</p>

<!--more-->


<h2>工程目录</h2>

<p>先看下我们的工程目录，主要引入了Jqury、AngularJS和RequireJS这几个js文件，login.html、main.js和login.js是我们自己的文件。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>--webapp
</span><span class='line'>  |--resources
</span><span class='line'>    |--scripts
</span><span class='line'>      |--vendor
</span><span class='line'>        |--jquery.js
</span><span class='line'>        |--angularjs.js
</span><span class='line'>        |--requirejs.js
</span><span class='line'>      |--login.js
</span><span class='line'>      |--main.js
</span><span class='line'>  |--WEB-INF
</span><span class='line'>  |--login.html   
</span></code></pre></td></tr></table></div></figure>


<h2>在html页面中加入RequireJS</h2>

<p>首先在html页面我们先引入requirejs，可以看到script标签中有个data-main属性，这个是RequireJS的属性标签，指向我们工程里面的main.js文件，注意这里不需要写<code>.js</code>后缀。</p>

<figure class='code'><figcaption><span>index.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span> <span class="na">ng-app=</span><span class="s">&quot;app&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>My App<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;resources/scripts/vendor/require.js&quot;</span> <span class="na">data-main=</span><span class="s">&quot;resources/srcipts/main&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">&quot;LoginForm&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span> <span class="na">action=</span><span class="s">&quot;j_spring_security_check&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;display: block;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;div&gt;</span>
</span><span class='line'>              <span class="nt">&lt;h1&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;ui-icon add&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>用户登录
</span><span class='line'>              <span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>          <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;error&quot;</span> <span class="na">style=</span><span class="s">&quot;display: none; color: #c9302c&quot;</span> <span class="na">align=</span><span class="s">&quot;center&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;h3&gt;</span>认证失败，请重新登录<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>              <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;logout&quot;</span> <span class="na">style=</span><span class="s">&quot;display: none; color: #02547f&quot;</span> <span class="na">align=</span><span class="s">&quot;center&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;h3&gt;</span>已成功登出<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>              <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;li&gt;&lt;label&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;span&gt;</span>用户名<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;j_username&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/label&gt;&lt;/li&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;li&gt;&lt;label&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;span&gt;</span>密码<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">name=</span><span class="s">&quot;j_password&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/label&gt;&lt;/li&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>          <span class="nt">&lt;div&gt;</span>
</span><span class='line'>              <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">name=</span><span class="s">&quot;logon&quot;</span> <span class="na">value=</span><span class="s">&quot;Logon&quot;</span><span class="nt">&gt;</span>登录<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/form&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>main.js</h2>

<p>下面是我们的main.js。</p>

<figure class='code'><figcaption><span>main.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
</span><span class='line'>   <span class="nx">paths</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">angular</span><span class="o">:</span> <span class="s1">&#39;vendor/angular&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">jquery</span><span class="o">:</span> <span class="s1">&#39;vendor/jquery&#39;</span>
</span><span class='line'>   <span class="p">},</span>
</span><span class='line'>   <span class="nx">shim</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">angular</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>         <span class="nx">deps</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;jquery&#39;</span><span class="p">],</span>
</span><span class='line'>         <span class="nx">exports</span><span class="o">:</span> <span class="s1">&#39;angular&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span><span class="p">([</span><span class="s1">&#39;angular&#39;</span><span class="p">,</span> <span class="s1">&#39;login&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>paths</code>里面指定了jqury和angularjs对应的js文件路径，同样不需要写js后缀，并给他们起了对应的别名。</li>
<li><code>shim</code>属性里面配置了deps数组，表明angular依赖jqury，还有exports值，表明这个模块外部调用时的名称。</li>
<li>最后一部分代码表示我们的html页面需要使用哪些js文件，比如我们使用了angular和login这2个js文件的功能，同时angular依赖了jqurey，所以html页面加载的时候就会同时将jquery.js、angularjs.js和login.js这几个js文件加载进来。</li>
</ul>


<h2>login.js</h2>

<p>最后看一下我们的login.js，通过之前的main.js我们已经加载好了Jquery和AngularJS这些第三方JS库，要使用它们的话需要通过<code>define</code>的方式来引用。</p>

<p>比如下面的js文件使用了jquery的功能，我们可以在<code>define</code>后面添加<code>angular</code>这个名称，因为前面在<code>shim</code>属性里面已经定义了<code>angular</code>依赖<code>jquery</code>，所以使用<code>angular</code>也可以用到<code>jquery</code>的功能。(当然我们也可以单独添加<code>jquery</code>，但这样就使用不到<code>angular</code>的功能了)</p>

<figure class='code'><figcaption><span>login.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;angular&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">getParameterByName</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[\[]/</span><span class="p">,</span> <span class="s2">&quot;\\[&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[\]]/</span><span class="p">,</span> <span class="s2">&quot;\\]&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">regex</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;[\\?&amp;]&quot;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;=([^&amp;#]*)&quot;</span><span class="p">),</span>
</span><span class='line'>          <span class="nx">results</span> <span class="o">=</span> <span class="nx">regex</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">results</span> <span class="o">===</span> <span class="kc">null</span> <span class="o">?</span> <span class="s2">&quot;&quot;</span> <span class="o">:</span> <span class="nb">decodeURIComponent</span><span class="p">(</span><span class="nx">results</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\+/g</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">getParameterByName</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#error&quot;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">getParameterByName</span><span class="p">(</span><span class="s2">&quot;logout&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#logout&quot;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>    
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Spring Security进行LDAP认证]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/12/18/use-spring-security-to-ldap-authentication/"/>
    <updated>2014-12-18T08:56:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/12/18/use-spring-security-to-ldap-authentication</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-12/spring-security.jpeg"></p>

<p>这里介绍一下如何是用Spring Security来做LDAP的认证，LDAP服务器只存放了用户的用户名和密码，没有角色等其他权限，所以这里介绍的是最简单的用户名密码认证。</p>

<!--more-->


<h2>下载spring-security相关JAR包</h2>

<p>下面是gradle的脚本配置，需要下载spring-security和ldap相关的JAR包。</p>

<figure class='code'><figcaption><span>build.gradle </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">String</span> <span class="n">springSecurityVersion</span> <span class="o">=</span> <span class="s2">&quot;3.2.5.RELEASE&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span><span class="c1">//other spring jars</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//security</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s2">&quot;org.springframework.security:spring-security-core:&quot;</span> <span class="o">+</span> <span class="n">springSecurityVersion</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s2">&quot;org.springframework.security:spring-security-web:&quot;</span> <span class="o">+</span> <span class="n">springSecurityVersion</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s2">&quot;org.springframework.security:spring-security-config:&quot;</span> <span class="o">+</span> <span class="n">springSecurityVersion</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s2">&quot;org.springframework.security:spring-security-ldap:&quot;</span> <span class="o">+</span> <span class="n">springSecurityVersion</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s2">&quot;org.springframework.ldap:spring-ldap-core:2.0.2.RELEASE&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>配置web.xml</h2>

<p>在web.xml配置<code>filter</code>，修改内容如下。</p>

<figure class='code'><figcaption><span>web.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;filter&gt;</span>
</span><span class='line'>   <span class="nt">&lt;filter-name&gt;</span>springSecurityFilterChain<span class="nt">&lt;/filter-name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="nt">&lt;/filter-class&gt;</span>
</span><span class='line'><span class="nt">&lt;/filter&gt;</span>
</span><span class='line'><span class="nt">&lt;filter-mapping&gt;</span>
</span><span class='line'>   <span class="nt">&lt;filter-name&gt;</span>springSecurityFilterChain<span class="nt">&lt;/filter-name&gt;</span>
</span><span class='line'>   <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'><span class="nt">&lt;/filter-mapping&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;listener&gt;</span>
</span><span class='line'>   <span class="nt">&lt;listener-class&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="nt">&lt;/listener-class&gt;</span>
</span><span class='line'><span class="nt">&lt;/listener&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;context-param&gt;</span>
</span><span class='line'>   <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>   <span class="nt">&lt;param-value&gt;</span>classpath:spring-security.xml<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'><span class="nt">&lt;/context-param&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>创建spring-security.xml</h2>

<p>在web.xml里面指定了Application启动时需要加载spring-security.xml文件，我们的LDAP认证主要就配置在这个文件里面。</p>

<figure class='code'><figcaption><span>spring-security.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>   <span class="na">xmlns:s=</span><span class="s">&quot;http://www.springframework.org/schema/security&quot;</span> <span class="na">xmlns:context=</span><span class="s">&quot;http://www.springframework.org/schema/context&quot;</span>
</span><span class='line'>   <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>   <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span>
</span><span class='line'><span class="s">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span>
</span><span class='line'><span class="s">    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="nt">&lt;context:property-placeholder</span> <span class="na">location=</span><span class="s">&quot;classpath:app.properties&quot;</span> <span class="nt">/&gt;</span>  //1
</span><span class='line'>
</span><span class='line'>   <span class="nt">&lt;s:http</span> <span class="na">pattern=</span><span class="s">&quot;/resources/**&quot;</span> <span class="na">security=</span><span class="s">&quot;none&quot;</span> <span class="nt">/&gt;</span>  //2
</span><span class='line'>   <span class="nt">&lt;s:http</span> <span class="na">pattern=</span><span class="s">&quot;/login.html&quot;</span> <span class="na">security=</span><span class="s">&quot;none&quot;</span> <span class="nt">/&gt;</span>    //2
</span><span class='line'>
</span><span class='line'>   <span class="nt">&lt;s:http</span> <span class="na">use-expressions=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;s:intercept-url</span> <span class="na">pattern=</span><span class="s">&quot;/**&quot;</span> <span class="na">access=</span><span class="s">&quot;isAuthenticated()&quot;</span> <span class="nt">/&gt;</span>  //3
</span><span class='line'>      <span class="nt">&lt;s:form-login</span> <span class="na">login-page=</span><span class="s">&quot;/login.html&quot;</span>                        <span class="err">//4</span>
</span><span class='line'>         <span class="na">authentication-failure-url=</span><span class="s">&quot;/login.html?error=true&quot;</span>        <span class="err">//5</span>
</span><span class='line'>         <span class="na">username-parameter=</span><span class="s">&quot;j_username&quot;</span> <span class="na">password-parameter=</span><span class="s">&quot;j_password&quot;</span><span class="nt">/&gt;</span> //6
</span><span class='line'>      <span class="nt">&lt;s:anonymous</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;s:logout</span> <span class="na">logout-success-url=</span><span class="s">&quot;/login.html?logout=true&quot;</span> <span class="nt">/&gt;</span>  //7
</span><span class='line'>   <span class="nt">&lt;/s:http&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="nt">&lt;s:ldap-server</span> <span class="na">url=</span><span class="s">&quot;${ldap_server}&quot;</span> <span class="na">manager-dn=</span><span class="s">&quot;${ldap_user}&quot;</span><span class="err">//8</span>
</span><span class='line'>      <span class="na">manager-password=</span><span class="s">&quot;${ldap_password}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>   <span class="nt">&lt;s:authentication-manager&gt;</span>
</span><span class='line'>      <span class="nt">&lt;s:ldap-authentication-provider</span>
</span><span class='line'>         <span class="na">user-dn-pattern=</span><span class="s">&quot;${ldap_user_dn_pattern}&quot;</span> <span class="nt">/&gt;</span>  //9
</span><span class='line'>   <span class="nt">&lt;/s:authentication-manager&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>指定properties文件，下面的ldap信息都是从properties文件里面取得。</li>
<li>配置哪些资源和url不需要做认证，比如一些图片，js和css文件等，还有我们的login页面，如果把login页面也拦截的话，就做不了认证了。</li>
<li>指定其他url(<code>/**</code>)都需要做认证，isAuthenticated方法表示认证通过了才能访问该url。</li>
<li>指定登陆页面的地址，这里是相对路径，如果不指定login-page，认证时会自动调用spring-security的一个默认登陆页面。</li>
<li>指定认证失败后的url，这里我们使用同一个login页面，只是在url后面加上查询参数作为认证失败的标示。</li>
<li>指定login页面2个作用域，用户名和密码，需要和页面录入框的name相同。</li>
<li>指定登出/注销成功后的页面，这里我们还是使用login页面，在url后面加上logout参数作为标示。</li>
<li>ldap服务器的配置信息，包括url, manager-dn和manager-password。</li>
<li>配置ldap的user-dn-pattern。</li>
</ol>


<p>下面是app.properties的内容。</p>

<figure class='code'><figcaption><span>app.properties </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="c"># Ldap</span>
</span><span class='line'><span class="na">ldap_server</span><span class="o">=</span><span class="s">ldap://your.ldap.server.com.:12356</span>
</span><span class='line'><span class="na">ldap_user</span><span class="o">=</span><span class="s">cn=yourname,cn=Users,dc=ldap,dc=server,dc=com</span>
</span><span class='line'><span class="na">ldap_password</span><span class="o">=</span><span class="s">123456</span>
</span><span class='line'><span class="na">ldap_user_dn_pattern</span><span class="o">=</span><span class="s">uid={0},ou=staff,ou=people,o=ldap.server.com</span>
</span></code></pre></td></tr></table></div></figure>


<h2>创建登陆页面</h2>

<p>创建用户登陆的Form，method为<code>post</code>，action为<code>j_spring_security_check</code>，用户录入框的name为<code>j_username</code>，密码录入框的name为<code>j_password</code>，这2个值与之前spring-security.xml里面配置的要保持一致。</p>

<figure class='code'><figcaption><span>login.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">&quot;LoginForm&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span> <span class="na">action=</span><span class="s">&quot;j_spring_security_check&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;display: block;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h1&gt;</span>
</span><span class='line'>                <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;ui-icon add&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>用户登录
</span><span class='line'>            <span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;error&quot;</span> <span class="na">style=</span><span class="s">&quot;display: none; color: #c9302c&quot;</span> <span class="na">align=</span><span class="s">&quot;center&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;h3&gt;</span>认证失败，请重新登录<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;logout&quot;</span> <span class="na">style=</span><span class="s">&quot;display: none; color: #02547f&quot;</span> <span class="na">align=</span><span class="s">&quot;center&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;h3&gt;</span>已成功登出<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li&gt;&lt;label&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;span&gt;</span>用户名<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;j_username&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/label&gt;&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li&gt;&lt;label&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;span&gt;</span>密码<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">name=</span><span class="s">&quot;j_password&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/label&gt;&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">name=</span><span class="s">&quot;logon&quot;</span> <span class="na">value=</span><span class="s">&quot;Logon&quot;</span><span class="nt">&gt;</span>登录<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>相关的js代码如下:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">getParameterByName</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[\[]/</span><span class="p">,</span> <span class="s2">&quot;\\[&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[\]]/</span><span class="p">,</span> <span class="s2">&quot;\\]&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">regex</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;[\\?&amp;]&quot;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;=([^&amp;#]*)&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">results</span> <span class="o">=</span> <span class="nx">regex</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">results</span> <span class="o">===</span> <span class="kc">null</span> <span class="o">?</span> <span class="s2">&quot;&quot;</span> <span class="o">:</span> <span class="nb">decodeURIComponent</span><span class="p">(</span><span class="nx">results</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\+/g</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">getParameterByName</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#error&quot;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">getParameterByName</span><span class="p">(</span><span class="s2">&quot;logout&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#logout&quot;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果需要的话，可以配置自己的logout页面，只需要一个Form就可以了，方法为<code>post</code>，action为<code>j_spring_security_logout</code>，只要提交了这个Form就可以成功登出了。</p>

<figure class='code'><figcaption><span>logout.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;j_spring_security_logout&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span> <span class="na">id=</span><span class="s">&quot;logoutForm&quot;</span><span class="nt">&gt;&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>更多Spring Security的信息请查阅: <a href="http://docs.spring.io/spring-security/site/docs/3.2.x/reference/htmlsingle/">Spring Security Reference</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用TPP来控制TDD的节奏做好单元测试]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/12/14/use-tpp-to-do-tdd/"/>
    <updated>2014-12-14T06:58:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/12/14/use-tpp-to-do-tdd</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-12/tpp.jpeg"></p>

<p>最近参加了一次编程活动，大家在一起讨论单元测试和TDD(测试驱动开发)，有人提到了<a href="http://en.wikipedia.org/wiki/Robert_Cecil_Martin">Uncle Bob</a>的TPP(Transformation Priority Premise)——变形动作的优先顺序，可以帮助我们控制好TDD的节奏。</p>

<!--more-->


<p>关于TPP的详细信息可以查看Uncle Bob的<a href="http://blog.8thlight.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html">这篇博文</a>，核心的思想如下:</p>

<ul>
<li>({}–>nil) no code at all->code that employs nil</li>
<li>(nil->constant)</li>
<li>(constant->constant+) a simple constant to a more complex constant</li>
<li>(constant->scalar) replacing a constant with a variable or an argument</li>
<li>(statement->statements) adding more unconditional statements.</li>
<li>(unconditional->if) splitting the execution path</li>
<li>(scalar->array)</li>
<li>(array->container)</li>
<li>(statement->recursion)</li>
<li>(if->while)</li>
<li>(expression->function) replacing an expression with a function or algorithm</li>
<li>(variable->assignment) replacing the value of a variable.</li>
</ul>


<p>为了验证一下TPP是否有效，我用<a href="http://butunclebob.com/ArticleS.UncleBob.ThePrimeFactorsKata">PrimeFactorsKata</a>来做练习，然后使用go语言来写，这样可以顺便练练go的语法。</p>

<h2>({}–>nil) no code at all->code that employs nil</h2>

<p>首先我们写第一个测试，当传入<code>1</code>时返回一个空的集合，用最简单的代码实现功能，直接返回<code>nil</code>，这样就完成了从没有代码到<code>nil</code>的过程。<br/>
PS: 这里我使用了<a href="https://github.com/stretchr/testify"><code>stretchr/testify</code></a>这个单元测试第三方包，它的使用方法就跟Java的Junit一样简单。</p>

<figure class='code'><figcaption><span>prime_test.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">prime</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;github.com/stretchr/testify/assert&quot;</span>
</span><span class='line'>  <span class="s">&quot;testing&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Test_given_1_then_return_empty_list</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">Equal</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{},</span> <span class="nx">Prime</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>prime.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">prime</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Prime</span><span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>(nil->constant)</h2>

<p>执行测试我们发现测试案例是不通过的，所以我们需要让测试变绿，让方法返回一个空的集合。</p>

<figure class='code'><figcaption><span>prime.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Prime</span><span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>(constant->constant+) a simple constant to a more complex constant</h2>

<h2>(unconditional->if) splitting the execution path</h2>

<p>接着我们写第二个测试，当传入<code>2</code>时返回只有<code>2</code>的集合，同时修改实现代码，让原来返回的空集合变成包含<code>2</code>的一个集合，同时加上判断，如果<code>num</code>小于2时还是返回空集合。</p>

<figure class='code'><figcaption><span>prime_test.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Test_given_2_then_return_2</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">Equal</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">},</span> <span class="nx">Prime</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>prime.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Prime</span><span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">num</span> <span class="p">&lt;</span> <span class="mi">2</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>constant->scalar replacing a constant with a variable or an argument</h2>

<p>通过了前面2个测试之后，我们接着写第三个测试，要返回一个包含<code>3</code>的集合，需要将原来写死的常量<code>2</code>变成<code>num</code>。</p>

<figure class='code'><figcaption><span>prime_test.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Test_given_3_then_return_3</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">Equal</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">3</span><span class="p">},</span> <span class="nx">Prime</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>prime.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Prime</span><span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">num</span> <span class="p">&lt;</span> <span class="mi">2</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="nx">num</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>(statement->statements) adding more unconditional statements</h2>

<p>继续增加测试，传入<code>4</code>返回包含<code>2</code>和<code>2</code>的集合，这次实现代码的改动比较大，基本算法已经出来了，使用<code>num</code>来对<code>2</code>求余数，然后同时添加除数和被除数，这个时候单元测试的效果就出来了，如果实现代码没有写对，以前的测试会失败，需要你不断修改，保证通过所有测试。</p>

<figure class='code'><figcaption><span>prime_test.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Test_given_4_then_return_2_2</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">Equal</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span> <span class="nx">Prime</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>prime.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Prime</span><span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">num</span> <span class="p">&lt;</span> <span class="mi">2</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">result</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">mod</span> <span class="o">:=</span> <span class="nx">num</span> <span class="o">%</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">mod</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">num</span> <span class="p">&gt;</span> <span class="mi">2</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">result</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">result</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">num</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">result</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">result</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>添加测试</h2>

<p>增加测试，传入<code>6</code>得到<code>2</code>和<code>3</code>的集合，实现代码没有改动。</p>

<figure class='code'><figcaption><span>prime_test.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Test_given_6_then_return_2_3</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">Equal</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span> <span class="nx">Prime</span><span class="p">(</span><span class="mi">6</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>(if->while)</h2>

<p>再增加一个参数<code>8</code>，返回<code>2-2-2</code>集合的测试，这个测试迫使我们的实现代码做循环，所以这是一个if到while的过程。</p>

<figure class='code'><figcaption><span>prime_test.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Test_given_8_then_return_2_2_2</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">Equal</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span> <span class="nx">Prime</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>prime.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Prime</span><span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">num</span> <span class="p">&lt;</span> <span class="mi">2</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">result</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{}</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">div</span> <span class="o">:=</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">div</span> <span class="o">&lt;=</span> <span class="nx">num</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">num</span><span class="o">%</span><span class="nx">div</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">result</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">div</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">num</span> <span class="o">/=</span> <span class="nx">div</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">div</span><span class="o">++</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">result</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>代码写完了吗？</h2>

<p>这个时候实际上我们的功能已经实现了，如果不放心我们就继续增加几个测试案例，结果验证都是通过的。</p>

<figure class='code'><figcaption><span>prime_test.go </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Test_given_9_then_return_3_3</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">Equal</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span> <span class="nx">Prime</span><span class="p">(</span><span class="mi">9</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Test_given_20_then_return_2_2_5</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">Equal</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">},</span> <span class="nx">Prime</span><span class="p">(</span><span class="mi">20</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Test_given_30_then_return_2_3_5</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">Equal</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">},</span> <span class="nx">Prime</span><span class="p">(</span><span class="mi">30</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Test_given_64_then_return_2_2_2_2_2_2</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">Equal</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span> <span class="nx">Prime</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Test_given_10984_then_return_2_2_2_1373</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">Equal</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1373</span><span class="p">},</span> <span class="nx">Prime</span><span class="p">(</span><span class="mi">10984</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>虽然看了Uncle Bob的TPP，但是觉得根据他的核心思想还是不容易控制TDD的节奏，实际上在做4-2-2的测试的时候我自己就想好了算法，如果没有想好算法要驱动出实际代码来比较难，可能还需要更多的练习才能达到TPP的效果吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何用iso文件创建Vagrant的Box]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/11/29/use-veewee-to-create-vagrant-box/"/>
    <updated>2014-11-29T08:06:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/11/29/use-veewee-to-create-vagrant-box</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-11/iso_to_box.jpg"></p>

<p>虽然<a href="https://www.vagrantup.com/">Vagrant</a>官网上已经有了很多OS的box，比如Ubuntu，CentOS，Debian等，但像RHEL这种不免费的OS，Vagrant上面就没有它的box，如果需要用到RHEL的box，我们就需要自己来制作。下面讲下从iso文件到box文件的一个制作过程。</p>

<!--more-->


<h2>准备</h2>

<p>在制作box文件之前，我们需要安装下面的软件:</p>

<ul>
<li><a href="https://www.vagrantup.com/">Vagrant</a>: 这个没必要说了，我们就是要制作它的box文件。</li>
<li><a href="https://www.virtualbox.org/">VirtualBox</a>: 跟VMWare一样的虚拟机软件，不过它是免费的。</li>
<li><a href="https://github.com/jedi4ever/veewee">Veewee</a>: 这是一款可以轻松创建Vagrant的box文件的工具，它还可以创建KVM和其他虚拟机镜像。</li>
</ul>


<p>这些软件的安装我就不介绍了，请到软件网站自行了解。</p>

<h2>使用Veewee创建Box</h2>

<ul>
<li>首先查找Veewee下面有哪些VirtualBox的模板，下面的vbox表示VirtualBox，当然你也可以换成其他的虚拟机工具。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>veewee vbox templates
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>命令会列出veewee可以用的模板，如果我们要制作RHEL6.5的Box，可以找CentOS6.5的模板来制作。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>veewee vbox define rhel65-64bit <span class="s1">&#39;CentOS-6.5-x86_64-netboot&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>命令执行完后，会在当前目录下产生一个<code>definitions</code>的文件夹，这时我们需要修改下面的一些文件。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>vi definitions/rhel65-64bit/definition.rb
</span></code></pre></td></tr></table></div></figure>


<p><code>definition.rb</code>是Veewee的创建脚本，我们将其中的<code>iso-file</code>的值修改为iso的文件名，比如<code>rhel-server-6.5-x86_64-dvd.iso</code>，其他iso开头的选项可以不修改或删除。</p>

<figure class='code'><figcaption><span>definition.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Veewee</span><span class="p">:</span><span class="ss">:Session</span><span class="o">.</span><span class="n">declare</span><span class="p">({</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="ss">:iso_file</span> <span class="o">=&gt;</span> <span class="s2">&quot;rhel-server-6.5-x86_64-dvd.iso&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>然后下载rhel6.5的iso文件，上网查一下资源还是比较多的，这里就不贴iso文件的链接了，怕链接以后会失效，请自行搜索。</li>
<li>在当前目录下创建iso的子文件夹，将下载的iso文件放到这个文件夹中。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mkdir iso
</span><span class='line'><span class="nv">$ </span>mv /your/iso/path/rhel-server-6.5-x86_64-dvd.iso iso
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>执行命令创建Box，然后去喝杯咖啡，等一会儿回来看看RHEL6.5的VM应该就创建好了。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>veewee vbox build <span class="s1">&#39;rhel65-64bit&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>进到VirtualBox的虚拟机目录(比如在OSX下是<code>~/VirtualBox VMs</code>)，进行vagrant创建box文件操作。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/VirtualBox<span class="se">\ </span>VMs/rhel65-64bit/
</span><span class='line'><span class="nv">$ </span>vagrant package --base rhel65-64bit --output rhel65-64bit.box
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>最后使用vagrant启动vm，正常启动证明我们的box已经正确创建了。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>vagrant box add --name rhel65-64bit rhel65-64bit.box
</span><span class='line'><span class="nv">$ </span>vagrant init rhel65-64bit
</span><span class='line'><span class="nv">$ </span>vagrant up
</span></code></pre></td></tr></table></div></figure>


<h2>手动创建Box</h2>

<p>如果想手动创建Box也是可以的，不过比较麻烦，下面是手动创建Box的一些注意事项，注意以下命令都是在你的VM进行操作，所以首先要能ssh到VM，没有ssh的话需要先安装ssh。</p>

<ul>
<li>安装一些基本的软件，比如ssh, wget, curl等。</li>
<li>设置root用户密码为<code>vagrant</code>。</li>
<li>新增用户<code>vagrant</code>，密码也是设置为<code>vagrant</code>。</li>
<li>修改visudo的配置，让vagrant用户使用sudo时不需要输入密码。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>visudo
</span></code></pre></td></tr></table></div></figure>


<p>在最后一行增加以下内容:</p>

<figure class='code'><figcaption><span>visudo </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>vagrant <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span> NOPASSWD:ALL
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装Guset Additions，这个是为了可以使用vagrant来创建共享文件夹。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wget http://download.virtualbox.org/virtualbox/4.3.18/VBoxGuestAdditions_4.3.18.iso
</span><span class='line'><span class="nv">$ </span>sudo mkdir -p /media/VBoxGuestAdditions
</span><span class='line'><span class="nv">$ </span>sudo mount -o loop,ro VBoxGuestAdditions_4.3.8.iso /media/VBoxGuestAdditions
</span><span class='line'><span class="nv">$ </span>sudo /media/VBoxGuestAdditions/VBoxLinuxAdditions.run
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>修改ssh配置，让vagrant可以无密码ssh登陆VM。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /home/vagrant
</span><span class='line'><span class="nv">$ </span>mkdir .ssh
</span><span class='line'><span class="nv">$ </span>wget https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant.pub -O .ssh/authorized_keys
</span><span class='line'><span class="nv">$ </span>chmod 700 .ssh
</span><span class='line'><span class="nv">$ </span>chmod 600 .ssh/authorized_keys
</span><span class='line'><span class="nv">$ </span>chown -R vagrant:vagrant .ssh
</span></code></pre></td></tr></table></div></figure>


<p>上面这些做好以后，就可以退出VM，后面的步骤就跟Veewee创建Box一样了，就是使用vagrant来生成box文件，添加box，启动VM。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Docker打造自己的开发环境]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/11/18/hello-docker/"/>
    <updated>2014-11-18T21:45:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/11/18/hello-docker</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-11/docker.png"></p>

<p>作为这个时代的程序员真的很幸福，每天不但有一些改变世界的产品出现，而且提高程序员开发效率的工具也是层出不穷。之前介绍过如何使用<a href="http://zhaozhiming.github.io/blog/2014/10/02/ceph-install-with-vagrant-and-ansible/">Vagrant来创建Ceph环境</a>，使用Vagrant可以很方便的管理我们的虚拟机，同时来定制开发团队的开发环境，现在又出现了Docker，让我们有了一个更好的选择。</p>

<!--more-->


<h2><a href="https://www.docker.com/">Docker</a>介绍</h2>

<p>之前有幸参加了OSChina在成都举办的源创会，听到了Docker中国社区创始人马全一老师介绍Docker，他们团队在去年就开始研究Docker，但不知道为什么Docker今年开始火了起来，原因可能是Docker今年搞了一次宣传会，IT界各种大佬公司都去捧场了，有Google，RedHat等，然后媒体争相报道，于是Docker就火了。</p>

<p>Docker的介绍也是不断在变，以前官方的Docker的概括是这样的:</p>

<blockquote><p>An open source project to pack, ship and run any application as a lightweight container.</p></blockquote>


<p>现在是这样的:</p>

<blockquote><p>An open platform for distributed applications for developers and sysadmins.</p></blockquote>


<p>但不管怎样，Docker是一个很好的东西，可以让我们快速创建自己的开发环境，真正做到<code>Build once, Run anywhere</code>。</p>

<h2>Docker命令介绍</h2>

<p>如果有过Vagrant使用经验的话，Docker使用起来非常简单，无非就是把Vagrant的box换成image，把Vagrant的VM换成container就可以了。如果没有Vagrant使用经验也没有关系，试试Docker的<a href="https://www.docker.com/tryit/">TryIt</a>，里面有一个教程可以让你快速掌握Docker的一些基本命令。</p>

<p>比较常用的Docker命令:</p>

<ul>
<li>docker version: 查看Docker版本。</li>
<li>docker pull [image name]: 下载一个docker的镜像，类似git拉代码的命令，不过这个是拉docker镜像。</li>
<li>docker images: 列出所有的镜像。</li>
<li>docker run [image name] [command]: 运行一个镜像的某个命令，这样会产生一个container。</li>
<li>docker ps: 列出container。</li>
<li>docker start [container name]: 启动一个container。</li>
<li>docker stop [container name]: 停止一个container。</li>
<li>docker rm [container name]: 删除一个container。</li>
<li>docker rmi [image name]: 删除一个image镜像。</li>
</ul>


<h2>Docker镜像</h2>

<p>在Docker官网上可以看到已经有很多做好的镜像，比如Ubuntu，CentOS，MySql等，而且每天都有一些新的镜像不断在上传，因为上传一个镜像就像github上传代码一样简单。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-11/docker-images.png"></p>

<p>但是Docker在下载镜像的时候会发现速度很慢，有时候甚至连不上，这时候需要翻墙(可以看看我之前的文章，<a href="http://zhaozhiming.github.io/blog/2014/08/29/let-the-router-cross-great-wall-part-1/">让路由飞越长城(一)</a>，<a href="http://zhaozhiming.github.io/blog/2014/08/30/let-the-router-cross-great-wall-part-2/">让路由飞越长城(二)</a>)，或者找一下国内的镜像(可以看下<a href="https://docker.cn/">这里</a>)，虽然国内的镜像没有Docker官网的那么全，但基本的镜像还是有的。</p>

<h2>Docker &amp; Vagrant</h2>

<p>在没有Docker之前，我使用Vagrant来创建自己的开发环境，Docker和Vagrant都有一个很好的特点，就是通过虚拟化环境来创建开发环境，这样的好处是不会影响本机的环境配置。</p>

<p>试想一下，如果在你需要安装Mysql，Ruby，Apache等服务，在本机上就需要做各种配置，像修改环境变量等，遇到版本升级还需要删除本地配置，然后再更新，久而久之本地环境就会被&#8221;污染&#8221;了，这时候想安装其他服务可能就会报各种莫名其妙的错误。</p>

<p>如果我们有虚拟化环境就不会存在这种问题了，在虚拟环境安装各种服务，不需要的话销毁环境重新创建一个即可，简单又方便。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-11/docker_vagrant_small.png"></p>

<p>在Docker推出之后，网上就有各种比较Docker和Vagrant的文章，可以看看StackOverFlow上面的<a href="http://stackoverflow.com/questions/16647069/should-i-use-vagrant-or-docker-io-for-creating-an-isolated-environment">这篇文章</a>，连Docker的作者也来回答这个问题。</p>

<p>其实Docker和Vagrant不一定是竞争的关系，也可以是相辅相成的关系，比如在本地安装Docker，还是需要修改一些本地的配置，以后遇到版本升级还是会遇到修改配置的问题，如果是下载一个Docker的Vagrant box(已经有人制作了一个，见<a href="https://github.com/mitchellh/boot2docker-vagrant-box">这里</a>)，再使用VM安装其他docker镜像就不会有这种问题了。</p>

<p>在网上有人做过Docker的性能评估，分别对比了原生OS，OS安装Docker，OS系统安装虚拟机，虚拟机安装Docker这4种情况的性能情况，最后的结论是在虚拟机上运行Docker性能比较差，建议如果是生产环境还是使用原生的Docker比较好，性能比较文章请见<a href="http://blogs.vmware.com/performance/2014/10/docker-containers-performance-vmware-vsphere.html">这里</a>。</p>

<h2>Steve Wozniak is not boring</h2>

<p>在研究Docker的过程中，发现如果创建contrainer的时候不指定containrer名称的话，系统会自动帮你创建名称，而名称是随机生成的。名称随机有2部分组成，左半部分是形容词，右半部分是人名，是一些影响计算机发展的IT名人，在源码中可以看到这些名字的说明。</p>

<p>有趣的是，当名字随机到<code>boring_wozniak</code>的时候，程序会跳过生成这个名字，而继续生成下个随机名字，旁边有段注释是<code>Steve Wozniak is not boring</code>，相当好玩。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-11/docker-humorous.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在Spring4中配置Mybatis]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/11/15/spring4-and-mybatis/"/>
    <updated>2014-11-15T21:09:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/11/15/spring4-and-mybatis</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-11/mybatis-spring.png"></p>

<p><a href="http://spring.io/">Spring4</a>已经不支持Ibatis了，但Ibatis的升级版<a href="http://mybatis.github.io/mybatis-3/zh/index.html">Mybatis</a>封装了支持Spring4的组件<a href="http://mybatis.github.io/spring/zh/">mybatis-spring</a>，通过使用它们可以让你在Spring4中轻松地使用Mybatis。</p>

<!--more-->


<h2>gradle 设置</h2>

<p>现在基本上新兴的java项目包括android都使用<a href="http://www.gradle.org/">gradle</a>来做构建工具，gradle相比<a href="http://ant.apache.org/">ant</a>来讲多了定义好的task，不需要每次都copy-paste相同的task到构建文件中，而相比<a href="http://maven.apache.org/">maven</a>来说gradle比较灵活，可以像ant那样写简单的命令来进行copy或者mv等操作，总的来讲，gradle是集ant和maven优点于一身的新时代的构建工具。</p>

<p>要在工程中引入Mybatis的组件，需要现在gradle的构建文件中增加Mybatis的依赖包。</p>

<figure class='code'><figcaption><span>build.gradle </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;org.mybatis:mybatis:3.2.8&#39;</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;org.mybatis:mybatis-spring:1.2.2&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>在spring中配置Mybatis</h2>

<p>引入依赖包之后，需要在spring的配置文件中进行Mybatis的配置。</p>

<ul>
<li>首先我们定义一个datasource，使用C3PO数据库连接池来进行管理。</li>
</ul>


<figure class='code'><figcaption><span>spring.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">class=</span><span class="s">&quot;com.mchange.v2.c3p0.ComboPooledDataSource &quot;</span> <span class="na">destroy-method=</span><span class="s">&quot;close&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;driverClass&quot;</span> <span class="na">value=</span><span class="s">&quot;com.mysql.jdbc.Driver&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;jdbcUrl&quot;</span> <span class="na">value=</span><span class="s">&quot;jdbc:mysql://192.168.36.10:3306/pebms&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;user&quot;</span> <span class="na">value=</span><span class="s">&quot;root&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">value=</span><span class="s">&quot;root&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;acquireIncrement&quot;</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;initialPoolSize&quot;</span> <span class="na">value=</span><span class="s">&quot;5&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxPoolSize&quot;</span> <span class="na">value=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;minPoolSize&quot;</span> <span class="na">value=</span><span class="s">&quot;5&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxStatements&quot;</span> <span class="na">value=</span><span class="s">&quot;100&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;testConnectionOnCheckout&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>接着定义Mybatis的SessionFactory。

<ul>
<li>dataSource: 我们之前定义的数据源</li>
<li>transactionFactory: 事务管理配置</li>
<li>configLocation: Mybatis的具体文件地址</li>
<li>mapperLocations: Mybatis的SQL映射文件</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span>spring.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;sqlSessionFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">ref=</span><span class="s">&quot;dataSource&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;transactionFactory&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.apache.ibatis.transaction.managed.ManagedTransactionFactory&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;configLocation&quot;</span> <span class="na">value=</span><span class="s">&quot;classpath:sql-map-config.xml&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;mapperLocations&quot;</span> <span class="na">value=</span><span class="s">&quot;classpath:sql-mapping/farmer.xml&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>sql-map-config.xml简单示例如下，设置了缓存，延迟加载，超时时间等属性，更多的配置可以参照<a href="http://mybatis.github.io/mybatis-3/zh/configuration.html#setting">这里</a>。</li>
</ul>


<figure class='code'><figcaption><span>sql-map-config.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;settings&gt;</span>
</span><span class='line'>        <span class="nt">&lt;setting</span> <span class="na">name=</span><span class="s">&quot;cacheEnabled&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;setting</span> <span class="na">name=</span><span class="s">&quot;lazyLoadingEnabled&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;setting</span> <span class="na">name=</span><span class="s">&quot;multipleResultSetsEnabled&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;setting</span> <span class="na">name=</span><span class="s">&quot;useColumnLabel&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;setting</span> <span class="na">name=</span><span class="s">&quot;defaultExecutorType&quot;</span> <span class="na">value=</span><span class="s">&quot;REUSE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;setting</span> <span class="na">name=</span><span class="s">&quot;defaultStatementTimeout&quot;</span> <span class="na">value=</span><span class="s">&quot;25000&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/settings&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>sql的映射文件简单示例如下。</li>
</ul>


<figure class='code'><figcaption><span>farmer.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;</span>
</span><span class='line'><span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">&quot;com.farmer.baton.repo.FarmerMapper&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">&quot;add-new-farmer&quot;</span> <span class="na">parameterType=</span><span class="s">&quot;com.farmer.baton.model.Farmer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      insert into farmers(id, name, age) values (
</span><span class='line'>        #{id},
</span><span class='line'>        #{name},
</span><span class='line'>        #{age}
</span><span class='line'>      )
</span><span class='line'>    <span class="nt">&lt;/insert&gt;</span>
</span><span class='line'><span class="nt">&lt;/mapper&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>继续在spring.xml文件里进行Mybatis的配置，定义Mybatis的DAO(数据库访问对象)和事务控制，这里配置了DAO的包路径。</li>
</ul>


<figure class='code'><figcaption><span>spring.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;basePackage&quot;</span> <span class="na">value=</span><span class="s">&quot;com.farmer.baton.repo&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="na">value=</span><span class="s">&quot;sqlSessionFactory&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;transactionManager&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;dataSource&quot;</span> <span class="na">ref=</span><span class="s">&quot;dataSource&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Mybatis responsitory编写</h2>

<p>在前面的spring里面配置了DAO的包路径，我们下面要做的东西就比较就简单了。</p>

<ul>
<li>先在DAO包路径下定义一个DAO接口，这里不需要实现具体的内容，具体的sql在我们的映射文件里面体现。</li>
</ul>


<figure class='code'><figcaption><span>FarmerRepository.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">farmer</span><span class="o">.</span><span class="na">baton</span><span class="o">.</span><span class="na">repo</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.farmer.baton.model.Farmer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">FarmerRepository</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Farmer</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在xml映射文件里面实现findAll方法，这里要注意方法的签名必须和映射文件的sql的id一致，包括方法名和id一致，方法参数类型和sql的parameterType一致，方法返回类型和sql的resultType或resultMap类型一致。</li>
</ul>


<figure class='code'><figcaption><span>farmer.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;</span>
</span><span class='line'><span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">&quot;com.farmer.baton.repo.FarmerRepository&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;resultMap</span> <span class="na">id=</span><span class="s">&quot;baseResultMap&quot;</span> <span class="na">type=</span><span class="s">&quot;com.farmer.baton.model.Farmer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;id</span> <span class="na">column=</span><span class="s">&quot;id&quot;</span> <span class="na">property=</span><span class="s">&quot;id&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;name&quot;</span> <span class="na">property=</span><span class="s">&quot;name&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;age&quot;</span> <span class="na">property=</span><span class="s">&quot;age&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/resultMap&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;findAll&quot;</span> <span class="na">resultMap=</span><span class="s">&quot;baseResultMap&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        select id as id,
</span><span class='line'>        name as name,
</span><span class='line'>        age as age
</span><span class='line'>        from farmers
</span><span class='line'>    <span class="nt">&lt;/select&gt;</span>
</span><span class='line'><span class="nt">&lt;/mapper&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>写好Repository和映射SQL就可以了，程序在调用Repository方法的时候就会自动执行到相关的SQL。</li>
</ul>


<h2>事务控制</h2>

<ul>
<li>Mybatis的事务控制使用Spring的事务配置即可，配置如下:</li>
</ul>


<figure class='code'><figcaption><span>spring.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns:tx=</span><span class="s">&quot;http://www.springframework.org/schema/tx&quot;</span>
</span><span class='line'>        <span class="err">http://www.springframework.org/schema/tx</span> <span class="err">http://www.springframework.org/schema/tx/spring-tx-4.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>    <span class="nt">&lt;tx:annotation-driven/&gt;</span>
</span><span class='line'>    ...
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>然后在调用Repository的方面前面加上Transactional标签，如下所示:</li>
</ul>


<figure class='code'><figcaption><span>FarmerService.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Service</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FarmerService</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">FarmerRepository</span> <span class="n">farmerRepository</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Transactional</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateTwoFarmers</span><span class="o">(</span><span class="n">Farmer</span> <span class="n">farmer1</span><span class="o">,</span> <span class="n">Farmer</span> <span class="n">farmer2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">farmerRepository</span><span class="o">.</span><span class="na">updateZhangsan</span><span class="o">(</span><span class="n">farmer1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">farmerRepository</span><span class="o">.</span><span class="na">updateWangwu</span><span class="o">(</span><span class="n">farmer2</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Mybatis语法</h2>

<p>Mybatis的语法在功能上有了很大的改进，具体体现在SQL映射文件中。</p>

<ul>
<li>批量插入多条记录。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">&quot;add-new-farmer&quot;</span> <span class="na">parameterType=</span><span class="s">&quot;com.farmer.baton.model.Farmer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      insert into farmers(id, name, age) values
</span><span class='line'>      <span class="nt">&lt;foreach</span> <span class="na">collection=</span><span class="s">&quot;farmers&quot;</span> <span class="na">item=</span><span class="s">&quot;farmer&quot;</span> <span class="na">separator=</span><span class="s">&quot;,&quot;</span><span class="nt">&gt;</span> 
</span><span class='line'>      (
</span><span class='line'>        #{id},
</span><span class='line'>        #{name},
</span><span class='line'>        #{age}
</span><span class='line'>      )
</span><span class='line'>      <span class="nt">&lt;/foreach&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/insert&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>FarmerRepository </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kt">void</span> <span class="nf">addFarmers</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">&quot;farmers&quot;</span><span class="o">)</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Farmer</span><span class="o">&gt;</span> <span class="n">farmers</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>多参数SQL映射</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;resultMap</span> <span class="na">id=</span><span class="s">&quot;farmer&quot;</span> <span class="na">type=</span><span class="s">&quot;com.farmer.baton.model.Farmer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;id</span> <span class="na">column=</span><span class="s">&quot;id&quot;</span> <span class="na">property=</span><span class="s">&quot;id&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;name&quot;</span> <span class="na">property=</span><span class="s">&quot;name&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;age&quot;</span> <span class="na">property=</span><span class="s">&quot;age&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/resultMap&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;selectFarmersByNameAndAge&quot;</span> <span class="na">parameterType=</span><span class="s">&quot;map&quot;</span> <span class="na">resultMap=</span><span class="s">&quot;farmer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      select id as id,
</span><span class='line'>        name as name,
</span><span class='line'>        age as age
</span><span class='line'>        from farmers
</span><span class='line'>        where name = #{name}
</span><span class='line'>        and age = #{age}
</span><span class='line'>    <span class="nt">&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>FarmerRepository.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Farmer</span><span class="o">&gt;</span> <span class="nf">selectFarmersByNameAndAge</span><span class="o">(</span><span class="nd">@Param</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="nd">@Param</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">)</span> <span class="kt">int</span> <span class="n">age</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>返回对象属性包含List</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    <span class="nt">&lt;resultMap</span> <span class="na">id=</span><span class="s">&quot;farmer&quot;</span> <span class="na">type=</span><span class="s">&quot;com.farmer.baton.model.Farmer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;id</span> <span class="na">column=</span><span class="s">&quot;id&quot;</span> <span class="na">property=</span><span class="s">&quot;id&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;name&quot;</span> <span class="na">property=</span><span class="s">&quot;name&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;age&quot;</span> <span class="na">property=</span><span class="s">&quot;age&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;collection</span> <span class="na">property=</span><span class="s">&quot;farmland&quot;</span> <span class="na">ofType=</span><span class="s">&quot;com.farmer.baton.model.Farmland&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;result</span> <span class="na">column=</span><span class="s">&quot;size&quot;</span> <span class="na">property=</span><span class="s">&quot;size&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/collection&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/resultMap&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">&quot;selectFarmersAndFarmlands&quot;</span> <span class="na">resultMap=</span><span class="s">&quot;farmer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      select id as id,
</span><span class='line'>        name as name,
</span><span class='line'>        age as age
</span><span class='line'>        from farmers a
</span><span class='line'>        left outer join farmerlands b on a.id = b.farmer_id
</span><span class='line'>    <span class="nt">&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>FarmerRepository.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Farmer</span><span class="o">&gt;</span> <span class="nf">selectFarmersAndFarmlands</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Farmer.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Farmland</span><span class="o">&gt;</span> <span class="n">farmlands</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>具体的Demo可以参考我的github工程<a href="https://github.com/zhaozhiming/spring4-mybatis">spring4-mybatis</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用fullPage美化你的网站]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/11/12/use-full-page-to-make-web-site-beautify/"/>
    <updated>2014-11-12T20:07:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/11/12/use-full-page-to-make-web-site-beautify</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-11/fullpage.png"></p>

<p>这段时间逛网站，发现有一些网站的页面做的跟手机屏幕一样，大图片大字体铺满整个屏幕，还可以像手机一样通过鼠标上下左右滑动来切换不同的页面，让人感觉很炫很酷很炫。好奇心的驱使下找到了<a href="http://alvarotrigo.com/fullPage/#firstPage">fullPage.js</a>这个jquery插件，它可以让你轻松地制作漂亮的全屏滑动页面。</p>

<!--more-->


<h2>支持的浏览器</h2>

<p>可以看到好东西都是不支持IE6的。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-11/support-brower.gif"></p>

<h2>用法</h2>

<ul>
<li>fullPage.js使用非常简单，先在你的html页面里面加上fullPage的css和js文件，注意还需要包括jquery的js文件，而且要放在fullPage的js文件前面。</li>
</ul>


<figure class='code'><figcaption><span>index.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">href=</span><span class="s">&quot;jquery.fullPage.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;jquery.fullPage.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>然后在html里面定义一个div，id为<code>fullpage</code>，里面再嵌套div，class为<code>section</code>，代码示例如下，这是一个简单的全页滑动页面。</li>
</ul>


<figure class='code'><figcaption><span>index.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;fullpage&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;section&quot;</span><span class="nt">&gt;</span>Some section<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;section&quot;</span><span class="nt">&gt;</span>Some section<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;section&quot;</span><span class="nt">&gt;</span>Some section<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;section&quot;</span><span class="nt">&gt;</span>Some section<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>最后在对fullPage对象进行初始化。</li>
</ul>


<figure class='code'><figcaption><span>index.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#fullpage&#39;</span><span class="p">).</span><span class="nx">fullpage</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>fullPage属性</h2>

<p>这是一个比较复杂的fullPage初始化，可以看到fullPage可以设置很多的属性，比如menu(菜单)，设置为<code>true</code>则在屏幕右边会显示导航菜单，其他的属性说明可以参考fullPage的<a href="https://github.com/alvarotrigo/fullPage.js#options">官方说明</a>。</p>

<figure class='code'><figcaption><span>index.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#fullpage&#39;</span><span class="p">).</span><span class="nx">fullpage</span><span class="p">({</span>
</span><span class='line'>        <span class="c1">//Navigation</span>
</span><span class='line'>        <span class="nx">menu</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">anchors</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;firstSlide&#39;</span><span class="p">,</span> <span class="s1">&#39;secondSlide&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="nx">navigation</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">navigationPosition</span><span class="o">:</span> <span class="s1">&#39;right&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">navigationTooltips</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;firstSlide&#39;</span><span class="p">,</span> <span class="s1">&#39;secondSlide&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="nx">slidesNavigation</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">slidesNavPosition</span><span class="o">:</span> <span class="s1">&#39;bottom&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Scrolling</span>
</span><span class='line'>        <span class="nx">css3</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">scrollingSpeed</span><span class="o">:</span> <span class="mi">700</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">autoScrolling</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">scrollBar</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">easing</span><span class="o">:</span> <span class="s1">&#39;easeInQuart&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">easingcss3</span><span class="o">:</span> <span class="s1">&#39;ease&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">loopBottom</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">loopTop</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">loopHorizontal</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">continuousVertical</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">normalScrollElements</span><span class="o">:</span> <span class="s1">&#39;#element1, .element2&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">scrollOverflow</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">touchSensitivity</span><span class="o">:</span> <span class="mi">15</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">normalScrollElementTouchThreshold</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Accessibility</span>
</span><span class='line'>        <span class="nx">keyboardScrolling</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">animateAnchor</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Design</span>
</span><span class='line'>        <span class="nx">verticalCentered</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">resize</span> <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">sectionsColor</span> <span class="o">:</span> <span class="p">[</span><span class="s1">&#39;#ccc&#39;</span><span class="p">,</span> <span class="s1">&#39;#fff&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="nx">paddingTop</span><span class="o">:</span> <span class="s1">&#39;3em&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">paddingBottom</span><span class="o">:</span> <span class="s1">&#39;10px&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">fixedElements</span><span class="o">:</span> <span class="s1">&#39;#header, .footer&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">responsive</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Custom selectors</span>
</span><span class='line'>        <span class="nx">sectionSelector</span><span class="o">:</span> <span class="s1">&#39;.section&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">slideSelector</span><span class="o">:</span> <span class="s1">&#39;.slide&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//events</span>
</span><span class='line'>        <span class="nx">onLeave</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">nextIndex</span><span class="p">,</span> <span class="nx">direction</span><span class="p">){},</span>
</span><span class='line'>        <span class="nx">afterLoad</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">anchorLink</span><span class="p">,</span> <span class="nx">index</span><span class="p">){},</span>
</span><span class='line'>        <span class="nx">afterRender</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){},</span>
</span><span class='line'>        <span class="nx">afterResize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){},</span>
</span><span class='line'>        <span class="nx">afterSlideLoad</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">anchorLink</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">slideAnchor</span><span class="p">,</span> <span class="nx">slideIndex</span><span class="p">){},</span>
</span><span class='line'>        <span class="nx">onSlideLeave</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">anchorLink</span><span class="p">,</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">slideIndex</span><span class="p">,</span> <span class="nx">direction</span><span class="p">){}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考示例</h2>

<p>在fullPage的github工程里面，有一个example文件夹，主页面是<code>demoPage.html</code>，在浏览器打开它可以看到里面列举了19个fullPage的Demo，有上下翻页，左右翻页，嵌套视频等各种例子，如果想实现自己想要的效果，可以参照对应demo的html文件来进行修改。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-11/fullpage-demo.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Ubuntu12.04上安装Ceph Calamari]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/10/28/install-ceph-calamari-on-ubuntu/"/>
    <updated>2014-10-28T15:56:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/10/28/install-ceph-calamari-on-ubuntu</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-10/calamari.png"></p>

<p>Calamari是<a href="http://ceph.com/">Ceph</a>的一个监控和管理工具，它提供了一些定义好的REST API。Calamari包括服务端和客户端，服务端是使用Python的web框架<a href="https://www.djangoproject.com/">Django</a>开发的，提供了供客户端调用的REST API接口。客户端使用了<a href="http://nodejs.org/">NodeJS</a>,<a href="https://angularjs.org/">AngularJS</a>,<a href="http://getbootstrap.com/">Bootstrap3</a>，每个模块可以独立部署更新，其界面十分简洁清晰，几乎涵盖了所有监控要求。</p>

<p>下面介绍一下Calamari在Ubuntu上面的安装过程。</p>

<!--more-->


<h2>环境准备</h2>

<ul>
<li>安装VitrualBox和Vagrant，Vagrant的使用可以参照我之前的blog——<a href="http://zhaozhiming.github.io/blog/2014/10/02/ceph-install-with-vagrant-and-ansible">使用Vagrant和Ansible搭建Ceph环境</a>。</li>
<li>下载ubuntu12.04的box文件——<a href="https://vagrantcloud.com/discover/featured">box文件下载地址</a>，我们在虚拟机中安装calamari，不污染我们的本机环境。</li>
</ul>


<h2>生成Calamari安装文件</h2>

<h3>生成server安装文件</h3>

<ul>
<li>下载calamari工程</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mkdir calamari-node
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>calamari-node
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/ceph/calamari.git
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/ceph/Diamond.git
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用vagrant生成server安装文件</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>calamari/vagrant/precise-build
</span><span class='line'><span class="c"># 首先要保证你的vagrant已经导入名字为precise的box</span>
</span><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>Copying salt minion config to vm.
</span><span class='line'>Checking <span class="k">if </span>salt-minion is installed
</span><span class='line'>salt-minion was not found.
</span><span class='line'>Checking <span class="k">if </span>salt-call is installed
</span><span class='line'>salt-call was not found.
</span><span class='line'>Bootstrapping Salt... <span class="o">(</span>this may take a <span class="k">while</span><span class="o">)</span>
</span><span class='line'>Salt successfully configured and installed!
</span><span class='line'>run_overstate <span class="nb">set </span>to false. Not running state.overstate.
</span><span class='line'>run_highstate <span class="nb">set </span>to false. Not running state.highstate.
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>vagrant ssh
</span><span class='line'><span class="nv">$ </span>sudo salt-call state.highstate
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>Summary
</span><span class='line'>-------------
</span><span class='line'>Succeeded: 11
</span><span class='line'>Failed: 0
</span><span class='line'>-------------
</span><span class='line'>Total: 11
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这里的虚拟机将我们创建的根目录<code>calamari-node</code>和虚拟机中的<code>/git</code>目录关联起来了，我们可以通过在查看这2个目录中的任意一个来查看安装文件是否已经生成。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 查看calamari-node目录</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>calamari-node
</span><span class='line'><span class="nv">$ </span>ls -l
</span><span class='line'>drwxr-xr-x  28 zhaozhiming  staff   952 Oct 20 16:16 Diamond
</span><span class='line'>drwxr-xr-x  32 zhaozhiming  staff  1088 Oct 20 16:14 calamari
</span><span class='line'>-rw-r--r--  1 zhaozhiming  staff  18883769 Oct 21 15:58 calamari-repo-precise.tar.gz
</span><span class='line'>-rw-r--r--  1 zhaozhiming  staff  16417474 Oct 21 15:58 calamari-server_1.2.1-68-gfdeb0f7_amd64.deb
</span><span class='line'>-rw-r--r--  1 zhaozhiming  staff    307478 Oct 21 15:58 diamond_3.4.67_all.deb
</span><span class='line'>
</span><span class='line'><span class="c"># 查看虚拟机的/git目录</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>calamari-node/calamari/vagrant/precise-build
</span><span class='line'><span class="nv">$ </span>vagrant ssh
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /git
</span><span class='line'><span class="nv">$ </span>ls -l
</span><span class='line'>drwxr-xr-x  28 zhaozhiming  staff   952 Oct 20 16:16 Diamond
</span><span class='line'>drwxr-xr-x  32 zhaozhiming  staff  1088 Oct 20 16:14 calamari
</span><span class='line'>-rw-r--r--  1 zhaozhiming  staff  18883769 Oct 21 15:58 calamari-repo-precise.tar.gz
</span><span class='line'>-rw-r--r--  1 zhaozhiming  staff  16417474 Oct 21 15:58 calamari-server_1.2.1-68-gfdeb0f7_amd64.deb
</span><span class='line'>-rw-r--r--  1 zhaozhiming  staff    307478 Oct 21 15:58 diamond_3.4.67_all.deb
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>从上面可以看到安装文件已经生成好了，2个deb文件分别是server和监控服务的安装文件，tar.gz文件是安装服务所需的依赖包安装文件集合，如果是连网安装的话，这个tar.gz文件不需要用到。</li>
</ul>


<h3>生成client安装文件</h3>

<ul>
<li>下载calamari-client工程</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>calamari-node
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/ceph/calamari-clients.git
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用vagrant生成client安装文件</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>calamari-client/vagrant/precise-build/
</span><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>Copying salt minion config to vm.
</span><span class='line'>Checking <span class="k">if </span>salt-minion is installed
</span><span class='line'>salt-minion was not found.
</span><span class='line'>Checking <span class="k">if </span>salt-call is installed
</span><span class='line'>salt-call was not found.
</span><span class='line'>Bootstrapping Salt... <span class="o">(</span>this may take a <span class="k">while</span><span class="o">)</span>
</span><span class='line'>Salt successfully configured and installed!
</span><span class='line'>run_overstate <span class="nb">set </span>to false. Not running state.overstate.
</span><span class='line'>run_highstate <span class="nb">set </span>to false. Not running state.highstate.
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>vagrant ssh
</span><span class='line'><span class="nv">$ </span>sudo salt-call state.highstate
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>Summary
</span><span class='line'>-------------
</span><span class='line'>Succeeded: 13
</span><span class='line'>Failed: 0
</span><span class='line'>-------------
</span><span class='line'>Total: 13
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查看生成的安装文件，可以看到有1个deb文件和一个tar.gz文件，ubuntu的话直接使用deb文件进行安装就可以了，tar.gz文件不需要。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>calamari-node
</span><span class='line'><span class="nv">$ </span>ls -l
</span><span class='line'>drwxr-xr-x  28 zhaozhiming  staff   952 Oct 20 16:16 Diamond
</span><span class='line'>drwxr-xr-x  32 zhaozhiming  staff  1088 Oct 20 16:14 calamari
</span><span class='line'>drwxr-xr-x  22 zhaozhiming  staff      748 Oct 20 16:46 calamari-clients
</span><span class='line'>-rw-r--r--  1 zhaozhiming  staff  18883769 Oct 21 15:58 calamari-repo-precise.tar.gz
</span><span class='line'>-rw-r--r--  1 zhaozhiming  staff  16417474 Oct 21 15:58 calamari-server_1.2.1-68-gfdeb0f7_amd64.deb
</span><span class='line'>-rw-r--r--  1 zhaozhiming  staff    307478 Oct 21 15:58 diamond_3.4.67_all.deb
</span><span class='line'>-rw-r--r--   1 zhaozhiming  staff  1711253 Oct 21 12:38 calamari-clients-build-output.tar.gz
</span><span class='line'>-rw-r--r--   1 zhaozhiming  staff  1705364 Oct 21 12:38 calamari-clients_1.2.1.1-29-g3790c24_all.deb
</span></code></pre></td></tr></table></div></figure>


<h2>安装Calamari</h2>

<ul>
<li>创建一个ubuntu的虚拟机来安装calamari，首先在根目录下创建一个Vagrantfile文件。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>calamari-node
</span><span class='line'><span class="nv">$ </span>touch Vagrantfile
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Vagrantfile文件内容如下，注意要使用绑定好的IP。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- mode: ruby -*-</span>
</span><span class='line'><span class="c1"># vi: set ft=ruby :</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Vagrantfile API/syntax version. Don&#39;t touch unless you know what you&#39;re doing!</span>
</span><span class='line'><span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;precise64&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="s2">&quot;manager&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">manager</span><span class="o">|</span>
</span><span class='line'>    <span class="n">manager</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">hostname</span> <span class="o">=</span> <span class="s2">&quot;manager-env&quot;</span>
</span><span class='line'>    <span class="n">manager</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:private_network</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="s2">&quot;192.168.26.10&quot;</span>
</span><span class='line'>    <span class="n">manager</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:virtualbox</span> <span class="k">do</span> <span class="o">|</span><span class="n">vb</span><span class="o">|</span>
</span><span class='line'>      <span class="n">vb</span><span class="o">.</span><span class="n">memory</span> <span class="o">=</span> <span class="mi">512</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>启动虚拟机并登陆</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'><span class="nv">$ </span>vagrant ssh
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在虚拟机上安装salt</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo apt-get install python-software-properties
</span><span class='line'><span class="nv">$ </span>sudo add-apt-repository ppa:saltstack/salt
</span><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'><span class="nv">$ </span>sudo apt-get install salt-master
</span><span class='line'><span class="nv">$ </span>sudo apt-get install salt-minion
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在虚拟机上安装所需依赖包</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo apt-get update <span class="o">&amp;&amp;</span> sudo apt-get install -y apache2 libapache2-mod-wsgi libcairo2 supervisor python-cairo libpq5 postgresql
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装calamari</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /vagrant
</span><span class='line'><span class="nv">$ </span>sudo dpkg -i calamari-server*.deb calamari-clients*.deb
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>初始化calamari服务，这里会要求你输入用户名、邮箱、密码，这个用户名密码是在浏览器访问calamari服务需要的。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo calamari-ctl initialize
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Loading configuration..
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Starting/enabling salt...
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Starting/enabling postgres...
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Initializing database...
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Initializing web interface...
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> You will now be prompted <span class="k">for </span>login details <span class="k">for </span>the administrative user account. This is the account you will use to log into the web interface once setup is complete.
</span><span class='line'>Username <span class="o">(</span>leave blank to use <span class="s1">&#39;root&#39;</span><span class="o">)</span>:
</span><span class='line'>Email address: karan.singh@csc.fi
</span><span class='line'>Password:
</span><span class='line'>Password <span class="o">(</span>again<span class="o">)</span>:
</span><span class='line'>Superuser created successfully.
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Starting/enabling services...
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Restarting services... - See more at: http://ceph.com/category/calamari/#sthash.qUtbU0mX.dpuf
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>登陆浏览器，输入虚拟机的ip(比如<a href="http://192.168.26.10">http://192.168.26.10</a>)，可以看到如下页面。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-10/calamari-login.png"></p>

<ul>
<li>输入刚才设置的用户名密码后，可以看到calamari提示你进行ceph集群配置。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-10/calamari-first.png"></p>

<h2>Ceph集群配置监控服务</h2>

<h3>配置ceph集群</h3>

<ul>
<li>登陆其中一台ceph集群机器(这里假设ceph集群都是ubuntu环境)，安装监控服务。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo dpkg -i diamond_3.4.67_all.deb <span class="c">#deb文件是之前生成server安装文件时一起生成的，需要将其先考到ceph集群机器上</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>创建默认的监控配置文件</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo mv /etc/diamond/diamond.conf.example /etc/diamond/diamond.conf
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装salt-minion服务</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo apt-get install python-software-properties
</span><span class='line'><span class="nv">$ </span>sudo add-apt-repository ppa:saltstack/salt
</span><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'><span class="nv">$ </span>sudo apt-get install salt-minion
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在<code>/etc/hosts</code>文件中增加calamari服务器的映射关系</li>
</ul>


<figure class='code'><figcaption><span>/etc/hosts </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>...
</span><span class='line'>...
</span><span class='line'>192.168.26.10 ceph-calamari
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>修改salt-minion的配置文件<code>/etc/salt/minion</code>，将master指向calamari服务器</li>
</ul>


<figure class='code'><figcaption><span>/etc/salt/minion </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>...
</span><span class='line'>master: ceph-calamari
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>重启服务</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo service salt-minion restart
</span><span class='line'><span class="nv">$ </span>sudo service diamond restart
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在所有的ceph集群机器上重复以上的步骤。</li>
</ul>


<h3>在calamari服务上添加ceph集群机器</h3>

<ul>
<li>查看salt-key</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo salt-key -L
</span><span class='line'>Accepted Keys:
</span><span class='line'>Unaccepted Keys:
</span><span class='line'>ceph-mon0
</span><span class='line'>ceph-mon1
</span><span class='line'>ceph-mon2
</span><span class='line'>ceph-osd0
</span><span class='line'>ceph-osd1
</span><span class='line'>ceph-osd2
</span><span class='line'>Rejected Keys:
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>添加ceph集群机器到calamari</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo salt-key -A
</span><span class='line'>The following keys are going to be accepted:
</span><span class='line'>Unaccepted Keys:
</span><span class='line'>ceph-mon0
</span><span class='line'>ceph-mon1
</span><span class='line'>ceph-mon2
</span><span class='line'>ceph-osd0
</span><span class='line'>ceph-osd1
</span><span class='line'>ceph-osd2
</span><span class='line'>Proceed? <span class="o">[</span>n/Y<span class="o">]</span> y
</span><span class='line'>Key <span class="k">for </span>minion ceph-mon0 accepted.
</span><span class='line'>Key <span class="k">for </span>minion ceph-mon1 accepted.
</span><span class='line'>Key <span class="k">for </span>minion ceph-mon2 accepted.
</span><span class='line'>Key <span class="k">for </span>minion ceph-osd0 accepted.
</span><span class='line'>Key <span class="k">for </span>minion ceph-osd1 accepted.
</span><span class='line'>Key <span class="k">for </span>minion ceph-osd2 accepted.
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>再次查看salt-key，可以看到所有节点都已添加。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo salt-key -L
</span><span class='line'>Accepted Keys:
</span><span class='line'>ceph-mon0
</span><span class='line'>ceph-mon1
</span><span class='line'>ceph-mon2
</span><span class='line'>ceph-osd0
</span><span class='line'>ceph-osd1
</span><span class='line'>ceph-osd2
</span><span class='line'>Unaccepted Keys:
</span><span class='line'>Rejected Keys:
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在浏览器中再次登陆calamari服务，可以看到已经能监控ceph集群的信息。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-10/calamari.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-10/calamari-page1.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-10/calamari-page2.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-10/calamari-page3.png"></p>

<h2>参考资料</h2>

<ul>
<li>文档1：<a href="http://calamari.readthedocs.org/en/latest/operations/index.html">http://calamari.readthedocs.org/en/latest/operations/index.html</a></li>
<li>文档2：<a href="http://calamari.readthedocs.org/en/latest/operations/index.html">http://ceph.com/category/calamari/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么Intellij-IDEA比Eclipse好]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/10/09/why-intellij-idea-better-than-eclipse/"/>
    <updated>2014-10-09T02:36:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/10/09/why-intellij-idea-better-than-eclipse</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-10/idea-vs-eclipse.jpeg"></p>

<p>经常有人问我Intellij IDEA比Eclipse好用在哪里？问我的人大部分都是没用过IDEA的，因为用过IDEA的大部分人都知道好在哪里。IDEA和Eclipse之争不像Vim vs. Emacs、IOS vs. Android、Java vs. C++等，因为后面这些<code>vs</code>都没有绝对的优胜者，都各自有各自的优缺点，但IDEA vs. Eclipse是有结果的，那就是:</p>

<blockquote><p>Intellij IDEA明显比Eclipse好&#8230;很多。</p></blockquote>




<!--more-->


<h2>为什么我从Eclipse转向IDEA</h2>

<p>我在开始接触Java的时候就使用Eclipse，用了将近6~7年，那个时候几乎熟悉了Eclipse的所有快捷键，当时感觉用Eclipse写Java，JSP神马的都挺方便的。后来我加入一个新项目，项目强制要求我们使用IDEA做为开发工具，使用一段时间后发现IDEA各方面都比Eclipse强大，让你写Java代码更加行云流水，我从此欲罢不能的爱上IDEA，一直使用至今。因为这两个IDE我都使用过蛮长时间，所以还是可以讲讲两者的一些不同。</p>

<h2>IDEA的优点</h2>

<p>IDEA的优点有很多，在开始使用到慢慢熟悉的过程中，基本每隔一段时间你就会被IDEA的一些神奇功能震惊到，经常让你惊喜不断，从而慢慢爱上它。</p>

<h4>自动补全</h4>

<p>IDEA的自动补全很强大，不仅仅是Java代码可以补全，还可以补全其他代码比如Html，JavaScript等，敲打每个字母IDEA都会马上列出各种可能需要补全的代码。</p>

<p>比如下面这段代码:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Assert</span><span class="o">.</span><span class="na">null</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>IDEA会提示assertNull, assertNotnull等方法，而Eclipse则完全没有提示。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-10/idea-auto-complete-2.png" title="idea" ></p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-10/eclipse-auto-complete-2.png" title="eclipse" ></p>

<p>又比如下面这段代码:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">assertThat</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>IDEA按下<code>alt + Enter</code>IDEA会自动提示你是否要静态导入<code>assertThat</code>这个方法，而Eclipse按<code>ctrl + 1</code>只会提示你创建新方法。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-10/idea-auto-complete.png" title="idea" ></p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-10/eclipse-auto-complete.png" title="eclipse" ></p>

<p>IDEA不仅对Java有自动补全，对其他类型的文件也有自动补全的功能，而Eclipse我只能呵呵了。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-10/idea-auto-complete-xml.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-10/idea-auto-complete-html.png"></p>

<h4>重构</h4>

<p>IDEA从一开始就拥有很强大的重构功能，而Eclipse以前基本上没有什么重构的功能，后面才慢慢加上的。</p>

<p>比如我们要抽取下面name和age那2行为一个方法。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Tom&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">11</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="n">age</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>IDEA可以自动将其封装成为一个对象。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-10/idea-refactor-1.png">
<img src="http://zhaozhiming.github.io/images/post/2014-10/idea-refactor-2.png"></p>

<p>重构后的结果:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">().</span><span class="na">invoke</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="n">age</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Person</span> <span class="nf">invoke</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Tom&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="n">age</span> <span class="o">=</span> <span class="mi">11</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而Eclipse则告诉你我办不到。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-10/eclipse-refactor-1.png"></p>

<p>IDEA还可以通过重构自动创建工厂方法、builder，Eclipse则无能为力。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-10/idea-refactor-3.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-10/eclipse-refactor-2.png"></p>

<h4>导航</h4>

<p>IDEA可以从任何地方导航到你想要去的地方，<code>ctrl + shift + A</code>可以进到任何你要去的地方(包括配置)，最新的功能连续2次<code>shift</code>可以选择跳转到相关的文件。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-10/idea-navigate-1.png">
<img src="http://zhaozhiming.github.io/images/post/2014-10/idea-navigate-2.png"></p>

<p>IDEA文件间的跳转不限于Java，XML、JavaScript等文件也可以通过<code>ctrl + 鼠标左键</code>进入目标，而Eclipse只能在Java文件里面做到。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-10/idea-navigate-3.png"></p>

<h4>静态代码检查</h4>

<p>IDEA有很强大的静态代码检查功能，能帮助你改掉一些不好的编码习惯，比如下面的代码IDEA会提示if分支可以简化，直接返回equal结果就可以，但Eclipse则是持着你代码烂关我P事的态度对待你的代码。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">check</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://zhaozhiming.github.io/images/post/2014-10/idea-static-code-1.png"></p>

<p>方法没有被其他类用到也会有提示。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-10/idea-static-code-2.png"></p>

<p>老的for循环提示使用foreach。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-10/idea-static-code-3.png"></p>

<h4>集成众多成熟插件</h4>

<p>IDEA不像Eclipse需要安装很多插件，标准的安装已经包含了很多成熟的插件，比如版本管理工具就包含了SVN，GIT，ClearCase等。这有点像苹果的个人电脑，不需要用户了解其中的各种细节，安装好之后就能舒舒服服的使用，但IDEA又不像苹果那么封闭，它还是可以安装插件，但其本身的插件就已经很够用了，没有太大必要再去安装其他插件。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-10/idea-plugin.png"></p>

<h2>Eclipse的优点</h2>

<p>黑了这么多Eclipse，说实话Eclipse还是有其优点的，比如:</p>

<ul>
<li>免费。这个是Eclipse最大的优势，也是大部分Java开发还在使用Eclipse的原因，虽然IDEA有免费的社区版，但如果要用到更多高级功能，还是推荐使用无限制版本。</li>
<li>插件多。Eclipse的插件多如牛毛，各种需要的功能都可以通过搜索相关插件获得，而且其插件的开发也相对比较简单，如果找不到想要的可以自己开发。</li>
<li>占用内存少。这个可以从进程管理工具看出来，但从我实际的使用结果来看，Eclipse经常会卡顿，而IDEA则大部分时间都很流畅。</li>
<li>可以一个窗口同时显示几个工程。IDEA一个窗口只能显示一个工程，多个项目需要多开几个IDEA窗口，但可以通过加载module的方式在一个项目里面关联多个工程。</li>
</ul>


<h2>总结</h2>

<p>IDEA和Eclipse的定位本身是不一样的，Eclipse将其定位为一个平台，可以通过安装各种插件来编写各种语言的代码，包括C++等，而IDEA将自己定位为<em>最智能的Java集成开发编辑器</em>，如果你不是开发Java代码的，建议不要选用IDEA。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让你的安卓开发更容易(三)——Picasso]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/10/07/make-your-android-dev-life-easy-part-3/"/>
    <updated>2014-10-07T23:48:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/10/07/make-your-android-dev-life-easy-part-3</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-10/picasso.png"></p>

<p><a href="http://square.github.io/picasso/">Picasso</a>是Android下一个强大的图片下载和缓存类库，代码借口简洁易懂，功能强大，Picasso有如下特性：</p>

<ul>
<li>处理Adapter中的ImageView回收和取消已经回收ImageView的下载进程</li>
<li>使用最少的内存完成复杂的图片转换，比如把下载的图片转换为圆角等</li>
<li>自动添加磁盘和内存缓存</li>
</ul>


<p>下面通过介绍Android原生的图片下载缓存功能和Picasso进行对比，看看使用Picasso有哪些好的地方。</p>

<!--more-->


<h2>Android原生的图片下载功能</h2>

<p>在没有使用Picasso的情况下，如果想做到图片下载以及缓存，需要编写大量代码。</p>

<h4>图片下载</h4>

<p>Android的图片下载是不能在主线程里面进行的，需要新创建一个线程进行操作。</p>

<ul>
<li>首先要继承AsyncTask类，Android的一个异步操作类。</li>
</ul>


<figure class='code'><figcaption><span>DownloadTask.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">android.graphics.BitmapFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.AsyncTask</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.Log</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.ImageView</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.github.zzm.bushu.app.model.LogTag</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.URL</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DownloadTask</span> <span class="kd">extends</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Void</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">File</span> <span class="n">imageFile</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ImageView</span> <span class="n">imageView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">DownloadTask</span><span class="o">(</span><span class="n">File</span> <span class="n">imageFile</span><span class="o">,</span> <span class="n">ImageView</span> <span class="n">imageView</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">imageFile</span> <span class="o">=</span> <span class="n">imageFile</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">imageView</span> <span class="o">=</span> <span class="n">imageView</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>实现<code>doInBackground</code>方法。</li>
</ul>


<p>该方法接受一个可变String参数，表示可以进行多个url下载，但这url参数是从哪里传进来的呢？</p>

<p>我们后面在使用这个<code>DownloadTask</code>类时，会调用其<code>exexute(String... url)</code>的方法，url参数就是从这里传进去的。</p>

<p>下面的代码中通过<code>new URL(url).openStream()</code>进行图片下载，然后新建一个文件输出流，将图片写到输出文件中。</p>

<figure class='code'><figcaption><span>DownloadTask.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">String</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">urls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">storageImage</span><span class="o">(</span><span class="n">urls</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">storageImage</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">FileOutputStream</span> <span class="n">outputStream</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">outputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">imageFile</span><span class="o">);</span>
</span><span class='line'>            <span class="n">outputStream</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">getImageBytes</span><span class="o">(</span><span class="n">url</span><span class="o">));</span>
</span><span class='line'>            <span class="n">outputStream</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">LogTag</span><span class="o">.</span><span class="na">DownloadTask</span><span class="o">.</span><span class="na">name</span><span class="o">(),</span> <span class="s">&quot;storage image error:&quot;</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">getImageBytes</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedInputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="na">openStream</span><span class="o">());</span>
</span><span class='line'>        <span class="n">ByteArrayOutputStream</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">1024</span><span class="o">];</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(-</span><span class="mi">1</span> <span class="o">!=</span> <span class="o">(</span><span class="n">n</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">out</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">out</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="n">in</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">out</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>实现<code>onPostExecute</code>方法，这个方法是在图片下载完成后调用的，我们可以将下载的图片指定显示到某个imageView中。</li>
</ul>


<figure class='code'><figcaption><span>DownloadTask.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPostExecute</span><span class="o">(</span><span class="n">String</span> <span class="n">ignore</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">imageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeFile</span><span class="o">(</span><span class="n">imageFile</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>图片缓存</h4>

<p>我们要自己实现图片缓存的功能也比较简单，代码如下。(但如果已经有Picasso这种强大的类库，我们又何必自己造轮子呢？)</p>

<ul>
<li>要找到下载的图片文件，我们要自己定义文件的命名规则和存放路径，这样才能方便我们找到文件。</li>
</ul>


<figure class='code'><figcaption><span>MyAdapter.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">File</span> <span class="n">imageFile</span> <span class="o">=</span> <span class="n">getImageFile</span><span class="o">(</span><span class="n">bookName</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">File</span> <span class="nf">getImageFile</span><span class="o">(</span><span class="n">String</span> <span class="n">bookName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">File</span> <span class="n">imageFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getFilesDir</span><span class="o">(),</span> <span class="n">bookName</span> <span class="o">+</span> <span class="s">&quot;.png&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LogTag</span><span class="o">.</span><span class="na">BooksAdapter</span><span class="o">.</span><span class="na">name</span><span class="o">(),</span> <span class="s">&quot;file path: &quot;</span> <span class="o">+</span> <span class="n">imageFile</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">());</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">imageFile</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>判断文件是否存在，如果不存在则进行首次下载，如果已经存在了则直接从磁盘上面加载文件。</li>
</ul>


<figure class='code'><figcaption><span>MyAdapter.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">imageFileEmpty</span><span class="o">(</span><span class="n">imageFile</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">downloadImage</span><span class="o">(</span><span class="n">bookName</span><span class="o">,</span> <span class="n">imageView</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">imageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeFile</span><span class="o">(</span><span class="n">imageFile</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>判断是否有网络，有的话进行图片下载，调用刚才介绍的<code>DownloadTask</code>类，然后调用<code>execute</code>的方法即可，这样后台就会异步帮你将图片下载下来，然后进行显示。</li>
</ul>


<figure class='code'><figcaption><span>MyAdapter.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">downloadImage</span><span class="o">(</span><span class="n">String</span> <span class="n">bookName</span><span class="o">,</span> <span class="n">ImageView</span> <span class="n">imageView</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">networkOk</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="n">format</span><span class="o">(</span><span class="s">&quot;%s%s/%s.png&quot;</span><span class="o">,</span> <span class="n">STORAGE_BASE_URL</span><span class="o">,</span> <span class="n">getScreenDensity</span><span class="o">(),</span> <span class="n">bookName</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LogTag</span><span class="o">.</span><span class="na">BooksAdapter</span><span class="o">.</span><span class="na">name</span><span class="o">(),</span> <span class="n">format</span><span class="o">(</span><span class="s">&quot;url: %s&quot;</span><span class="o">,</span> <span class="n">url</span><span class="o">));</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">DownloadTask</span><span class="o">(</span><span class="n">getImageFile</span><span class="o">(</span><span class="n">bookName</span><span class="o">),</span> <span class="n">imageView</span><span class="o">).</span><span class="na">execute</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">networkOk</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ConnectivityManager</span> <span class="n">connMgr</span> <span class="o">=</span> <span class="o">(</span><span class="n">ConnectivityManager</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">CONNECTIVITY_SERVICE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">NetworkInfo</span> <span class="n">networkInfo</span> <span class="o">=</span> <span class="n">connMgr</span><span class="o">.</span><span class="na">getActiveNetworkInfo</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">networkInfo</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">networkInfo</span><span class="o">.</span><span class="na">isConnected</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Picasso的图片下载功能</h2>

<p>看完Android的图片下载功能，发现我们写了不少代码，现在来看看Picasso是怎么实现的。</p>

<figure class='code'><figcaption><span>MyAdapter.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Picasso</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">getContext</span><span class="o">()).</span><span class="na">load</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="na">into</span><span class="o">((</span><span class="n">ImageView</span><span class="o">)</span> <span class="n">viewImage</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>一句话就搞定了，就是这么简单，是不是觉得生活美好了很多。</p>

<p>Picasso会在应用的cache目录下新建一个<code>picasso-cache</code>文件夹，里面就是picasso的图片缓存文件。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-10/picasso-cache.png"></p>

<h2>相关链接</h2>

<ul>
<li><a href="http://zhaozhiming.github.io/blog/2014/08/31/make-your-android-dev-life-easy-part-2/">让你的安卓开发更容易(二)——Genymotion</a></li>
<li><a href="http://zhaozhiming.github.io/blog/2014/08/31/make-your-android-dev-life-easy-part-1/">让你的安卓开发更容易(一)——Intellij IDEA</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Vagrant和Ansible搭建Ceph环境]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/10/02/ceph-install-with-vagrant-and-ansible/"/>
    <updated>2014-10-02T22:03:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/10/02/ceph-install-with-vagrant-and-ansible</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-9/ceph-install.jpg"></p>

<h2><a href="http://ceph.com/">Ceph</a>简介</h2>

<p>Ceph是一个高性能，高可用，高扩展的分布式对象存储框架和文件系统，而且是一个免费开源的项目。</p>

<p>但是Ceph的环境搭建起来比较麻烦，最简单的环境也需要2台VM(虚拟机，1台做mon和osd，另外一台做gateway)，而且按照官方文档上面的指南进行安装，经常报各种莫名其妙的问题，现在给大家介绍一个简单的方法来进行Ceph环境的搭建。下面先介绍几个要用到的工具。</p>

<!--more-->


<h2><a href="https://www.vagrantup.com/">Vagrant</a></h2>

<p><img src="http://zhaozhiming.github.io/images/post/2014-9/vagrant.png"></p>

<p>以前使用VM情况是这样的:</p>

<ul>
<li>下载操作系统的iso镜像</li>
<li>通过VM管理工具(VMWare，VirtualBox等)将iso镜像转换为VM</li>
<li>登陆到VM进行操作</li>
</ul>


<p>整个过程复杂而且漫长，但是使用了Vagrant之后就非常方便了，一个命令就可以搞定VM的安装，ssh到VM也无需输入用户名密码，还可以查看所有VM的状态等。</p>

<h3>Box</h3>

<p>vagrant通过box来生成VM，box可以理解是一个制作好的VM，这意味着你搭建完自己的开发环境后，也可以将其制作成一个box，供团队其他成员使用。</p>

<p>box的容量非常小，比如Ubuntu12.04的一个iso镜像一般要500多M，制作成VM可能要10G左右，而一个ubuntu12.04的box只有300多M。Vagrant的box可以在<a href="https://vagrantcloud.com/discover/featured">这里</a>下载，除了有各种OS(ubuntu, windosw, CentOS等)的VM外，还有Virtualbox和VMWare各自对应的box，不过要使用VMWare的box，需要安装插件和到购买相关的<a href="https://www.vagrantup.com/VMware">License</a>，毕竟VMWare不是免费的软件。</p>

<p>下载了box后，执行下面命令就可以添加box了，如果直接输入box名称并发现本地没有box的话，会自动下载box文件。(<code>PS: Vagrant默认使用Virtualbox作为虚拟器软件，所以在安装Vagrant还需要先安装Virtualbox。</code>)</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>//添加本地box文件
</span><span class='line'><span class="nv">$ </span>vagrant box add /your/box/path/xxx.box
</span><span class='line'>//添加指定名称的box，没有的话会自动下载box文件
</span><span class='line'><span class="nv">$ </span>vagrant box add hashicorp/precise32
</span><span class='line'>//列出所有的box
</span><span class='line'><span class="nv">$ </span>vagrant box list
</span></code></pre></td></tr></table></div></figure>


<h3>Vagrant基本操作</h3>

<p>Vagrant的操作非常简单，现在介绍几个常用的操作指令。(<code>PS: 下面的大部分命令后面可以跟VM名称，不跟的话是对所有的VM进行操作。</code>)</p>

<ul>
<li>vagrant status: 展示VM的信息。</li>
<li>vagrant up: 启动VM。</li>
<li>vagrant ssh [VM]: ssh到某个VM上，无需输入用户名和密码。</li>
<li>vagrant halt: 关闭VM。</li>
<li>vagrant destroy: 销毁VM，如果你的VM被你玩残了，销毁它然后重新启动一个就可以了，很方便。</li>
</ul>


<h3>Vagrant共享</h3>

<p>使用<code>vagrant ssh</code>到VM后，可以看到根目录下有个<code>/vagrant</code>文件夹，这个是VM和工程间的共享目录，在这个文件夹里面存放东西，可以在存放Vagrantfile的目录里面看到，反之亦然，在VM里面也可以读取到工程下的文件。</p>

<h3>Vagrantfile</h3>

<p>初始化vagrant工程后可以看到一个<code>Vagrantfile</code>的文件，这个是配置VM的文件，可以看下面的例子:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">VM</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;hashicorp/precise64&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">VM</span><span class="o">.</span><span class="n">define</span> <span class="ss">:rgw</span> <span class="k">do</span> <span class="o">|</span><span class="n">rgw</span><span class="o">|</span>
</span><span class='line'>    <span class="n">rgw</span><span class="o">.</span><span class="n">VM</span><span class="o">.</span><span class="n">network</span> <span class="ss">:private_network</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="s2">&quot;192.168.42.2&quot;</span>
</span><span class='line'>    <span class="n">rgw</span><span class="o">.</span><span class="n">VM</span><span class="o">.</span><span class="n">host_name</span> <span class="o">=</span> <span class="s2">&quot;ceph-rgw&quot;</span>
</span><span class='line'>    <span class="n">rgw</span><span class="o">.</span><span class="n">VM</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:virtualbox</span> <span class="k">do</span> <span class="o">|</span><span class="n">vb</span><span class="o">|</span>
</span><span class='line'>      <span class="n">vb</span><span class="o">.</span><span class="n">customize</span> <span class="o">[</span><span class="s2">&quot;modifyVM&quot;</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="s2">&quot;--memory&quot;</span><span class="p">,</span> <span class="s2">&quot;192&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">rgw</span><span class="o">.</span><span class="n">VM</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:VMware_fusion</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>      <span class="n">v</span><span class="o">.</span><span class="n">VMx</span><span class="o">[</span><span class="s1">&#39;memsize&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;192&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个Vagrantfile指定了box的名称，然后创建了一个名称为<code>rgw</code>的VM，指定了VM的ip、hostname、内存大小。</p>

<p>关于vagrant就介绍到这里，想要了解更多信息可以查看<a href="https://www.vagrantup.com/">vagrant官网</a>。</p>

<h2><a href="http://www.ansible.com/home">Ansible</a></h2>

<p><img src="http://zhaozhiming.github.io/images/post/2014-9/ansible.jpg"></p>

<p>Ansible是一个开源的远程机器管理软件，可以批量操作多台远程服务器。(<code>PS: Ansible只适合操作Linux和Unix机器，如果是Windows系统是不可以的。</code>)</p>

<h3>安装</h3>

<p>要安装Ansible需要先安装Python2.6/7，然后可以通过easy_install或pip进行下载安装。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo esay_install ansible
</span><span class='line'><span class="c"># or</span>
</span><span class='line'>sudo pip install ansible
</span></code></pre></td></tr></table></div></figure>


<h3>使用示例</h3>

<p>创建一个文件夹，在文件夹里面创建一个hosts文件，hosts格式如下:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># hosts</span>
</span><span class='line'><span class="o">[</span>ceph<span class="o">]</span>
</span><span class='line'>192.168.42.2
</span><span class='line'>192.168.42.101
</span><span class='line'>192.168.42.201
</span></code></pre></td></tr></table></div></figure>


<p>可以看到hosts文件里面有几个远程机器的ip(这里是虚拟机)，远程机器可以分组，通过中括号里面的组名来划分。</p>

<p>然后执行下面的命令执行简单的命令。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ansible all -a <span class="s1">&#39;who&#39;</span>
</span><span class='line'>ceph-mon0 | success | <span class="nv">rc</span><span class="o">=</span>0 &gt;&gt;
</span><span class='line'>ceph     pts/0        2014-10-02 08:54 <span class="o">(</span>192.168.42.60<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>ceph-osd0 | success | <span class="nv">rc</span><span class="o">=</span>0 &gt;&gt;
</span><span class='line'>ceph     pts/0        2014-10-02 08:54 <span class="o">(</span>192.168.42.60<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>ceph-osd1 | success | <span class="nv">rc</span><span class="o">=</span>0 &gt;&gt;
</span><span class='line'>ceph     pts/0        2014-10-02 08:54 <span class="o">(</span>192.168.42.60<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>从输出信息上可以看到这几台远程机器都成功执行了<code>who</code>命令，不过如果要成功执行上面的命令，还需要先在执行机和远程机上面设置无密码ssh连接。</p>

<h3>无密码ssh连接</h3>

<p>假设有2台机器，机器A和机器B，现在想让机器A<code>ssh</code>机器B的时候不需要输入用户和密码，操作如下。</p>

<ul>
<li>在机器B上创建一个用户，并配置好，下面命令的<code>username</code>指自己要创建的用户名。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo useradd -d /home/<span class="o">{</span>username<span class="o">}</span> -m <span class="o">{</span>username<span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>sudo passwd <span class="o">{</span>username<span class="o">}</span>
</span><span class='line'><span class="c"># 输入密码</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;{username} ALL = (root) NOPASSWD:ALL&quot;</span> | sudo tee /etc/sudoers.d/<span class="o">{</span>username<span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>sudo chmod 0440 /etc/sudoers.d/<span class="o">{</span>username<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在机器A上生成密钥，并发送给机器B。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ssh-keygen
</span><span class='line'>
</span><span class='line'>Generating public/private key pair.
</span><span class='line'>Enter file in which to save the key <span class="o">(</span>/ceph-admin/.ssh/id_rsa<span class="o">)</span>:
</span><span class='line'>Enter passphrase <span class="o">(</span>empty <span class="k">for </span>no passphrase<span class="o">)</span>:
</span><span class='line'>Enter same passphrase again:
</span><span class='line'>Your identification has been saved in /ceph-admin/.ssh/id_rsa.
</span><span class='line'>Your public key has been saved in /ceph-admin/.ssh/id_rsa.pub.
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ssh-copy-id <span class="o">{</span>username<span class="o">}</span>@<span class="o">{</span>机器B<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>到这里就可以不用输入密码进行ssh了，如果想连用户名也不想输入的话，需要机器A在<code>.ssh</code>文件下创建一个<code>config</code>文件，在里面添加如下内容。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Host 机器B
</span><span class='line'>   Hostname 机器B
</span><span class='line'>   User <span class="o">{</span>username<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>playbook</h3>

<p>ansible还可以通过一个playbook脚本进行远程机器的操作，playbook的示例如下:</p>

<figure class='code'><figcaption><span>playbook.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># playbook.yml</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">all</span>
</span><span class='line'>  <span class="l-Scalar-Plain">remote_user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ceph</span>
</span><span class='line'>  <span class="l-Scalar-Plain">tasks</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">whoami</span>
</span><span class='line'>      <span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="s">&#39;whoami</span><span class="nv"> </span><span class="s">&gt;</span><span class="nv"> </span><span class="s">whoami.rst&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建完playbook文件后执行如下命令可以看到执行结果。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ansible-playbook playbook.yml
</span><span class='line'>
</span><span class='line'>PLAY <span class="o">[</span>all<span class="o">]</span> ********************************************************************
</span><span class='line'>
</span><span class='line'>GATHERING FACTS ***************************************************************
</span><span class='line'>ok: <span class="o">[</span>ceph-mon0<span class="o">]</span>
</span><span class='line'>ok: <span class="o">[</span>ceph-osd1<span class="o">]</span>
</span><span class='line'>ok: <span class="o">[</span>ceph-osd0<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>TASK: <span class="o">[</span>whoami<span class="o">]</span> ****************************************************************
</span><span class='line'>changed: <span class="o">[</span>ceph-mon0<span class="o">]</span>
</span><span class='line'>changed: <span class="o">[</span>ceph-osd0<span class="o">]</span>
</span><span class='line'>changed: <span class="o">[</span>ceph-osd1<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>PLAY RECAP ********************************************************************
</span><span class='line'>ceph-mon0                  : <span class="nv">ok</span><span class="o">=</span>2    <span class="nv">changed</span><span class="o">=</span>1    <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>ceph-osd0                  : <span class="nv">ok</span><span class="o">=</span>2    <span class="nv">changed</span><span class="o">=</span>1    <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>ceph-osd1                  : <span class="nv">ok</span><span class="o">=</span>2    <span class="nv">changed</span><span class="o">=</span>1    <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>这时可以在远程机器的用户目录上可以看到新产生了一个<code>whoami.rst</code>的文件。</p>

<p>关于ansible就介绍到这里，想要了解更多信息可以查看<a href="http://docs.ansible.com/">ansible的文档</a>。</p>

<h2><a href="https://github.com/ceph/ceph-ansible">Ceph-ansible</a></h2>

<p>这个github项目主要是利用了上面介绍的2个工具，使用vagrant来创建ceph需要的服务器VM，然后将ceph的环境搭建通过ansible的playbook脚本执行。</p>

<h3>执行步骤</h3>

<ul>
<li>下载ceph-ansible项目;</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone https://github.com/ceph/ceph-ansible.git
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>一行命令就可以完成环境搭建，完成后ceph的环境是: 3个mon，3个osd，1个rgw;</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>mon0                       : <span class="nv">ok</span><span class="o">=</span>16   <span class="nv">changed</span><span class="o">=</span>11   <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>mon1                       : <span class="nv">ok</span><span class="o">=</span>16   <span class="nv">changed</span><span class="o">=</span>10   <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>mon2                       : <span class="nv">ok</span><span class="o">=</span>16   <span class="nv">changed</span><span class="o">=</span>11   <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>osd0                       : <span class="nv">ok</span><span class="o">=</span>19   <span class="nv">changed</span><span class="o">=</span>7    <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>osd1                       : <span class="nv">ok</span><span class="o">=</span>19   <span class="nv">changed</span><span class="o">=</span>7    <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>osd2                       : <span class="nv">ok</span><span class="o">=</span>19   <span class="nv">changed</span><span class="o">=</span>7    <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span><span class='line'>rgw                        : <span class="nv">ok</span><span class="o">=</span>20   <span class="nv">changed</span><span class="o">=</span>17   <span class="nv">unreachable</span><span class="o">=</span>0    <span class="nv">failed</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redhat企业版无网环境下安装Dokuwiki]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/09/17/red-hat-enterprise-offline-env-install-dokuwiki/"/>
    <updated>2014-09-17T12:23:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/09/17/red-hat-enterprise-offline-env-install-dokuwiki</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-9/dokuwiki.png"></p>

<h2><a href="https://www.dokuwiki.org">Dokuwiki</a>介绍</h2>

<p>Dokuwiki是一个轻量级，高可用，免费开源的wiki软件，它不需要DB数据库，wiki内容直接以文本文件形式存储在文件系统上。Dokuwiki语法简洁易懂，管理维护简单，支持扩展多种模板展示wiki网站，还可以使用很多开源的插件来增加wiki的功能，比一般的传统wiki更加强大，更容易使用。</p>

<!--more-->


<h2>环境与版本</h2>

<ul>
<li>操作系统: Redhat Enterprise Linux Server release 6.4 (Santiago)</li>
<li>网络环境: 无法连接网络</li>
<li>Dokuwiki版本: 最新版</li>
<li>Apache Http Server版本: 2.4.10</li>
<li>PHP版本: 5.6.0</li>
</ul>


<p>下面是Dokuwiki的系统要求:</p>

<blockquote><p>DokuWiki System Requirements<br/>1. Webserver supporting PHP<br/>2. PHP version 5.2 or later</p></blockquote>


<h2>安装Apache Http Server(httpd)</h2>

<p>没有网络安装Linux软件是比较苦逼的，需要先安装该软件依赖的软件，如果依赖层次较深，就需要先安装完很多依赖软件后才能安装该软件。如果有网络的情况下，直接使用<code>yum install</code>或<code>apt-get install</code>就可以把相关依赖的软件都一起安装了。</p>

<p>先看一下httpd的安装要求:</p>

<ul>
<li>APR和APR-Util</li>
</ul>


<p>先确定系统已经安装了这2个软件，如果没有的话先到<a href="http://apr.apache.org">Apache APR</a>下载源码包，下载完成后分别解压到httpd的<code>scrlib/apr</code>和<code>srclib/apr-util</code>(<code>srclib</code>在httpd的压缩文件解压后的目录里面)，解压后的目录结构如下。后面在安装httpd的时候使用<code>./configure</code>命令时加上<code>--with-included-apr</code>就可以了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>httpd-2.4.10
</span><span class='line'>--|scrlib
</span><span class='line'>----|apr
</span><span class='line'>------|apr.exp
</span><span class='line'>------|...other apr files
</span><span class='line'>----|apr-util
</span><span class='line'>------|aprutil.dep
</span><span class='line'>------|...other apr-util files
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Perl-Compatible Regular Expressions Library (<a href="http://www.pcre.org">PCRE</a>)
PCRE安装比较简单，去pcre的网站下载源码包后解压，cd到解压目录执行下面的命令。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./configure
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>安装完依赖的软件后，就可以开始安装httpd了，到Apache的网站下载最新版的<a href="http://httpd.apache.org/download.cgi">Apache Http Server软件</a>，执行以下命令，最后一步是启动httpd服务，如果安装成功的话在浏览器输入<code>http://127.0.0.1</code>可以看到<code>It Works!</code>的字样。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./configure --prefix<span class="o">=</span>/usr/local/apache2 --with-included-apr
</span><span class='line'>make
</span><span class='line'>make install
</span><span class='line'>/usr/local/apache2/bin/apachectl -k start
</span></code></pre></td></tr></table></div></figure>


<h2>安装<a href="http://php.net">PHP</a></h2>

<p>安装PHP也需要安装其他软件，需要先安装<a href="http://xmlsoft.org">libxml2</a>，先到网站下载源码包，然后执行下面的命令安装。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./configure --prefix<span class="o">=</span>/usr/local/libxml2
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>安装完libxml2后，到PHP网站下载最新版的源码，然后执行下面的命令安装，注意configure要带&mdash;with-apx2参数，指向apache2的apx2命令。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./configure --prefix<span class="o">=</span>/usr/local/php --with-apxs2<span class="o">=</span>/usr/local/apache2/bin/apxs --with-libxml-dir<span class="o">=</span>/usr/local/libxml2
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>编辑httpd的配置文件即/usr/local/apache2/conf/httpd.conf，并添加以下内容:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>AddType application/x-httpd-php .php
</span><span class='line'>AddType application/x-httpd-php-source .phps
</span></code></pre></td></tr></table></div></figure>


<p>复制php.ini文件到PHP的安装目录，源码包里有2个php.ini文件，随便哪一个都可以。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cp ~/tools/php-5.6.0/php.ini-production /usr/local/php/php.ini
</span></code></pre></td></tr></table></div></figure>


<p>重启httpd。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>/usr/local/apache2/bin/apachectl -k restart
</span></code></pre></td></tr></table></div></figure>


<p>建立test.php文件放在httpd目录(/usr/local/apache2/)下的htdocs下，内容如下，通过浏览器查看<code>http://127.0.0.1/test.php</code>，如果显示了内容就表示PHP安装成功了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nb">phpinfo</span><span class="p">();</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>安装dokuwiki</h2>

<p>到dokuwiki网站下载源码包，执行下面的命令进行安装。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mv 下载目录/dokuwiki-xxxx.tgz /usr/local/apache2/htdocs
</span><span class='line'><span class="nb">cd</span> /usr/local/apache2/htdocs
</span><span class='line'>tar -xvf dokuwiki-xxxx.tgz
</span><span class='line'>mv dokuwiki-xxxx dokuwiki
</span></code></pre></td></tr></table></div></figure>


<p>查询httpd的用户是什么，这样才可以将dokuwiki的文件夹授权给这个用户，执行下面命令可以看到httpd进程的用户，我查到的是daemon。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>lsof -i | grep :http
</span><span class='line'>chown -R daemon:daemon dokuwiki
</span></code></pre></td></tr></table></div></figure>


<p>在浏览器中输入<code>http://127.0.0.1/dokuwiki/install.php</code>可以看到安装向导页面，根据向导安装dokuwiki即可。</p>

<h2>ubuntu有网络情况下安装dokuwiki</h2>

<p>看完一大篇没有网络的安装后，再来看有网络的情况下安装是多么的简单。</p>

<p>安装系统是Ubuntu 14.04 LTS，执行完下面的命令，dokuwiki就安装完成了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install apache2
</span><span class='line'>sudo apt-get install php5
</span><span class='line'><span class="nb">cd</span> /var/www
</span><span class='line'>sudo cp ~/Download/dokuwiki-xxx.tgz .
</span><span class='line'>sudo tar -zxvf dokuwiki-xxxx.tgz
</span><span class='line'>sudo mv dokuwiki-xxxx dokuwiki
</span><span class='line'>sudo chown -R www-data:www-data dokuwiki
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
