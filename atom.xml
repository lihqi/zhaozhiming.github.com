<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2014-04-09T22:06:27+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[swift单节点多dev环境部署]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/04/09/swift-multiply-nodes-deploy-in-one-machine/"/>
    <updated>2014-04-09T20:45:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/04/09/swift-multiply-nodes-deploy-in-one-machine</id>
    <content type="html"><![CDATA[<h2>环境目标</h2>

<ul>
<li>同一台机器</li>
<li>1台proxy server</li>
<li>5个storage node</li>
<li>每个storage node有2个dev</li>
</ul>


<!--more-->


<p></p>

<p>安装过程可以按照<a href="http://docs.openstack.org/developer/swift/development_saio.html">swift all in one</a>文档进行搭建，在操作过程中需要修改以下的地方。</p>

<h2>Using a loopback device for storage</h2>

<ol>
<li>Create the file for the loopback device:<br/>
<code>(这里的标题和编号是与saio的保持一致，这样方便大家按照saio的编号进行修改，后面的步骤与此相同，不再做说明)</code></li>
</ol>


<p>修改前：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo truncate -s 1GB /srv/swift-disk
</span></code></pre></td></tr></table></div></figure>


<p>修改后：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo truncate -s 500GB /srv/swift-disk
</span></code></pre></td></tr></table></div></figure>


<p>将xfs文件系统的大小改为500GB，原来的1GB太小不适合做测试。</p>

<ol>
<li>Create the mount point and the individualized links: <br/>
将原来的脚本修改为：</li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir /mnt/sdb1
</span><span class='line'>sudo mount /mnt/sdb1
</span><span class='line'>sudo mkdir /mnt/sdb1/1 /mnt/sdb1/2 /mnt/sdb1/3 /mnt/sdb1/4 /mnt/sdb1/5
</span><span class='line'>sudo chown <span class="k">${</span><span class="nv">USER</span><span class="k">}</span>:<span class="k">${</span><span class="nv">USER</span><span class="k">}</span> /mnt/sdb1/*
</span><span class='line'><span class="k">for </span>x in <span class="o">{</span>1..5<span class="o">}</span>; <span class="k">do </span>sudo ln -s /mnt/sdb1/<span class="nv">$x</span> /srv/<span class="nv">$x</span>; <span class="k">done</span>
</span><span class='line'>sudo mkdir -p /srv/1/node/dev1 /srv/1/node/dev2 /srv/2/node/dev3 /srv/2/node/dev4 /srv/3/node/dev5 /srv/3/node/dev6 /srv/4/node/dev7 /srv/4/node/dev8 /srv/5/node/dev9 /srv/5/node/dev10 /var/run/swift
</span><span class='line'>sudo chown -R <span class="k">${</span><span class="nv">USER</span><span class="k">}</span>:<span class="k">${</span><span class="nv">USER</span><span class="k">}</span> /var/run/swift
</span><span class='line'><span class="c"># **Make sure to include the trailing slash after /srv/$x/**</span>
</span><span class='line'><span class="k">for </span>x in <span class="o">{</span>1..5<span class="o">}</span>; <span class="k">do </span>sudo chown -R <span class="k">${</span><span class="nv">USER</span><span class="k">}</span>:<span class="k">${</span><span class="nv">USER</span><span class="k">}</span> /srv/<span class="nv">$x</span>/; <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建属于5个节点的文件夹，在每个节点文件夹下创建2个dev文件夹，表示1个节点有2个dev，其中region1有6台dev(1~6)，region2有4台dev(7~10)。</p>

<h2>Common Post-Device Setup</h2>

<p>Add the following lines to /etc/rc.local (before the exit 0): <br/>
修改前：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /var/cache/swift /var/cache/swift2 /var/cache/swift3 /var/cache/swift4
</span></code></pre></td></tr></table></div></figure>


<p>修改后：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /var/cache/swift /var/cache/swift2 /var/cache/swift3 /var/cache/swift4 /var/cache/swift5
</span></code></pre></td></tr></table></div></figure>


<p>因为有5个节点，所以增加了1个新节点的缓存文件夹。</p>

<h2>Setting up rsync</h2>

<p>Here is the default rsyncd.conf file contents maintained in the repo that is copied and fixed up above:</p>

<p>在/etc/rsyncd.conf文件追加以下内容：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>account6052<span class="o">]</span>
</span><span class='line'>max <span class="nv">connections</span> <span class="o">=</span> 25
</span><span class='line'><span class="nv">path</span> <span class="o">=</span> /srv/5/node/
</span><span class='line'><span class="nb">read </span><span class="nv">only</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>lock <span class="nv">file</span> <span class="o">=</span> /var/lock/account6052.lock
</span><span class='line'>
</span><span class='line'><span class="o">[</span>container6051<span class="o">]</span>
</span><span class='line'>max <span class="nv">connections</span> <span class="o">=</span> 25
</span><span class='line'><span class="nv">path</span> <span class="o">=</span> /srv/5/node/
</span><span class='line'><span class="nb">read </span><span class="nv">only</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>lock <span class="nv">file</span> <span class="o">=</span> /var/lock/container6051.lock
</span><span class='line'>
</span><span class='line'><span class="o">[</span>object6050<span class="o">]</span>
</span><span class='line'>max <span class="nv">connections</span> <span class="o">=</span> 25
</span><span class='line'><span class="nv">path</span> <span class="o">=</span> /srv/5/node/
</span><span class='line'><span class="nb">read </span><span class="nv">only</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>lock <span class="nv">file</span> <span class="o">=</span> /var/lock/object6050.lock
</span></code></pre></td></tr></table></div></figure>


<p>增加了新节点的account, container, object服务的同步配置。</p>

<p>You should see the following output from the above command:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>account6012
</span><span class='line'>account6022
</span><span class='line'>account6032
</span><span class='line'>account6042
</span><span class='line'>account6052
</span><span class='line'>container6011
</span><span class='line'>container6021
</span><span class='line'>container6031
</span><span class='line'>container6041
</span><span class='line'>container6051
</span><span class='line'>object6010
</span><span class='line'>object6020
</span><span class='line'>object6030
</span><span class='line'>object6040
</span><span class='line'>object6050
</span></code></pre></td></tr></table></div></figure>


<p>验证rsync可以看到新增的account, container, object信息。</p>

<h2>Optional: Setting up rsyslog for individual logging</h2>

<p>将/etc/rsyslog.d/10-swift.conf文件内容修改为：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Uncomment the following to have a log containing all logs together</span>
</span><span class='line'><span class="c">#local1,local2,local3,local4,local5.*   /var/log/swift/all.log</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Uncomment the following to have hourly proxy logs for stats processing</span>
</span><span class='line'><span class="c">#$template HourlyProxyLog,&quot;/var/log/swift/hourly/%$YEAR%%$MONTH%%$DAY%%$HOUR%&quot;</span>
</span><span class='line'><span class="c">#local1.*;local1.!notice ?HourlyProxyLog</span>
</span><span class='line'>
</span><span class='line'>local1.*;local1.!notice /var/log/swift/proxy.log
</span><span class='line'>local1.notice           /var/log/swift/proxy.error
</span><span class='line'>local1.*                ~
</span><span class='line'>
</span><span class='line'>local2.*;local2.!notice /var/log/swift/storage1.log
</span><span class='line'>local2.notice           /var/log/swift/storage1.error
</span><span class='line'>local2.*                ~
</span><span class='line'>
</span><span class='line'>local3.*;local3.!notice /var/log/swift/storage2.log
</span><span class='line'>local3.notice           /var/log/swift/storage2.error
</span><span class='line'>local3.*                ~
</span><span class='line'>
</span><span class='line'>local4.*;local4.!notice /var/log/swift/storage3.log
</span><span class='line'>local4.notice           /var/log/swift/storage3.error
</span><span class='line'>local4.*                ~
</span><span class='line'>
</span><span class='line'>local5.*;local5.!notice /var/log/swift/storage4.log
</span><span class='line'>local5.notice           /var/log/swift/storage4.error
</span><span class='line'>local5.*                ~
</span><span class='line'>
</span><span class='line'>local6.*;local6.!notice /var/log/swift/storage5.log
</span><span class='line'>local6.notice           /var/log/swift/storage5.error
</span><span class='line'>local6.*                ~
</span><span class='line'>
</span><span class='line'>local7.*;local7.!notice /var/log/swift/expirer.log
</span><span class='line'>local7.notice           /var/log/swift/expirer.error
</span><span class='line'>local7.*                ~
</span></code></pre></td></tr></table></div></figure>


<p>修改日志配置，将原来的local6指向storage node 5, 原来的expirer用local7来记录日志（<code>注意：后面在修改各个节点的服务配置文件时需要知道这些日志配置信息</code>）。</p>

<h2>Configuring each node</h2>

<ol>
<li>/etc/swift/object-expirer.conf</li>
</ol>


<p>修改前：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">log_facility</span> <span class="o">=</span> LOG_LOCAL6
</span></code></pre></td></tr></table></div></figure>


<p>修改后：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">log_facility</span> <span class="o">=</span> LOG_LOCAL7
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>新增account5的配置文件 /etc/swift/account-server/5.conf：</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>DEFAULT<span class="o">]</span>
</span><span class='line'><span class="nv">devices</span> <span class="o">=</span> /srv/5/node
</span><span class='line'><span class="nv">mount_check</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="nv">disable_fallocate</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nv">bind_port</span> <span class="o">=</span> 6052
</span><span class='line'><span class="nv">workers</span> <span class="o">=</span> 1
</span><span class='line'><span class="nv">user</span> <span class="o">=</span> swift
</span><span class='line'><span class="nv">log_facility</span> <span class="o">=</span> LOG_LOCAL6
</span><span class='line'><span class="nv">recon_cache_path</span> <span class="o">=</span> /var/cache/swift5
</span><span class='line'><span class="nv">eventlet_debug</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>pipeline:main<span class="o">]</span>
</span><span class='line'><span class="nv">pipeline</span> <span class="o">=</span> recon account-server
</span><span class='line'>
</span><span class='line'><span class="o">[</span>app:account-server<span class="o">]</span>
</span><span class='line'><span class="nv">use</span> <span class="o">=</span> egg:swift#account
</span><span class='line'>
</span><span class='line'><span class="o">[</span>filter:recon<span class="o">]</span>
</span><span class='line'><span class="nv">use</span> <span class="o">=</span> egg:swift#recon
</span><span class='line'>
</span><span class='line'><span class="o">[</span>account-replicator<span class="o">]</span>
</span><span class='line'><span class="nv">vm_test_mode</span> <span class="o">=</span> yes
</span><span class='line'>
</span><span class='line'><span class="o">[</span>account-auditor<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>account-reaper<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>新增container5的配置文件/etc/swift/container-server/5.conf：</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>DEFAULT<span class="o">]</span>
</span><span class='line'><span class="nv">devices</span> <span class="o">=</span> /srv/5/node
</span><span class='line'><span class="nv">mount_check</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="nv">disable_fallocate</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nv">bind_port</span> <span class="o">=</span> 6051
</span><span class='line'><span class="nv">workers</span> <span class="o">=</span> 1
</span><span class='line'><span class="nv">user</span> <span class="o">=</span> swift
</span><span class='line'><span class="nv">log_facility</span> <span class="o">=</span> LOG_LOCAL6
</span><span class='line'><span class="nv">recon_cache_path</span> <span class="o">=</span> /var/cache/swift5
</span><span class='line'><span class="nv">eventlet_debug</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nv">allow_versions</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>pipeline:main<span class="o">]</span>
</span><span class='line'><span class="nv">pipeline</span> <span class="o">=</span> recon container-server
</span><span class='line'>
</span><span class='line'><span class="o">[</span>app:container-server<span class="o">]</span>
</span><span class='line'><span class="nv">use</span> <span class="o">=</span> egg:swift#container
</span><span class='line'>
</span><span class='line'><span class="o">[</span>filter:recon<span class="o">]</span>
</span><span class='line'><span class="nv">use</span> <span class="o">=</span> egg:swift#recon
</span><span class='line'>
</span><span class='line'><span class="o">[</span>container-replicator<span class="o">]</span>
</span><span class='line'><span class="nv">vm_test_mode</span> <span class="o">=</span> yes
</span><span class='line'>
</span><span class='line'><span class="o">[</span>container-updater<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>container-auditor<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>container-sync<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>新增object5的配置文件/etc/swift/object-server/5.conf：</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>DEFAULT<span class="o">]</span>
</span><span class='line'><span class="nv">devices</span> <span class="o">=</span> /srv/5/node
</span><span class='line'><span class="nv">mount_check</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="nv">disable_fallocate</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nv">bind_port</span> <span class="o">=</span> 6050
</span><span class='line'><span class="nv">workers</span> <span class="o">=</span> 1
</span><span class='line'><span class="nv">user</span> <span class="o">=</span> swift
</span><span class='line'><span class="nv">log_facility</span> <span class="o">=</span> LOG_LOCAL6
</span><span class='line'><span class="nv">recon_cache_path</span> <span class="o">=</span> /var/cache/swift5
</span><span class='line'><span class="nv">eventlet_debug</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>pipeline:main<span class="o">]</span>
</span><span class='line'><span class="nv">pipeline</span> <span class="o">=</span> recon object-server
</span><span class='line'>
</span><span class='line'><span class="o">[</span>app:object-server<span class="o">]</span>
</span><span class='line'><span class="nv">use</span> <span class="o">=</span> egg:swift#object
</span><span class='line'>
</span><span class='line'><span class="o">[</span>filter:recon<span class="o">]</span>
</span><span class='line'><span class="nv">use</span> <span class="o">=</span> egg:swift#recon
</span><span class='line'>
</span><span class='line'><span class="o">[</span>object-replicator<span class="o">]</span>
</span><span class='line'><span class="nv">vm_test_mode</span> <span class="o">=</span> yes
</span><span class='line'>
</span><span class='line'><span class="o">[</span>object-updater<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>object-auditor<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Setting up scripts for running Swift</h2>

<ol>
<li>Construct the initial rings using the provided script:</li>
</ol>


<p>先修改bin/remakerings文件，在执行remakerings命令：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">cd</span> /etc/swift
</span><span class='line'>
</span><span class='line'>rm -f *.builder *.ring.gz backups/*.builder backups/*.ring.gz
</span><span class='line'>
</span><span class='line'>swift-ring-builder object.builder create 19 6 1
</span><span class='line'>swift-ring-builder object.builder add r1z1-127.0.0.1:6010/dev1 1
</span><span class='line'>swift-ring-builder object.builder add r1z1-127.0.0.1:6010/dev2 1
</span><span class='line'>swift-ring-builder object.builder add r1z2-127.0.0.1:6020/dev3 1
</span><span class='line'>swift-ring-builder object.builder add r1z2-127.0.0.1:6020/dev4 1
</span><span class='line'>swift-ring-builder object.builder add r1z3-127.0.0.1:6030/dev5 1
</span><span class='line'>swift-ring-builder object.builder add r1z3-127.0.0.1:6030/dev6 1
</span><span class='line'>swift-ring-builder object.builder add r2z1-127.0.0.1:6040/dev7 1
</span><span class='line'>swift-ring-builder object.builder add r2z1-127.0.0.1:6040/dev8 1
</span><span class='line'>swift-ring-builder object.builder add r2z2-127.0.0.1:6050/dev9 1
</span><span class='line'>swift-ring-builder object.builder add r2z2-127.0.0.1:6050/dev10 1
</span><span class='line'>swift-ring-builder object.builder rebalance
</span><span class='line'>swift-ring-builder container.builder create 19 6 1
</span><span class='line'>swift-ring-builder container.builder add r1z1-127.0.0.1:6011/dev1 1
</span><span class='line'>swift-ring-builder container.builder add r1z1-127.0.0.1:6011/dev2 1
</span><span class='line'>swift-ring-builder container.builder add r1z2-127.0.0.1:6021/dev3 1
</span><span class='line'>swift-ring-builder container.builder add r1z2-127.0.0.1:6021/dev4 1
</span><span class='line'>swift-ring-builder container.builder add r1z3-127.0.0.1:6031/dev5 1
</span><span class='line'>swift-ring-builder container.builder add r1z3-127.0.0.1:6031/dev6 1
</span><span class='line'>swift-ring-builder container.builder add r2z1-127.0.0.1:6041/dev7 1
</span><span class='line'>swift-ring-builder container.builder add r2z1-127.0.0.1:6041/dev8 1
</span><span class='line'>swift-ring-builder container.builder add r2z2-127.0.0.1:6051/dev9 1
</span><span class='line'>swift-ring-builder container.builder add r2z2-127.0.0.1:6051/dev10 1
</span><span class='line'>swift-ring-builder container.builder rebalance
</span><span class='line'>swift-ring-builder account.builder create 19 6 1
</span><span class='line'>swift-ring-builder account.builder add r1z1-127.0.0.1:6012/dev1 1
</span><span class='line'>swift-ring-builder account.builder add r1z1-127.0.0.1:6012/dev2 1
</span><span class='line'>swift-ring-builder account.builder add r1z2-127.0.0.1:6022/dev3 1
</span><span class='line'>swift-ring-builder account.builder add r1z2-127.0.0.1:6022/dev4 1
</span><span class='line'>swift-ring-builder account.builder add r1z3-127.0.0.1:6032/dev5 1
</span><span class='line'>swift-ring-builder account.builder add r1z3-127.0.0.1:6032/dev6 1
</span><span class='line'>swift-ring-builder account.builder add r2z1-127.0.0.1:6042/dev7 1
</span><span class='line'>swift-ring-builder account.builder add r2z1-127.0.0.1:6042/dev8 1
</span><span class='line'>swift-ring-builder account.builder add r2z2-127.0.0.1:6052/dev9 1
</span><span class='line'>swift-ring-builder account.builder add r2z2-127.0.0.1:6052/dev10 1
</span><span class='line'>swift-ring-builder account.builder rebalance
</span></code></pre></td></tr></table></div></figure>


<p>新ring环有2的19次方，6个副本，修改后重新生成ring环即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书笔记——乔布斯，做最好的自己，共创式教练]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/03/13/read-book-note-2014-3/"/>
    <updated>2014-03-13T21:39:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/03/13/read-book-note-2014-3</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-3/read_books.jpg"></p>

<p>这段时间出差比较频繁，出差无聊，就把之前想看的书看了，这里记一下读书笔记。</p>

<!--more-->


<p></p>

<h2>《乔布斯传》</h2>

<p><img class="right" src="http://zhaozhiming.github.io/images/post/2014-3/Jobs.jpg"></p>

<p>《乔布斯传》这本书应该很多人都看过，这本书记录了乔布斯创奇的一生。苹果的两位创始人——乔布斯和技术天才史蒂芬.沃茨，我在之前听到的更多的是关于沃茨的声音，因为沃茨一直是开发人员眼中大师级的代表，身兼超强软件硬件开发能力于一身的神一般的人物。我之前一直以为乔帮主是沾了沃茨的光才成功的。但实际上是，如果没有乔布斯，沃茨开发的苹果电脑可能永远也不会被那么多人所知道。沃茨和乔布斯是完全的两类人，一个是技术天才，一个是设计天才。但乔布斯的对伟大产品的追求，让他更加成功。</p>

<p>前几天在网上看到对三星和苹果高管的专访，三星的高管们谈的大多是什么市场份额、市场占有率，而现苹果几位高管谈的却是产品设计，比如这个东西的边框为什么要设计成这样，这个角度为什么要设计成圆弧等等。因为乔布斯一直就是这样给公司灌输理念的——做伟大的产品，做出改变世界的伟大产品。书里面有个有趣的故事，在乔布斯得癌症住院期间，他看到医生拿给他戴的氧气罩，觉得设计非常丑陋，用他的话来说就是“一坨屎”，坚决要求医生拿出多款氧气罩让他选择，最后还给氧气罩的设计提出了自己的建议，完全不顾自己是一个身患绝症的病人。</p>

<p>从乔布斯传里面还学到“专注”。乔布斯每年都会带领一班人去到一个与世隔绝的地方，在那里大家展开头脑风暴，对公司明年的发展提出各种观点，大家从里面选出十个最好的点子，写到白板上，然后乔布斯拿起笔划掉后面七个，说明年我们只做这三件事情。乔布斯回归苹果后，立即着手砍掉公司一些不赚钱的业务，让公司专注在开发新的Mac电脑上，使得苹果公司起死回生，慢慢走向了世界顶级企业之路。一个人的精力是有限的，如果什么都想学，什么都想做，那势必什么都学不精，什么都做不好。</p>

<p>乔布斯的伟大之处还在于其创造了“封闭一体化”的产品设计。与软件开发者崇尚的开源思想截然相反的一种设计理念，但是在乔布斯的掌控下却产生了一个又一个伟大的产品。这与乔布斯强大的控制欲有关，为了得到完美的用户体验，对端到端的控制是一个有效的办法。用户不需要知道产品里面的结构和原理，因为产品已经设计得足够简单，让你一上手就会使用。这种“封闭一体化”的设计也渐渐被业界青睐，Google等企业最近也在纷纷效仿。但乔布斯一辈子的对手——比尔盖茨说，这种封闭一体化设计，只有乔布斯可以成功。</p>

<h2>《做最好的自己》</h2>

<p><img class="right" src="http://zhaozhiming.github.io/images/post/2014-3/be_best_yourself.jpg"></p>

<p>李开复老师的一本激励人心的书，为广大中国大学生的未来之路提供了宝贵的建议。开复老师在书中讲了很多做人做事的方法和建议，并引用自己亲身经历的事迹来论证自己的观点，让人在学到这些道理的同时又对开复老师的人生经历多了一些了解。</p>

<p>开复老师也是一名技术很牛的开发人员，他自创了通过统计学进行语音识别技术的开发，使得识别率达到了96%，这是一个后人难以企及的高度，这也让他得到了苹果公司的青睐。在苹果公司工作的期间，他的建议让公司走向了数字媒体的发展方向，可惜在他任职期间，刚好是乔布斯离开苹果的那段时间，后来乔布斯极力想邀请他重回苹果，但开复老师的心已经放在中国大学生上面，从而没有答应请求。后来开复老师到了微软，一手创建了微软中国研究院，培养了一大批高素质的技术人才。”follow my heart&#8221;，是开复老师离开微软加入Google时说的话，Google当时面对中国对手——百度强有力的竞争，需要一位深谙东西方文化，德高望重的人物做中国区总裁，他是当时Google的最佳人选。加入Google后，由于受微软诉讼的限制，开复老师只能负责招聘方面的工作，但这正是他心中的理想工作，他又为Google输送和培养了大批优质的毕业生，这些人才的培养可能会使Google中国短时间内落后百度的研发速度，但对于Google的长期发展是非常有利的。</p>

<p>我最喜欢书中讲的一个故事，分享一下。</p>

<blockquote><p>年轻人问智者：智慧从哪里来？<br/>智者：正确的判断。<br/>年轻人问：正确的判断从哪里来？<br/>智者：经验。<br/>年轻人问：从哪里来？<br/>智者：错误的判断。</p></blockquote>


<p></p>

<p>最后祝开复老师早日康复。</p>

<h2>《共创式教练》</h2>

<p><img class="right" src="http://zhaozhiming.github.io/images/post/2014-3/Coach.jpg"></p>

<p>《共创式教练》指导如何成为一个既能帮助客户解决问题，帮助客户成长，又能和客户共同一起成长的教练，也是最近出差学习的内容之一。</p>

<p>共创式教练相信每个人都是可以自己解决问题的，每个人都是有资源的，教练不是给客户解决方案，而是通过各种技能技巧让用户知道如何自己解决问题，并在解决问题的过程中得到成长，同时教练和客户一起成长。</p>

<p>共创式教练的三大原则：自我实现，自觉选择，活在当下。这些原则的目的就是帮助客户提高潜能自己解决问题。另外还有各种比较有用的技巧，比如“强有力的问题”，“好奇心”，“聆听”，“直觉”等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[压力测试工具——Galting]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/02/28/hello-galting/"/>
    <updated>2014-02-28T07:30:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/02/28/hello-galting</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-2/gatling.png"></p>

<p>为什么要写Gatling呢？网上已经有一些介绍Gatling的好文章了，比如两位TW同事的文章，可以看<a href="http://www.infoq.com/cn/articles/new-generation-server-testing-tool-gatling">这里</a>（我知道Gatling也是因为这位作者介绍的），还有<a href="http://www.cnblogs.com/huang0925/p/3488313.html">这里</a>。主要是因为最近在使用Gatling做压力测试，感觉这个工具非常好用，所以想结合自己的使用情况也推荐一下。Gatling是基于scala写的一个开源的压力测试工具，它的特点是简单易用，测试报告简洁漂亮，api通俗易懂。</p>

<!--more-->


<p></p>

<h2>JDK1.7</h2>

<p>Gatling是基于jdk1.7开发的，所以还在用jdk1.6的同学需要先下载jdk1.7，才可以启动Gatling。顺便说一下，JDK1.7以后肯定是会替换JDK1.6的，但由于历史原因（主要是JDK1.6用的人实在太多了，我想也是由于JDK1.7升级的太晚了）大家都不想升级，我也这也是JAVA走下坡路的原因。</p>

<h2>Scala</h2>

<p>前面讲过Gatling是用scala写的，像scala、groovy和clojuer都是基于jvm开发的一种语言，不仅继承了java众多成熟的api和稳定的jvm，而且提供了更佳简洁易用的语法。基于某种语言的内核来重新设计一门新语言的这种做法，现在慢慢多了起来，这种做法的最大好处就是不用自己再重新设计编程语言底层相关的一些东西，而且可以使用原有语言大量的成熟api，让新语言就只专注地实现自己的功能，从而使新的语言性能稳定，易用性更高，甚至可以吸引一些原有语言的开发人员。</p>

<h2>DSL</h2>

<p>看过Galting的api的人就会发现，它的语法很像自然语言，比如测试一个get类型的http请求，它可能会这样写：</p>

<figure class='code'><figcaption><span>demo </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;demo&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;http://www.myweb.com/helloworld&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是很容易懂，这种就是基于DSL来写的代码，关于DSL可以看<a href="http://book.douban.com/subject/21964984/">这本书</a>，这本书我还没怎么看，等看完了以后再做分享，DSL不单单只是把代码写得像自然语言那样简单。</p>

<h2>API</h2>

<p>要想了解Gatling的各种api，这里推荐看Gatling源码里面的HttpCompileTest这个测试类，这里包含了http几乎所有的api使用示例。下面是截取的代码片段，全部代码可以看<a href="https://github.com/excilys/gatling/blob/f5aeee2492dedd665b0dcf0b5b60f0a2227a53b6/gatling-bundle/src/test/scala/io/gatling/bundle/test/HTTPCompileTest.scala">这里</a>。</p>

<figure class='code'><figcaption><span>demo </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">.</span><span class="n">group</span><span class="o">(</span><span class="s">&quot;C&#39;est ici qu&#39;on trouve des Poneys&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">post</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)</span>
</span><span class='line'>              <span class="o">.</span><span class="n">param</span><span class="o">(</span><span class="s">&quot;baz&quot;</span><span class="o">,</span> <span class="s">&quot;${qix}&quot;</span><span class="o">)</span>
</span><span class='line'>              <span class="o">.</span><span class="n">multivaluedParam</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="nc">Seq</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">)))</span>
</span><span class='line'>              <span class="o">.</span><span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">post</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">).</span><span class="n">multivaluedParam</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="s">&quot;${bar}&quot;</span><span class="o">))</span>
</span><span class='line'>              <span class="o">.</span><span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">).</span><span class="n">queryParam</span><span class="o">(</span><span class="s">&quot;omg&quot;</span><span class="o">,</span> <span class="s">&quot;foo&quot;</span><span class="o">))</span>
</span><span class='line'>              <span class="o">.</span><span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">).</span><span class="n">queryParam</span><span class="o">(</span><span class="s">&quot;omg&quot;</span><span class="o">,</span> <span class="s">&quot;${foo}&quot;</span><span class="o">))</span>
</span><span class='line'>              <span class="o">.</span><span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">).</span><span class="n">queryParam</span><span class="o">(</span><span class="s">&quot;omg&quot;</span><span class="o">,</span> <span class="n">session</span> <span class="k">=&gt;</span> <span class="s">&quot;foo&quot;</span><span class="o">))</span>
</span><span class='line'>              <span class="o">.</span><span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">).</span><span class="n">multivaluedQueryParam</span><span class="o">(</span><span class="s">&quot;omg&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">)))</span>
</span><span class='line'>              <span class="o">.</span><span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">).</span><span class="n">multivaluedQueryParam</span><span class="o">(</span><span class="s">&quot;omg&quot;</span><span class="o">,</span> <span class="s">&quot;${foo}&quot;</span><span class="o">))</span>
</span><span class='line'>              <span class="o">.</span><span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">).</span><span class="n">multivaluedQueryParam</span><span class="o">(</span><span class="s">&quot;omg&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="o">.</span><span class="n">uniformRandomSwitch</span><span class="o">(</span><span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)),</span> <span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Licorne&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">.</span><span class="n">randomSwitch</span><span class="o">(</span>
</span><span class='line'>          <span class="mi">40</span><span class="n">d</span> <span class="o">-&gt;</span> <span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)),</span>
</span><span class='line'>          <span class="mi">50</span><span class="n">d</span> <span class="o">-&gt;</span> <span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Licorne&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">.</span><span class="n">randomSwitch</span><span class="o">(</span><span class="mi">40</span><span class="n">d</span> <span class="o">-&gt;</span> <span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">.</span><span class="n">pause</span><span class="o">(</span><span class="n">pause2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里说下randomSwitch这个方法，这个方法可以模拟负载均衡，比如上面40d和50d的两行代码，会有40%的几率执行上面一行代码，50%的几率执行下面一行代码。</p>

<h2>Question</h2>

<p>如果看过上面的示例代码代码，还不知道具体的api怎么用，可以到<a href="https://groups.google.com/d/forum/gatling">google group</a>上面的分组提问题，很快就有人回答你的问题。github上面的问题区是让开发提bug或者feature用的，所以尽量不要在上面提问题。</p>

<h2>Report</h2>

<p>下面是Gatling的报告截图，界面很漂亮，而且参数很齐全，包括全部的请求数，成功/失败的请求数，请求的最大/最小/平均响应时间等。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-2/gatling_report.png"></p>

<h2>Http &amp; JMS</h2>

<p>目前Gatling支持的协议不多，毕竟是一个轻量级的测试工具，目前只支持Http和JMS(以前用的时候还只是支持HTTP)，随着Gatling的发展，以后肯定会支持更多的协议。现在大部分的系统和应用都是提供http协议的api，所以基于http协议的测试也能满足大部分的测试场景了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[番茄工作法和Bullet journal笔记法]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/02/26/tomato-work-method-and-bullet-journal/"/>
    <updated>2014-02-26T20:31:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/02/26/tomato-work-method-and-bullet-journal</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-2/tomato_and_bullet_journal.jpg"></p>

<p>番茄工作法是一套时间管理方法，Bullet journal是一套笔记记录的方法，最近通过学习这2个方法来管理自己的时间，让自己战胜拖延症。</p>

<!--more-->


<p></p>

<h1>番茄工作法</h1>

<p>番茄工作法的整体思路就是将时间分割成一个个小时间段，每个时间段25分钟，在每个时间段里面排除所有干扰，集中精力完成自己制定的任务，让工作效率最大化。</p>

<h4>为什么叫番茄工作法</h4>

<p>番茄工作法是弗朗西斯科·西里洛于1992年创立的一种时间管理方法，通过一种外貌类似番茄的厨房定时器设置好25分钟，在25分钟内把任务做完，根据定时器的形状命名为番茄工作法。其实不一定要找一个像番茄一样的计时器，可以根据自己需要选择任意的计时器，只要有定时的功能就可以，现在手机都有这个功能，也可以使用手机来代替。</p>

<h4>如何实施</h4>

<ul>
<li>制定计划。找一张纸和一支笔，列出自己接下来的时间要完成的任务清单，每个任务后面可以画上需要一个或者多个番茄钟，这个是你预估此项任务要花费的时间。比如要开发某个功能，自己预估这项任务可能需要2～3个小时，那就在任务后面画上4～6个番茄钟，这个就是你的预估时间量。</li>
<li>排除干扰。在你开始番茄钟之前，请把干扰源去掉，比如邮箱、电话、手机等，把它们关掉或者调成静音，以便自己在番茄钟内工作时不受打扰。</li>
<li>开始工作。扭动番茄钟，将其设置为25分钟后响铃，然后开始集中精力做你的任务。如果中间想起另外一件更重要的事情，请不要中断手头的任务去做它，而要将该事情记录到你的任务清单里面，然后回过头来继续你的任务，直到番茄钟响起。</li>
<li>完成休息。当番茄钟响起的时候，停止手头的工作，在之前画在任务后面的番茄钟上划掉一个，表示你已经完成了一个番茄钟。然后休息5分钟，让自己在休息时间内充分放松，为下个番茄钟做好准备。</li>
</ul>


<p>按照以上的步骤循环进行，直到完成自己的任务。</p>

<h4>有什么好处</h4>

<p>首先番茄钟工作法可以让你更有效率地完成自己的工作任务，想象一下自己平时工作的时候经常会被别人打断，打断过后需要一段时间才能回复到原来的工作状态，这样很浪费时间。有的人会觉得整天忙忙碌碌的，但回想一下基本没有完成什么任务。</p>

<p>这里还要说一下遇到外部的干扰的情况，比如同事来找你问问题这种干扰，可以根据具体情况处理：</p>

<ul>
<li>跟同事说明自己在番茄钟内，请他在番茄钟完了后再找你;</li>
<li>如果事情比较重要，停下手头的任务，先帮他解决问题，然后重新开始一个番茄钟，继续完成刚才的任务;</li>
</ul>


<p>其次番茄工作法让你养成一个习惯，每当你扭开番茄钟开始计时的时候，身体会暗示你现在准备开始工作，使你进入全身心投入的状态，让你更好的完成任务。</p>

<p>再次番茄工作法会锻炼你的时间预估能力，每次你都会为自己的任务预估一个时间，可能开始的时候不准确，但是时间久了以后，就会慢慢让自己预估的时间与实际完成的时间相符了。</p>

<p>最后是番茄工作法会带给你成就感，每当你划掉一个番茄钟或者完成一个任务，就会让自己觉得今天自己没有浪费时间，会真的看到自己实实在在做完了哪些事情。</p>

<p>我自己也是刚学习番茄工作法，还在养成习惯中。我试用了3个星期，基本上将之前拖延的一些任务完成了，比如写blog，之前老是拖拉想放到以后再写，导致几个月都没有更新，现在基本上一个月可以写到3～4篇blog了。所以我觉得番茄工作法还是比较有用的。</p>

<h1>Bullet Journal笔记法</h1>

<p>Bullet Journal是由纽约艺术家Ryder Carroll发明的。这一快速笔记系统简单灵活，十分容易上手。这里有<a href="http://www.bulletjournal.com/">它的网站</a>，感兴趣的同学可以看一下。</p>

<p>Bullet Journal很简单，20分钟就可以学会，只需要一个空白笔记本和一支笔。</p>

<h4>目录</h4>

<p>首先在笔记本的前面几页写上目录标题，然后在开始记录任务的每一页下角写上页数，以后笔记有更新，就可以随时更新目录的内容。</p>

<h4>目标和日期</h4>

<p>在目录后面，开始记录当月的目标，在目标页前面一页写上当月的日期，每一行记录一个日期，以后如果有什么重要的事件完成了，就可以在日期后面写上备注。</p>

<h4>每日日记</h4>

<p>Bullet Journal最重要的部分就是当天的日记，有3种标志：</p>

<ul>
<li>勾选框表示要完成的任务</li>
<li>圆圈表示特定时间要完成事情，可以在后面备注时间</li>
<li>圆点表示备注，可以记录任何事情，包括你的想法。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-2/bullet_journal.jpg"></p>

<p>这3种标志可以自由组合，比如勾选框下面可以有子勾选框，圆点，圆圈等，表示该项任务有子任务。根据自己需要灵活配置。</p>

<p>可能用文字描述比较难懂，不理解的同学可以看一下<a href="http://www.youtube.com/watch?v=GfRf43JTqY4">这里</a>的视频（youtube，需要翻墙），看完大概就可以理解了，Bullet Journal就是这么简单。它还可以配合番茄工作法一起工作，之前谈到番茄工作法也是需要列任务清单，我们就可以将任务清单用Bullet Journal的方式记录下来，然后进行操作。两者互相配合，效果更佳。</p>

<p>开始使用Bullet Journal的时候不需要买太好的笔记本，官网推荐的是米国一款感觉特别高级的笔记本，带小格子的，其实完全没有必要，只要找一本普通的笔记本就可以了（像我用的是公司发的笔记本，每年都会发一本，基本用不完，就拿来做Bullet Journal笔记本了），或者在淘宝上面买个差不多的，也就10～20块，还包邮哦亲～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[openstack swift中间件编写]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/02/17/how-to-write-a-openstack-swift-middle-ware/"/>
    <updated>2014-02-17T20:33:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/02/17/how-to-write-a-openstack-swift-middle-ware</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-2/swift.jpg"></p>

<p>关于openstack swift的资料可以看<a href="http://zh.wikipedia.org/wiki/OpenStack">这里</a>，<a href="http://www.programmer.com.cn/12403/">这里</a>还有<a href="http://www.ibm.com/developerworks/cn/cloud/library/1310_zhanghua_openstackswift/">这里</a>。</p>

<!--more-->


<p></p>

<h2>准备环境</h2>

<p>从零开始接触的同学可以先从swift的<a href="http://docs.openstack.org/developer/swift/development_saio.html">all in one</a>部署开始学习，在本机搭建好swift环境就可以进行简单的测试了。由于swift是用Python语言写的，如果要开发swift的中间件的还需要在本地安装Pythone的IDE，我比较喜欢JETBRAIN（他们比较出名的是JAVA的IDE——IDEA）公司的IDE——Pycharm。准备环境如下:</p>

<ul>
<li>Ububutn 12.04 LTS 64bit</li>
<li>Python2.7(虽然现在已经有Python3了，但swift是用2.x的Python写的，Python3不向后兼容Python2)</li>
<li>Pycharm3</li>
</ul>


<h2>中间件介绍</h2>

<p>swift通过提供基于HTTP协议的API给外界调用来完成对象存储的功能，我们从swift的各个部署说明里面可以看到，proxy server和storage node的配置文件里面都有一个<code>[pipeline:main]</code>，这个是swift各个服务的请求链，由多个中间件组成的一个中间件集合。pipeline有点像J2EE里面filter，每个http请求需要经过各个服务的pipeline。</p>

<figure class='code'><figcaption><span>proxy-server.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>...
</span><span class='line'>[pipeline:main]
</span><span class='line'># Yes, proxy-logging appears twice. This is so that
</span><span class='line'># middleware-originated requests get logged too.
</span><span class='line'>pipeline = catch_errors healthcheck proxy-logging bulk ratelimit crossdomain slo cache tempurl tempauth staticweb account-quotas container-quotas proxy-logging proxy-server
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>account-server.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>...
</span><span class='line'>[pipeline:main]
</span><span class='line'>pipeline = recon account-server
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h2>中间件编写</h2>

<p>了解了swift的基本功能流程后，我们就可以来写自己的中间件了。</p>

<p>没有写过中间件的同学可以通过学习其他中间件开始，在swift的源码中配置了很多中间件，有一些功能非常简单。比如name_check中间件，这个中间件的作用是拿来分析请求的url，判断url中是否有特殊字符，长度是否超出规定长度等。这个中间件没有配置在swift的标准配置中，有需要的可以自行加上本机的swift环境做测试。</p>

<p>我们先来看一下name_check中间件的配置信息：</p>

<figure class='code'><figcaption><span>proxy-server.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>[pipeline:main]
</span><span class='line'>pipeline = catch_errors healthcheck name_check cache ratelimit tempauth sos
</span><span class='line'>           proxy-logging proxy-server
</span><span class='line'>
</span><span class='line'>[filter:name_check]
</span><span class='line'>use = egg:swift#name_check
</span><span class='line'>forbidden_chars = &#39;&quot;`<span class="err">&lt;</span>&gt;
</span><span class='line'>maximum_length = 255
</span></code></pre></td></tr></table></div></figure>


<p>在上面的例子中，name_check中间件加在healthcheck这个中间件后面，filter:name_check下面的配置信息是name_check的一些配置参数。</p>

<ul>
<li>forbidden_chars: 指url中不能包含的特殊字符</li>
<li>maximum_length: 指url的最大长度</li>
</ul>


<p>我们再来看name_check的单元测试：</p>

<figure class='code'><figcaption><span>test_name_check.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">FakeApp</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">start_response</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">body</span><span class="o">=</span><span class="s">&quot;OK&quot;</span><span class="p">)(</span><span class="n">env</span><span class="p">,</span> <span class="n">start_response</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestNameCheckMiddleware</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">conf</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;maximum_length&#39;</span><span class="p">:</span> <span class="n">MAX_LENGTH</span><span class="p">,</span> <span class="s">&#39;forbidden_chars&#39;</span><span class="p">:</span>
</span><span class='line'>                     <span class="n">FORBIDDEN_CHARS</span><span class="p">,</span> <span class="s">&#39;forbidden_regexp&#39;</span><span class="p">:</span> <span class="n">FORBIDDEN_REGEXP</span><span class="p">}</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">test_check</span> <span class="o">=</span> <span class="n">name_check</span><span class="o">.</span><span class="n">filter_factory</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">conf</span><span class="p">)(</span><span class="n">FakeApp</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_valid_length_and_character</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">path</span> <span class="o">=</span> <span class="s">&#39;/V1.0/&#39;</span> <span class="o">+</span> <span class="s">&#39;c&#39;</span> <span class="o">*</span> <span class="p">(</span><span class="n">MAX_LENGTH</span> <span class="o">-</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="n">blank</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">environ</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;REQUEST_METHOD&#39;</span><span class="p">:</span> <span class="s">&#39;PUT&#39;</span><span class="p">}</span>
</span><span class='line'>                             <span class="p">)</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">test_check</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">body</span><span class="p">,</span> <span class="s">&#39;OK&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">......</span> <span class="c"># other test cases    </span>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">unittest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>看源码先从单元测试看起，可以以最快的速度了解源代码的功能。在这个测试案例中，测试先mock了一个虚拟的app，这个app不会真实的调用swift，而是会将http response返回预设好的值。<br/>
再看其中的一个测试案例，这里给定了一个最大长度url，然后通过调用name_check中间件，期望请求可以正常通过。</p>

<p>最后我们再来看name_check中间件的<a href="https://github.com/openstack/swift/blob/master/swift/common/middleware/name_check.py">源码</a>几个方法：
* <strong>init</strong>: 中间件的初始化方法
* <strong>call</strong>: 中间件被调用时触发的方法
* filter_factory: 这个是类以外的方法，在swift服务启动时会创建中间件实例，并加入到pipeline中。</p>

<p>学习完这个简单的中间件后，相信大家都可以依葫芦画瓢开始写自己的中间件了。</p>

<h2>修改配置文件</h2>

<p>编写完中间件之后，还需要将中间件配置到swift中，这样才算真正完成中间件的创建。</p>

<h4>首先先停止swift的服务</h4>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>swift@ubuntu:~$ swift-init main stop
</span></code></pre></td></tr></table></div></figure>


<h4>接着修改conf文件</h4>

<p>假设你增加的中间件是proxy server的中间件，就修改proxy-server.conf，自行决定要放到pipeline中的哪个位置，具体要看你的中间件是执行什么功能。</p>

<figure class='code'><figcaption><span>proxy-server.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>[pipeline:main]
</span><span class='line'>pipeline = catch_errors healthcheck your_middleware cache ratelimit tempauth sos
</span><span class='line'>           proxy-logging proxy-server
</span><span class='line'>
</span><span class='line'>[filter:your_middleware]
</span><span class='line'>use = egg:swift#your_middleware
</span><span class='line'>your_middleware_config1 = value1
</span><span class='line'>your_middleware_config1 = value2
</span></code></pre></td></tr></table></div></figure>


<h4>要修改swift的根目录下的setup.cfg文件</h4>

<figure class='code'><figcaption><span>setup.cfg </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>paste.filter_factory =
</span><span class='line'>  #这里加入一行自己的中间件，可以看下name_check中间件是怎么写的
</span><span class='line'>  name_check = swift.common.middleware.name_check:filter_factory
</span></code></pre></td></tr></table></div></figure>


<h4>执行命令重新安装swift</h4>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>swift@ubuntu:~$ cd swift目录
</span><span class='line'>swift@ubuntu:~$ sudo python setyp.py develop
</span></code></pre></td></tr></table></div></figure>


<h4>最后重启swift服务</h4>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>swift@ubuntu:~$ swift-init main start
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《黑客》读书笔记]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/02/10/make-harker-booke-note/"/>
    <updated>2014-02-10T21:41:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/02/10/make-harker-booke-note</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/hacker.jpg"></p>

<h2>简介</h2>

<p>《黑客》这本书介绍的是上世纪50～80年代的一段计算机历史，介绍第一代黑客的起源，第二代硬件黑客对世界的影响，第三代游戏黑客如何让电脑融入大众生活，类似“魔戒三部曲”一样宏伟的一部计算机编年史。</p>

<!--more-->


<p></p>

<h2>黑客的起源</h2>

<p>MIT AI实验室第九大楼是黑客的发源地，&#8221;hack&#8221;一词大概最早就是由MIT的学生提出的，原来是用来形容本校学生的一些精心策划的恶作剧，但AI实验室的黑客们对&#8221;hack&#8221;却有着极大的尊敬。一般一项技艺能称为&#8221;hack&#8221;，它必须有创新，有风格，有技术含量，AI实验室里面效率最高的人就非常骄傲的称自己为&#8221;hacker&#8221;。</p>

<h2>黑客马拉松</h2>

<p>熟悉Facebook的人对黑客马拉松都会有所了解，Facebook每年都会举办几场黑客马拉松编程比赛，在这些比赛中也诞生了很多伟大的产品，在《黑客》这本书里面讲到这一活动的早期雏形。在上个世纪50年代，个人电脑还没有普及，在MIT学校里面接触电脑的那一帮最早的黑客只能通过大型机编程。但是大型机就那么几台，所以喜欢编程的黑客们的上机时间非常有限，一般是一个人刚上完机，另外一个人就迫不及待地顶替他的位置编写自己的代码，甚至有些黑客觉得白天上机的时间不够，会晚上偷偷溜进实验室继续编程。虽然现在个人电脑已经很普遍了，但黑客们还是很喜欢这种长时间编程活动。</p>

<h2>黑客道德与敏捷开发</h2>

<p>敏捷开发中有什么？有快速迭代，代码所有制，团队自组织，了解敏捷开发的同学对此都比较清楚，而黑客道德里面也有一些很相似的共同点，我因此觉得黑客道德是敏捷开发的原型。</p>

<h4>信息应该免费</h4>

<p>黑客普遍认为信息应该免费共享（为什么说普遍？因为比尔盖茨不是这样认为的，他认为软件也是脑力劳动的成果，所有人应该尊重劳动成果，所以他写了那一封很著名的信——<a href="http://en.wikipedia.org/wiki/Open_Letter_to_Hobbyists">给电脑爱好者的公开信</a>），他们认为计算机（包括软件和硬件）应该公开其中的黑盒，让所有人参与到其中的开发并对其进行完善，这样计算机才能取得更大的进步。敏捷开发中的代码所有制与此观点相同，认为团队中的代码不应该为个人所有，应该所有人都有权对代码进行修改。</p>

<h4>快速开发产品原型</h4>

<p>在Facebook崇尚的黑客之道中，就有<code>Done is better than Perfect</code>的说法，就是说一开始不要追求产品的完美，先做出产品的原型得到市场的反馈，再慢慢根据反馈来完善产品。黑客们一直以来也是这样做的，遇到感兴趣的问题不会想太多，做了再说，快速把核心功能开发出来验证自己的想法，很多伟大的产品都源自于此。敏捷开发中的快速迭代也是类似的原理，甚至最近比较火的精益创业也是此种观点。</p>

<h4>对权威挑战</h4>

<p>黑客希望信息共享，能快速开发产品，对开发的效率要求是十分严格，他们对工具的追求像对完美艺术追求一样。但大部分权威机构的产品都不能满足黑客们的要求，它们笨重、不开放、设计保守。黑客们更倾向于自己开发工具，自给自足，然后开放给其他黑客一起使用，大家一起完善。这是一种对权威的挑战、蔑视，黑客与生俱来的叛逆精神。</p>

<h4>优雅简洁的代码</h4>

<p>在还是大型机的时代，电脑的内存和容量非常小，黑客在编程的时候需要让自己的代码尽可能的少，这样才能“塞进”机器里面运行。比如实现某个功能，如果某人只是按部就班的实现这个功能，大家可能会觉得他只是靠蛮力解决了问题，勉强算是一个程序员，但如果他使用了一种奇妙的算法，让代码量大大减少了，那么大家会觉得他是一个黑客，是一位追求完美的艺术家，比如比尔盖茨编写的4KB大小的BASIC程序就经常为黑客们所津津乐道。敏捷开发中对代码的重构推崇有加，介绍重构的资料最经典的是Martin.Flower<a href="http://book.douban.com/subject/1229923/">重构</a>一书，技术背后的思想我觉得跟这些早期黑客是一致的，要像艺术家一样对待自己的代码，追求优雅和完美，是一种对自我的超越。有个说法是，如果你看自己以前的代码觉得很烂，证明你已经进步了，看自己代码的时间间隔越短，证明你进步的越快，比如上午写完的代码，下午review时觉得太糟糕了，那恭喜你，你已经进步了。</p>

<h2>防御性编程</h2>

<p>最后说一下防御性编程，比较有意思。以前有一位外号叫“嘎吱船长”的黑客约翰.德拉浦，他是位天才的技术家，他喜欢的编程风格就是“防御式编程”。大部分人在修复bug时，一般都会找到出错的代码，然后改正它，而船长的改法比较特别，不修改出错的代码，而是加上另外一段代码来让程序自己发现问题后自己修复。比如下面的一段有错误的代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="k">def</span> <span class="nf">method_name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>      <span class="nb">sum</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">sum</span> <span class="o">==</span> <span class="mi">5</span><span class="p">:</span>
</span><span class='line'>          <span class="c"># do something</span>
</span><span class='line'>          <span class="o">...</span>      
</span></code></pre></td></tr></table></div></figure>


<p>正常人会这样改：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="k">def</span> <span class="nf">method_name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>      <span class="nb">sum</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">sum</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span> <span class="c">#一般会改这里</span>
</span><span class='line'>          <span class="c"># do something</span>
</span><span class='line'>          <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是船长是这样来修复：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="k">def</span> <span class="nf">method_name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>      <span class="nb">sum</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>
</span><span class='line'>      <span class="c">#在这里加代码...  </span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">sum</span> <span class="o">!=</span> <span class="mi">5</span><span class="p">:</span>
</span><span class='line'>          <span class="nb">sum</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="nb">sum</span> <span class="o">==</span> <span class="mi">5</span><span class="p">:</span>
</span><span class='line'>          <span class="c"># do something</span>
</span><span class='line'>          <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>让程序完成自我救赎~~~^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用腻了bootstrap的可以试试semantic-ui]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/12/16/hello-semantic-ui/"/>
    <updated>2013-12-16T07:16:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/12/16/hello-semantic-ui</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/semantic-ui.png"></p>

<h2>semancti-ui介绍</h2>

<p><a href="http://semantic-ui.com/">semantic-ui</a>是html/css框架的新贵，是继bootstrap和foundation之后的又一css神器。semantic-ui一出现在github上就受到火热的关注，一直在关注排行榜前列。semantic-ui最大的特点：充分利用CSS3动画特效，简洁实用漂亮的样式这些都是其最受欢迎的原因之一。</p>

<!--more-->


<p></p>

<h2>扁平化设计</h2>

<p>随着iOS 7的发布，扁平化设计(flat design)被更多人所熟识。什么是扁平化设计呢？在实际当中，扁平化设计一词所指的是抛弃那些已经流行多年的渐变、阴影、高光等拟真视觉效果，从而打造出一种看上去更“平”的界面。扁平风格的一个优势就在于它可以更加简单直接的将信息和事物的工作方式展示出来，减少认知障碍的产生。</p>

<p>在主流的css框架bootstrap中，开始是不支持扁平化设计的（bootstrap2），但在最新的bootstrap3中，几乎所有的组件都改用了扁平化的设计，但由于设计的不好，3的版本被很多原使用bootstarp的开发所诟病。</p>

<p>而semantic-ui是天生就是扁平化的设计，让人用起来更加觉得时尚、简洁。</p>

<h2>响应式设计</h2>

<p>什么是响应式设计？响应式Web设计(Responsive Web design)的理念是，页面的设计与开发应当根据用户行为以及设备环境(系统平台、屏幕尺寸、屏幕定向等)进行相应的响应和调整。具体的实践方式由多方面组成，包括弹性网格和布局、图片、CSS media query的使用等。无论用户正在使用笔记本还是iPad，我们的页面都应该能够自动切换分辨率、图片尺寸及相关脚本功能等，以适应不同设备;换句话说，页面应该有能力去自动响应用户的设备环境。这样，我们就可以不必为不断到来的新设备做专门的版本设计和开发了。</p>

<p>在semantci-ui的官网里面是这样说的：</p>

<blockquote><p>Every component is defined using em and rem so that components can be resized simply on the fly. Want a menu to get smaller on mobile? Simply have it&#8217;s font-size change using a media query.</p></blockquote>


<p>semantic-ui的每个组件都是使用“em”和“rem&#8221;，所以组件可以在不同的显示设备上自动地调整大小。</p>

<h2>semantic-ui兼容性</h2>

<p><strong>支持的浏览器如下</strong></p>

<ul>
<li>Last 2 Versions FF, Chrome, IE (aka 10+)</li>
<li>Safari 6</li>
<li>IE 9+ (Browser prefix only)</li>
<li>Android 4</li>
<li>Blackberry 10</li>
</ul>


<p>前几天在semantic-ui的github项目里提了个问题，问<a href="https://github.com/Semantic-Org/Semantic-UI/issues/431">semantic-ui是否支持IE6～8</a>，下面有个老外来了句：Support IE6? Are you creazy?呵呵，看来在国外还是不鸟IE的偏多。</p>

<p>在这里吐槽一下IE，IE可以算是浏览器界的一朵奇葩&hellip;不对，奇葩还有些褒意在里面，应该是浏览器界的一个毒瘤，一直阻碍着前端框架的发展，好在现在很多前端框架都不care IE了，比如angularjs，bootstrap等就直接只支持IE8+（不包括IE8），就连鼎鼎大名的Jquery也宣布从2.x版本开始不支持IE6～8，看来IE的淘汰是在所难免了哈。</p>

<p>不过IE9以后情况还是有所好转，《Javascript高级程序设计》的作者 Nicholas C. Zakas也让大家对IE9以后的版本可以另眼相看。但不管怎么样，IE6～8的各种bug和不兼容让web前端开发举步维艰是个不争的事实，该淘汰的时候就应该淘汰。最好的做法让用户升级浏览器或改用chrome，不要在兼容性上面浪费精力。</p>

<h2>semantic-ui示例</h2>

<p>刚刚进入到semantci-ui的网站的时候，就被它的各种控件样式吸引住了，感觉比bootstrap好看很多，又很符合当前流行的“扁平化设计”的风格,这里列一下几个看起来比较酷的控件。</p>

<h4>好看的按钮</h4>

<div class="ui buttons">
  <div class="ui button">Cancel</div>
  <div class="or"></div>
  <div class="ui positive button">Save</div>
</div>


<h4>代码如下</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui buttons&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui button&quot;</span><span class="nt">&gt;</span>Cancel<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;or&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui positive button&quot;</span><span class="nt">&gt;</span>Save<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<div class="ui divider"></div>


<p></p>

<h4>好看的标签</h4>

<div class="ui two column grid" style="display: block;">
  <div class="row">
    <div class="column">
      <div class="ui raised segment">
        <div class="ui ribbon label">Dogs</div>
        <p>Pretty nice animals.</p>
        <div class="ui teal ribbon label">Cats</div>
        <p>Also pretty nice animals, but can prefer solitude.</p>
        <div class="ui red ribbon label">Ogres and monsters</div>
        <p>Never seen one as a pet before, but I imagine they&#8217;d make pretty terrible companions.</p>
      </div>
    </div>
  </div>
</div>


<h4>代码如下</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui two column grid&quot;</span> <span class="na">style=</span><span class="s">&quot;display: block;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;column&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui raised segment&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui ribbon label&quot;</span><span class="nt">&gt;</span>Dogs<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;</span>Pretty nice animals.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui teal ribbon label&quot;</span><span class="nt">&gt;</span>Cats<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;</span>Also pretty nice animals, but can prefer solitude.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui red ribbon label&quot;</span><span class="nt">&gt;</span>Ogres and monsters<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;</span>Never seen one as a pet before, but I imagine they&#39;d make pretty terrible companions.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<div class="ui divider"></div>


<p></p>

<h4>好看的注解</h4>

<div class="ui comments">
  <div class="comment">
    <a class="avatar">
      <img src="http://zhaozhiming.github.io/images/post/photo2.jpg">
    </a>
    <div class="content">
      <a class="author">Dog Doggington</a>
      <div class="text">
        I think this is a great idea and i am voting on it
      </div>
    </div>
  </div>
</div>


<h4>代码如下</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui comments&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;comment&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;avatar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;/images/post/photo2.jpg&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;author&quot;</span><span class="nt">&gt;</span>Dog Doggington<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;text&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        I think this is a great idea and i am voting on it
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是非常酷？想使用这些很酷很炫的特性，就赶快使用semantic-ui吧～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[类似github的框架]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/10/25/something-like-github-can-build-by-self/"/>
    <updated>2013-10-25T07:36:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/10/25/something-like-github-can-build-by-self</id>
    <content type="html"><![CDATA[<p>github是程序员经常上的网站，但如果是在一家苦逼不能访问外网的公司，那不能把自己的代码托管在github上绝对是一件非常痛苦的事情。如果想要在公司内网也可以用github托管自己的代码，那就要自己搭建类似github的服务器，好在类似github的框架有很多，基本上都是基于git的，可以无缝衔接github而无需额外学习其他技术。</p>

<!--more-->


<h2>github企业版</h2>

<p><a href="https://enterprise.github.com/">github enterprise</a>，如果你的基金充足，github企业版绝对是你的首选。它基本上包涵了现有github网站上面的一切功能，你使用它甚至在视觉上都不会发生任何变化，界面都是和现有github一样的。而且安装十分方便，安装文件就是一个虚拟机镜像文件，只要用虚拟机加载就可以了。但刚才说了“如果你的基金充足”，说明它是要收费的，而且价格不菲，1个20人团队的license每年要5000美刀。国外有用到github企业版的公司有Bizzard（玩游戏的都知道），国内用的很少，我了解到的只有豆瓣在用，而且只用在其中一个或几个项目组（PS:豆瓣好像有自己的代码托管工具叫豆瓣Code，克隆github且增加了自己的特性）。</p>

<h2>gitlab</h2>

<p><a href="https://github.com/gitlabhq/gitlabhq">gitlab</a>，是用Ruby On Rails开发的一款开源代码托管框架，界面也是仿照github设计的，github用户可以快速上手，最重要的是它是一个开源的软件，这意味着你可以免费获取到软件，并将它部署到自己的机器上。但是gitlab的安装过程比较复杂，安装需要依赖以下几个工具：</p>

<ul>
<li>ruby 1.9.3+</li>
<li>git 1.7.10+</li>
<li>redis 2.0+</li>
<li>MySQL or PostgreSQL</li>
</ul>


<p>另外gitlab的markdown文件显示功能不是很好，比如markdown中的table和嵌入html在github上面是可以正常显示，但是在gitlab上面就不行。</p>

<h2>GitBucket</h2>

<p><a href="https://github.com/takezoe/gitbucket">GitBucket</a>，是一个用scala写的高仿github的代码托管框架。这个框架是今年才开发的，目前功能还不是很齐全，数据库也是用的内存数据库，但是github上面的基本功能都有。它的一个最重要的特点是<strong>安装非常方便</strong>，只需要下载gitbucket最新版本的war包，然后放到随便哪个web容器（Jetty，Tomcat）就可以启起来了，想尝尝鲜的同学可以试用一下。</p>

<h2>其他框架</h2>

<p>下面列举一些其他类似的框架，没怎么用过不好做评价，下面的括号表示用哪种语言写的。</p>

<ul>
<li><a href="http://gitorious.org/">Gitorious</a>(Ruby)</li>
<li><a href="http://www.indefero.net">InDefero</a>(PHP)</li>
<li><a href="http://repo.or.cz">Girocco</a>(Perl)</li>
<li><a href="http://eagain.net/gitweb/?p=gitosis.git">Gitosis</a>(Python)</li>
<li><a href="http://github.com/sitaramc/gitolite">Gitolite</a>(Perl)</li>
</ul>


<p>这里也有一篇文章是介绍类似github框架的框架，看<a href="http://blacka.com/david/2010/09/28/hosting-your-own-git-repositories/">这里</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何了解新技术（三）——微信公众号]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/10/24/how-to-know-new-technique-about-it-part3/"/>
    <updated>2013-10-24T07:32:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/10/24/how-to-know-new-technique-about-it-part3</id>
    <content type="html"><![CDATA[<p>随着微博等新兴社交工具的兴起，很多个人博客的博主都放弃了博客而去转战微博，但仍然有一些个人博客坚持了下来，在微信平台搭建了自己的公众帐号，以自身博客内容做起了自媒体。下面就介绍一下几个比较出名的公众帐号。</p>

<!--more -->


<h2>微信的公众帐号——小道消息，道哥的黑板报，MacTalk池建强等</h2>

<p><a href="http://wemedia.so.com/xiaodaoxiaoxi.html">小道消息</a>，“丁香园”技术负责人冯大辉，以科技人文类的文章，IT业界的小道消息吸引读者。作者前身是在淘宝做数据库方面的工作，技术能力很强，文笔也很犀利，后出来自主创业，所以文章涵盖了作者在技术，管理和成长等各方面的独到见解。</p>

<p><a href="http://taosay.net/">道哥的黑板报</a>，《白帽子讲Web安全》的作者，前淘宝（淘宝的牛人真不少啊）的高级安全专家，现在也出来自主创业。首先作者是一名黑客，而且是一名顶级黑客，手握很多未公开漏洞的人之一。文章大部分内容讲的是安全相关的东西，比如今年struts2漏洞相关的内容；还有讲一些黑客的传奇历史，比如最近介绍一名中国传奇黑客的成长史；还有其他跟技术，成长，文学相关的文章。</p>

<p><a href="http://macshuo.com/">MacTalk池建强</a>，原本是介绍Mac技巧的文章，但后来慢慢变成技术和人文结合的文章，时而技术时而随笔，最近作者还将其公众帐号上面的文章整理形成一本书叫《MacTalk·人生元编程》，在各大电子阅读平台上都有售。公众帐号之间经常有互相推荐，这个帐号也是在小道消息和道哥的推荐下我才关注的，慢慢发现作者的文笔风趣，文章内容也十分有料。现在这3个公众帐号号称微信三jian客(我也不知道哪个jian&hellip;)，他们还将在最近的上海Qcon上面做演讲，有兴趣的同学可以关注他们哦。</p>

<p><a href="http://www.guifabu.com/">硅发布</a>，是一个专注中国和美国科技信息、分析和观点的新媒体，在最近的中国自媒体评选中排名中国前十。</p>

<p>还有之前提到的比如infoQ，36氪，极客公园等也有自己的公众帐号，其实越来越多的IT网站都慢慢创建了自己的微信公众帐号，有兴趣的同学可以自行搜索一下。</p>

<h2>顺藤摸瓜</h2>

<p>最近在知乎上面看到了关于读书的一些讨论，有介绍书的，有讨论读书方法的等等。</p>

<p>其中有人提问如何读到好书？有人就回答道：想要读好书，就要从自己喜欢的书或作者开始，看看里面推荐的一些书和作者，这样顺藤摸瓜就可以找到很多好书，避免浪费时间去读一些垃圾书。其实了解技术的渠道也是一样的，从一个大牛开始了解，找他喜欢的书或者blog，顺藤摸瓜挨个这样找下去，就可以找到更多大牛和高质量的博客了。</p>

<p>说到这里要补充一下之前讲到的关于网站的内容，其实大部分的网站和博客的收录可以使用rss阅读器来完成，之前比较出名的是Google Reader，现在Google Reader关闭了可以用<a href="http://www.feedly.com">feedly</a>来代替，而且可以完整迁移原Google Reader里面的数据。</p>

<p>还有一个讨论是关于如何专注阅读的，对于程序员来讲技术书的阅读是必不可少的，但是技术书需要集中精神，不受外界干扰的阅读才能有所收获，简单分享一下讨论内容：</p>

<ul>
<li>首先要把看技术类书籍当成一件严肃的事情，不能跟看小说看杂志一样随便。</li>
<li>其次要选择一段完整的时间来做阅读，保证中间不要被干扰。</li>
<li>然后记录读书笔记。</li>
<li>最后是温习，用提问题或者画思维导图的方式来回顾之前看的内容。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何了解新技术（二）——电子杂志]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/10/17/how-to-know-new-technique-about-it-part2/"/>
    <updated>2013-10-17T20:45:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/10/17/how-to-know-new-technique-about-it-part2</id>
    <content type="html"><![CDATA[<p>除了平时浏览网站外，我们还可以通过手机来了解技术资讯。这里推荐一款APP——多看阅读，这是一款很不错的阅读APP，它以精品阅读来吸引喜欢读书的朋友，虽然上面的电子书没有亚马逊的多，但他们的电子书制作十分精良，每一本书都让人爱不释手，而且完美匹配各种移动设备的尺寸&hellip;不说了，说多了就有广告嫌疑了。下面就说说多看上面的电子杂志。</p>

<!--more -->


<h2>免费的电子杂志——极客公园、码农、虎嗅等</h2>

<p><a href="http://www.geekpark.net">极客公园</a>，内容和36氪相近，也是有很多质量很好的文章，介绍最新的APP或者创业公司。极客公园每个月都有一个主题，比如最近几期的智能硬件，打车应用等。还定期举办了一些活动，记得有一期邀请了很多IT大佬比如百度的李彦宏，360的周鸿祎，微信的张小龙等来做演讲，内容十分精彩。每月一期的电子杂志涵盖了这个月里面的精华文章内容，让你足不出户就可以了解最近发生的IT资讯。</p>

<p><img class="right" src="http://zhaozhiming.github.io/images/post/1074.948.big.jpg">  <br/>
<strong>码农</strong>，是图灵社区出版的一本关于程序员的电子杂志。这里面重点介绍的是技术，比如编程语言，算法，技术框架等，还有一些科技人文，比如有一期对几位国内的大牛进行访谈，介绍了他们从菜鸟蜕变到大牛的过程。因为是图灵社区出版的书，所以里面还有一些新书推荐，基本上都是关于技术类的。有点可惜的是，杂志好像不再更新了，最晚的一期是今年7月。</p>

<p><a href="http://www.huxiu.com">虎嗅</a>是一个有视角的，个性化商业资讯与交流平台，核心关注对象是包括公众公司与创业型企业在内的一系列明星公司。杂志的内容和36氪，极客公园有点类似，但更偏重于商业。杂志是从去年开始的，前面几期杂志是免费的，但从最近开始杂志开始收费，每本是￥2.99。</p>

<p><strong>36氪</strong>，之前讲的36氪网站，它在多看上面也有自己的电子杂志，而且是免费的。</p>

<p><strong>知乎周刊</strong>，这个是最近发现的比较好玩的一个电子杂志，上面的内容来自最近一周的精彩问答（应该是根据点赞的次数来统计的），每一期都有一个主题，比如关于旅游，设计，健身等。杂志的内容虽然不是全部都和技术相关，但有时候看看这种也可以扩展自己的视野，了解了解IT以外的世界。</p>

<h2>电子书和纸质书</h2>

<p>顺便说下电子阅读和纸质书阅读，我现在大部分的阅读都是通过智能手机（其实也可以通过其他移动设备，比如pad，kindle等），因为手机随身携带，无论走到哪都可以阅读，只要有空闲时间也可以阅读，anywhere，anytime，非常方便。纸质书在这一点上是不能与之相比的。</p>

<p>传统的纸质书长时间的专注，而现在外界干扰的东西太多了,以致我们很难长时间地阅读（比如有时候想起什么事情，或者看看网站，看看电视什么的等，也可能是我的自制力比较弱吧:(），特别是看技术类的书，如果无法专注的话，阅读的进度会非常缓慢，有时候我看一本技术书甚至要几个月的时间才看完:(。而电子书就不存在这个问题了，等车的时候可以看，等电梯的时候也可以看，一般这种碎片时间都比较短，专注相对比较容易，阅读内容可以较快吸收。</p>

<p>如果在公交车上拿出一本专业书来看，别人可能会觉得你装，但如果是用手机读书的话，别人就不知道你看的是什么书了，别人或许以为你和他读的一样的YY小说呢，这样既可以避开别人的眼光又可以心安理得的读自己的书，低调奢华又不失内涵，多好。</p>

<p>价格方面，电子书相比纸质书要便宜一半甚至一半以上，但电子书的数量现在还不是很多，可能是因为电子书是一种新兴的产物，还没有一种更快捷更成熟的方式来创建电子书。或者是因为传统观念还未转变过来，可能大家觉得电子书像以前的pdf一样，应该是免费的，付费去买一件虚拟的东西感觉“不划算”，没有利益就很难驱动生产。但随着接受电子书的用户越来越多，电子书的需求也会随着增多，这样在市场利益的驱动下，电子书的产量和质量也会越来越高，而纸质书将会慢慢淡出市场。</p>

<p>总结电子书的优点就是：随时随地，小巧灵活，价格便宜。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何了解新技术（一）——网站]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/10/15/how-to-know-new-technique-about-it-part1/"/>
    <updated>2013-10-15T21:28:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/10/15/how-to-know-new-technique-about-it-part1</id>
    <content type="html"><![CDATA[<p>说说自己平时了解业界新技术和技术资讯的途径，其实基本上都是国内的网站，或者是中文的blog，因为自己实在懒得费精力去看英文哈。</p>

<!--more -->


<h2>大型的科技资讯网和博客网——infoQ，博客园，36氪等</h2>

<p><a href="http://www.infoq.com/cn">InfoQ</a>，全球知名的IT资讯网站，在上面可以看到一些大神的访谈，前沿技术的介绍，知名网站的案例分析等，文章质量颇高(这里主要是指国内作者投稿的文章，而国外文章翻译过来的就没那么好了）。InfoQ还会定期举办QCon全球软件大会，今年5月份有幸参加了北京的QCon大会，认识到了安全专家道哥和golang国内传道者（也是go的web框架beego作者）astaxie谢，收获颇丰。。。额，跑题了。</p>

<p><a href="http://www.cnblogs.com">博客园</a>，聚集了大量高质量技术博客在上面，简洁的页面，漂亮的代码嵌入页面，没有太多恼人的广告（一点广告都没有不现实，毕竟网站也是要盈利的），这些都是我喜欢的。有很多技术大牛也在上面写自己的博客，比如新浪技术大V老赵（现在他的博客不知道搬哪了-_-）等。</p>

<p><a href="http://www.36kr.com">36氪</a>，是一家关注互联网创业，提供国内外最新互联网资讯的公司。这家网站提供的资讯主要是针对创业公司，创业项目，创新产品等，相对技术类的介绍比较少。其实我在PC上看浏览这个网站比较少，因为我关注了他们的电子杂志，每个月有一本（免费的，在多看阅读上有，电子杂志后面会介绍），上面收集了一个月内36氪的精华文章。</p>

<p>还有其他比较有名的网站和博客，比如：</p>

<p><a href="http://www.oschina.net">开源中国</a>——主要介绍开源项目，每天会介绍最新的国内和国外开源项目，定期也会举办一些线下活动。</p>

<p><a href="http://coolshell.cn">酷壳</a>——原来是技术大牛陈皓搭建的个人博客，后来由于超高的博客质量以及其观点的争议性，吸引了很多技术人员的关注，并在上面投稿发表文章。</p>

<p><a href="http://www.ruanyifeng.com/blog">阮一峰的网络日志</a>——IT技术名人，也是以高质量的博客内容出名。</p>

<p>如果想了解国外的IT技术资讯网站，可以看看知乎<a href="http://www.zhihu.com/question/19557033">这个问题</a>的答案。</p>

<p>可能有人会问，怎么没有介绍CSDN和ITeye？<br/>
说实话，我以前还是经常上这2个网站的，但现在，我只能说“呵呵”。<br/>
CSDN有时候开个首页要让我等半天，而且老是弹出广告让我很不爽，帖子内容也普遍低下，问题回答区基本没人（都上stackoverflow去了）。引用酷壳陈皓的话<code>CSDN算技术网站吗？</code><br/>
ITeye呢感觉沦为菜鸟集中地，看着帖子里面夹杂着大片大片无格式的代码就觉得头晕，而且大部分帖子还是转载的。<br/>
顺便再吐槽一下百度，前段时间酷壳的404页面写着<strong>“做环保的程序员，从不用百度开始”</strong>，百度觉得名誉遭到“贬损”，于是酷壳陈皓收到了百度的律师信。。。就我个人使用经验来说，我用百度来搜技术类的问题真的什么也搜不到，即使有也是上面那2个网站的链接，所以陈皓的告诫我觉得是对的。现在我一般是用Google加英文描述来查找我需要的答案，如果有时候出现Google访问不了的情况（再次BS一下GFW），就用Bing来搜，也能搜出跟Google差不多的答案出来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何重构一个圈复杂度超30的类]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/10/08/how-to-refactor-a-class-which-cyclomatic-complexity-over-30/"/>
    <updated>2013-10-08T20:43:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/10/08/how-to-refactor-a-class-which-cyclomatic-complexity-over-30</id>
    <content type="html"><![CDATA[<p>下面的类是一个老系统的代码，现在放到sonar上面进行扫描，扫出来的结果发现复杂度超过了30。</p>

<p>代码复杂度是指代码中的分支数量，比如有一个if分支，代码复杂度就加1，如果if中有“||”或者“&amp;&amp;”那么代码复杂度就加2，for和while同理。一般复杂度超过10的类就算是比较复杂的了，而这个类的复杂度竟然达到了30，代码的糟糕程度可见一斑，现在我们就来重构一下这个类的代码。</p>

<!--more-->


<p>原始文件在<strong><a href="https://github.com/zhaozhiming/zhaozhiming.github.com/blob/source/source/file/SomeClient(old).java">这里</a>。</strong><br/>
重构开始吧！</p>

<h2>多处String类型非空判断</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">StringUtil</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">username</span><span class="o">))</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="s">&quot;username can not be null&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">StringUtil</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">password</span><span class="o">))</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="s">&quot;password can not be null&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">udto</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="s">&quot;ICRUploadDTO can not be null&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>重构之后：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//将原来的地方替换为</span>
</span><span class='line'><span class="n">checkStringParamEmpty</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="s">&quot;username&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">checkStringParamEmpty</span><span class="o">(</span><span class="n">password</span><span class="o">,</span> <span class="s">&quot;password&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">checkStringParamEmpty</span><span class="o">(</span><span class="n">udto</span><span class="o">.</span><span class="na">getUrlPath</span><span class="o">(),</span> <span class="s">&quot;urlPath&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="c1">//新增一个方法</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">checkStringParamEmpty</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ICRClientException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">StringUtil</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">value</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot; can not be null&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>原代码中不止这3个参数的校验，还有很多，越多参数的校验，我们重构后的复杂度就会越低。</p>

<p><strong>代码复杂度变化：原来是3，修改后为1。</strong></p>

<h2>多String值判断</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(!</span><span class="n">udto</span><span class="o">.</span><span class="na">getPriority</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;0&quot;</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">udto</span><span class="o">.</span><span class="na">getPriority</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">udto</span><span class="o">.</span><span class="na">getPriority</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;2&quot;</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">udto</span><span class="o">.</span><span class="na">getPriority</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;3&quot;</span><span class="o">))</span>
</span><span class='line'><span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="s">&quot;priority must be 0/1/2/3&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>重构之后：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//将原来代码替换为</span>
</span><span class='line'><span class="n">checkValueWithinList</span><span class="o">(</span><span class="n">udto</span><span class="o">.</span><span class="na">getPriority</span><span class="o">());</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="c1">//新增一个方法：</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">checkValueWithinList</span><span class="o">(</span><span class="n">String</span> <span class="n">priority</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ICRClientException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;0&quot;</span><span class="o">,</span> <span class="s">&quot;1&quot;</span><span class="o">,</span> <span class="s">&quot;2&quot;</span><span class="o">,</span> <span class="s">&quot;3&quot;</span><span class="o">).</span><span class="na">contains</span><span class="o">(</span><span class="n">priority</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="s">&quot;priority must be 0/1/2/3&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>代码复杂度变化：原来是4，修改后为1。</strong></p>

<h2>对list的非空判断</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">list</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="s">&quot;list can not be null&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>重构之后：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//将原来的代码替换为</span>
</span><span class='line'><span class="n">checkValueWithinList</span><span class="o">(</span><span class="n">udto</span><span class="o">.</span><span class="na">getPriority</span><span class="o">());</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="c1">//新增一个方法</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">checkListNoNull</span><span class="o">(</span><span class="n">List</span> <span class="n">list</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ICRClientException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">ICRClientException</span><span class="o">(</span><span class="s">&quot;list can not be null&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>代码复杂度变化：原来是2，修改后为1。</strong></p>

<h2>多个catch的内容相同</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">code</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">code</span> <span class="o">=</span> <span class="n">httpClient</span><span class="o">.</span><span class="na">executeMethod</span><span class="o">(</span><span class="n">post</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">HttpException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>重构之后：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//将原来的地方替换为</span>
</span><span class='line'><span class="kt">int</span> <span class="n">code</span> <span class="o">=</span> <span class="n">executeHttpClient</span><span class="o">(</span><span class="n">httpClient</span><span class="o">,</span> <span class="n">post</span><span class="o">);</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="c1">//新增一个方法</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="nf">executeHttpClient</span><span class="o">(</span><span class="n">HttpClient</span> <span class="n">httpClient</span><span class="o">,</span> <span class="n">PostMethod</span> <span class="n">post</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ICRClientException</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">code</span><span class="o">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">code</span> <span class="o">=</span> <span class="n">httpClient</span><span class="o">.</span><span class="na">executeMethod</span><span class="o">(</span><span class="n">post</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">code</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>代码复杂度变化：原来是2，修改后为1。</strong></p>

<h2>if判断结果复杂化</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">code</span> <span class="o">==</span> <span class="mi">200</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">post</span><span class="o">.</span><span class="na">getResponseBodyAsString</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;ok&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">code</span> <span class="o">==</span> <span class="mi">500</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="n">post</span><span class="o">.</span><span class="na">getResponseBodyAsString</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="n">code</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">post</span><span class="o">.</span><span class="na">getStatusText</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>重构之后:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//将原来代码替换为</span>
</span><span class='line'><span class="k">return</span> <span class="nf">returnFinialResult</span><span class="o">(</span><span class="n">post</span><span class="o">,</span> <span class="n">code</span><span class="o">);</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="c1">//新增一个方法</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">returnFinialResult</span><span class="o">(</span><span class="n">PostMethod</span> <span class="n">post</span><span class="o">,</span> <span class="kt">int</span> <span class="n">code</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ICRClientException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">code</span> <span class="o">==</span> <span class="mi">500</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">ICRClientException</span><span class="o">(</span><span class="n">post</span><span class="o">.</span><span class="na">getResponseBodyAsString</span><span class="o">());</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">code</span> <span class="o">!=</span> <span class="mi">200</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">ICRClientException</span><span class="o">(</span><span class="n">code</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">post</span><span class="o">.</span><span class="na">getStatusText</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">post</span><span class="o">.</span><span class="na">getResponseBodyAsString</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;ok&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>代码复杂度变化：原来是4，修改后为3。</strong></p>

<h2>本地变量始终不为null</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">uploadToICR</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">,</span> <span class="n">ICRUploadDTO</span> <span class="n">udto</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ICRClientException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">HttpClient</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">PostMethod</span> <span class="n">post</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">httpClient</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpClient</span><span class="o">();</span>
</span><span class='line'>  <span class="c1">//some code here</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">post</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">post</span><span class="o">.</span><span class="na">releaseConnection</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">httpClient</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">httpClient</span><span class="o">.</span><span class="na">getHttpConnectionManager</span><span class="o">().</span><span class="na">closeIdleConnections</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>重构之后：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">uploadToICR</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">,</span> <span class="n">ICRUploadDTO</span> <span class="n">udto</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ICRClientException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">HttpClient</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpClient</span><span class="o">();</span>
</span><span class='line'>    <span class="n">PostMethod</span> <span class="n">post</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="c1">//some code here</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">post</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">post</span><span class="o">.</span><span class="na">releaseConnection</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>代码复杂度变化：原来是1，修改后为0。</strong></p>

<h2>读取IO流的方法，为什么要自己实现？</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">readData</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">ins</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">2048</span><span class="o">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">byte</span> <span class="n">data</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">2048</span><span class="o">];</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">((</span><span class="n">len</span> <span class="o">=</span> <span class="n">ins</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">2048</span><span class="o">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">newcount</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="n">len</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">newcount</span> <span class="o">&gt;</span> <span class="n">buf</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kt">byte</span> <span class="n">newbuf</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">Math</span>
</span><span class='line'>                        <span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">buf</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="o">,</span> <span class="n">newcount</span><span class="o">)];</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">newbuf</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
</span><span class='line'>                <span class="n">buf</span> <span class="o">=</span> <span class="n">newbuf</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">buf</span><span class="o">,</span> <span class="n">count</span><span class="o">,</span> <span class="n">len</span><span class="o">);</span>
</span><span class='line'>            <span class="n">count</span> <span class="o">=</span> <span class="n">newcount</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">count</span><span class="o">];</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">result</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ins</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在原代码里面自己实现了一个对读取IO流字节的方法，这个可以使用apache-io或者guava的API代替：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//使用apache io API的实现：</span>
</span><span class='line'><span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="n">IOUtils</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
</span><span class='line'><span class="c1">//使用guava API的实现：</span>
</span><span class='line'><span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes1</span> <span class="o">=</span> <span class="n">ByteStreams</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>代码复杂度变化：原来是很多，修改后为0。</strong></p>

<p>最终重构后的版本见<strong><a href="https://github.com/zhaozhiming/zhaozhiming.github.com/blob/source/source/file/SomeClient(new).java">这里</a></strong>，最后的代码复杂度从原来的30降到了3。<br/>
代码写的比较仓促，没有写单元测试，其实最好的做法是在重构之前先写好单元测试，然后再慢慢修改原来的代码，每修改一处地方跑一遍单元测试，这样可以保证你的重构没有破坏原来的代码逻辑。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的octopress配置]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/09/05/my-octopress-setting/"/>
    <updated>2013-09-05T07:33:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/09/05/my-octopress-setting</id>
    <content type="html"><![CDATA[<p>在github上用octopress搭建了自己的blog，octopress号称是“专门给黑客打造的博客（A blogging framework for
把hackers）”，使用Markdown语法来写blog确实感觉像写代码一样，而且写好的
把blog可以本地调试好了再上传到github的服务器，就像你的应用程序调试好了部署到服务器一样。</p>

<!--more-->


<p>
我最喜欢的是octopress的代码片段，简洁清晰，而且支持各种语言的高亮显示，你还可以在你的blog中嵌入不同的js框架（比如jquery或angularJs），展示js代码的效果。octopress支持的插件很多，还可以选择各种主题来装饰你的blog，下面我也按照惯例秀秀自己的octopress配置。</p>

<h3>主题</h3>

<p>你当然可以使用octopress的默认主题，但这样很容易和其他人的界面“撞衫”，想要让自己的octopress与众不同，就要定制自己的主题界面。在github上面可以找到octopress的第三方主题，地址在<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">这里</a>，另外还有一个网站也是专门介绍octopress主题的，地址在<a href="http://opthemes.com/">这里</a>。其中也有一些国人制作的主题界面，非常漂亮。</p>

<h3>评论插件</h3>

<p>原先使用的是国外的一个第三方评论插件Disqus，但由于国外多用facebook或twitter等帐号来登录这个插件，而这些网站都被我们伟大的GFW墙了，所以我选择了国内的一个同类产品——多说（其实应该是山寨Disqus的）。多说可以使用国内主流应用的帐号来登录，比如新浪微博或QQ等，可以将你blog中的评论保存到服务器上，后续不管你把blog迁移到什么地方，评论都不会消失。可以到<a href="http://duoshuo.com/">这里</a>下载。</p>

<h3>标签云</h3>

<p>octopress默认的只有目录（categories），没有标签（Tag），目录和标签是不一样的，每一篇blog只能归在一个目录里面，但却可以归在多个标签中。随着标签慢慢增多，可以将标签做成标签云，放在blog的边栏上，不仅非常美观，还可以看出你的blog关注方向有哪些。想做标签云，需要使用到2个插件，<a href="https://github.com/robbyedwards/octopress-tag-pages">robbyedwards/octopress-tag-pages</a>和<a href="https://github.com/robbyedwards/octopress-tag-cloud">robbyedwards/octopress-tag-cloud</a>。具体安装步骤请参照该github上的说明。</p>

<h3>同步插件</h3>

<p>在github上面搭建自己的octopress博客，有个缺点是在搜索引擎中没有收录你的网站，导致别人很难在google或者百度里面找到你的文章，如果你的blog放在比较大的博客网站的话（比如博客园、博客大巴等），在各大搜索网站就可以很容易搜到你的blog。我曾经试过在每篇blog上面加上“keywords&#8221;标签来记录post的关键字，希望搜索引擎可以搜录，但结果还是不行。<br/>
在网上搜了一下，发现有人写了一个octopress插件，可以将octopress的blog同步到几个比较大的博客网站，可以同步所有的blog，也可以同步最近一篇blog。网址在<a href="https://github.com/huangbowen521/octopress-syncPost">这里</a>。<br/>
上面几个是我的octopress主要插件，主题上面我还是不大满意，可能以后还会更新。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[facebook的工程师文化——《打造facebook》读后感]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/06/04/facebook-engineer-culture/"/>
    <updated>2013-06-04T07:36:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/06/04/facebook-engineer-culture</id>
    <content type="html"><![CDATA[<p>在今年北京的QCon大会上听了facebook早期中国籍工程师王淮的演讲，受益匪浅，主题是如何打造高效能团队，主要介绍他在facebook的一些经历和管理上的经验分享。现在的他是一名天使投资人，投资的领域有移动互联，支付，云应用等。他还写了《打造facebook》一书，讲了facebook的公司文化和他在其中的开发管理等经历。</p>

<!--more-->


<p></p>

<h3>工具文化</h3>

<p>这本书给我印象最深的一点是facebook的&#8221;工具文化&#8221;。为帮助工程师更好的进行产品开发，facebook对内部工具Tools是非常关注的。facebook极力强调，要将最好的工程师放到工具开发这一块，因为工具做好了，可以达到事半功倍的效果，所有人的效率都可以提高，而不仅仅是工程师。还有通过工具来解决流程上面的问题，比如公司在推广一些规范性的规则，传统的方法是反复强调，另一种是开发出好用的工具，将这些东西固定在工具里面，借助工具进行强制性推广。不断的更新和完善公司自己的工具，并将公司的企业文化也融入到工具之中，有时候比找到一个伟大的创意更重要。</p>

<p>facebook研发的工具有很多，比如新人刚加入facebook时，需要分配自己的开发服务器，facebook就有一个工具来管理公司的开发机器。在这个工具上，你可以看到所有机器的详细信息，包括分配给什么人，什么时间分配的，机器的配置信息等。在还未申请的机器上面，只需要点击一个按钮就会帮你安装好开发服务器，非常方便和简单。对于我们开发人员来说工作主要是写代码，facebook针对代码管理业开发了很多工具。比如有一款工具是在开发人员提交代码之前对代码进行检查，如果代码不符合代码规范或者没有写测试案例，工具会发出警告并交给开发人员修改。还有一款code review的工具叫Phabricator，开发人员可以在上面针对每一行代码进行讨论，如果代码有问题，代码审查者可以提问题，或者让代码提交者修改等，只有代码明确接受后，才可以提交到服务器的代码库中。这些工具的理念是将重复性的劳动交给电脑来执行，以&#8221;Don&rsquo;t Make Me Think&#8221;的方式来推广好习惯。</p>

<h3>黑客文化</h3>

<p>facebook一直强调公司的黑客文化，总部基地建有&#8221;黑客广场&#8221;，公司内部随处可见的黑客标志，facebook还会定期举行黑客马拉松(Hackathon)。像Google 允许员工用工作时间的20%来做自己喜欢的东西一样，Hackathon也是facebook让员工保持创造力，避免工作枯燥而失去工作激情的一种方式，在这个过程中，也催生了很多伟大的作品，比如timeline(时间轴)，全屏照片视图等。参加Hackathon虽然是自愿的，但facebook强烈建议每个员工都去参加Hackahton，甚至有的工程师因为要安排产品上线而无法参加Hackathon，公司会调整产品的上线时间来让工程师去参加Hackathon。</p>

<p>facebook的CEO 扎克伯格本身就是一个黑客，看过《社交网络》的朋友都会记得电影开始的那一段场景，扎克伯格做了一个哈佛版美女评选网站（Facemash），为了得到更多女同学的照片，他黑进了当时学生宿舍里面每个学生的电脑去获取他们同学的照片。扎克伯格想打造独一无二的企业文化和管理方式，他将公司的这种文化称之为&#8221;黑客之道&#8221;(Hacker Wiay)，他诠释说，黑客文化是一种持续改进的做事方法，黑客迅速发布小规模的更新，然后从中获取到经验，在下一次更新中更好的改进，直到产品完成（有点敏捷开发的意思）。Done is better than prefect（完成胜于完美），这是facebook对这种黑客精神的诠释。</p>

<p>facebook的黑客文化还包括一种亲身实践，积极进取的精神。Code Wins Arguments（代码胜于雄辩），在facebook的产品开发过程中，经常会有一个工程师站出来说，给我2天的时间我做个demo出来，证明我的想法是可行的。facebook不会有那种长达几天的马拉松会议，工程师们会开发出产品原型来证明是否行得通，在facebook每个工程师都是顶尖的人才，他们具有这样一种快速开发的能力。</p>

<p>书中除了谈到上面所讲的这些点外，还谈到了作者在facebook中的项目管理经验，适合做项目管理的同学参考借鉴，最后希望大家也喜欢facebook的黑客文化。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用Sonar定制自定义JS扫描规则（三）——SSLR JavaScript Toolkit 使用说明]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/05/20/use-sonar-create-customer-js-verify-rule-part-3/"/>
    <updated>2013-05-20T11:20:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/05/20/use-sonar-create-customer-js-verify-rule-part-3</id>
    <content type="html"><![CDATA[<p>在上一篇blog中讲了在sonar中如何新增自定义的JS规则，这里面比较难的地方是XPath语句的编写，而要编写正确的XPath语句，首先要拿到语法的AST，下面我们就来介绍如何使用SSLR JavaScript Toolkit 工具来得到源代码的语法树。</p>

<!--more-->


<p>首先通过在<a href="http://repository.codehaus.org/org/codehaus/sonar-plugins/javascript/sslr-javascript-toolkit/1.3/sslr-javascript-toolkit-1.3.jar">这里</a>下载SSLR JavaScript Toolkit 工具，下载下来是一个jar包，在cmd窗口使用java -jar sslr-javascript-toolkit-1.3.jar打开这个工具，操作界面如下：<br/>
<img src="http://zhaozhiming.github.io/images/post/02073536-58b547f5394041cdb795a717087eca35.png"></p>

<p>左上方的窗口是用来输入你的源代码，右上方的窗口是来显示你的AST，最下面的窗口是来输入你的XPath规则。</p>

<p>我们现在左上方输入一些简单的javascript代码，然后点击 Parse Source Code按钮，可以得到源代码的语法树：</p>

<p><img src="http://zhaozhiming.github.io/images/post/02074124-ca30984af1704101962348b52d4a5f34.png"></p>

<p>得到语法树后，我们也可以点击右边窗口的XML页面，得到的是语法树的XML文档。有了XML文档，就可以通过XPath轻松得到你想要的语句了。</p>

<p>举个例子：比如我想得到本地变量名，即var关键字后面的变量名，可以通过XPath的语法来查询。</p>

<p>在最下方的窗口输入XPath语法规则，点击Evaluate XPath按钮，如果语法正确，就会出现返回结果，并高亮选中你想要查询的代码，如下：</p>

<p><img src="http://zhaozhiming.github.io/images/post/02074943-45053229678b4effbec60cf2c363b076.png"></p>

<p>如果语法错误，右边的窗口会给出提示，如果查询语句不正确，任何源代码都不会被选中。更多的XPath语法可以参考<a href="http://www.w3schools.com/xpath/">http://www.w3schools.com/xpath/</a>。<br/>
总结：sonar其实很早就支持了对JS的代码校验，但是你如果想自己定制校验规则，最简单的方式就是通过sonar的web接口增加XPath规则，这个需要在XPath语法上多花点力气，如果写出来的查询语法不正确，可以多试几遍，用SSLR JavaScript Toolkit 可以很方便的调试。最后祝大家都可以在sonar上配置自己的自定义规则。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用Sonar定制自定义JS扫描规则（二）——自定义JS扫描规则]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/05/19/use-sonar-create-customer-js-verify-rule-part-2/"/>
    <updated>2013-05-19T11:20:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/05/19/use-sonar-create-customer-js-verify-rule-part-2</id>
    <content type="html"><![CDATA[<p>在上一篇blog中，我们将sonar几个需要的环境都搭建好了，包括sonar的服务器，sonar runner，sonar的javascript插件。现在我们就来讲如何自定义JS扫描规则。</p>

<!--more-->


<p>
实际上有3种方法可以自定义代码的校验规则：</p>

<ul>
<li>直接在sonar的web接口中增加XPath规则；</li>
<li>通过插件的功能来增加自定义规则，比如checkstyle，pmd等插件是允许自定义规则的；</li>
<li>通过新增一个代码分析器来实现自定义规则；</li>
</ul>


<p>sonar官方推荐的方式是使用最简单的XPath方式来增加自定义规则，如果语言太复杂或者XPath无法查询其结构的，再使用自定义插件的方式，所以我们这里重点介绍的是使用XPath的方式。</p>

<h3>使用XPath增加自定义JS规则</h3>

<p>sonar为大部分流行的语言（C, C#, C++, Cobol, Flex, JavaScript, PL/I, PL/SQL, Python and VB.NET）提供了一个简洁的方式来增加代码规则。这些新增规则必须使用<a href="http://en.wikipedia.org/wiki/XPath">XPath</a>来实现，这样的话语言的每一部分都可以映射到<a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree">Abstract Syntax Tree</a>（AST）。对于每一种语言，SSLR Toolkit 工具提供了代码转AST的功能，该工具具体的使用在下面会介绍，这里是<a href="http://repository.codehaus.org/org/codehaus/sonar-plugins/javascript/sslr-javascript-toolkit/1.3/sslr-javascript-toolkit-1.3.jar">SSLR Javascript Toolkit</a>工具的下载。如果对XPath不熟悉，可以参考这里看一下例子<a href="http://www.w3schools.com/xpath/">http://www.w3schools.com/xpath/</a>。<br/>
1、首先使用管理员的角色登录sonar，然后去到Settings > Quality Profile页面，选择Js规则（如下图所示）。</p>

<p><img src="http://zhaozhiming.github.io/images/post/02070803-9bce5fab1bf543059071fafff2ae37d8.png"></p>

<p>2、接着在Coding rules页面输入查询条件，找到XPath规则：</p>

<p><img src="http://zhaozhiming.github.io/images/post/02070943-c9a5b7732ea6478fba266555c308fc29.png"></p>

<p>3、查询结果出来后，点击Copy rule连接来新增规则：</p>

<p><img src="http://zhaozhiming.github.io/images/post/02071054-da90a48498234fc19d34aff75c84a104.png"></p>

<p>4、按照XPath的语法编写自己的规则：</p>

<p><img src="http://zhaozhiming.github.io/images/post/02071436-15c170e9f4eb4f6684d95df76fe6e628.png"></p>

<p>如果对XPath不熟悉，建议先学习一些XPath的语法，下面给出3个javascript xpath的规则：</p>

<h5>不要使用document.write:</h5>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>//callExpression/memberExpression[count(*) = 3 and primaryExpression[@tokenValue = &quot;document&quot;] and identifierName[@tokenValue = &quot;write&quot;]]
</span></code></pre></td></tr></table></div></figure>


<h5>if/else语句后面必须接大括号：</h5>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>//ifStatement/statement[not(block)]
</span></code></pre></td></tr></table></div></figure>


<h5>本地变量名以XX开头：</h5>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>//functionBody//variableDeclaration/IDENTIFIER[not(starts-with(@tokenValue,&#39;zzm&#39;))]
</span></code></pre></td></tr></table></div></figure>


<p>5、创建好规则之后，把规则设置为active，将规则的级别调高一些就会自动变为active，然后重新跑一下规则分析，这样新增的规则就生效了。</p>

<p><img src="http://zhaozhiming.github.io/images/post/02072520-4308a5a558d04ded998bb54f452c71f7.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用Sonar定制自定义JS扫描规则（一）——sonar环境搭建]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/05/19/use-sonar-create-customer-js-verify-rule-part-1/"/>
    <updated>2013-05-19T11:20:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/05/19/use-sonar-create-customer-js-verify-rule-part-1</id>
    <content type="html"><![CDATA[<p>接触sonar已经有段时间了，最早是在一个项目组里面听到这个框架，后来在公司持续集成活动的推动下，也逐渐学习了sonar的具体功能。sonar集成了findbugs，pmd，checkstyle各种静态代码检查工具的功能，并且可以将各种扫描结果组合成一张张漂亮的报告，功能很是强大。下面介绍一下如何使用sonar来自定义javascrpit的扫描规则。</p>

<!--more-->


<p>虽然使用过很多次sonar，但都是在别人搭好的环境上使用的，自己还没有真正搭建过，这里首先介绍一下sonar环境的搭建。</p>

<h3>sonar环境搭建</h3>

<p>首先到sonar官网上下载其最新版本，我下的是3.5.1。下下来是一个zip包，直接将其解压到你想要安装的目录就好了。</p>

<h4>使用H2内存数据库</h4>

<p>sonar服务的启动是要有数据库来支持的，sonar本身自带了H2内存数据库，可以直接使用。在解压目录下的conf目录下，有一个sonar.properties的配置文件是来保存sonar的配置，如果你使用的是H2数据库的话，将配置文件中的下面部分代码注释去掉即可。</p>

<figure class='code'><figcaption><span>sonar.properties </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="c">#sonar.jdbc.url:                            jdbc:h2:tcp://localhost:9092/sonar</span>
</span><span class='line'><span class="c">#sonar.jdbc.driverClassName:                org.h2.Driver</span>
</span></code></pre></td></tr></table></div></figure>


<p>在解压目录下的extras\database\mysql目录，有2个mysql的sql文件，其中1个是创建sonar数据库和用户的脚本，可以参照这个脚本来创建H2的sonar相关数据库和用户。</p>

<h4>使用外部数据库（以mysql为例）</h4>

<p>sonar官网强烈建议，如果你的产品只是学习或者练习用的demo，可以使用内存数据库，否则请使用外部数据库。sonar支持大部分主流的数据库，比如mysql，oracle，postgresql，Microsoft SQLServer。</p>

<p>我们以mysql为例，首先安装mysql（安装mysql的过程就不再详细描述，网上有很多），这里要注意将数据库的字符集设置为UTF-8。安装完成之后，同样修改conf目录下的sonar.properties文件，将mysql部分的配置项打开。然后在mysql中将上面提到的那个创建sonar数据库和用户脚本施行一遍。</p>

<figure class='code'><figcaption><span>sonar.properties </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="c">#----- MySQL 5.x</span>
</span><span class='line'><span class="c"># Comment the embedded database and uncomment the following line to use MySQL</span>
</span><span class='line'><span class="c">#sonar.jdbc.url:                            jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true</span>
</span></code></pre></td></tr></table></div></figure>


<h4>启动服务</h4>

<p>数据库配置完成之后，就可以来启动web服务了，去到解压目录下的bin目录，找到自己相关系统的目录，以64位windows系统为例，目录为：bin\windows-x86-64，运行该目录下的Startsonar.bat文件，如果启动没有报错的话，就可以在浏览器中输入：<code>http://localhost:9000</code>，查看sonar的主界面了。</p>

<h3>安装Sonar Runner</h3>

<p>上面搭建的只是sonar的服务平台，如果想用sonar来分析自己项目代码的话，可以有多种方式，比如ant、maven等，而sonar官网上推荐的是使用Sonar Runner来执行分析项目的操作。</p>

<p>首先去到sonar官网下载Sonar Runner的压缩包，和sonar的压缩包一样，先解压到你要安装的目录。然后增加SONAR_RUNNER_HOME这个环境变量，变量值为你runner的解压目录，然后将$SONAR_RUNNER_HOME$/bin的加到PATH变量后面（配置过java环境变量的同学都懂的）。这样就安装完成了，打开cmd验证一下，打出sonar-runner -h，如果出现下面的提示信息，即表示你的runner安装成功了。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>usage: sonar-runner <span class="o">[</span>options<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'> -h,--help             Display <span class="nb">help </span>information
</span><span class='line'> -X,--debug            Produce execution debug output
</span><span class='line'> -D,--define &lt;arg&gt;     Define property
</span></code></pre></td></tr></table></div></figure>


<p>安装完runner以后，在你的项目根目录下，增加sonar-project.properties文件，内容如下：</p>

<figure class='code'><figcaption><span>sonar.properties </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="c"># required metadata</span>
</span><span class='line'><span class="na">sonar.projectKey</span><span class="o">=</span><span class="s">my:project</span>
</span><span class='line'><span class="na">sonar.projectName</span><span class="o">=</span><span class="s">My project</span>
</span><span class='line'><span class="na">sonar.projectVersion</span><span class="o">=</span><span class="s">1.0</span>
</span><span class='line'>
</span><span class='line'><span class="c"># optional description</span>
</span><span class='line'><span class="na">sonar.projectDescription</span><span class="o">=</span><span class="s">Fake description</span>
</span><span class='line'>
</span><span class='line'><span class="c"># path to source directories (required)</span>
</span><span class='line'><span class="na">sonar.sources</span><span class="o">=</span><span class="s">srcDir1,srcDir2</span>
</span><span class='line'>
</span><span class='line'><span class="c"># path to test source directories (optional)</span>
</span><span class='line'><span class="na">sonar.tests</span><span class="o">=</span><span class="s">testDir1,testDir2</span>
</span><span class='line'>
</span><span class='line'><span class="c"># path to project binaries (optional), for example directory of Java bytecode</span>
</span><span class='line'><span class="na">sonar.binaries</span><span class="o">=</span><span class="s">binDir</span>
</span><span class='line'>
</span><span class='line'><span class="c"># optional comma-separated list of paths to libraries. Only path to JAR file is supported.</span>
</span><span class='line'><span class="na">sonar.libraries</span><span class="o">=</span><span class="s">path/to/library/*.jar,path/to/specific/library/myLibrary.jar,parent/*/*.jar</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The value of the property must be the key of the language.</span>
</span><span class='line'><span class="na">sonar.language</span><span class="o">=</span><span class="s">java</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Additional parameters</span>
</span><span class='line'><span class="na">sonar.my.property</span><span class="o">=</span><span class="s">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的配置项根据名字和说明大概知道是做什么用的了，填上自己项目中对应的值即可。然后打开cmd窗口，去到你的项目根目录下，执行sonar-runner命令，这样sonar就开始分析你的项目代码了，分析完成之后，在浏览器中刚才那个9000端口地址的网页中就可以看到你的项目了。</p>

<h3>安装Javascript插件</h3>

<p>使用管理员的角色登录sonar，根据这个路径进入更新中心：Settings > System > Update Center。在Available Plugins窗口找到javascript插件，点击其中的install按钮进行安装（如下图所示）。安装完后重启sonar服务器即可。</p>

<p><img src="http://zhaozhiming.github.io/images/post/01202231-c4477ac31ac3411686f1a4b98ae3ece1.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续交付——发布可靠软件的系统方法]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/03/05/continuous-delivery/"/>
    <updated>2013-03-05T15:53:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/03/05/continuous-delivery</id>
    <content type="html"><![CDATA[<p>断断续续看完了《持续交付——发布可靠软件的系统方法》一书，中间有几次由于事情太忙而中断，直到今天才把书读完。书的内容很精彩，大致分持续集成，测试和部署三大块，还有介绍包括软件开发、项目管理等其他内容。我下面介绍几个我印象比较深刻的内容。</p>

<!--more-->


<p></p>

<h3>预测试提交（pretested commit）</h3>

<p>简单来说，预测试提交就是在将代码提交到代码库之前，先在本地跑一遍持续集成上的操作，比如编译，单元测试等，保证提交的代码不会破坏基本的构建，然后再将代码提交到代码库。有一些持续集成的框架已经提供了这样的功能，可以在开发人员提交代码之后先执行基本构建，如果有问题，则通知开发人员且不会提交代码到代码库；如果没问题再提交代码到代码库，在CI上跑真正的构建。如下图所示：</p>

<p><img src="http://zhaozhiming.github.io/images/post/04143846-935bd06aa7d74c8cba067610a4f2143a.gif">
<img src="http://zhaozhiming.github.io/images/post/04143855-576fc9a7738e410d8de01ee7a9212723.gif"></p>

<p>这样的好处是，如果有人的提交了破坏构建的代码（比如编译不通过，单元测试失败等），没有预测试提交的话，只能等到破坏构建的人修复了代码后，其他人才能继续提交代码；而使用了预测试提交，破坏构建的提交根本不会提交到CI服务器上去，所以也就省去了等待其他人修复的时间了。</p>

<p>但是预测试提交只是做简单的本地构建，其他比较复杂的比如UAT测试，性能测试等，可能不会放到预测试提交中执行，因为如果要执行这些操作的话，开发人员在本地提交要等待的时间就会比较长，从而影响开发效率。</p>

<h3>部署流水线：一键部署，一键回退</h3>

<p>所谓的部署流水线，就是从提交代码开始，CI服务器进行代码编译、单元测试、验收测试，然后自动化部署，接着执行集成测试，UAT测试，性能（容量）测试等操作，一般是由多个CI任务来执行，每个CI任务都有上下游关系。比如，任务A执行代码编译，单元测试操作，任务B执行自动化部署操作，任务C执行集成测试，UAT测试等操作，这3个任务间的关系是：先执行任务A，执行完了再执行任务B，最后执行任务C，像生产流水线一样，组成了这样的一个部署流水线。最后产生的结果可能是一个完成了完整测试的一个产品交付物，或是将交付物部署到了生产环境上。</p>

<p>一般的持续集成只是在开发环境使用（像我目前所在的公司），而书中提到的部署流水线还包括了测试环境和类生产环境的部署。测试环境和类生产环境的部署不是由CI服务器自动触发的，而是有相关的操作人员（比如部署人员或者运营人员）通过点击相应的按钮来完成自动部署的操作，即一键化操作。这里的自动部署还可以选择产品交付物（ear、war或jar包）的某一个版本来进行部署，而不是简单的部署最新版本。</p>

<p>除了一键部署，还有一键回退。如果自动部署过程中有异常问题，或者是部署到指定环境后验证出现问题，操作人员可以通过点击相应按钮进行版本回退的操作，即一键回退。同样的，回退也可以选择相应要回退的交付物版本来进行回退，而不是简单的回退到上一个版本。</p>

<p>目前有一些CI工具已经支持了这些操作，比如ThoughtWorks的Go系统等。</p>

<h3>蓝绿发布，无停机发布</h3>

<p>无停机发布版本有很多种方法，这里只介绍蓝绿发布的方法。所谓的蓝绿发布，指的是系统的两个版本，蓝色的表示已经在生产上运行的版本，绿色表示即将发布的新版本。首先将两套版本的系统都启动起来，现有的用户请求连接的还是旧的蓝色版本，而新的绿色版本启动起来后，观察有没有启动的异常，或者其他一些异常，如果没有问题的话，再将现有的用户请求连接到新的绿色版本。对于用户来说，版本的切换是透明的，系统在发布过程中没有中断过。这样就达到了无停机发布的目的。</p>

<p>如果切换到新的绿色版本后，发现有故障或者异常，可以随时切换到旧的蓝色版本，这样同样可以达到无停机回滚的目的。但是要注意的是，在使用新的绿色版本过程中发现异常需要回滚，这时用户已经使用系统而产生了一些数据，这时候需要在回滚的同时，将数据同步到旧的蓝色版本环境中，或者根据判断是否放弃这些数据。也可以在绿色版本发布后，先用小众的用户做一些操作，如果发现没有问题，再将所有用户请求切换到绿色版本中来。</p>

<h3>坚持主干修改，不推荐分支操作</h3>

<p>在日常的开发中，经常会遇到这样一种情况。系统的一个版本即将发布生产，这个时候只能做一些测试工作和严重Bug的修复，而新的功能需求又需要继续开发，如果在现有的代码中继续修改的话，可能会影响新版本的发布。通常在这种情况下，很多开发团队会选择在版本控制管理器上拉一个分支出来，在新的分支上做新需求的开发，而在老的分支上做系统测试和bug修复，老的分支最终会发布到生产上。</p>

<p>首先说下这种做法有什么问题。新拉出来的分支最终是要合并到老的主干分支上去的，如果合并的间隔时间很长，到了合并代码的时候就会出现很多问题，甚至有些功能可能需要在老的分支上重新实现。第二个问题，新分支如何确保没有问题？如果已经有持续集成环境的话，对于新的分支就需要重新再搭建一套持续集成环境来跑每天提交的代码，增加了人力和资源的消耗。最终分支被合并到主干后，分支是要被废弃掉的，所以可以说分支的代码是一种开发上的浪费，即使它最终被合并到主干上。总的来说，分支操作跟持续集成是对立的，如果是只有一套持续集成环境，就必须频繁地合并分支代码到主干才不会有问题，但一般合并的时间都会比较长，因为要发布的主干代码要等到发布后才允许合并；如果有多套持续集成环境，又需要增加相关的人力去维护，等分支被合并到主干后，新增的持续集成环境也不需要了，这又是一种资源的浪费。</p>

<p>所以推荐的做法是坚持在主干上做修改，而不是拉分支。如何在主干上做大动作的修改，而又能确保不会破坏即将发布的功能，书上介绍了很多方法，包括“提取抽象层”、将大的修改分解成多而小的修改等，后者可以让每一次提交的小修改都可以通过持续集成上面的各种测试，从而保证主干上的功能不被破坏。这样做的好处是，你始终只需要维护一套代码，不需要做额外的合并工作，不会产生合并代码后的问题，而在持续集成上始终对主干代码进行构建，一旦有问题可以马上发现，缺陷发现的越早修复的成本也就越低。</p>

<h3>小结</h3>

<p>此书是TW公司的人出的，是很多战斗在一线的开发人员的经验总结，也是获得 jolt 大奖的书籍。有些内容比较深，需要有多年开发经验才好理解，正在实施敏捷或者持续集成的同学可以找来看看，一定会对你的工作有所帮助的，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jenkins插件开发（四）-- 插件发布]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/02/04/jenkins-plugins-develop-part-4/"/>
    <updated>2013-02-04T20:47:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/02/04/jenkins-plugins-develop-part-4</id>
    <content type="html"><![CDATA[<p>上一篇blog介绍了插件开发中要注意的一些问题， 我们再来介绍插件开发完成后，如何上传到jenkins的插件中心（这里假设你的代码是放在github上的，使用svn或其他版本管理工具的请参考其他文章）。</p>

<!--more-->


<h3>组织授权</h3>

<p>首先去到google group（被伟大的GFW和谐了，只能翻墙访问，如何翻墙不在这里讨论）的jenkins开发列表（jenkinsci-dev@googlegroups.com）里发帖告诉组织者，你开发的插件id是什么，插件功能是做什么的，还有你的github用户名是什么。组织者如果觉得没问题，就会在jenkins 的github上给你创建一个以你插件名称命名的代码库，然后在github上将你拉入jenkins的组织，这样就可以在这个代码库上添加你的插件代码了。如果你在github上已经有了自己插件的代码库，也可以将地址告诉组织者，这样他会fork你的代码库，如果是这样的话你需要在更新了你原仓库的代码后，再将jenkins仓库上的代码同步。</p>

<h3>修改POM文件</h3>

<p>再来是修改项目的pom文件，需要增加一些信息，这样发布的时候才可以正确显示你的插件内容。首先是你的源码控制管理配置，增加配置如下：</p>

<figure class='code'><figcaption><span>pom.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;scm&gt;</span>
</span><span class='line'>    <span class="nt">&lt;connection&gt;</span>scm:git:ssh://github.com/jenkinsci/MYPLLUGINNAME.git<span class="nt">&lt;/connection&gt;</span>
</span><span class='line'>    <span class="nt">&lt;developerConnection&gt;</span>scm:git:ssh://git@github.com/jenkinsci/MYPLUGINNAME.git<span class="nt">&lt;/developerConnection&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url&gt;</span>https://github.com/jenkinsci/MYPLUGINNAME<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/scm&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>插件的WIKI页面（后面会说明如何添加WIKI）：</p>

<figure class='code'><figcaption><span>pom.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project&gt;</span>
</span><span class='line'>  ...
</span><span class='line'>  <span class="nt">&lt;url&gt;</span>http://wiki.jenkins-ci.org/display/JENKINS/My+Plugin<span class="nt">&lt;/url&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有维护人员信息：</p>

<figure class='code'><figcaption><span>pom.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project&gt;</span>
</span><span class='line'>  ...
</span><span class='line'>  <span class="nt">&lt;developers&gt;</span>
</span><span class='line'>    <span class="nt">&lt;developer&gt;</span>
</span><span class='line'>      <span class="nt">&lt;id&gt;</span>devguy<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>      <span class="nt">&lt;name&gt;</span>Developer Guy<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>      <span class="nt">&lt;email&gt;</span>devguy@developerguy.blah<span class="nt">&lt;/email&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/developer&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/developers&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>发布插件</h3>

<p>最简单的方式就是执行以下命令：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> mvn release:prepare release:perform
</span></code></pre></td></tr></table></div></figure>


<p>如果发布成功（窗口提示BUILD SUCCESS 字样）就表示你的插件已经发布到jenkins的更新中心了，不过一般要等个一到半天更新中心才会更新。</p>

<p>一般第一次发布都会有一些问题，没有那么容易成功，这里再介绍一下发布过程中容易出现的问题。</p>

<p><strong>插件版本没有以-SNAPSHOT 结尾。</strong>可能有些同学会将-SNAPSHOT结尾的版本号给改成一个正式的版本号，比如1.0，如果是这样的话，发布的时候就会报错。因为jenkins 插件发布的过程中会将你的预设版本号（比如 1.0-SNAPSHOT）改成一个正式的版本号 1.0，然后提交到代码仓库，在检查插件版本号的时候，如果发现不是预设版本号（以-SNAPSHOT结尾）就会报错，所以大家不用担心自己的插件版本号命名问题，在插件发布的时候，会自动帮你修正为正式版本号的。</p>

<p><strong>发布出错回滚。</strong>如果在插件发布的过程中出错，重新再执行上面的命令是不行的，会报版本已存在的错误，需要先执行一下下面的命令来清除出错的发布信息。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> mvn release:clean
</span></code></pre></td></tr></table></div></figure>


<p><strong>Github 无法push。</strong>发布的过程中会使用git将你的代码push到github上，有时候会报权限不允许的问题（Permission denied），那可能是你的github配置有问题，可以参考<a href="https://help.github.com/articles/generating-ssh-keys">这里</a>来设置你的SSH或者<a href="https://help.github.com/articles/error-permission-denied-publickey">这里</a>看看是否其他问题。</p>

<h3>WIKI页面</h3>

<p>发布好了你的插件之后呢，我们需要在jenkins的官网上添加关于你插件的WIKI，以便让使用你插件的用户知道插件的信息。</p>

<p>首先要在jenkins官网上申请一个帐号，申请成功之后你就可以在插件主页上添加你的插件页面了。去到插件主页面（<a href="https://wiki.jenkins-ci.org/display/JENKINS/Plugins">https://wiki.jenkins-ci.org/display/JENKINS/Plugins</a>），点击右上角的Add链接，选择page选项，就可以进入页面编写了。<br/>
在WIKI页面中写上你的插件名称，内容要加上下面的语句：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> {jenkins-plugin-info:pluginId=your-artifact}
</span><span class='line'>{excerpt}  your plugin description  {excerpt}
</span></code></pre></td></tr></table></div></figure>


<p>your-artifact要写你的插件id，这样页面就会自动去加载插件的相关信息。excerpt里面的是你插件描述，会显示在插件主页上。</p>

<p>最后是在WIKI label上加上插件的分类，比如是UI相关的插件就写plugin-UI，报告类相关的就写plugin-report，这样在插件主页上会将你的插件归到某类插件下。</p>

<p>这里介绍编写WIKI的一个小窍门，可以先进入其他插件页面，然后点击右上角的Edit链接，这样就进入了页面的编辑页面，在这里就可以看到其他插件是如何编写的，参考一下再来编写自己的WIKI页面吧。</p>

<h3>持续集成</h3>

<p>在上传你插件代码的时候，可能你会想使用持续集成来跑你的测试案例，看看上传的代码是否有破坏原有的功能。没有问题，可以使用BuildHive@CloudBees来为你Github上的代码做持续集成。</p>

<p>使用很简单，先进入这个网址<a href="https://buildhive.cloudbees.com/job/jenkinsci/">https://buildhive.cloudbees.com/job/jenkinsci/</a>，然后使用你的github帐号登录，接着勾选你想要做持续集成的github项目。这样该项目每次提交代码之后，BuildHive@CloudBees就会为你做持续集成，如果有问题的话会发邮件通知你。  <br/>
到这里，jenkins插件开发的所有介绍已经全部结束了，之前做插件开发的时候查到一些中文资料，都是一些比较入门的内容，所以自己就想写一个比较全面的介绍，希望这一系列的文章可以帮到你，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jenkins插件开发（三）-- 插件编写]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/02/03/jenkins-plugins-develop-part-3/"/>
    <updated>2013-02-03T20:18:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/02/03/jenkins-plugins-develop-part-3</id>
    <content type="html"><![CDATA[<p>在上一篇blog 中我们介绍了如何创建我们第一个jenkins插件，在这一篇blog继续介绍在开发我们的插件过程中需要注意的一些问题。</p>

<!--more-->


<p></p>

<h3>扩展点选择</h3>

<p>Jenkings插件是基于扩展点来实现的，比如基于Builder这个扩展点，那这个插件的功能就是一个构建插件，类似ant-builder（使用ant来执行构建脚本）。Jenkins插件的扩展点有很多，具体可以查询<a href="https://wiki.jenkins-ci.org/display/JENKINS/Action+and+its+family+of+subtypes">这里</a>。该网页列出了Jenkins所有的扩展点，点击每个扩展点下面Implementations，会列出该扩展点对应的实现类。找到实现类的源码就可以知道具体怎么使用该扩展点了，大部分的代码在github上都可以找到。在前面创建的HelloWorld插件是一个基于Builder扩展点的插件，可以在job 配置页面的Build 中增加该插件，以后每次Job每次构建的时候就会去调用该插件了。</p>

<h3>Action介绍</h3>

<p>Action是插件用来在Job或Build页面增加功能的一种主要方式，是Jenkins最常用的一个扩展点。从下图中可以看出什么是Action，就是页面左边菜单栏的一个菜单项，还可以在右边的主页面显示相应的功能。</p>

<p><img src="https://wiki.jenkins-ci.org/download/thumbnails/58001011/actions.png"></p>

<p>每个继承了Action这个扩展点的插件都要实现3个方法，方法如下：</p>

<figure class='code'><figcaption><span>Action.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Action</span> <span class="kd">extends</span> <span class="n">hudson</span><span class="o">.</span><span class="na">model</span><span class="o">.</span><span class="na">ModelObject</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="nf">getIconFileName</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="nf">getDisplayName</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">String</span> <span class="nf">getUrlName</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第一个是菜单项图片，第二个是菜单名称，第三个是菜单链接。</p>

<p>Action分瞬时和持久2种，这里主要介绍的是瞬时的Action。瞬时的Action可以随时废弃，让另外一个新的Action来取代，适合一些每次构建都要执行操作的插件，但不适合需要保存持久数据的插件。</p>

<p>在Jenkins官网的插件开发指南中，推荐使用Transient***ActionFactory系列的继承点， 有TransientViewActionFactory，TransientProjectActionFactory，TransientBuildActionFactory等，使用该系列的继承点，只需要简单的覆写父类的 createFor方法，就可以实现创建瞬时Action的目的，可以根据不同的需要创建Job，Build，View的Action。</p>

<p>更多内容可以参考<a href="https://wiki.jenkins-ci.org/display/JENKINS/Action+and+its+family+of+subtypes">这里</a>。</p>

<h3>Jelly页面</h3>

<p>Jenkins插件开发中涉及到页面的开发，比如Job的配置页面，相关插件需要加上相关的配置开关，配置参数时，就需要有一个配置页面来做相应的显示。插件开发中用到的页面是Jelly页面，在第一篇blog中介绍了IDEA中关于jelly的插件，使用该插件可以更加方便 Jelly页面的编写。</p>

<p>Jelly页面的简单例子就不介绍了，官网上都有，这里简单介绍一下Jelly页面相关的一些标签。与JSTL类似，Jelly也有自己的一些标签，如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;j:jelly</span>
</span><span class='line'>   <span class="na">xmlns:j=</span><span class="s">&quot;jelly:core&quot;</span>
</span><span class='line'>   <span class="na">xmlns:st=</span><span class="s">&quot;jelly:stapler&quot;</span>
</span><span class='line'>   <span class="na">xmlns:d=</span><span class="s">&quot;jelly:define&quot;</span>
</span><span class='line'>   <span class="na">xmlns:l=</span><span class="s">&quot;/lib/layout&quot;</span>
</span><span class='line'>   <span class="na">xmlns:t=</span><span class="s">&quot;/lib/hudson&quot;</span>
</span><span class='line'>   <span class="na">xmlns:f=</span><span class="s">&quot;/lib/form&quot;</span>
</span><span class='line'>   <span class="na">xmlns:i=</span><span class="s">&quot;jelly:fmt&quot;</span>
</span><span class='line'>   <span class="na">xmlns:p=</span><span class="s">&quot;/lib/hudson/project&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>比如想使用jelly:core标签，就可以在页面中直接使用 j:XX来调用标签的相关功能，其他标签同样按照这个方式来使用。其中jelly:core是常用的功能，比如设置变量，循环，判断等功能。jelly:layout是分层相关的标签，/lib/hudson是jenkins相关的功能，比如设置Job页面图标，Build页面图标等。更多标签相关的内容可以参考<a href="https://jenkins-ci.org/maven-site/jenkins-core/jelly-taglib-ref.html">这里</a>。</p>

<h3>配置文件</h3>

<p>Jenkins插件开发中还涉及到一类文件，就是配置文件。配置文件不仅可以在Jelly页面中使用，而且可以在Java文件中使用，不过在Java文件中使用的话需要先将配置文件编译成对应的Java文件。</p>

<p><strong>如何在Jelly页面中使用配置文件？</strong>首先要在Jelly页面所在的文件夹中放置配置文件，比如 页面在这里dir/myAction.jelly，那么页面对应的配置文件就应该在dir/myAction.properties。注意，配置文件名字需要和页面名字相同，这样页面才可以找到对应的配置文件。比如有个Jelly页面如下：</p>

<figure class='code'><figcaption><span>demo.jelly </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="cp">&lt;?jelly escape-by-default=&#39;true&#39;?&gt;</span>
</span><span class='line'>    <span class="nt">&lt;j:jelly</span> <span class="na">xmlns:j=</span><span class="s">&quot;jelly:core&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;th&gt;</span>${\%allBuildsColumnHeader}<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/j:jelly&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其对应的配置文件内容如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">allBuildsColumnHeader</span><span class="o">=</span><span class="s">mean time to repair for all history</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样配置了以后，展示Jelly 页面时就可以自动调用配置文件里面的内容了。</p>

<p><strong>如何在Java文件中使用配置文件？</strong>一般插件所用的Java配置文件名称都叫做Messages.properties，文件保存在resources目录下。比如我们的插件包结构是jenkins.plugins.myplugin，那么Messages.properties文件就保存在 resources/jenkins/plugins/myplugin/目录下。</p>

<p>如果Java 文件中想要使用配置文件里面的值，需要先执行mvn pacakge命令，执行之后，以上面的例子为例，在target目录下会产生generated-sources/localizer/jenkins/plugins/myplugin/Messages.java这个Java文件，如果配置文件里面有这样的一个配置项：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">allBuildsColumnHeader</span><span class="o">=</span><span class="s">mean time to repair for all history</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么Messages.java里面就会产生这样的2个方法：</p>

<figure class='code'><figcaption><span>Message.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * mean time to repair for all history</span>
</span><span class='line'><span class="cm">     * </span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">allBuildsColumnHeader</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">holder</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;allBuildsColumnHeader&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * mean time to repair for all history</span>
</span><span class='line'><span class="cm">     * </span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Localizable</span> <span class="nf">_allBuildsColumnHeader</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Localizable</span><span class="o">(</span><span class="n">holder</span><span class="o">,</span> <span class="s">&quot;allBuildsColumnHeader&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样在Java文件中就可以直接调用这2个方法了，一般是调用第一个方法。</p>

<p><strong>多语言配置。</strong>配置文件的文件名如果不带后缀就是内容是英语的配置文件，比如Messages.properties。如果想让你的插件可以在不同的国家语言下都显示正常的话，就需要将你的配置文件复制多份，在名字后面加上不同的后缀，然后内容换上相关语言的内容。</p>

<p>比如，以上面例子为例，中文的配置文件名称就是Messages_zh_CN.properties，配置文件的页面也要换上相应的中文ASCII编码，这样就可以在中文系统环境下显示中文内容了。如何将中文转ASCII码？可以直接使用Java Home里面的native2ascii命令。</p>

<h3>开发经验</h3>

<p>在开发Jenkins插件的过程中自己摸索了一些方法，在这里介绍一下，以免让其他同学走弯路。<br/>
首先是去到Jenkins的<a href="https://wiki.jenkins-ci.org/display/JENKINS/Extend+Jenkins">官网WIKI</a>。这里介绍了如何创建你的插件工程，插件扩展点，插件编码和页面如何编写等，内容比较多，但你只需要关注你需要的内容就可以了。<br/>
光看Jenkins的WIKI是不够的，有一些页面和类的用法上面没有直接给出，那肿么办呢？很简单：看源码。在github上download下jenkins的源码（<a href="https://github.com/jenkinsci/jenkins">这里</a>），在IDE里面打开Jenkins工程，比如想要查看某个jelly页面的用法，就可以在工程中搜索所有jelly页面，看看源码中的页面是怎么写的，我们再拿过来改一下就可以了。类和扩展点不知道如何写，也可以参照这个方法，通过源码了解其他扩展点子类是如何写的，然后再写出自己的插件。<br/>
可能在jenkins的源码中还是找不到扩展点的用法，那怎么办呢？这个时候可能就需要去参考其他插件是如何写的了，幸运的是，大部分插件的代码现在都放在了github上，我们可以通过了解其他插件来写出自己的插件。</p>
]]></content>
  </entry>
  
</feed>
