<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2014-05-07T20:16:38+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Red Hat系统安装Redis]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/05/07/redis-install-guide-in-redhat/"/>
    <updated>2014-05-07T19:53:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/05/07/redis-install-guide-in-redhat</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-5/redis.jpg"></p>

<!--more-->


<p></p>

<h2>环境</h2>

<p>RHLinux-6.4-64-EN, 红帽6.4 64位，英文正式发布版</p>

<h2>安装</h2>

<p>安装很简单，先下载redis的压缩包，下载地址见<a href="http://redis.io/download">这里</a>，然后拷贝到你的linux机器，接着执行下面的命令。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tar xzf redis-2.6.14.tar.gz
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>redis-2.6.14
</span><span class='line'><span class="nv">$ </span>make
</span></code></pre></td></tr></table></div></figure>


<h2>启动</h2>

<p>编译完后增加了src目录，执行src下面的redis-server脚本即可启动redis服务。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>src/redis-server
</span></code></pre></td></tr></table></div></figure>


<h2>调试</h2>

<p>执行src目录下的redis-cli脚本，这个是redis的客户端。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>src/redis-cli
</span><span class='line'>redis&gt; <span class="nb">set </span>foo bar
</span><span class='line'>OK
</span><span class='line'>redis&gt; get foo
</span><span class='line'><span class="s2">&quot;bar&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>java调用</h2>

<ol>
<li>Redis比较出名的java客户端是jedis，先下载jedis的jar包，可以去maven库搜下jedis就可以下载到，源码是放在github上：<a href="https://github.com/xetorthio/jedis">https://github.com/xetorthio/jedis</a>。</li>
<li>简单写个main方法就可以调用。</li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Jedis</span><span class="o">(</span><span class="s">&quot;10.20.8.39&quot;</span><span class="o">);</span> <span class="c1">//redis服务器的ip，端口默认6379</span>
</span><span class='line'>        <span class="n">jedis</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="s">&quot;bar&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">jedis</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>后台进程</h2>

<p>之前的启动方式不是后台进程方式的，终端关了服务也就停了，可以使用下面的命令将Redis作为后台进程启动，并添加到系统启动命名中。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>redis-2.6.14/utils
</span><span class='line'><span class="nv">$.</span>/install_server
</span></code></pre></td></tr></table></div></figure>


<p>执行命令后，会提示你回答几个问题，可以一路回车过去，选择默认设置。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Please <span class="k">select </span>the redis port <span class="k">for </span>this instance: <span class="o">[</span>6379<span class="o">]</span>
</span><span class='line'>Selecting default: 6379
</span><span class='line'>Please <span class="k">select </span>the redis config file name <span class="o">[</span>/etc/redis/6379.conf<span class="o">]</span>
</span><span class='line'>Selected default - /etc/redis/6379.conf
</span><span class='line'>Please <span class="k">select </span>the redis log file name <span class="o">[</span>/var/log/redis_6379.log<span class="o">]</span>
</span><span class='line'>Selected default - /var/log/redis_6379.log
</span><span class='line'>Please <span class="k">select </span>the data directory <span class="k">for </span>this instance <span class="o">[</span>/var/lib/redis/6379<span class="o">]</span>
</span><span class='line'>Selected default - /var/lib/redis/6379
</span><span class='line'>Please <span class="k">select </span>the redis executable path <span class="o">[</span>/usr/local/bin/redis-server<span class="o">]</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>后续可以通过下面的方式启停服务。<br/>
1. /etc/init.d/redis_6379 start &mdash;启动<br/>
2. /etc/init.d/redis_6379 stop &mdash;服务<br/>
当然也可在/usr/local/bin目录下使用redis-server来启动。</p>

<p><strong>PS: 我在执行install_server脚本后，发现服务启动不起来，查看/etc/init.d/redis_6379这个文件发现里面的换行符号被替换成了<code>/n</code>符号，手动将这些符号替换成换行就可以了。</strong></p>

<h2>更多资料</h2>

<p>更多资料可以看这里：<a href="http://redis.io/">http://redis.io/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[swift源码详解（三）——proxy/controllers/base.py]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/05/04/swift-code-explain-3-proxy-controllers-base/"/>
    <updated>2014-05-04T21:36:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/05/04/swift-code-explain-3-proxy-controllers-base</id>
    <content type="html"><![CDATA[<h2><a href="http://zhaozhiming.github.io/blog/2014/04/19/swift-code-explain-total/">回swift代码结构目录</a></h2>

<h3>update_headers</h3>

<!--more-->


<p></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">update_headers</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">headers</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Helper function to update headers in the response.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param response: swob.Response object</span>
</span><span class='line'><span class="sd">    :param headers: dictionary headers</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="s">&#39;items&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">headers</span> <span class="o">=</span> <span class="n">headers</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="s">&#39;etag&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;&quot;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;date&#39;</span><span class="p">,</span> <span class="s">&#39;content-length&#39;</span><span class="p">,</span> <span class="s">&#39;content-type&#39;</span><span class="p">,</span>
</span><span class='line'>                          <span class="s">&#39;connection&#39;</span><span class="p">,</span> <span class="s">&#39;x-put-timestamp&#39;</span><span class="p">,</span> <span class="s">&#39;x-delete-after&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>更新response的header。</li>
<li>查看headers中是否&#8217;items&#8217;属性，有的话给headers赋值。</li>
<li>遍历headers中的每个header,如果是&#8217;etag&#8217;，则去除值中的双引号，并写到response的header中，如果header不是特殊的header，则写到response的header中。</li>
</ul>


<h3>source_key</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">source_key</span><span class="p">(</span><span class="n">resp</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Provide the timestamp of the swift http response as a floating</span>
</span><span class='line'><span class="sd">    point value.  Used as a sort key.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param resp: bufferedhttp response object</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">float</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;x-put-timestamp&#39;</span><span class="p">)</span> <span class="ow">or</span>
</span><span class='line'>                 <span class="n">resp</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;x-timestamp&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>依次获取response中的header&#8217;x-put-timestamp&#8217;和&#8217;x-timestamp&#8217;的值，如果有值则返回，没有则返回0。</li>
</ul>


<h3>delay_denial</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">delay_denial</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Decorator to declare which methods should have any swift.authorize call</span>
</span><span class='line'><span class="sd">    delayed. This is so the method can load the Request object up with</span>
</span><span class='line'><span class="sd">    additional information that may be needed by the authorization system.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param func: function for which authorization will be delayed</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">func</span><span class="o">.</span><span class="n">delay_denial</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@functools.wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapped</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapped</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>方法标签，标识了该标签的方法表示与swift.authorize有关，会延迟认证。</li>
</ul>


<h3>get_account_memcache_key</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_account_memcache_key</span><span class="p">(</span><span class="n">account</span><span class="p">):</span>
</span><span class='line'>    <span class="n">cache_key</span><span class="p">,</span> <span class="n">env_key</span> <span class="o">=</span> <span class="n">_get_cache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cache_key</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>获取account的缓存key。</li>
</ul>


<h3>get_container_memcache_key</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_container_memcache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">container</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;container not provided&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cache_key</span><span class="p">,</span> <span class="n">env_key</span> <span class="o">=</span> <span class="n">_get_cache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cache_key</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>获取container的缓存key。</li>
</ul>


<h3>_prep_headers_to_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_prep_headers_to_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="n">server_type</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Helper method that iterates once over a dict of headers,</span>
</span><span class='line'><span class="sd">    converting all keys to lower case and separating</span>
</span><span class='line'><span class="sd">    into subsets containing user metadata, system metadata</span>
</span><span class='line'><span class="sd">    and other headers.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">meta</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">sysmeta</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">other</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="nb">dict</span><span class="p">(</span><span class="n">headers</span><span class="p">)</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'>        <span class="n">lkey</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">is_user_meta</span><span class="p">(</span><span class="n">server_type</span><span class="p">,</span> <span class="n">lkey</span><span class="p">):</span>
</span><span class='line'>            <span class="n">meta</span><span class="p">[</span><span class="n">strip_user_meta_prefix</span><span class="p">(</span><span class="n">server_type</span><span class="p">,</span> <span class="n">lkey</span><span class="p">)]</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">is_sys_meta</span><span class="p">(</span><span class="n">server_type</span><span class="p">,</span> <span class="n">lkey</span><span class="p">):</span>
</span><span class='line'>            <span class="n">sysmeta</span><span class="p">[</span><span class="n">strip_sys_meta_prefix</span><span class="p">(</span><span class="n">server_type</span><span class="p">,</span> <span class="n">lkey</span><span class="p">)]</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">other</span><span class="p">[</span><span class="n">lkey</span><span class="p">]</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">other</span><span class="p">,</span> <span class="n">meta</span><span class="p">,</span> <span class="n">sysmeta</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将header根据server_type进行分类，以x-<em>-meta开头的为用户信息类，以x-</em>-sysmeta开头的为系统信息类，其他的为other类。</li>
</ul>


<h3>headers_to_account_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">headers_to_account_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="n">status_int</span><span class="o">=</span><span class="n">HTTP_OK</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Construct a cacheable dict of account info based on response headers.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">headers</span><span class="p">,</span> <span class="n">meta</span><span class="p">,</span> <span class="n">sysmeta</span> <span class="o">=</span> <span class="n">_prep_headers_to_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="s">&#39;account&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="n">status_int</span><span class="p">,</span>
</span><span class='line'>        <span class="c"># &#39;container_count&#39; anomaly:</span>
</span><span class='line'>        <span class="c"># Previous code sometimes expects an int sometimes a string</span>
</span><span class='line'>        <span class="c"># Current code aligns to str and None, yet translates to int in</span>
</span><span class='line'>        <span class="c"># deprecated functions as needed</span>
</span><span class='line'>        <span class="s">&#39;container_count&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-account-container-count&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;total_object_count&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-account-object-count&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;bytes&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-account-bytes-used&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;meta&#39;</span><span class="p">:</span> <span class="n">meta</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;sysmeta&#39;</span><span class="p">:</span> <span class="n">sysmeta</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将account的header进行分类，返回包含account信息的字典。</li>
</ul>


<h3>headers_to_container_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">headers_to_container_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="n">status_int</span><span class="o">=</span><span class="n">HTTP_OK</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Construct a cacheable dict of container info based on response headers.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">headers</span><span class="p">,</span> <span class="n">meta</span><span class="p">,</span> <span class="n">sysmeta</span> <span class="o">=</span> <span class="n">_prep_headers_to_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="s">&#39;container&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="n">status_int</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;read_acl&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-container-read&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;write_acl&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-container-write&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;sync_key&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-container-sync-key&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;object_count&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-container-object-count&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;bytes&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-container-bytes-used&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;versions&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-versions-location&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;cors&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;allow_origin&#39;</span><span class="p">:</span> <span class="n">meta</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;access-control-allow-origin&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&#39;expose_headers&#39;</span><span class="p">:</span> <span class="n">meta</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;access-control-expose-headers&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&#39;max_age&#39;</span><span class="p">:</span> <span class="n">meta</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;access-control-max-age&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="s">&#39;meta&#39;</span><span class="p">:</span> <span class="n">meta</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;sysmeta&#39;</span><span class="p">:</span> <span class="n">sysmeta</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将container的header进行分类，返回包含container信息的字典。</li>
</ul>


<h3>headers_to_object_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">headers_to_object_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="n">status_int</span><span class="o">=</span><span class="n">HTTP_OK</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Construct a cacheable dict of object info based on response headers.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">headers</span><span class="p">,</span> <span class="n">meta</span><span class="p">,</span> <span class="n">sysmeta</span> <span class="o">=</span> <span class="n">_prep_headers_to_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="s">&#39;object&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="n">status_int</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;length&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;content-length&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;content-type&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&#39;etag&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;etag&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="s">&#39;meta&#39;</span><span class="p">:</span> <span class="n">meta</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">info</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将object的header进行分类，返回包含object信息的字典。</li>
</ul>


<h3>cors_validation</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">cors_validation</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Decorator to check if the request is a CORS request and if so, if it&#39;s</span>
</span><span class='line'><span class="sd">    valid.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param func: function to check</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="nd">@functools.wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapped</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
</span><span class='line'>        <span class="n">controller</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="n">req</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># The logic here was interpreted from</span>
</span><span class='line'>        <span class="c">#    http://www.w3.org/TR/cors/#resource-requests</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Is this a CORS request?</span>
</span><span class='line'>        <span class="n">req_origin</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;Origin&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">req_origin</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># Yes, this is a CORS request so test if the origin is allowed</span>
</span><span class='line'>            <span class="n">container_info</span> <span class="o">=</span> \
</span><span class='line'>                <span class="n">controller</span><span class="o">.</span><span class="n">container_info</span><span class="p">(</span><span class="n">controller</span><span class="o">.</span><span class="n">account_name</span><span class="p">,</span>
</span><span class='line'>                                          <span class="n">controller</span><span class="o">.</span><span class="n">container_name</span><span class="p">,</span> <span class="n">req</span><span class="p">)</span>
</span><span class='line'>            <span class="n">cors_info</span> <span class="o">=</span> <span class="n">container_info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;cors&#39;</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># Call through to the decorated method</span>
</span><span class='line'>            <span class="n">resp</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">controller</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">strict_cors_mode</span> <span class="ow">and</span> \
</span><span class='line'>                    <span class="ow">not</span> <span class="n">controller</span><span class="o">.</span><span class="n">is_origin_allowed</span><span class="p">(</span><span class="n">cors_info</span><span class="p">,</span> <span class="n">req_origin</span><span class="p">):</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">resp</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>方法标签，对CORS请求进行验证。</li>
<li>先判断该请求是否是一个跨域资源共享（CORS）请求，是的话先获取container的信息，再根据container信息获取cors信息。</li>
<li>如果controller的cors mode存在就判断原请求是否被允许，允许的话返回response。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="c"># Expose,</span>
</span><span class='line'>            <span class="c">#  - simple response headers,</span>
</span><span class='line'>            <span class="c">#    http://www.w3.org/TR/cors/#simple-response-header</span>
</span><span class='line'>            <span class="c">#  - swift specific: etag, x-timestamp, x-trans-id</span>
</span><span class='line'>            <span class="c">#  - user metadata headers</span>
</span><span class='line'>            <span class="c">#  - headers provided by the user in</span>
</span><span class='line'>            <span class="c">#    x-container-meta-access-control-expose-headers</span>
</span><span class='line'>            <span class="k">if</span> <span class="s">&#39;Access-Control-Expose-Headers&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">:</span>
</span><span class='line'>                <span class="n">expose_headers</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>                    <span class="s">&#39;cache-control&#39;</span><span class="p">,</span> <span class="s">&#39;content-language&#39;</span><span class="p">,</span> <span class="s">&#39;content-type&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&#39;expires&#39;</span><span class="p">,</span> <span class="s">&#39;last-modified&#39;</span><span class="p">,</span> <span class="s">&#39;pragma&#39;</span><span class="p">,</span> <span class="s">&#39;etag&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">&#39;x-timestamp&#39;</span><span class="p">,</span> <span class="s">&#39;x-trans-id&#39;</span><span class="p">]</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">header</span> <span class="ow">in</span> <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">header</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;X-Container-Meta&#39;</span><span class="p">)</span> <span class="ow">or</span> \
</span><span class='line'>                            <span class="n">header</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;X-Object-Meta&#39;</span><span class="p">):</span>
</span><span class='line'>                        <span class="n">expose_headers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">header</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">cors_info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;expose_headers&#39;</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">expose_headers</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span>
</span><span class='line'>                        <span class="p">[</span><span class="n">header_line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>                         <span class="k">for</span> <span class="n">header_line</span> <span class="ow">in</span>
</span><span class='line'>                         <span class="n">cors_info</span><span class="p">[</span><span class="s">&#39;expose_headers&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>                         <span class="k">if</span> <span class="n">header_line</span><span class="o">.</span><span class="n">strip</span><span class="p">()])</span>
</span><span class='line'>                <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;Access-Control-Expose-Headers&#39;</span><span class="p">]</span> <span class="o">=</span> \
</span><span class='line'>                    <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">expose_headers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>方法标签，对CORS请求进行验证。</li>
<li>先判断该请求是否是一个跨域资源共享（CORS）请求，是的话先获取container的信息，再根据container信息获取cors信息。</li>
<li>根据controller的cors mode判断cors请求是否被允许，是的话返回response。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="c"># The user agent won&#39;t process the response if the Allow-Origin</span>
</span><span class='line'>            <span class="c"># header isn&#39;t included</span>
</span><span class='line'>            <span class="k">if</span> <span class="s">&#39;Access-Control-Allow-Origin&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">cors_info</span><span class="p">[</span><span class="s">&#39;allow_origin&#39;</span><span class="p">]</span> <span class="ow">and</span> \
</span><span class='line'>                        <span class="n">cors_info</span><span class="p">[</span><span class="s">&#39;allow_origin&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="o">==</span> <span class="s">&#39;*&#39;</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;Access-Control-Allow-Origin&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;*&#39;</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;Access-Control-Allow-Origin&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">req_origin</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span>     <span class="n">resp</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># Not a CORS request so make the call as normal</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapped</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果response里面不包含&#8217;Access-Control-Allow-Origin&#8217; header，则加上该header。</li>
</ul>


<h3>get_object_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_object_info</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">app</span><span class="p">,</span> <span class="n">path</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">swift_source</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Get the info structure for an object, based on env and app.</span>
</span><span class='line'><span class="sd">    This is useful to middlewares.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    .. note::</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        This call bypasses auth. Success does not imply that the request has</span>
</span><span class='line'><span class="sd">        authorization to the object.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="n">version</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span> <span class="o">=</span> \
</span><span class='line'>        <span class="n">split_path</span><span class="p">(</span><span class="n">path</span> <span class="ow">or</span> <span class="n">env</span><span class="p">[</span><span class="s">&#39;PATH_INFO&#39;</span><span class="p">],</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">_get_object_info</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">swift_source</span><span class="o">=</span><span class="n">swift_source</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_object_info</span><span class="p">({},</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">info</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>根据env和app获取object的结构信息。</li>
</ul>


<h3>get_container_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_container_info</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">app</span><span class="p">,</span> <span class="n">swift_source</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Get the info structure for a container, based on env and app.</span>
</span><span class='line'><span class="sd">    This is useful to middlewares.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    .. note::</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        This call bypasses auth. Success does not imply that the request has</span>
</span><span class='line'><span class="sd">        authorization to the container.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="n">version</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">unused</span><span class="p">)</span> <span class="o">=</span> \
</span><span class='line'>        <span class="n">split_path</span><span class="p">(</span><span class="n">env</span><span class="p">[</span><span class="s">&#39;PATH_INFO&#39;</span><span class="p">],</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">get_info</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">ret_not_found</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">swift_source</span><span class="o">=</span><span class="n">swift_source</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_container_info</span><span class="p">({},</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">info</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>根据env和app获取container的结构信息。</li>
</ul>


<h3>get_account_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_account_info</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">app</span><span class="p">,</span> <span class="n">swift_source</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Get the info structure for an account, based on env and app.</span>
</span><span class='line'><span class="sd">    This is useful to middlewares.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    .. note::</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        This call bypasses auth. Success does not imply that the request has</span>
</span><span class='line'><span class="sd">        authorization to the account.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="n">version</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">_junk</span><span class="p">,</span> <span class="n">_junk</span><span class="p">)</span> <span class="o">=</span> \
</span><span class='line'>        <span class="n">split_path</span><span class="p">(</span><span class="n">env</span><span class="p">[</span><span class="s">&#39;PATH_INFO&#39;</span><span class="p">],</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">get_info</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">ret_not_found</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">swift_source</span><span class="o">=</span><span class="n">swift_source</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_account_info</span><span class="p">({},</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;container_count&#39;</span><span class="p">)</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span><span class="p">[</span><span class="s">&#39;container_count&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span><span class="p">[</span><span class="s">&#39;container_count&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="s">&#39;container_count&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">info</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>根据env和app获取account的结构信息。</li>
</ul>


<h3>_get_cache_key</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_get_cache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Get the keys for both memcache (cache_key) and env (env_key)</span>
</span><span class='line'><span class="sd">    where info about accounts and containers is cached</span>
</span><span class='line'><span class="sd">    :param   account: The name of the account</span>
</span><span class='line'><span class="sd">    :param container: The name of the container (or None if account)</span>
</span><span class='line'><span class="sd">    :returns a tuple of (cache_key, env_key)</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">container</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cache_key</span> <span class="o">=</span> <span class="s">&#39;container/</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cache_key</span> <span class="o">=</span> <span class="s">&#39;account/</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">account</span>
</span><span class='line'>    <span class="c"># Use a unique environment cache key per account and one container.</span>
</span><span class='line'>    <span class="c"># This allows caching both account and container and ensures that when we</span>
</span><span class='line'>    <span class="c"># copy this env to form a new request, it won&#39;t accidentally reuse the</span>
</span><span class='line'>    <span class="c"># old container or account info</span>
</span><span class='line'>    <span class="n">env_key</span> <span class="o">=</span> <span class="s">&#39;swift.</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">cache_key</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cache_key</span><span class="p">,</span> <span class="n">env_key</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>获取account和container的缓存key，account是&#8217;account/account名&#8217;，container是&#8217;container/account名/container名&#8217;，还有env_key，值为&#8217;swift.缓存key&#8217;。</li>
</ul>


<h3>get_object_env_key</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_object_env_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Get the keys for env (env_key) where info about object is cached</span>
</span><span class='line'><span class="sd">    :param   account: The name of the account</span>
</span><span class='line'><span class="sd">    :param container: The name of the container</span>
</span><span class='line'><span class="sd">    :param obj: The name of the object</span>
</span><span class='line'><span class="sd">    :returns a string env_key</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">env_key</span> <span class="o">=</span> <span class="s">&#39;swift.object/</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">account</span><span class="p">,</span>
</span><span class='line'>                                         <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">env_key</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>得到object的env_key，值为&#8217;swift.object/account名/container名/object名。</li>
</ul>


<h3>set_info_cache</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_set_info_cache</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">resp</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Cache info in both memcache and env.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Caching is used to avoid unnecessary calls to account &amp; container servers.</span>
</span><span class='line'><span class="sd">    This is a private function that is being called by GETorHEAD_base and</span>
</span><span class='line'><span class="sd">    by clear_info_cache.</span>
</span><span class='line'><span class="sd">    Any attempt to GET or HEAD from the container/account server should use</span>
</span><span class='line'><span class="sd">    the GETorHEAD_base interface which would than set the cache.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param  app: the application object</span>
</span><span class='line'><span class="sd">    :param  account: the unquoted account name</span>
</span><span class='line'><span class="sd">    :param  container: the unquoted container name or None</span>
</span><span class='line'><span class="sd">    :param resp: the response received or None if info cache should be cleared</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">container</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cache_time</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">recheck_container_existence</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cache_time</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">recheck_account_existence</span>
</span><span class='line'>    <span class="n">cache_key</span><span class="p">,</span> <span class="n">env_key</span> <span class="o">=</span> <span class="n">_get_cache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">resp</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_int</span> <span class="o">==</span> <span class="n">HTTP_NOT_FOUND</span><span class="p">:</span>
</span><span class='line'>            <span class="n">cache_time</span> <span class="o">*=</span> <span class="mf">0.1</span>
</span><span class='line'>        <span class="k">elif</span> <span class="ow">not</span> <span class="n">is_success</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">status_int</span><span class="p">):</span>
</span><span class='line'>            <span class="n">cache_time</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cache_time</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Next actually set both memcache and the env chache</span>
</span><span class='line'>    <span class="n">memcache</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="s">&#39;memcache&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span> <span class="n">env</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;swift.cache&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">cache_time</span><span class="p">:</span>
</span><span class='line'>        <span class="n">env</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">env_key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">memcache</span><span class="p">:</span>
</span><span class='line'>            <span class="n">memcache</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">cache_key</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">container</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_container_info</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_int</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_account_info</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_int</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">memcache</span><span class="p">:</span>
</span><span class='line'>        <span class="n">memcache</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">cache_key</span><span class="p">,</span> <span class="n">info</span><span class="p">,</span> <span class="n">time</span><span class="o">=</span><span class="n">cache_time</span><span class="p">)</span>
</span><span class='line'>    <span class="n">env</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">info</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>信息在缓存和env都各存一份，缓存一般用来避免对account和container没必要的调用，这是一个私有方法，主要被GETorHEAD_base和clear_info_cache方法调用。如果想通过HEAD和GET获取container/account信息，建议使用GETorHEAD_base方法，因为该方法会设置缓存信息。</li>
<li>检查container和account是否存在，再通过account和container获取缓存key。</li>
<li>根据response状态码设置缓存时间，如果缓存时间设置为None，则在env和缓存中移除cache_key缓存信息。</li>
<li>最后在缓存和env中设置container或account的info信息。</li>
</ul>


<h3>_set_object_info_cache</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_set_object_info_cache</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">resp</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Cache object info env. Do not cache object informations in</span>
</span><span class='line'><span class="sd">    memcache. This is an intentional omission as it would lead</span>
</span><span class='line'><span class="sd">    to cache pressure. This is a per-request cache.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Caching is used to avoid unnecessary calls to object servers.</span>
</span><span class='line'><span class="sd">    This is a private function that is being called by GETorHEAD_base.</span>
</span><span class='line'><span class="sd">    Any attempt to GET or HEAD from the object server should use</span>
</span><span class='line'><span class="sd">    the GETorHEAD_base interface which would then set the cache.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param  app: the application object</span>
</span><span class='line'><span class="sd">    :param  account: the unquoted account name</span>
</span><span class='line'><span class="sd">    :param  container: the unquoted container name or None</span>
</span><span class='line'><span class="sd">    :param  object: the unquoted object name or None</span>
</span><span class='line'><span class="sd">    :param resp: the response received or None if info cache should be cleared</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">env_key</span> <span class="o">=</span> <span class="n">get_object_env_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">resp</span><span class="p">:</span>
</span><span class='line'>        <span class="n">env</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">env_key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_object_info</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_int</span><span class="p">)</span>
</span><span class='line'>    <span class="n">env</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">info</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>object的信息只缓存在env中，没有缓存在memcache中是因为缓存起来的话会对缓存造成压力，这是前一次请求的缓存。缓存为了避免那些对object没必要的调用，这是一个私有方法，主要被GETorHEAD_base和clear_info_cache方法调用。如果想通过HEAD和GET获取container/account信息，建议使用GETorHEAD_base方法，因为该方法会设置缓存信息。</li>
<li>先获取object的env_key，如果response没有则在env中移除env_key的信息，最后在env中添加object的info信息。</li>
</ul>


<h3>clear_info_cache</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">clear_info_cache</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Clear the cached info in both memcache and env</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param  app: the application object</span>
</span><span class='line'><span class="sd">    :param  account: the account name</span>
</span><span class='line'><span class="sd">    :param  container: the containr name or None if setting info for containers</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">_set_info_cache</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在memcache和env中清除account或container的缓存信息。</li>
</ul>


<h3>_get_info_cache</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_get_info_cache</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Get the cached info from env or memcache (if used) in that order</span>
</span><span class='line'><span class="sd">    Used for both account and container info</span>
</span><span class='line'><span class="sd">    A private function used by get_info</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param  app: the application object</span>
</span><span class='line'><span class="sd">    :param  env: the environment used by the current request</span>
</span><span class='line'><span class="sd">    :returns the cached info or None if not cached</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cache_key</span><span class="p">,</span> <span class="n">env_key</span> <span class="o">=</span> <span class="n">_get_cache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">env_key</span> <span class="ow">in</span> <span class="n">env</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">env</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span>
</span><span class='line'>    <span class="n">memcache</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="s">&#39;memcache&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span> <span class="n">env</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;swift.cache&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">memcache</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">memcache</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">cache_key</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="n">key</span><span class="p">],</span> <span class="nb">unicode</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">info</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">info</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;utf-8&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">env</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">info</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">info</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Noner</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>私有方法，被get_info调用，在env和memcache中获取account和container信息，顺序是先env再memcache。</li>
<li>获取env_key和cache_keyi，如果env_key在env中存在，则返回env中的值。</li>
<li>如果env中没有，再从memcache中获取信息，将获取到的信息放到env中。</li>
</ul>


<h3>_prepare_pre_auth_info_request</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_prepare_pre_auth_info_request</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">swift_source</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Prepares a pre authed request to obtain info using a HEAD.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param env: the environment used by the current request</span>
</span><span class='line'><span class="sd">    :param path: The unquoted request path</span>
</span><span class='line'><span class="sd">    :param swift_source: value for swift.source in WSGI environment</span>
</span><span class='line'><span class="sd">    :returns: the pre authed request</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="c"># Set the env for the pre_authed call without a query string</span>
</span><span class='line'>    <span class="n">newenv</span> <span class="o">=</span> <span class="n">make_pre_authed_env</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#39;HEAD&#39;</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">agent</span><span class="o">=</span><span class="s">&#39;Swift&#39;</span><span class="p">,</span>
</span><span class='line'>                                 <span class="n">query_string</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">swift_source</span><span class="o">=</span><span class="n">swift_source</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># This is a sub request for container metadata- drop the Origin header from</span>
</span><span class='line'>    <span class="c"># the request so the it is not treated as a CORS request.</span>
</span><span class='line'>    <span class="n">newenv</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s">&#39;HTTP_ORIGIN&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># Note that Request.blank expects quoted path</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Request</span><span class="o">.</span><span class="n">blank</span><span class="p">(</span><span class="n">quote</span><span class="p">(</span><span class="n">path</span><span class="p">),</span> <span class="n">environ</span><span class="o">=</span><span class="n">newenv</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>准备一个做过认证的HEAD请求来获取信息。</li>
</ul>


<h3>get_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_info</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">ret_not_found</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
</span><span class='line'>             <span class="n">swift_source</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Get the info about accounts or containers</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Note: This call bypasses auth. Success does not imply that the</span>
</span><span class='line'><span class="sd">          request has authorization to the info.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param app: the application object</span>
</span><span class='line'><span class="sd">    :param env: the environment used by the current request</span>
</span><span class='line'><span class="sd">    :param account: The unquoted name of the account</span>
</span><span class='line'><span class="sd">    :param container: The unquoted name of the container (or None if account)</span>
</span><span class='line'><span class="sd">    :returns: the cached info or None if cannot be retrieved</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">_get_info_cache</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">ret_not_found</span> <span class="ow">or</span> <span class="n">is_success</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="s">&#39;status&#39;</span><span class="p">]):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">info</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>    <span class="c"># Not in cache, let&#39;s try the account servers</span>
</span><span class='line'>    <span class="n">path</span> <span class="o">=</span> <span class="s">&#39;/v1/</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">account</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">container</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># Stop and check if we have an account?</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">get_info</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>        <span class="n">path</span> <span class="o">+=</span> <span class="s">&#39;/&#39;</span> <span class="o">+</span> <span class="n">container</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">req</span> <span class="o">=</span> <span class="n">_prepare_pre_auth_info_request</span><span class="p">(</span>
</span><span class='line'>        <span class="n">env</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="p">(</span><span class="n">swift_source</span> <span class="ow">or</span> <span class="s">&#39;GET_INFO&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="c"># Whenever we do a GET/HEAD, the GETorHEAD_base will set the info in</span>
</span><span class='line'>    <span class="c"># the environment under environ[env_key] and in memcache. We will</span>
</span><span class='line'>    <span class="c"># pick the one from environ[env_key] and use it to set the caller env</span>
</span><span class='line'>    <span class="n">resp</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cache_key</span><span class="p">,</span> <span class="n">env_key</span> <span class="o">=</span> <span class="n">_get_cache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span>
</span><span class='line'>        <span class="n">env</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">info</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">ret_not_found</span> <span class="ow">or</span> <span class="n">is_success</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="s">&#39;status&#39;</span><span class="p">]):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">info</span>
</span><span class='line'>    <span class="k">except</span> <span class="p">(</span><span class="ne">KeyError</span><span class="p">,</span> <span class="ne">AttributeError</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>从缓存中获取info信息，如果缓存中有且状态是success，则返回info。如果缓存没有，则发起1个不用认证的请求获取account和container的info信息。</li>
</ul>


<h3>_get_object_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_get_object_info</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">swift_source</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Get the info about object</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Note: This call bypasses auth. Success does not imply that the</span>
</span><span class='line'><span class="sd">          request has authorization to the info.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param app: the application object</span>
</span><span class='line'><span class="sd">    :param env: the environment used by the current request</span>
</span><span class='line'><span class="sd">    :param account: The unquoted name of the account</span>
</span><span class='line'><span class="sd">    :param container: The unquoted name of the container</span>
</span><span class='line'><span class="sd">    :param obj: The unquoted name of the object</span>
</span><span class='line'><span class="sd">    :returns: the cached info or None if cannot be retrieved</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">env_key</span> <span class="o">=</span> <span class="n">get_object_env_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">env_key</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">info</span>
</span><span class='line'>    <span class="c"># Not in cached, let&#39;s try the object servers</span>
</span><span class='line'>    <span class="n">path</span> <span class="o">=</span> <span class="s">&#39;/v1/</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>    <span class="n">req</span> <span class="o">=</span> <span class="n">_prepare_pre_auth_info_request</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">swift_source</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># Whenever we do a GET/HEAD, the GETorHEAD_base will set the info in</span>
</span><span class='line'>    <span class="c"># the environment under environ[env_key]. We will</span>
</span><span class='line'>    <span class="c"># pick the one from environ[env_key] and use it to set the caller env</span>
</span><span class='line'>    <span class="n">resp</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span>
</span><span class='line'>        <span class="n">env</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">info</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">info</span>
</span><span class='line'>    <span class="k">except</span> <span class="p">(</span><span class="ne">KeyError</span><span class="p">,</span> <span class="ne">AttributeError</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>先从env中获取object的info信息，如果没有则发起请求不认证的请求重新获取。</li>
</ul>


<h3>close_swift_conn</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">close_swift_conn</span><span class="p">(</span><span class="n">src</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Force close the http connection to the backend.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param src: the response from the backend</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># Since the backends set &quot;Connection: close&quot; in their response</span>
</span><span class='line'>        <span class="c"># headers, the response object (src) is solely responsible for the</span>
</span><span class='line'>        <span class="c"># socket. The connection object (src.swift_conn) has no references</span>
</span><span class='line'>        <span class="c"># to the socket, so calling its close() method does nothing, and</span>
</span><span class='line'>        <span class="c"># therefore we don&#39;t do it.</span>
</span><span class='line'>        <span class="c">#</span>
</span><span class='line'>        <span class="c"># Also, since calling the response&#39;s close() method might not</span>
</span><span class='line'>        <span class="c"># close the underlying socket but only decrement some</span>
</span><span class='line'>        <span class="c"># reference-counter, we have a special method here that really,</span>
</span><span class='line'>        <span class="c"># really kills the underlying socket with a close() syscall.</span>
</span><span class='line'>        <span class="n">src</span><span class="o">.</span><span class="n">nuke_from_orbit</span><span class="p">()</span>  <span class="c"># it&#39;s the only way to be sure</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
</span><span class='line'>        <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>关闭swift连接，用了很底层的一个关闭socket连接的方法。</li>
</ul>


<h2>GetOrHeadHandler类</h2>

<h3>init方法</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">app</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">server_type</span><span class="p">,</span> <span class="n">ring</span><span class="p">,</span> <span class="n">partition</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">backend_headers</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ring</span> <span class="o">=</span> <span class="n">ring</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span> <span class="o">=</span> <span class="n">server_type</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">partition</span> <span class="o">=</span> <span class="n">partition</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">backend_headers</span> <span class="o">=</span> <span class="n">backend_headers</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">used_nodes</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">used_source_etag</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># stuff from request</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">req_method</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">method</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">req_path</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">path</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">req_query_string</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">query_string</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">newest</span> <span class="o">=</span> <span class="n">config_true_value</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-newest&#39;</span><span class="p">,</span> <span class="s">&#39;f&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># populated when finding source</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">statuses</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">reasons</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">source_headers</span> <span class="o">=</span> <span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>GetOrHeadHandler类的初始化方法。</li>
</ul>


<h3>fast_forward</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">fast_forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num_bytes</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Will skip num_bytes into the current ranges.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :params num_bytes: the number of bytes that have already been read on</span>
</span><span class='line'><span class="sd">                           this request. This will change the Range header</span>
</span><span class='line'><span class="sd">                           so that the next req will start where it left off.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :raises NotImplementedError: if this is a multirange request</span>
</span><span class='line'><span class="sd">        :raises ValueError: if invalid range header</span>
</span><span class='line'><span class="sd">        :raises HTTPRequestedRangeNotSatisfiable: if begin + num_bytes</span>
</span><span class='line'><span class="sd">                                                  &gt; end of range</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;Range&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">backend_headers</span><span class="p">:</span>
</span><span class='line'>            <span class="n">req_range</span> <span class="o">=</span> <span class="n">Range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">backend_headers</span><span class="p">[</span><span class="s">&#39;Range&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">req_range</span><span class="o">.</span><span class="n">ranges</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>                <span class="k">raise</span> <span class="ne">NotImplementedError</span><span class="p">()</span>
</span><span class='line'>            <span class="n">begin</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="n">req_range</span><span class="o">.</span><span class="n">ranges</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">begin</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># this is a -50 range req (last 50 bytes of file)</span>
</span><span class='line'>                <span class="n">end</span> <span class="o">-=</span> <span class="n">num_bytes</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">begin</span> <span class="o">+=</span> <span class="n">num_bytes</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">end</span> <span class="ow">and</span> <span class="n">begin</span> <span class="o">&gt;</span> <span class="n">end</span><span class="p">:</span>
</span><span class='line'>                <span class="k">raise</span> <span class="n">HTTPRequestedRangeNotSatisfiable</span><span class="p">()</span>
</span><span class='line'>            <span class="n">req_range</span><span class="o">.</span><span class="n">ranges</span> <span class="o">=</span> <span class="p">[(</span><span class="n">begin</span><span class="p">,</span> <span class="n">end</span><span class="p">)]</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">backend_headers</span><span class="p">[</span><span class="s">&#39;Range&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">req_range</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">backend_headers</span><span class="p">[</span><span class="s">&#39;Range&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;bytes=</span><span class="si">%d</span><span class="s">-&#39;</span> <span class="o">%</span> <span class="n">num_bytes</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>先判断Range是否在后台进程的header中，如果没有，则在后台进程header中增加Range，值为&#8217;bytes=&lsquo;加num_bytes。</li>
<li>如果有，先创建一个Range对象，判断如果Range对象的ranges如果大于1,则报NotImplementedError的异常。</li>
<li>从rangs中取到开始和结束字节数，先检查两个字节数是否正确，不正确抛异常，正确的话将其重新放入到后台进程header中。</li>
</ul>


<h3>is_good_source</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">is_good_source</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">src</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Indicates whether or not the request made to the backend found</span>
</span><span class='line'><span class="sd">        what it was looking for.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param src: the response from the backend</span>
</span><span class='line'><span class="sd">        :returns: True if found, False if not</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span> <span class="o">==</span> <span class="s">&#39;Object&#39;</span> <span class="ow">and</span> <span class="n">src</span><span class="o">.</span><span class="n">status</span> <span class="o">==</span> <span class="mi">416</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">is_success</span><span class="p">(</span><span class="n">src</span><span class="o">.</span><span class="n">status</span><span class="p">)</span> <span class="ow">or</span> <span class="n">is_redirection</span><span class="p">(</span><span class="n">src</span><span class="o">.</span><span class="n">status</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果是一个Object请求，并且返回状态码是416，则返回True，否则返回状态码是否200～399。</li>
</ul>


<h3>_make_app_iter</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">_make_app_iter</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">source</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Returns an iterator over the contents of the source (via its read</span>
</span><span class='line'><span class="sd">        func).  There is also quite a bit of cleanup to ensure garbage</span>
</span><span class='line'><span class="sd">        collection works and the underlying socket of the source is closed.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param req: incoming request object</span>
</span><span class='line'><span class="sd">        :param source: The httplib.Response object this iterator should read</span>
</span><span class='line'><span class="sd">                       from.</span>
</span><span class='line'><span class="sd">        :param node: The node the source is reading from, for logging purposes.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">nchunks</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="n">bytes_read_from_source</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="n">node_timeout</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">node_timeout</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span> <span class="o">==</span> <span class="s">&#39;Object&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="n">node_timeout</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">recoverable_node_timeout</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>初始化本地变量，如果是object请求，则将节点超时时间设置为object的recoverable_node_timeout。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>                <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">with</span> <span class="n">ChunkReadTimeout</span><span class="p">(</span><span class="n">node_timeout</span><span class="p">):</span>
</span><span class='line'>                        <span class="n">chunk</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">object_chunk_size</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">nchunks</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>                        <span class="n">bytes_read_from_source</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
</span><span class='line'>                <span class="k">except</span> <span class="n">ChunkReadTimeout</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_value</span><span class="p">,</span> <span class="n">exc_traceback</span> <span class="o">=</span> <span class="n">exc_info</span><span class="p">()</span>
</span><span class='line'>                    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">newest</span> <span class="ow">or</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span> <span class="o">!=</span> <span class="s">&#39;Object&#39;</span><span class="p">:</span>
</span><span class='line'>                        <span class="k">raise</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_value</span><span class="p">,</span> <span class="n">exc_traceback</span>
</span><span class='line'>                    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">fast_forward</span><span class="p">(</span><span class="n">bytes_read_from_source</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">except</span> <span class="p">(</span><span class="ne">NotImplementedError</span><span class="p">,</span> <span class="n">HTTPException</span><span class="p">,</span> <span class="ne">ValueError</span><span class="p">):</span>
</span><span class='line'>                        <span class="k">raise</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_value</span><span class="p">,</span> <span class="n">exc_traceback</span>
</span><span class='line'>                    <span class="n">new_source</span><span class="p">,</span> <span class="n">new_node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get_source_and_node</span><span class="p">()</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">new_source</span><span class="p">:</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">exception_occurred</span><span class="p">(</span>
</span><span class='line'>                            <span class="n">node</span><span class="p">,</span> <span class="n">_</span><span class="p">(</span><span class="s">&#39;Object&#39;</span><span class="p">),</span>
</span><span class='line'>                            <span class="n">_</span><span class="p">(</span><span class="s">&#39;Trying to read during GET (retrying)&#39;</span><span class="p">))</span>
</span><span class='line'>                        <span class="c"># Close-out the connection as best as possible.</span>
</span><span class='line'>                        <span class="k">if</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="s">&#39;swift_conn&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
</span><span class='line'>                            <span class="n">close_swift_conn</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">source</span> <span class="o">=</span> <span class="n">new_source</span>
</span><span class='line'>                        <span class="n">node</span> <span class="o">=</span> <span class="n">new_node</span>
</span><span class='line'>                        <span class="n">bytes_read_from_source</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>                        <span class="k">continue</span>
</span><span class='line'>                    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                        <span class="k">raise</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_value</span><span class="p">,</span> <span class="n">exc_traceback</span>
</span><span class='line'>                <span class="k">if</span> <span class="ow">not</span> <span class="n">chunk</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>                <span class="k">with</span> <span class="n">ChunkWriteTimeout</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">client_timeout</span><span class="p">):</span>
</span><span class='line'>                    <span class="k">yield</span> <span class="n">chunk</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>通过一个无限循环，不断读取response的数据，累加读取的块数大小和字节总长度。</li>
<li>如果读取数据超时，则处理异常，如果请求不是Object则抛出最近的异常信息。</li>
<li>记录已读的字节范围，错误抛异常。</li>
<li>获取新的source和节点，如果source存在的话，则创建一个异常并关闭连接重新初始化，否则抛出异常。</li>
<li>如果读取不到数据，则跳出循环。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>                <span class="c"># This is for fairness; if the network is outpacing the CPU,</span>
</span><span class='line'>                <span class="c"># we&#39;ll always be able to read and write data without</span>
</span><span class='line'>                <span class="c"># encountering an EWOULDBLOCK, and so eventlet will not switch</span>
</span><span class='line'>                <span class="c"># greenthreads on its own. We do it manually so that clients</span>
</span><span class='line'>                <span class="c"># don&#39;t starve.</span>
</span><span class='line'>                <span class="c">#</span>
</span><span class='line'>                <span class="c"># The number 5 here was chosen by making stuff up. It&#39;s not</span>
</span><span class='line'>                <span class="c"># every single chunk, but it&#39;s not too big either, so it seemed</span>
</span><span class='line'>                <span class="c"># like it would probably be an okay choice.</span>
</span><span class='line'>                <span class="c">#</span>
</span><span class='line'>                <span class="c"># Note that we may trampoline to other greenthreads more often</span>
</span><span class='line'>                <span class="c"># than once every 5 chunks, depending on how blocking our</span>
</span><span class='line'>                <span class="c"># network IO is; the explicit sleep here simply provides a</span>
</span><span class='line'>                <span class="c"># lower bound on the rate of trampolining.</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">nchunks</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">sleep</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">except</span> <span class="n">ChunkReadTimeout</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">exception_occurred</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">_</span><span class="p">(</span><span class="s">&#39;Object&#39;</span><span class="p">),</span>
</span><span class='line'>                                        <span class="n">_</span><span class="p">(</span><span class="s">&#39;Trying to read during GET&#39;</span><span class="p">))</span>
</span><span class='line'>            <span class="k">raise</span>
</span><span class='line'>        <span class="k">except</span> <span class="n">ChunkWriteTimeout</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span>
</span><span class='line'>                <span class="n">_</span><span class="p">(</span><span class="s">&#39;Client did not read from proxy within </span><span class="si">%s</span><span class="s">s&#39;</span><span class="p">)</span> <span class="o">%</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">client_timeout</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;client_timeouts&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">GeneratorExit</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;swift.non_client_disconnect&#39;</span><span class="p">):</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="n">_</span><span class="p">(</span><span class="s">&#39;Client disconnected on read&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="n">_</span><span class="p">(</span><span class="s">&#39;Trying to send to client&#39;</span><span class="p">))</span>
</span><span class='line'>            <span class="k">raise</span>
</span><span class='line'>        <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># Close-out the connection as best as possible.</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="s">&#39;swift_conn&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
</span><span class='line'>                <span class="n">close_swift_conn</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>每读取5个字节块，休眠一次。</li>
<li>读取数据超时抛异常。</li>
<li>写入数据超时记日志。</li>
<li>抛出各种异常后关闭连接。</li>
</ul>


<h3>_get_source_and_node</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">_get_source_and_node</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">statuses</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">reasons</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">source_headers</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="n">sources</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">node_timeout</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">node_timeout</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span> <span class="o">==</span> <span class="s">&#39;Object&#39;</span> <span class="ow">and</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">newest</span><span class="p">:</span>
</span><span class='line'>            <span class="n">node_timeout</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">recoverable_node_timeout</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>初始化本地变量，设置node_timeout时间。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">iter_nodes</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ring</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">partition</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">node</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">used_nodes</span><span class="p">:</span>
</span><span class='line'>                <span class="k">continue</span>
</span><span class='line'>            <span class="n">start_node_timing</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'>            <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                <span class="k">with</span> <span class="n">ConnectionTimeout</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">conn_timeout</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">conn</span> <span class="o">=</span> <span class="n">http_connect</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">node</span><span class="p">[</span><span class="s">&#39;ip&#39;</span><span class="p">],</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;port&#39;</span><span class="p">],</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;device&#39;</span><span class="p">],</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">partition</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">req_method</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">headers</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">backend_headers</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">query_string</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">req_query_string</span><span class="p">)</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">set_node_timing</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_node_timing</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">with</span> <span class="n">Timeout</span><span class="p">(</span><span class="n">node_timeout</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">possible_source</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span>
</span><span class='line'>                    <span class="c"># See NOTE: swift_conn at top of file about this.</span>
</span><span class='line'>                    <span class="n">possible_source</span><span class="o">.</span><span class="n">swift_conn</span> <span class="o">=</span> <span class="n">conn</span>
</span><span class='line'>            <span class="k">except</span> <span class="p">(</span><span class="ne">Exception</span><span class="p">,</span> <span class="n">Timeout</span><span class="p">):</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">exception_occurred</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">node</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">_</span><span class="p">(</span><span class="s">&#39;Trying to </span><span class="si">%(method)s</span><span class="s"> </span><span class="si">%(path)s</span><span class="s">&#39;</span><span class="p">)</span> <span class="o">%</span>
</span><span class='line'>                    <span class="p">{</span><span class="s">&#39;method&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">req_method</span><span class="p">,</span> <span class="s">&#39;path&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">req_path</span><span class="p">})</span>
</span><span class='line'>                <span class="k">continue</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>循环取节点，如果节点已经被使用了，则跳过该节点，否则封装http连接，设置节点时间。</li>
<li>获取请求结果，如果超时，则抛异常，跳出此次循环。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_good_source</span><span class="p">(</span><span class="n">possible_source</span><span class="p">):</span>
</span><span class='line'>                <span class="c"># 404 if we know we don&#39;t have a synced copy</span>
</span><span class='line'>                <span class="k">if</span> <span class="ow">not</span> <span class="nb">float</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;X-PUT-Timestamp&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)):</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">HTTP_NOT_FOUND</span><span class="p">)</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">reasons</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">source_headers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">close_swift_conn</span><span class="p">(</span><span class="n">possible_source</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">used_source_etag</span><span class="p">:</span>
</span><span class='line'>                        <span class="n">src_headers</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>                            <span class="p">(</span><span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">(),</span> <span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span>
</span><span class='line'>                            <span class="n">possible_source</span><span class="o">.</span><span class="n">getheaders</span><span class="p">())</span>
</span><span class='line'>                        <span class="k">if</span> <span class="n">src_headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;etag&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;&quot;&#39;</span><span class="p">)</span> <span class="o">!=</span> \
</span><span class='line'>                                <span class="bp">self</span><span class="o">.</span><span class="n">used_source_etag</span><span class="p">:</span>
</span><span class='line'>                            <span class="bp">self</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">HTTP_NOT_FOUND</span><span class="p">)</span>
</span><span class='line'>                            <span class="bp">self</span><span class="o">.</span><span class="n">reasons</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                            <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                            <span class="bp">self</span><span class="o">.</span><span class="n">source_headers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                            <span class="k">continue</span>
</span><span class='line'>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">reasons</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">reason</span><span class="p">)</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">source_headers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">sources</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">possible_source</span><span class="p">,</span> <span class="n">node</span><span class="p">))</span>
</span><span class='line'>                    <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">newest</span><span class="p">:</span>  <span class="c"># one good source is enough</span>
</span><span class='line'>                        <span class="k">break</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果返回结果合理，则判断返回结果中的PUT时间是否存在，不存在证明还没有同步，则返回404并关闭连接。</li>
<li>如果时间存在，则继续判断已用etag是否存在，存在的话从返回结果中取出etag值与之比较，不相等就返回404并关闭连接。</li>
<li>已用etag不存在，则将返回结果设置到自身属性中，并判断是否最新，是则跳出循环，取一个good source就足够了。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">reasons</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">reason</span><span class="p">)</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">source_headers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">getheaders</span><span class="p">())</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">possible_source</span><span class="o">.</span><span class="n">status</span> <span class="o">==</span> <span class="n">HTTP_INSUFFICIENT_STORAGE</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">error_limit</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">_</span><span class="p">(</span><span class="s">&#39;ERROR Insufficient Storage&#39;</span><span class="p">))</span>
</span><span class='line'>                <span class="k">elif</span> <span class="n">is_server_error</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">status</span><span class="p">):</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">error_occurred</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">node</span><span class="p">,</span> <span class="n">_</span><span class="p">(</span><span class="s">&#39;ERROR </span><span class="si">%(status)d</span><span class="s"> </span><span class="si">%(body)s</span><span class="s"> &#39;</span>
</span><span class='line'>                                <span class="s">&#39;From </span><span class="si">%(type)s</span><span class="s"> Server&#39;</span><span class="p">)</span> <span class="o">%</span>
</span><span class='line'>                        <span class="p">{</span><span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="n">possible_source</span><span class="o">.</span><span class="n">status</span><span class="p">,</span>
</span><span class='line'>                         <span class="s">&#39;body&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][:</span><span class="mi">1024</span><span class="p">],</span>
</span><span class='line'>                         <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">sources</span><span class="p">:</span>
</span><span class='line'>            <span class="n">sources</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="n">source_key</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>            <span class="n">source</span><span class="p">,</span> <span class="n">node</span> <span class="o">=</span> <span class="n">sources</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">src</span><span class="p">,</span> <span class="n">_junk</span> <span class="ow">in</span> <span class="n">sources</span><span class="p">:</span>
</span><span class='line'>                <span class="n">close_swift_conn</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">used_nodes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>            <span class="n">src_headers</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>                <span class="p">(</span><span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">(),</span> <span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span>
</span><span class='line'>                <span class="n">possible_source</span><span class="o">.</span><span class="n">getheaders</span><span class="p">())</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">used_source_etag</span> <span class="o">=</span> <span class="n">src_headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;etag&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;&quot;&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">source</span><span class="p">,</span> <span class="n">node</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果返回结果不是一个good source，则将返回结果信息设置到自身属性，如果返回状态是507,则将节点加入到错误列表，如果返回状态是其他500以上的数字，则抛出异常。</li>
<li>循环结束后，如果取到了source，则先将sources进行排序然后取第一个，接着关闭剩下的source。</li>
<li>添加节点到已用节点，设置易用etag，返回结果，如果取不到source，则返回空。</li>
</ul>


<h3>get_working_response</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">get_working_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
</span><span class='line'>        <span class="n">source</span><span class="p">,</span> <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get_source_and_node</span><span class="p">()</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">source</span><span class="p">:</span>
</span><span class='line'>            <span class="n">res</span> <span class="o">=</span> <span class="n">Response</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">req</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;GET&#39;</span> <span class="ow">and</span> \
</span><span class='line'>                    <span class="n">source</span><span class="o">.</span><span class="n">status</span> <span class="ow">in</span> <span class="p">(</span><span class="n">HTTP_OK</span><span class="p">,</span> <span class="n">HTTP_PARTIAL_CONTENT</span><span class="p">):</span>
</span><span class='line'>                <span class="n">res</span><span class="o">.</span><span class="n">app_iter</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_make_app_iter</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">source</span><span class="p">)</span>
</span><span class='line'>                <span class="c"># See NOTE: swift_conn at top of file about this.</span>
</span><span class='line'>                <span class="n">res</span><span class="o">.</span><span class="n">swift_conn</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="n">swift_conn</span>
</span><span class='line'>            <span class="n">res</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="n">status</span>
</span><span class='line'>            <span class="n">update_headers</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">source</span><span class="o">.</span><span class="n">getheaders</span><span class="p">())</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="n">res</span><span class="o">.</span><span class="n">environ</span><span class="p">:</span>
</span><span class='line'>                <span class="n">res</span><span class="o">.</span><span class="n">environ</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>            <span class="n">res</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;swift_x_timestamp&#39;</span><span class="p">]</span> <span class="o">=</span> \
</span><span class='line'>                <span class="n">source</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;x-timestamp&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">res</span><span class="o">.</span><span class="n">accept_ranges</span> <span class="o">=</span> <span class="s">&#39;bytes&#39;</span>
</span><span class='line'>            <span class="n">res</span><span class="o">.</span><span class="n">content_length</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;Content-Length&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">source</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;Content-Type&#39;</span><span class="p">):</span>
</span><span class='line'>                <span class="n">res</span><span class="o">.</span><span class="n">charset</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>                <span class="n">res</span><span class="o">.</span><span class="n">content_type</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;Content-Type&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>先获取source和node，如果有的话，则根据req参数封装response，如果请求是&#8217;GET&#8217;并且source的状态是200或206,则设置response的app_iter和conn。</li>
<li>将source的状态码和header设置进response，再分别根据source的内容设置返回的response的值。</li>
</ul>


<h2>Controller类</h2>

<h3>init方法</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="sd">&quot;&quot;&quot;Base WSGI controller class for the proxy&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">server_type</span> <span class="o">=</span> <span class="s">&#39;Base&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Ensure these are all lowercase</span>
</span><span class='line'>    <span class="n">pass_through_headers</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">app</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Creates a controller attached to an application instance</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param app: the application instance</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">account_name</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">trans_id</span> <span class="o">=</span> <span class="s">&#39;-&#39;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_allowed_methods</span> <span class="o">=</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>设置类型为base，初始化方法，创建controller时使用。</li>
</ul>


<h3>allowed_methods</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">allowed_methods</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_allowed_methods</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">_allowed_methods</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'>            <span class="n">all_methods</span> <span class="o">=</span> <span class="n">inspect</span><span class="o">.</span><span class="n">getmembers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">predicate</span><span class="o">=</span><span class="n">inspect</span><span class="o">.</span><span class="n">ismethod</span><span class="p">)</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">all_methods</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="s">&#39;publicly_accessible&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">):</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">_allowed_methods</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_allowed_methods</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>类属性变量allowed_methods的初始化方法。</li>
</ul>


<h3>transfer_headers</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">transfer_headers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">src_headers</span><span class="p">,</span> <span class="n">dst_headers</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Transfer legal headers from an original client request to dictionary</span>
</span><span class='line'><span class="sd">        that will be used as headers by the backend request</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param src_headers: A dictionary of the original client request headers</span>
</span><span class='line'><span class="sd">        :param dst_headers: A dictionary of the backend request headers</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">st</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">x_remove</span> <span class="o">=</span> <span class="s">&#39;x-remove-</span><span class="si">%s</span><span class="s">-meta-&#39;</span> <span class="o">%</span> <span class="n">st</span>
</span><span class='line'>        <span class="n">dst_headers</span><span class="o">.</span><span class="n">update</span><span class="p">((</span><span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;-remove&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                           <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">src_headers</span>
</span><span class='line'>                           <span class="k">if</span> <span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="n">x_remove</span><span class="p">)</span> <span class="ow">or</span>
</span><span class='line'>                           <span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_x_remove_headers</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">dst_headers</span><span class="o">.</span><span class="n">update</span><span class="p">((</span><span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">(),</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'>                           <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">src_headers</span><span class="o">.</span><span class="n">iteritems</span><span class="p">()</span>
</span><span class='line'>                           <span class="k">if</span> <span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">pass_through_headers</span> <span class="ow">or</span>
</span><span class='line'>                           <span class="n">is_sys_or_user_meta</span><span class="p">(</span><span class="n">st</span><span class="p">,</span> <span class="n">k</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>将一个原始客户端请求的遗留header转换为新的header，给后台进程使用。</li>
</ul>


<h3>transfer_headers</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">generate_request_headers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">orig_req</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">additional</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
</span><span class='line'>                                 <span class="n">transfer</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Create a list of headers to be used in backend requets</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param orig_req: the original request sent by the client to the proxy</span>
</span><span class='line'><span class="sd">        :param additional: additional headers to send to the backend</span>
</span><span class='line'><span class="sd">        :param transfer: If True, transfer headers from original client request</span>
</span><span class='line'><span class="sd">        :returns: a dictionary of headers</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="c"># Use the additional headers first so they don&#39;t overwrite the headers</span>
</span><span class='line'>        <span class="c"># we require.</span>
</span><span class='line'>        <span class="n">headers</span> <span class="o">=</span> <span class="n">HeaderKeyDict</span><span class="p">(</span><span class="n">additional</span><span class="p">)</span> <span class="k">if</span> <span class="n">additional</span> <span class="k">else</span> <span class="n">HeaderKeyDict</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">transfer</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">transfer_headers</span><span class="p">(</span><span class="n">orig_req</span><span class="o">.</span><span class="n">headers</span><span class="p">,</span> <span class="n">headers</span><span class="p">)</span>
</span><span class='line'>        <span class="n">headers</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="s">&#39;x-timestamp&#39;</span><span class="p">,</span> <span class="n">normalize_timestamp</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()))</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">orig_req</span><span class="p">:</span>
</span><span class='line'>            <span class="n">referer</span> <span class="o">=</span> <span class="n">orig_req</span><span class="o">.</span><span class="n">as_referer</span><span class="p">()</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">referer</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>        <span class="n">headers</span><span class="p">[</span><span class="s">&#39;x-trans-id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">trans_id</span>
</span><span class='line'>        <span class="n">headers</span><span class="p">[</span><span class="s">&#39;connection&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;close&#39;</span>
</span><span class='line'>        <span class="n">headers</span><span class="p">[</span><span class="s">&#39;user-agent&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;proxy-server </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">()</span>
</span><span class='line'>        <span class="n">headers</span><span class="p">[</span><span class="s">&#39;referer&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">referer</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">headers</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>生成一组headers为后台进程使用。</li>
</ul>


<h3>account_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">account_info</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">req</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Get account information, and also verify that the account exists.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param account: name of the account to get the info for</span>
</span><span class='line'><span class="sd">        :param req: caller&#39;s HTTP request context object (optional)</span>
</span><span class='line'><span class="sd">        :returns: tuple of (account partition, account nodes, container_count)</span>
</span><span class='line'><span class="sd">                  or (None, None, None) if it does not exist</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">partition</span><span class="p">,</span> <span class="n">nodes</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">account_ring</span><span class="o">.</span><span class="n">get_nodes</span><span class="p">(</span><span class="n">account</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">req</span><span class="p">:</span>
</span><span class='line'>            <span class="n">env</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="s">&#39;environ&#39;</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">env</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">get_info</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;container_count&#39;</span><span class="p">)</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="n">container_count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">container_count</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="s">&#39;container_count&#39;</span><span class="p">])</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">partition</span><span class="p">,</span> <span class="n">nodes</span><span class="p">,</span> <span class="n">container_count</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>获取account信息，正常返回分区号，节点和容器数量，获取不到返回3个None。</li>
</ul>


<h3>account_info</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">container_info</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">req</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Get container information and thusly verify container existence.</span>
</span><span class='line'><span class="sd">        This will also verify account existence.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param account: account name for the container</span>
</span><span class='line'><span class="sd">        :param container: container name to look up</span>
</span><span class='line'><span class="sd">        :param req: caller&#39;s HTTP request context object (optional)</span>
</span><span class='line'><span class="sd">        :returns: dict containing at least container partition (&#39;partition&#39;),</span>
</span><span class='line'><span class="sd">                  container nodes (&#39;containers&#39;), container read</span>
</span><span class='line'><span class="sd">                  acl (&#39;read_acl&#39;), container write acl (&#39;write_acl&#39;),</span>
</span><span class='line'><span class="sd">                  and container sync key (&#39;sync_key&#39;).</span>
</span><span class='line'><span class="sd">                  Values are set to None if the container does not exist.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">part</span><span class="p">,</span> <span class="n">nodes</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">container_ring</span><span class="o">.</span><span class="n">get_nodes</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">req</span><span class="p">:</span>
</span><span class='line'>            <span class="n">env</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="s">&#39;environ&#39;</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">env</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">get_info</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>            <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_container_info</span><span class="p">({},</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">info</span><span class="p">[</span><span class="s">&#39;partition&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>            <span class="n">info</span><span class="p">[</span><span class="s">&#39;nodes&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">info</span><span class="p">[</span><span class="s">&#39;partition&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">part</span>
</span><span class='line'>            <span class="n">info</span><span class="p">[</span><span class="s">&#39;nodes&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">nodes</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">info</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>获取container信息，会顺便校验container是否存在，也会校验account是否存在。</li>
</ul>


<h3>make_request(私有方法)</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">_make_request</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nodes</span><span class="p">,</span> <span class="n">part</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">query</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">logger_thread_locals</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Iterates over the given node iterator, sending an HTTP request to one</span>
</span><span class='line'><span class="sd">        node at a time.  The first non-informational, non-server-error</span>
</span><span class='line'><span class="sd">        response is returned.  If no non-informational, non-server-error</span>
</span><span class='line'><span class="sd">        response is received from any of the nodes, returns None.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param nodes: an iterator of the backend server and handoff servers</span>
</span><span class='line'><span class="sd">        :param part: the partition number</span>
</span><span class='line'><span class="sd">        :param method: the method to send to the backend</span>
</span><span class='line'><span class="sd">        :param path: the path to send to the backend</span>
</span><span class='line'><span class="sd">                     (full path ends up being /&lt;$device&gt;/&lt;$part&gt;/&lt;$path&gt;)</span>
</span><span class='line'><span class="sd">        :param headers: a list of dicts, where each dict represents one</span>
</span><span class='line'><span class="sd">                        backend request that should be made.</span>
</span><span class='line'><span class="sd">        :param query: query string to send to the backend.</span>
</span><span class='line'><span class="sd">        :param logger_thread_locals: The thread local values to be set on the</span>
</span><span class='line'><span class="sd">                                     self.app.logger to retain transaction</span>
</span><span class='line'><span class="sd">                                     logging information.</span>
</span><span class='line'><span class="sd">        :returns: a swob.Response object, or None if no responses were received</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">thread_locals</span> <span class="o">=</span> <span class="n">logger_thread_locals</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">nodes</span><span class="p">:</span>
</span><span class='line'>            <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                <span class="n">start_node_timing</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'>                <span class="k">with</span> <span class="n">ConnectionTimeout</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">conn_timeout</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">conn</span> <span class="o">=</span> <span class="n">http_connect</span><span class="p">(</span><span class="n">node</span><span class="p">[</span><span class="s">&#39;ip&#39;</span><span class="p">],</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;port&#39;</span><span class="p">],</span>
</span><span class='line'>                                        <span class="n">node</span><span class="p">[</span><span class="s">&#39;device&#39;</span><span class="p">],</span> <span class="n">part</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span>
</span><span class='line'>                                        <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">query_string</span><span class="o">=</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">conn</span><span class="o">.</span><span class="n">node</span> <span class="o">=</span> <span class="n">node</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">set_node_timing</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_node_timing</span><span class="p">)</span>
</span><span class='line'>                <span class="k">with</span> <span class="n">Timeout</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">node_timeout</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">resp</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span>
</span><span class='line'>                    <span class="k">if</span> <span class="ow">not</span> <span class="n">is_informational</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">status</span><span class="p">)</span> <span class="ow">and</span> \
</span><span class='line'>                            <span class="ow">not</span> <span class="n">is_server_error</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">status</span><span class="p">):</span>
</span><span class='line'>                        <span class="k">return</span> <span class="n">resp</span><span class="o">.</span><span class="n">status</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">reason</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">getheaders</span><span class="p">(),</span> \
</span><span class='line'>                            <span class="n">resp</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>                    <span class="k">elif</span> <span class="n">resp</span><span class="o">.</span><span class="n">status</span> <span class="o">==</span> <span class="n">HTTP_INSUFFICIENT_STORAGE</span><span class="p">:</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">error_limit</span><span class="p">(</span><span class="n">node</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">_</span><span class="p">(</span><span class="s">&#39;ERROR Insufficient Storage&#39;</span><span class="p">))</span>
</span><span class='line'>            <span class="k">except</span> <span class="p">(</span><span class="ne">Exception</span><span class="p">,</span> <span class="n">Timeout</span><span class="p">):</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">exception_occurred</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">node</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">_</span><span class="p">(</span><span class="s">&#39;Trying to </span><span class="si">%(method)s</span><span class="s"> </span><span class="si">%(path)s</span><span class="s">&#39;</span><span class="p">)</span> <span class="o">%</span>
</span><span class='line'>                    <span class="p">{</span><span class="s">&#39;method&#39;</span><span class="p">:</span> <span class="n">method</span><span class="p">,</span> <span class="s">&#39;path&#39;</span><span class="p">:</span> <span class="n">path</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>遍历每个节点，根据节点信息发起请求，如果请求不是100+和500+，则返回请求结果。</li>
<li>如果请求状态码为507，则加入node到异常node列表。</li>
<li>其他异常抛出异常信息。</li>
</ul>


<h3>make_requests</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">make_requests</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">ring</span><span class="p">,</span> <span class="n">part</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">query_string</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Sends an HTTP request to multiple nodes and aggregates the results.</span>
</span><span class='line'><span class="sd">        It attempts the primary nodes concurrently, then iterates over the</span>
</span><span class='line'><span class="sd">        handoff nodes as needed.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param req: a request sent by the client</span>
</span><span class='line'><span class="sd">        :param ring: the ring used for finding backend servers</span>
</span><span class='line'><span class="sd">        :param part: the partition number</span>
</span><span class='line'><span class="sd">        :param method: the method to send to the backend</span>
</span><span class='line'><span class="sd">        :param path: the path to send to the backend</span>
</span><span class='line'><span class="sd">                     (full path ends up being  /&lt;$device&gt;/&lt;$part&gt;/&lt;$path&gt;)</span>
</span><span class='line'><span class="sd">        :param headers: a list of dicts, where each dict represents one</span>
</span><span class='line'><span class="sd">                        backend request that should be made.</span>
</span><span class='line'><span class="sd">        :param query_string: optional query string to send to the backend</span>
</span><span class='line'><span class="sd">        :returns: a swob.Response object</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">start_nodes</span> <span class="o">=</span> <span class="n">ring</span><span class="o">.</span><span class="n">get_part_nodes</span><span class="p">(</span><span class="n">part</span><span class="p">)</span>
</span><span class='line'>        <span class="n">nodes</span> <span class="o">=</span> <span class="n">GreenthreadSafeIterator</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">iter_nodes</span><span class="p">(</span><span class="n">ring</span><span class="p">,</span> <span class="n">part</span><span class="p">))</span>
</span><span class='line'>        <span class="n">pile</span> <span class="o">=</span> <span class="n">GreenAsyncPile</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">start_nodes</span><span class="p">))</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">head</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">:</span>
</span><span class='line'>            <span class="n">pile</span><span class="o">.</span><span class="n">spawn</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_make_request</span><span class="p">,</span> <span class="n">nodes</span><span class="p">,</span> <span class="n">part</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span>
</span><span class='line'>                       <span class="n">head</span><span class="p">,</span> <span class="n">query_string</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">thread_locals</span><span class="p">)</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="n">statuses</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">resp</span> <span class="ow">in</span> <span class="n">pile</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="n">resp</span><span class="p">:</span>
</span><span class='line'>                <span class="k">continue</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">resp</span><span class="p">)</span>
</span><span class='line'>            <span class="n">statuses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">resp</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">have_quorum</span><span class="p">(</span><span class="n">statuses</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">start_nodes</span><span class="p">)):</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>        <span class="c"># give any pending requests *some* chance to finish</span>
</span><span class='line'>        <span class="n">pile</span><span class="o">.</span><span class="n">waitall</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">post_quorum_timeout</span><span class="p">)</span>
</span><span class='line'>        <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">start_nodes</span><span class="p">):</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">HTTP_SERVICE_UNAVAILABLE</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="n">statuses</span><span class="p">,</span> <span class="n">reasons</span><span class="p">,</span> <span class="n">resp_headers</span><span class="p">,</span> <span class="n">bodies</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">best_response</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">statuses</span><span class="p">,</span> <span class="n">reasons</span><span class="p">,</span> <span class="n">bodies</span><span class="p">,</span>
</span><span class='line'>                                  <span class="s">&#39;</span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">server_type</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">method</span><span class="p">),</span>
</span><span class='line'>                                  <span class="n">headers</span><span class="o">=</span><span class="n">resp_headers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>先通过partition获取node节点，再根据节点个数创建线程发起每个节点请求。</li>
<li>获取每个线程的返回结果，将状态码和响应结果记录保存到列表中，如果状态码列表个数超过节点的一半，则跳出循环。</li>
<li>将剩下的response设置为503，最后通过best_response方法获取response。</li>
</ul>


<h3>have_quorum</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">have_quorum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">statuses</span><span class="p">,</span> <span class="n">node_count</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Given a list of statuses from several requests, determine if</span>
</span><span class='line'><span class="sd">        a quorum response can already be decided.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param statuses: list of statuses returned</span>
</span><span class='line'><span class="sd">        :param node_count: number of nodes being queried (basically ring count)</span>
</span><span class='line'><span class="sd">        :returns: True or False, depending on if quorum is established</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">quorum</span> <span class="o">=</span> <span class="n">quorum_size</span><span class="p">(</span><span class="n">node_count</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">statuses</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">quorum</span><span class="p">:</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">hundred</span> <span class="ow">in</span> <span class="p">(</span><span class="n">HTTP_OK</span><span class="p">,</span> <span class="n">HTTP_MULTIPLE_CHOICES</span><span class="p">,</span> <span class="n">HTTP_BAD_REQUEST</span><span class="p">):</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">sum</span><span class="p">(</span><span class="mi">1</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">statuses</span>
</span><span class='line'>                       <span class="k">if</span> <span class="n">hundred</span> <span class="o">&lt;=</span> <span class="n">s</span> <span class="o">&lt;</span> <span class="n">hundred</span> <span class="o">+</span> <span class="mi">100</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">quorum</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>通过节点个数和一组状态码判断响应是否已经满足限额。</li>
</ul>


<h3>best_response</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">best_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">statuses</span><span class="p">,</span> <span class="n">reasons</span><span class="p">,</span> <span class="n">bodies</span><span class="p">,</span> <span class="n">server_type</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">etag</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Given a list of responses from several servers, choose the best to</span>
</span><span class='line'><span class="sd">        return to the API.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param req: swob.Request object</span>
</span><span class='line'><span class="sd">        :param statuses: list of statuses returned</span>
</span><span class='line'><span class="sd">        :param reasons: list of reasons for each status</span>
</span><span class='line'><span class="sd">        :param bodies: bodies of each response</span>
</span><span class='line'><span class="sd">        :param server_type: type of server the responses came from</span>
</span><span class='line'><span class="sd">        :param etag: etag</span>
</span><span class='line'><span class="sd">        :param headers: headers of each response</span>
</span><span class='line'><span class="sd">        :returns: swob.Response object with the correct status, body, etc. set</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="n">Response</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">statuses</span><span class="p">):</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">hundred</span> <span class="ow">in</span> <span class="p">(</span><span class="n">HTTP_OK</span><span class="p">,</span> <span class="n">HTTP_MULTIPLE_CHOICES</span><span class="p">,</span> <span class="n">HTTP_BAD_REQUEST</span><span class="p">):</span>
</span><span class='line'>                <span class="n">hstatuses</span> <span class="o">=</span> \
</span><span class='line'>                    <span class="p">[</span><span class="n">s</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">statuses</span> <span class="k">if</span> <span class="n">hundred</span> <span class="o">&lt;=</span> <span class="n">s</span> <span class="o">&lt;</span> <span class="n">hundred</span> <span class="o">+</span> <span class="mi">100</span><span class="p">]</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">hstatuses</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">quorum_size</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">statuses</span><span class="p">)):</span>
</span><span class='line'>                    <span class="n">status</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">hstatuses</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">status_index</span> <span class="o">=</span> <span class="n">statuses</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">resp</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">reasons</span><span class="p">[</span><span class="n">status_index</span><span class="p">])</span>
</span><span class='line'>                    <span class="n">resp</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">bodies</span><span class="p">[</span><span class="n">status_index</span><span class="p">]</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">headers</span><span class="p">:</span>
</span><span class='line'>                        <span class="n">update_headers</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="n">headers</span><span class="p">[</span><span class="n">status_index</span><span class="p">])</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">etag</span><span class="p">:</span>
</span><span class='line'>                        <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;etag&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">etag</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;&quot;&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">resp</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="n">_</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%(type)s</span><span class="s"> returning 503 for </span><span class="si">%(statuses)s</span><span class="s">&#39;</span><span class="p">),</span>
</span><span class='line'>                              <span class="p">{</span><span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="n">server_type</span><span class="p">,</span> <span class="s">&#39;statuses&#39;</span><span class="p">:</span> <span class="n">statuses</span><span class="p">})</span>
</span><span class='line'>        <span class="n">resp</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">&#39;503 Internal Server Error&#39;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resp</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>给定一组response，返回最佳的response。</li>
<li>比如副本数是3,response列表是[201,201,503],则返回201。</li>
</ul>


<h3>autocreate_account</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">autocreate_account</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Autocreate an account</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param env: the environment of the request leading to this autocreate</span>
</span><span class='line'><span class="sd">        :param account: the unquoted account name</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">partition</span><span class="p">,</span> <span class="n">nodes</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">account_ring</span><span class="o">.</span><span class="n">get_nodes</span><span class="p">(</span><span class="n">account</span><span class="p">)</span>
</span><span class='line'>        <span class="n">path</span> <span class="o">=</span> <span class="s">&#39;/</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">account</span>
</span><span class='line'>        <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;X-Timestamp&#39;</span><span class="p">:</span> <span class="n">normalize_timestamp</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()),</span>
</span><span class='line'>                   <span class="s">&#39;X-Trans-Id&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">trans_id</span><span class="p">,</span>
</span><span class='line'>                   <span class="s">&#39;Connection&#39;</span><span class="p">:</span> <span class="s">&#39;close&#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">make_requests</span><span class="p">(</span><span class="n">Request</span><span class="o">.</span><span class="n">blank</span><span class="p">(</span><span class="s">&#39;/v1&#39;</span> <span class="o">+</span> <span class="n">path</span><span class="p">),</span>
</span><span class='line'>                                  <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">account_ring</span><span class="p">,</span> <span class="n">partition</span><span class="p">,</span> <span class="s">&#39;PUT&#39;</span><span class="p">,</span>
</span><span class='line'>                                  <span class="n">path</span><span class="p">,</span> <span class="p">[</span><span class="n">headers</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">nodes</span><span class="p">))</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">is_success</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">status_int</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;autocreate account </span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'>            <span class="n">clear_info_cache</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s">&#39;Could not autocreate account </span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>发起一个PUT请求自动创建account，创建失败记录警告信息。</li>
</ul>


<h3>GETorHEAD_base</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">GETorHEAD_base</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">server_type</span><span class="p">,</span> <span class="n">ring</span><span class="p">,</span> <span class="n">partition</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Base handler for HTTP GET or HEAD requests.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param req: swob.Request object</span>
</span><span class='line'><span class="sd">        :param server_type: server type used in logging</span>
</span><span class='line'><span class="sd">        :param ring: the ring to obtain nodes from</span>
</span><span class='line'><span class="sd">        :param partition: partition</span>
</span><span class='line'><span class="sd">        :param path: path for the request</span>
</span><span class='line'><span class="sd">        :returns: swob.Response object</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">backend_headers</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">generate_request_headers</span><span class="p">(</span>
</span><span class='line'>            <span class="n">req</span><span class="p">,</span> <span class="n">additional</span><span class="o">=</span><span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">handler</span> <span class="o">=</span> <span class="n">GetOrHeadHandler</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span><span class="p">,</span> <span class="n">ring</span><span class="p">,</span>
</span><span class='line'>                                   <span class="n">partition</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">backend_headers</span><span class="p">)</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">=</span> <span class="n">handler</span><span class="o">.</span><span class="n">get_working_response</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">res</span><span class="p">:</span>
</span><span class='line'>            <span class="n">res</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">best_response</span><span class="p">(</span>
</span><span class='line'>                <span class="n">req</span><span class="p">,</span> <span class="n">handler</span><span class="o">.</span><span class="n">statuses</span><span class="p">,</span> <span class="n">handler</span><span class="o">.</span><span class="n">reasons</span><span class="p">,</span> <span class="n">handler</span><span class="o">.</span><span class="n">bodies</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&#39;</span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">server_type</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">method</span><span class="p">),</span>
</span><span class='line'>                <span class="n">headers</span><span class="o">=</span><span class="n">handler</span><span class="o">.</span><span class="n">source_headers</span><span class="p">)</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="p">(</span><span class="n">vrs</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">split_path</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>            <span class="n">_set_info_cache</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span><span class='line'>            <span class="k">pass</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="p">(</span><span class="n">vrs</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">split_path</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>            <span class="n">_set_object_info_cache</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span>
</span><span class='line'>                                   <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span><span class='line'>            <span class="k">pass</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">res</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>基类controller的get或head请求处理方法，首先构造header和handler发起一个http请求。</li>
<li>如果请求没有响应，则调用best_response方法取到response。</li>
<li>如果请求有响应，则根据request分割出account、container和object信息，设置到缓存中，最后返回response。</li>
</ul>


<h3>is_origin_allowed</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">is_origin_allowed</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cors_info</span><span class="p">,</span> <span class="n">origin</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Is the given Origin allowed to make requests to this resource</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param cors_info: the resource&#39;s CORS related metadata headers</span>
</span><span class='line'><span class="sd">        :param origin: the origin making the request</span>
</span><span class='line'><span class="sd">        :return: True or False</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">allowed_origins</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">cors_info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;allow_origin&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="n">allowed_origins</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>
</span><span class='line'>                <span class="p">[</span><span class="n">a</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>                 <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">cors_info</span><span class="p">[</span><span class="s">&#39;allow_origin&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>                 <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">strip</span><span class="p">()])</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">cors_allow_origin</span><span class="p">:</span>
</span><span class='line'>            <span class="n">allowed_origins</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">cors_allow_origin</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">origin</span> <span class="ow">in</span> <span class="n">allowed_origins</span> <span class="ow">or</span> <span class="s">&#39;*&#39;</span> <span class="ow">in</span> <span class="n">allowed_origins</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>判断该请求方法是否允许发起请求，先从header中获取&#8217;allow_origin&#8217;的值，如果有的花，更新允许访问列表。</li>
<li>如果原请求方法在允许访问列表中，或者允许访问列表中有&#8217;*&lsquo;，则返回True。</li>
</ul>


<h3>OPTIONS</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="nd">@public</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">OPTIONS</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Base handler for OPTIONS requests</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param req: swob.Request object</span>
</span><span class='line'><span class="sd">        :returns: swob.Response object</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="c"># Prepare the default response</span>
</span><span class='line'>        <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;Allow&#39;</span><span class="p">:</span> <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">allowed_methods</span><span class="p">)}</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="n">Response</span><span class="p">(</span><span class="n">status</span><span class="o">=</span><span class="mi">200</span><span class="p">,</span> <span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># If this isn&#39;t a CORS pre-flight request then return now</span>
</span><span class='line'>        <span class="n">req_origin_value</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;Origin&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">req_origin_value</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">resp</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>options请求的基本handler，准备一个默认的response，如果不是一个CORS请求，则返回默认的response。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>        <span class="c"># This is a CORS preflight request so check it&#39;s allowed</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">container_info</span> <span class="o">=</span> \
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">container_info</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">account_name</span><span class="p">,</span>
</span><span class='line'>                                    <span class="bp">self</span><span class="o">.</span><span class="n">container_name</span><span class="p">,</span> <span class="n">req</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">AttributeError</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># This should only happen for requests to the Account. A future</span>
</span><span class='line'>            <span class="c"># change could allow CORS requests to the Account level as well.</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">resp</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">cors</span> <span class="o">=</span> <span class="n">container_info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;cors&#39;</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># If the CORS origin isn&#39;t allowed return a 401</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_origin_allowed</span><span class="p">(</span><span class="n">cors</span><span class="p">,</span> <span class="n">req_origin_value</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;Access-Control-Request-Method&#39;</span><span class="p">)</span> <span class="ow">not</span> <span class="ow">in</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">allowed_methods</span><span class="p">):</span>
</span><span class='line'>            <span class="n">resp</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">HTTP_UNAUTHORIZED</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">resp</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>如果对account进行操作的CORS请求，则返回默认reponse，否则获取container信息。</li>
<li>如果CORS请求不允许，则返回401。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>        <span class="c"># Allow all headers requested in the request. The CORS</span>
</span><span class='line'>        <span class="c"># specification does leave the door open for this, as mentioned in</span>
</span><span class='line'>        <span class="c"># http://www.w3.org/TR/cors/#resource-preflight-requests</span>
</span><span class='line'>        <span class="c"># Note: Since the list of headers can be unbounded</span>
</span><span class='line'>        <span class="c"># simply returning headers can be enough.</span>
</span><span class='line'>        <span class="n">allow_headers</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;Access-Control-Request-Headers&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="n">allow_headers</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>
</span><span class='line'>                <span class="n">list_from_csv</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;Access-Control-Request-Headers&#39;</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Populate the response with the CORS preflight headers</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">cors</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;allow_origin&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="o">==</span> <span class="s">&#39;*&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">headers</span><span class="p">[</span><span class="s">&#39;access-control-allow-origin&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;*&#39;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">headers</span><span class="p">[</span><span class="s">&#39;access-control-allow-origin&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">req_origin_value</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">cors</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;max_age&#39;</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="n">headers</span><span class="p">[</span><span class="s">&#39;access-control-max-age&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cors</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;max_age&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">headers</span><span class="p">[</span><span class="s">&#39;access-control-allow-methods&#39;</span><span class="p">]</span> <span class="o">=</span> \
</span><span class='line'>            <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">allowed_methods</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">allow_headers</span><span class="p">:</span>
</span><span class='line'>            <span class="n">headers</span><span class="p">[</span><span class="s">&#39;access-control-allow-headers&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">allow_headers</span><span class="p">)</span>
</span><span class='line'>        <span class="n">resp</span><span class="o">.</span><span class="n">headers</span> <span class="o">=</span> <span class="n">headers</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">resp</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在response的header中增加相关header，分别有&#8217;access-control-allow-origin&#8217;,&lsquo;access-control-max-age&rsquo;,&lsquo;access-control-allow-methods&#8217;和&#8217;access-control-allow-headers&#8217;。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[swift源码详解（二）——proxy/server.py]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/04/20/swift-code-explain-proxy-server/"/>
    <updated>2014-04-20T20:52:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/04/20/swift-code-explain-proxy-server</id>
    <content type="html"><![CDATA[<h2><a href="http://zhaozhiming.github.io/blog/2014/04/19/swift-code-explain-total/">回swift代码结构目录</a></h2>

<h3>int方法</h3>

<!--more-->


<p></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">conf</span><span class="p">,</span> <span class="n">memcache</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">logger</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">account_ring</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">container_ring</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">object_ring</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">conf</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="n">conf</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">logger</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="n">get_logger</span><span class="p">(</span><span class="n">conf</span><span class="p">,</span> <span class="n">log_route</span><span class="o">=</span><span class="s">&#39;proxy-server&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="n">logger</span>
</span><span class='line'>        <span class="n">swift_dir</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;swift_dir&#39;</span><span class="p">,</span> <span class="s">&#39;/etc/swift&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">node_timeout</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;node_timeout&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">recoverable_node_timeout</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span>
</span><span class='line'>            <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;recoverable_node_timeout&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">node_timeout</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">conn_timeout</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;conn_timeout&#39;</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">client_timeout</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;client_timeout&#39;</span><span class="p">,</span> <span class="mi">60</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">put_queue_depth</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;put_queue_depth&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">object_chunk_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;object_chunk_size&#39;</span><span class="p">,</span> <span class="mi">65536</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">client_chunk_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;client_chunk_size&#39;</span><span class="p">,</span> <span class="mi">65536</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">trans_id_suffix</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;trans_id_suffix&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">post_quorum_timeout</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;post_quorum_timeout&#39;</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">error_suppression_interval</span> <span class="o">=</span> \
</span><span class='line'>            <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;error_suppression_interval&#39;</span><span class="p">,</span> <span class="mi">60</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">error_suppression_limit</span> <span class="o">=</span> \
</span><span class='line'>            <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;error_suppression_limit&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">recheck_container_existence</span> <span class="o">=</span> \
</span><span class='line'>            <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;recheck_container_existence&#39;</span><span class="p">,</span> <span class="mi">60</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">recheck_account_existence</span> <span class="o">=</span> \
</span><span class='line'>            <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;recheck_account_existence&#39;</span><span class="p">,</span> <span class="mi">60</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">allow_account_management</span> <span class="o">=</span> \
</span><span class='line'>            <span class="n">config_true_value</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;allow_account_management&#39;</span><span class="p">,</span> <span class="s">&#39;no&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">object_post_as_copy</span> <span class="o">=</span> \
</span><span class='line'>            <span class="n">config_true_value</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;object_post_as_copy&#39;</span><span class="p">,</span> <span class="s">&#39;true&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">object_ring</span> <span class="o">=</span> <span class="n">object_ring</span> <span class="ow">or</span> <span class="n">Ring</span><span class="p">(</span><span class="n">swift_dir</span><span class="p">,</span> <span class="n">ring_name</span><span class="o">=</span><span class="s">&#39;object&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">container_ring</span> <span class="o">=</span> <span class="n">container_ring</span> <span class="ow">or</span> <span class="n">Ring</span><span class="p">(</span><span class="n">swift_dir</span><span class="p">,</span>
</span><span class='line'>                                                     <span class="n">ring_name</span><span class="o">=</span><span class="s">&#39;container&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">account_ring</span> <span class="o">=</span> <span class="n">account_ring</span> <span class="ow">or</span> <span class="n">Ring</span><span class="p">(</span><span class="n">swift_dir</span><span class="p">,</span>
</span><span class='line'>                                                 <span class="n">ring_name</span><span class="o">=</span><span class="s">&#39;account&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">memcache</span> <span class="o">=</span> <span class="n">memcache</span>
</span><span class='line'>        <span class="n">mimetypes</span><span class="o">.</span><span class="n">init</span><span class="p">(</span><span class="n">mimetypes</span><span class="o">.</span><span class="n">knownfiles</span> <span class="o">+</span>
</span><span class='line'>                       <span class="p">[</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">swift_dir</span><span class="p">,</span> <span class="s">&#39;mime.types&#39;</span><span class="p">)])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">account_autocreate</span> <span class="o">=</span> \
</span><span class='line'>            <span class="n">config_true_value</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;account_autocreate&#39;</span><span class="p">,</span> <span class="s">&#39;no&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">expiring_objects_account</span> <span class="o">=</span> \
</span><span class='line'>            <span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;auto_create_account_prefix&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="s">&#39;.&#39;</span><span class="p">)</span> <span class="o">+</span> \
</span><span class='line'>            <span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;expiring_objects_account_name&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="s">&#39;expiring_objects&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">expiring_objects_container_divisor</span> <span class="o">=</span> \
</span><span class='line'>            <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;expiring_objects_container_divisor&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="mi">86400</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">max_containers_per_account</span> <span class="o">=</span> \
</span><span class='line'>            <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;max_containers_per_account&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">max_containers_whitelist</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>            <span class="n">a</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;max_containers_whitelist&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">strip</span><span class="p">()]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">deny_host_headers</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>            <span class="n">host</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">host</span> <span class="ow">in</span>
</span><span class='line'>            <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;deny_host_headers&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="n">host</span><span class="o">.</span><span class="n">strip</span><span class="p">()]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">rate_limit_after_segment</span> <span class="o">=</span> \
</span><span class='line'>            <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;rate_limit_after_segment&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">rate_limit_segments_per_sec</span> <span class="o">=</span> \
</span><span class='line'>            <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;rate_limit_segments_per_sec&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">log_handoffs</span> <span class="o">=</span> <span class="n">config_true_value</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;log_handoffs&#39;</span><span class="p">,</span> <span class="s">&#39;true&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">cors_allow_origin</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>            <span class="n">a</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;cors_allow_origin&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">strip</span><span class="p">()]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">strict_cors_mode</span> <span class="o">=</span> <span class="n">config_true_value</span><span class="p">(</span>
</span><span class='line'>            <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;strict_cors_mode&#39;</span><span class="p">,</span> <span class="s">&#39;t&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">node_timings</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">timing_expiry</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;timing_expiry&#39;</span><span class="p">,</span> <span class="mi">300</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">sorting_method</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;sorting_method&#39;</span><span class="p">,</span> <span class="s">&#39;shuffle&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">max_large_object_get_time</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span>
</span><span class='line'>            <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;max_large_object_get_time&#39;</span><span class="p">,</span> <span class="s">&#39;86400&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;request_node_count&#39;</span><span class="p">,</span> <span class="s">&#39;2 * replicas&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="n">value</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">value</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">request_node_count</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">replicas</span><span class="p">:</span> <span class="n">value</span>
</span><span class='line'>        <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span> <span class="ow">and</span> <span class="n">value</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;*&#39;</span> <span class="ow">and</span> <span class="n">value</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;replicas&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">value</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">value</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">request_node_count</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">replicas</span><span class="p">:</span> <span class="n">value</span> <span class="o">*</span> <span class="n">replicas</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span>
</span><span class='line'>                <span class="s">&#39;Invalid request_node_count value: </span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">_read_affinity</span> <span class="o">=</span> <span class="n">read_affinity</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;read_affinity&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">read_affinity_sort_key</span> <span class="o">=</span> <span class="n">affinity_key_function</span><span class="p">(</span><span class="n">read_affinity</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">ValueError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># make the message a little more useful</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Invalid read_affinity value: </span><span class="si">%r</span><span class="s"> (</span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span>
</span><span class='line'>                             <span class="p">(</span><span class="n">read_affinity</span><span class="p">,</span> <span class="n">err</span><span class="o">.</span><span class="n">message</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">write_affinity</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;write_affinity&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">write_affinity_is_local_fn</span> \
</span><span class='line'>                <span class="o">=</span> <span class="n">affinity_locality_predicate</span><span class="p">(</span><span class="n">write_affinity</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">ValueError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># make the message a little more useful</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Invalid write_affinity value: </span><span class="si">%r</span><span class="s"> (</span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span>
</span><span class='line'>                             <span class="p">(</span><span class="n">write_affinity</span><span class="p">,</span> <span class="n">err</span><span class="o">.</span><span class="n">message</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;write_affinity_node_count&#39;</span><span class="p">,</span>
</span><span class='line'>                         <span class="s">&#39;2 * replicas&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="n">value</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">value</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">write_affinity_node_count</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">replicas</span><span class="p">:</span> <span class="n">value</span>
</span><span class='line'>        <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span> <span class="ow">and</span> <span class="n">value</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;*&#39;</span> <span class="ow">and</span> <span class="n">value</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;replicas&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">value</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">value</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">write_affinity_node_count</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">replicas</span><span class="p">:</span> <span class="n">value</span> <span class="o">*</span> <span class="n">replicas</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span>
</span><span class='line'>                <span class="s">&#39;Invalid write_affinity_node_count value: </span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>
</span><span class='line'>        <span class="c"># swift_owner_headers are stripped by the account and container</span>
</span><span class='line'>        <span class="c"># controllers; we should extend header stripping to object controller</span>
</span><span class='line'>        <span class="c"># when a privileged object header is implemented.</span>
</span><span class='line'>        <span class="n">swift_owner_headers</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span>
</span><span class='line'>            <span class="s">&#39;swift_owner_headers&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;x-container-read, x-container-write, &#39;</span>
</span><span class='line'>            <span class="s">&#39;x-container-sync-key, x-container-sync-to, &#39;</span>
</span><span class='line'>            <span class="s">&#39;x-account-meta-temp-url-key, x-account-meta-temp-url-key-2, &#39;</span>
</span><span class='line'>            <span class="s">&#39;x-account-access-control&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">swift_owner_headers</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>            <span class="n">name</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">title</span><span class="p">()</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">swift_owner_headers</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="n">name</span><span class="o">.</span><span class="n">strip</span><span class="p">()]</span>
</span><span class='line'>        <span class="c"># Initialization was successful, so now apply the client chunk size</span>
</span><span class='line'>        <span class="c"># parameter as the default read / write buffer size for the network</span>
</span><span class='line'>        <span class="c"># sockets.</span>
</span><span class='line'>        <span class="c">#</span>
</span><span class='line'>        <span class="c"># NOTE WELL: This is a class setting, so until we get set this on a</span>
</span><span class='line'>        <span class="c"># per-connection basis, this affects reading and writing on ALL</span>
</span><span class='line'>        <span class="c"># sockets, those between the proxy servers and external clients, and</span>
</span><span class='line'>        <span class="c"># those between the proxy servers and the other internal servers.</span>
</span><span class='line'>        <span class="c">#</span>
</span><span class='line'>        <span class="c"># ** Because it affects the client as well, currently, we use the</span>
</span><span class='line'>        <span class="c"># client chunk size as the govenor and not the object chunk size.</span>
</span><span class='line'>        <span class="n">socket</span><span class="o">.</span><span class="n">_fileobject</span><span class="o">.</span><span class="n">default_bufsize</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">client_chunk_size</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">expose_info</span> <span class="o">=</span> <span class="n">config_true_value</span><span class="p">(</span>
</span><span class='line'>            <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;expose_info&#39;</span><span class="p">,</span> <span class="s">&#39;yes&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">disallowed_sections</span> <span class="o">=</span> <span class="n">list_from_csv</span><span class="p">(</span>
</span><span class='line'>            <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;disallowed_sections&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">admin_key</span> <span class="o">=</span> <span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;admin_key&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>        <span class="n">register_swift_info</span><span class="p">(</span>
</span><span class='line'>            <span class="n">version</span><span class="o">=</span><span class="n">swift_version</span><span class="p">,</span>
</span><span class='line'>            <span class="n">strict_cors_mode</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">strict_cors_mode</span><span class="p">,</span>
</span><span class='line'>            <span class="o">**</span><span class="n">constraints</span><span class="o">.</span><span class="n">EFFECTIVE_CONSTRAINTS</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>proxy server的初始化函数，具体配置的说明可以参考<a href="http://docs.openstack.org/havana/config-reference/content/proxy-server-conf.html">这里</a>。</p>

<h3>check_config</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">check_config</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Check the configuration for possible errors</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_read_affinity</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">sorting_method</span> <span class="o">!=</span> <span class="s">&#39;affinity&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s">&quot;sorting_method is set to &#39;</span><span class="si">%s</span><span class="s">&#39;, not &#39;affinity&#39;; &quot;</span>
</span><span class='line'>                             <span class="s">&quot;read_affinity setting will have no effect.&quot;</span> <span class="o">%</span>
</span><span class='line'>                             <span class="bp">self</span><span class="o">.</span><span class="n">sorting_method</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>proxy server初始化后被调用的方法，检查proxy的read_affinity配置和排序方法设置不一致时，记录警告日志。</p>

<h3>call方法</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">start_response</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        WSGI entry point.</span>
</span><span class='line'><span class="sd">        Wraps env in swob.Request object and passes it down.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param env: WSGI environment dictionary</span>
</span><span class='line'><span class="sd">        :param start_response: WSGI callable</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">memcache</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">memcache</span> <span class="o">=</span> <span class="n">cache_from_env</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>            <span class="n">req</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">update_request</span><span class="p">(</span><span class="n">Request</span><span class="p">(</span><span class="n">env</span><span class="p">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">handle_request</span><span class="p">(</span><span class="n">req</span><span class="p">)(</span><span class="n">env</span><span class="p">,</span> <span class="n">start_response</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">UnicodeError</span><span class="p">:</span>
</span><span class='line'>            <span class="n">err</span> <span class="o">=</span> <span class="n">HTTPPreconditionFailed</span><span class="p">(</span>
</span><span class='line'>                <span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">,</span> <span class="n">body</span><span class="o">=</span><span class="s">&#39;Invalid UTF8 or contains NULL&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">err</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">start_response</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="p">(</span><span class="ne">Exception</span><span class="p">,</span> <span class="n">Timeout</span><span class="p">):</span>
</span><span class='line'>            <span class="n">start_response</span><span class="p">(</span><span class="s">&#39;500 Server Error&#39;</span><span class="p">,</span>
</span><span class='line'>                           <span class="p">[(</span><span class="s">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s">&#39;text/plain&#39;</span><span class="p">)])</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[</span><span class="s">&#39;Internal server error.</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>9~10: 检查memcache缓存是否为空，如果为空的话就从上下文中获取，由于proxy-server在pipeline中是最后面，如果pipeline前面配置了memcache中间件的话，就可以从上下文中取到。</li>
<li>12: 调用update_request方法，后面会介绍。</li>
<li>13: 调用handle_request方法，后面会介绍，最后返回response。</li>
<li>14~17: 捕获UnicodeError并返回412。</li>
<li>18~21: 捕获Timeout和其他异常并返回500。</li>
</ul>


<h3>update_request</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">update_request</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;x-storage-token&#39;</span> <span class="ow">in</span> <span class="n">req</span><span class="o">.</span><span class="n">headers</span> <span class="ow">and</span> \
</span><span class='line'>                <span class="s">&#39;x-auth-token&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="p">:</span>
</span><span class='line'>            <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;x-auth-token&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;x-storage-token&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">req</span>
</span></code></pre></td></tr></table></div></figure>


<p>该方法是将requeset中的x-auth-token的header替换为x-storage-token的header。</p>

<h3>handle_request</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">handle_request</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Entry point for proxy server.</span>
</span><span class='line'><span class="sd">        Should return a WSGI-style callable (such as swob.Response).</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param req: swob.Request object</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">set_statsd_prefix</span><span class="p">(</span><span class="s">&#39;proxy-server&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">req</span><span class="o">.</span><span class="n">content_length</span> <span class="ow">and</span> <span class="n">req</span><span class="o">.</span><span class="n">content_length</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;errors&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">HTTPBadRequest</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">,</span>
</span><span class='line'>                                      <span class="n">body</span><span class="o">=</span><span class="s">&#39;Invalid Content-Length&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="ow">not</span> <span class="n">check_utf8</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">path_info</span><span class="p">):</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;errors&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">HTTPPreconditionFailed</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">,</span> <span class="n">body</span><span class="o">=</span><span class="s">&#39;Invalid UTF8 or contains NULL&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">except</span> <span class="ne">UnicodeError</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;errors&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">HTTPPreconditionFailed</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">,</span> <span class="n">body</span><span class="o">=</span><span class="s">&#39;Invalid UTF8 or contains NULL&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>8: 在log中设置&#8217;proxy-server&#8217;前缀。</li>
<li>10~13: 检查request中content length如果有且长度为0，则返回500。</li>
<li>15~23  : 检查url格式是否utf-8，如果不是则返回412。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                <span class="n">controller</span><span class="p">,</span> <span class="n">path_parts</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_controller</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>                <span class="n">p</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">path_info</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;utf-8&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;errors&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">HTTPNotFound</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="n">controller</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;errors&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">HTTPPreconditionFailed</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">,</span> <span class="n">body</span><span class="o">=</span><span class="s">&#39;Bad URL&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">deny_host_headers</span> <span class="ow">and</span> \
</span><span class='line'>                    <span class="n">req</span><span class="o">.</span><span class="n">host</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">deny_host_headers</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">HTTPForbidden</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">,</span> <span class="n">body</span><span class="o">=</span><span class="s">&#39;Invalid host header&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>2～5: 调用get_controller方法(后面会介绍)，通过url获取对应的controller类和url中通过&#8217;/&lsquo;符号分割的各个部分。</li>
<li>6~8: 捕获ValueError并返回404。</li>
<li>9~11: 如果controller类为空则返回404。</li>
<li>12~14: 如果proxy中有定义deny_host_headers(禁止访问的ip），并且request的ip与禁止访问的ip一致，则返回403。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">set_statsd_prefix</span><span class="p">(</span><span class="s">&#39;proxy-server.&#39;</span> <span class="o">+</span>
</span><span class='line'>                                          <span class="n">controller</span><span class="o">.</span><span class="n">server_type</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>
</span><span class='line'>            <span class="n">controller</span> <span class="o">=</span> <span class="n">controller</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">path_parts</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="s">&#39;swift.trans_id&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># if this wasn&#39;t set by an earlier middleware, set it now</span>
</span><span class='line'>                <span class="n">trans_id</span> <span class="o">=</span> <span class="n">generate_trans_id</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">trans_id_suffix</span><span class="p">)</span>
</span><span class='line'>                <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;swift.trans_id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">trans_id</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">txn_id</span> <span class="o">=</span> <span class="n">trans_id</span>
</span><span class='line'>            <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;x-trans-id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;swift.trans_id&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="n">controller</span><span class="o">.</span><span class="n">trans_id</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;swift.trans_id&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">client_ip</span> <span class="o">=</span> <span class="n">get_remote_client</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>1～2: 日志加上controller名字前缀。</li>
<li>3: 通过controller类实例化controller对象。</li>
<li>4~10: 如果swift.trans_id没有在request的上下文中，则重新生成trans_id，并设置在上下文、日志、header和controller中。</li>
<li>11: 调用get_remote_client方法(后面介绍)，先判断header中是否有&#8217;x-cluster-client-ip&#8217;，如果没有再去获取header中的&#8217;x-forwarded-for&#8217;，还是没有的话就从request中的remote_addr取值，得到client_ip。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                <span class="n">handler</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">controller</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">method</span><span class="p">)</span>
</span><span class='line'>                <span class="nb">getattr</span><span class="p">(</span><span class="n">handler</span><span class="p">,</span> <span class="s">&#39;publicly_accessible&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">except</span> <span class="ne">AttributeError</span><span class="p">:</span>
</span><span class='line'>                <span class="n">allowed_methods</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">controller</span><span class="p">,</span> <span class="s">&#39;allowed_methods&#39;</span><span class="p">,</span> <span class="nb">set</span><span class="p">())</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">HTTPMethodNotAllowed</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;Allow&#39;</span><span class="p">:</span> <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">allowed_methods</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>2~3: 通过request的method，在controller得到一个名字相同，并且有&#8217;public&#8217;标签的方法对象handler。</li>
<li>4~7: 如果获取不到对应的public方法，则打印出controller中所有public方法并返回405。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="k">if</span> <span class="s">&#39;swift.authorize&#39;</span> <span class="ow">in</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># We call authorize before the handler, always. If authorized,</span>
</span><span class='line'>                <span class="c"># we remove the swift.authorize hook so isn&#39;t ever called</span>
</span><span class='line'>                <span class="c"># again. If not authorized, we return the denial unless the</span>
</span><span class='line'>                <span class="c"># controller&#39;s method indicates it&#39;d like to gather more</span>
</span><span class='line'>                <span class="c"># information and try again later.</span>
</span><span class='line'>                <span class="n">resp</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;swift.authorize&#39;</span><span class="p">](</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="ow">not</span> <span class="n">resp</span><span class="p">:</span>
</span><span class='line'>                    <span class="c"># No resp means authorized, no delayed recheck required.</span>
</span><span class='line'>                    <span class="k">del</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;swift.authorize&#39;</span><span class="p">]</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="c"># Response indicates denial, but we might delay the denial</span>
</span><span class='line'>                    <span class="c"># and recheck later. If not delayed, return the error now.</span>
</span><span class='line'>                    <span class="k">if</span> <span class="ow">not</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">handler</span><span class="p">,</span> <span class="s">&#39;delay_denial&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
</span><span class='line'>                        <span class="k">return</span> <span class="n">resp</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果request的上下文中有swift.authorize，则调用这个方法进行认证。<br/>
如果没有返回结果证明之前已经认证通过了，后面的请求不需要再认证，将&#8217;swift.authorize&#8217;从上下文去掉。<br/>
如果有Response返回则表示认证不通过，会先检查是否有延迟禁止的配置，如果没有返回认证不通过的response，如果有则会等后面再重新确认。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>            <span class="c"># Save off original request method (GET, POST, etc.) in case it</span>
</span><span class='line'>            <span class="c"># gets mutated during handling.  This way logging can display the</span>
</span><span class='line'>            <span class="c"># method the client actually sent.</span>
</span><span class='line'>            <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;swift.orig_req_method&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">method</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">handler</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="n">HTTPException</span> <span class="k">as</span> <span class="n">error_response</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">error_response</span>
</span><span class='line'>        <span class="k">except</span> <span class="p">(</span><span class="ne">Exception</span><span class="p">,</span> <span class="n">Timeout</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="n">_</span><span class="p">(</span><span class="s">&#39;ERROR Unhandled exception in request&#39;</span><span class="p">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">HTTPServerError</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>4~5: 在日志中记录原始的request方法，防止请求在传播过程中发生突变http请求方法发生改变。</li>
<li>6~10: 捕获异常，记录日志。</li>
</ul>


<h3>get_controller</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">get_controller</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Get the controller to handle a request.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param path: path from request</span>
</span><span class='line'><span class="sd">        :returns: tuple of (controller class, path dictionary)</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :raises: ValueError (thrown by split_path) if given invalid path</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">path</span> <span class="o">==</span> <span class="s">&#39;/info&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">d</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">version</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">expose_info</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">expose_info</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">disallowed_sections</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">disallowed_sections</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">admin_key</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">admin_key</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">InfoController</span><span class="p">,</span> <span class="n">d</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">version</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">split_path</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="n">d</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">version</span><span class="o">=</span><span class="n">version</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">account_name</span><span class="o">=</span><span class="n">account</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">container_name</span><span class="o">=</span><span class="n">container</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">object_name</span><span class="o">=</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">obj</span> <span class="ow">and</span> <span class="n">container</span> <span class="ow">and</span> <span class="n">account</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">ObjectController</span><span class="p">,</span> <span class="n">d</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">container</span> <span class="ow">and</span> <span class="n">account</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">ContainerController</span><span class="p">,</span> <span class="n">d</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">account</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">container</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">obj</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">AccountController</span><span class="p">,</span> <span class="n">d</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span><span class="p">,</span> <span class="n">d</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>10～15: 如果url是&#8217;info&#8217;，则返回InController和controller字典参数，expose_info表示是否暴露信息，disallowed_sections表示不允许暴露的字段列表，比如container_qutoas, tempurl等。</li>
<li>17～28: 根据url判断是account、container还是object，返回对应的controller和字典参数。</li>
</ul>


<h3>sort_nodes</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">sort_nodes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nodes</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        Sorts nodes in-place (and returns the sorted list) according to</span>
</span><span class='line'><span class="sd">        the configured strategy. The default &quot;sorting&quot; is to randomly</span>
</span><span class='line'><span class="sd">        shuffle the nodes. If the &quot;timing&quot; strategy is chosen, the nodes</span>
</span><span class='line'><span class="sd">        are sorted according to the stored timing data.</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>        <span class="c"># In the case of timing sorting, shuffling ensures that close timings</span>
</span><span class='line'>        <span class="c"># (ie within the rounding resolution) won&#39;t prefer one over another.</span>
</span><span class='line'>        <span class="c"># Python&#39;s sort is stable (http://wiki.python.org/moin/HowTo/Sorting/)</span>
</span><span class='line'>        <span class="n">shuffle</span><span class="p">(</span><span class="n">nodes</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">sorting_method</span> <span class="o">==</span> <span class="s">&#39;timing&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">def</span> <span class="nf">key_func</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
</span><span class='line'>                <span class="n">timing</span><span class="p">,</span> <span class="n">expires</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">node_timings</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">node</span><span class="p">[</span><span class="s">&#39;ip&#39;</span><span class="p">],</span> <span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">timing</span> <span class="k">if</span> <span class="n">expires</span> <span class="o">&gt;</span> <span class="n">now</span> <span class="k">else</span> <span class="o">-</span><span class="mf">1.0</span>
</span><span class='line'>            <span class="n">nodes</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">key_func</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">sorting_method</span> <span class="o">==</span> <span class="s">&#39;affinity&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">nodes</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">read_affinity_sort_key</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">nodes</span>
</span></code></pre></td></tr></table></div></figure>


<p>节点的排序方法，将节点根据配置的排序策略进行排序。<br/>
* 11: 将节点顺序打乱，确保节点不会按照时间排好序。
* 12～18: 如果配置的排序策略是按时间排序，则定义一个（节点）按时间排序的方法让节点按照这个方法排序，如果节点已过期则timing为-0.1，即会被排到最后。
* 19～20: 如果配置的排序策略是按亲和力排序，则节点按照亲和力方法排序。</p>

<h3>set_node_timing</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">set_node_timing</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">timing</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">sorting_method</span> <span class="o">!=</span> <span class="s">&#39;timing&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>
</span><span class='line'>        <span class="n">timing</span> <span class="o">=</span> <span class="nb">round</span><span class="p">(</span><span class="n">timing</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>  <span class="c"># sort timings to the millisecond</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">node_timings</span><span class="p">[</span><span class="n">node</span><span class="p">[</span><span class="s">&#39;ip&#39;</span><span class="p">]]</span> <span class="o">=</span> <span class="p">(</span><span class="n">timing</span><span class="p">,</span> <span class="n">now</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">timing_expiry</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>2～3: 如果配置的排序策略不是&#8217;timing&#8217;，则直接返回不做设置。</li>
<li>4～6: 设置单个节点的排序时间过期时间。</li>
</ul>


<h3>error_limited</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">error_limited</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Check if the node is currently error limited.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param node: dictionary of node to check</span>
</span><span class='line'><span class="sd">        :returns: True if error limited, False otherwise</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;errors&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;last_error&#39;</span> <span class="ow">in</span> <span class="n">node</span> <span class="ow">and</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;last_error&#39;</span><span class="p">]</span> <span class="o">&lt;</span> \
</span><span class='line'>                <span class="n">now</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">error_suppression_interval</span><span class="p">:</span>
</span><span class='line'>            <span class="k">del</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;last_error&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="k">if</span> <span class="s">&#39;errors&#39;</span> <span class="ow">in</span> <span class="n">node</span><span class="p">:</span>
</span><span class='line'>                <span class="k">del</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;errors&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>        <span class="n">limited</span> <span class="o">=</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;errors&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">error_suppression_limit</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">limited</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span>
</span><span class='line'>                <span class="n">_</span><span class="p">(</span><span class="s">&#39;Node error limited </span><span class="si">%(ip)s</span><span class="s">:</span><span class="si">%(port)s</span><span class="s"> (</span><span class="si">%(device)s</span><span class="s">)&#39;</span><span class="p">),</span> <span class="n">node</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">limited</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>8～10: 如果节点里面没有&#8217;errors&#8217;选项，则返回false。</li>
<li>11～10: 如果节点里面的&#8217;last_error&#8217;选项不正确，则删除该选项和errors选项，并返回false。</li>
<li>12～15: 判断节点的错误个数是否超过配置的错误限制，如果超过则记录日志，并返回是否超限制的结果。</li>
</ul>


<h3>error_limit</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">error_limit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Mark a node as error limited. This immediately pretends the</span>
</span><span class='line'><span class="sd">        node received enough errors to trigger error suppression. Use</span>
</span><span class='line'><span class="sd">        this for errors like Insufficient Storage. For other errors</span>
</span><span class='line'><span class="sd">        use :func:`error_occurred`.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param node: dictionary of node to error limit</span>
</span><span class='line'><span class="sd">        :param msg: error message</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">node</span><span class="p">[</span><span class="s">&#39;errors&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">error_suppression_limit</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">node</span><span class="p">[</span><span class="s">&#39;last_error&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="n">_</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%(msg)s</span><span class="s"> </span><span class="si">%(ip)s</span><span class="s">:</span><span class="si">%(port)s</span><span class="s">/</span><span class="si">%(device)s</span><span class="s">&#39;</span><span class="p">),</span>
</span><span class='line'>                          <span class="p">{</span><span class="s">&#39;msg&#39;</span><span class="p">:</span> <span class="n">msg</span><span class="p">,</span> <span class="s">&#39;ip&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;ip&#39;</span><span class="p">],</span>
</span><span class='line'>                          <span class="s">&#39;port&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;port&#39;</span><span class="p">],</span> <span class="s">&#39;device&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;device&#39;</span><span class="p">]})</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>11～14: 记录一个节点的错误信息:错误个数，最后错误的时间，并记录日志。</li>
</ul>


<h3>error_occurred</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">error_occurred</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Handle logging, and handling of errors.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param node: dictionary of node to handle errors for</span>
</span><span class='line'><span class="sd">        :param msg: error message</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">node</span><span class="p">[</span><span class="s">&#39;errors&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;errors&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">node</span><span class="p">[</span><span class="s">&#39;last_error&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">time</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="n">_</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%(msg)s</span><span class="s"> </span><span class="si">%(ip)s</span><span class="s">:</span><span class="si">%(port)s</span><span class="s">/</span><span class="si">%(device)s</span><span class="s">&#39;</span><span class="p">),</span>
</span><span class='line'>                          <span class="p">{</span><span class="s">&#39;msg&#39;</span><span class="p">:</span> <span class="n">msg</span><span class="p">,</span> <span class="s">&#39;ip&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;ip&#39;</span><span class="p">],</span>
</span><span class='line'>                          <span class="s">&#39;port&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;port&#39;</span><span class="p">],</span> <span class="s">&#39;device&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;device&#39;</span><span class="p">]})</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>8～12: 与前面的方法类似，唯一区别是记录节点错误个数是取当前的错误个数，然后+1。</li>
</ul>


<h3>iter_nodes</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">iter_nodes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ring</span><span class="p">,</span> <span class="n">partition</span><span class="p">,</span> <span class="n">node_iter</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Yields nodes for a ring partition, skipping over error</span>
</span><span class='line'><span class="sd">        limited nodes and stopping at the configurable number of</span>
</span><span class='line'><span class="sd">        nodes. If a node yielded subsequently gets error limited, an</span>
</span><span class='line'><span class="sd">        extra node will be yielded to take its place.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        Note that if you&#39;re going to iterate over this concurrently from</span>
</span><span class='line'><span class="sd">        multiple greenthreads, you&#39;ll want to use a</span>
</span><span class='line'><span class="sd">        swift.common.utils.GreenthreadSafeIterator to serialize access.</span>
</span><span class='line'><span class="sd">        Otherwise, you may get ValueErrors from concurrent access. (You also</span>
</span><span class='line'><span class="sd">        may not, depending on how logging is configured, the vagaries of</span>
</span><span class='line'><span class="sd">        socket IO and eventlet, and the phase of the moon.)</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param ring: ring to get yield nodes from</span>
</span><span class='line'><span class="sd">        :param partition: ring partition to yield nodes for</span>
</span><span class='line'><span class="sd">        :param node_iter: optional iterable of nodes to try. Useful if you</span>
</span><span class='line'><span class="sd">            want to filter or reorder the nodes.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">part_nodes</span> <span class="o">=</span> <span class="n">ring</span><span class="o">.</span><span class="n">get_part_nodes</span><span class="p">(</span><span class="n">partition</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">node_iter</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="n">node_iter</span> <span class="o">=</span> <span class="n">itertools</span><span class="o">.</span><span class="n">chain</span><span class="p">(</span><span class="n">part_nodes</span><span class="p">,</span>
</span><span class='line'>                                        <span class="n">ring</span><span class="o">.</span><span class="n">get_more_nodes</span><span class="p">(</span><span class="n">partition</span><span class="p">))</span>
</span><span class='line'>        <span class="n">num_primary_nodes</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">part_nodes</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Use of list() here forcibly yanks the first N nodes (the primary</span>
</span><span class='line'>        <span class="c"># nodes) from node_iter, so the rest of its values are handoffs.</span>
</span><span class='line'>        <span class="n">primary_nodes</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">sort_nodes</span><span class="p">(</span>
</span><span class='line'>            <span class="nb">list</span><span class="p">(</span><span class="n">itertools</span><span class="o">.</span><span class="n">islice</span><span class="p">(</span><span class="n">node_iter</span><span class="p">,</span> <span class="n">num_primary_nodes</span><span class="p">)))</span>
</span><span class='line'>        <span class="n">handoff_nodes</span> <span class="o">=</span> <span class="n">node_iter</span>
</span><span class='line'>        <span class="n">nodes_left</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">request_node_count</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">primary_nodes</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>20～24: 根据partition获取相应的节点，如果node_iter为空，则将之前取到的节点和get_more_nodes节点连接起来为node_iter赋值，并取得节点个数。</li>
<li>28～31: 将node_iter的节点重新排序，并取前面部分作为主要nodes，handoff_nodes为node_iter剩下的nodes， nodes_left为剩下的节点个数。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">primary_nodes</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">error_limited</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
</span><span class='line'>                <span class="k">yield</span> <span class="n">node</span>
</span><span class='line'>                <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">error_limited</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">nodes_left</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">nodes_left</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                        <span class="k">return</span>
</span><span class='line'>        <span class="n">handoffs</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">handoff_nodes</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">error_limited</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
</span><span class='line'>                <span class="n">handoffs</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">log_handoffs</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;handoff_count&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span>
</span><span class='line'>                        <span class="s">&#39;Handoff requested (</span><span class="si">%d</span><span class="s">)&#39;</span> <span class="o">%</span> <span class="n">handoffs</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">handoffs</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">primary_nodes</span><span class="p">):</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;handoff_all_count&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="k">yield</span> <span class="n">node</span>
</span><span class='line'>                <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">error_limited</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">nodes_left</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">nodes_left</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                        <span class="k">return</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>1～7: 遍历每个主节点，如果节点没有错误则返回该节点，剩余节点数-1,如果剩余节点数&lt;=0,则直接返回。</li>
<li>8～22: 如果主节点中都有错误，则从剩余节点中查找满足条件的节点，查找方法和主节点查找方法雷同，只是多了一些日志的记录。</li>
</ul>


<h3>exception_occurred</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">exception_occurred</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">typ</span><span class="p">,</span> <span class="n">additional_info</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Handle logging of generic exceptions.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param node: dictionary of node to log the error for</span>
</span><span class='line'><span class="sd">        :param typ: server type</span>
</span><span class='line'><span class="sd">        :param additional_info: additional information to log</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span>
</span><span class='line'>            <span class="n">_</span><span class="p">(</span><span class="s">&#39;ERROR with </span><span class="si">%(type)s</span><span class="s"> server </span><span class="si">%(ip)s</span><span class="s">:</span><span class="si">%(port)s</span><span class="s">/</span><span class="si">%(device)s</span><span class="s"> re: &#39;</span>
</span><span class='line'>              <span class="s">&#39;</span><span class="si">%(info)s</span><span class="s">&#39;</span><span class="p">),</span>
</span><span class='line'>            <span class="p">{</span><span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="n">typ</span><span class="p">,</span> <span class="s">&#39;ip&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;ip&#39;</span><span class="p">],</span> <span class="s">&#39;port&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;port&#39;</span><span class="p">],</span>
</span><span class='line'>             <span class="s">&#39;device&#39;</span><span class="p">:</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;device&#39;</span><span class="p">],</span> <span class="s">&#39;info&#39;</span><span class="p">:</span> <span class="n">additional_info</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>9～13: 当异常发生的时候，记录异常日志。</li>
</ul>


<h3>modify_wsgi_pipeline</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">modify_wsgi_pipeline</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pipe</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Called during WSGI pipeline creation. Modifies the WSGI pipeline</span>
</span><span class='line'><span class="sd">        context to ensure that mandatory middleware is present in the pipeline.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        :param pipe: A PipelineWrapper object</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">pipeline_was_modified</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">filter_spec</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="n">required_filters</span><span class="p">):</span>
</span><span class='line'>            <span class="n">filter_name</span> <span class="o">=</span> <span class="n">filter_spec</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">filter_name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">pipe</span><span class="p">:</span>
</span><span class='line'>                <span class="n">afters</span> <span class="o">=</span> <span class="n">filter_spec</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;after_fn&#39;</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">_junk</span><span class="p">:</span> <span class="p">[])(</span><span class="n">pipe</span><span class="p">)</span>
</span><span class='line'>                <span class="n">insert_at</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">after</span> <span class="ow">in</span> <span class="n">afters</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                        <span class="n">insert_at</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">insert_at</span><span class="p">,</span> <span class="n">pipe</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">after</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>  <span class="c"># not in pipeline; ignore it</span>
</span><span class='line'>                        <span class="k">pass</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span>
</span><span class='line'>                    <span class="s">&#39;Adding required filter </span><span class="si">%s</span><span class="s"> to pipeline at position </span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span>
</span><span class='line'>                    <span class="p">(</span><span class="n">filter_name</span><span class="p">,</span> <span class="n">insert_at</span><span class="p">))</span>
</span><span class='line'>                <span class="n">ctx</span> <span class="o">=</span> <span class="n">pipe</span><span class="o">.</span><span class="n">create_filter</span><span class="p">(</span><span class="n">filter_name</span><span class="p">)</span>
</span><span class='line'>                <span class="n">pipe</span><span class="o">.</span><span class="n">insert_filter</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="n">insert_at</span><span class="p">)</span>
</span><span class='line'>                <span class="n">pipeline_was_modified</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">pipeline_was_modified</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&quot;Pipeline was modified. New pipeline is </span><span class="se">\&quot;</span><span class="si">%s</span><span class="se">\&quot;</span><span class="s">.&quot;</span><span class="p">,</span>
</span><span class='line'>                             <span class="n">pipe</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">&quot;Pipeline is </span><span class="se">\&quot;</span><span class="si">%s</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pipe</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>8～24: 遍历定义好的中间件required_filters，如果该中间件没有在pipeline中，则将该中间件插入到pipeline，插入位置根据中间件的atfer_fn方法得到。</li>
<li>26～31: 记录人日志信息。</li>
</ul>


<h3>required_filters</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># List of entry points for mandatory middlewares.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Fields:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># &quot;name&quot; (required) is the entry point name from setup.py.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># &quot;after_fn&quot; (optional) a function that takes a PipelineWrapper object as its</span>
</span><span class='line'><span class="c"># single argument and returns a list of middlewares that this middleware</span>
</span><span class='line'><span class="c"># should come after. Any middlewares in the returned list that are not present</span>
</span><span class='line'><span class="c"># in the pipeline will be ignored, so you can safely name optional middlewares</span>
</span><span class='line'><span class="c"># to come after. For example, [&quot;catch_errors&quot;, &quot;bulk&quot;] would install this</span>
</span><span class='line'><span class="c"># middleware after catch_errors and bulk if both were present, but if bulk</span>
</span><span class='line'><span class="c"># were absent, would just install it after catch_errors.</span>
</span><span class='line'>
</span><span class='line'><span class="n">required_filters</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;catch_errors&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;gatekeeper&#39;</span><span class="p">,</span>
</span><span class='line'>     <span class="s">&#39;after_fn&#39;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">pipe</span><span class="p">:</span> <span class="p">([</span><span class="s">&#39;catch_errors&#39;</span><span class="p">]</span>
</span><span class='line'>                               <span class="k">if</span> <span class="n">pipe</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&quot;catch_errors&quot;</span><span class="p">)</span>
</span><span class='line'>                               <span class="k">else</span> <span class="p">[])},</span>
</span><span class='line'>    <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;dlo&#39;</span><span class="p">,</span> <span class="s">&#39;after_fn&#39;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">_junk</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;catch_errors&#39;</span><span class="p">,</span> <span class="s">&#39;gatekeeper&#39;</span><span class="p">,</span>
</span><span class='line'>                                               <span class="s">&#39;proxy_logging&#39;</span><span class="p">]}]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>modify_wsgi_pipeline方法用到的required_filters。</li>
</ul>


<h3>app_factory</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">app_factory</span><span class="p">(</span><span class="n">global_conf</span><span class="p">,</span> <span class="o">**</span><span class="n">local_conf</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;paste.deploy app factory for creating WSGI proxy apps.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">conf</span> <span class="o">=</span> <span class="n">global_conf</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'>    <span class="n">conf</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">local_conf</span><span class="p">)</span>
</span><span class='line'>    <span class="n">app</span> <span class="o">=</span> <span class="n">Application</span><span class="p">(</span><span class="n">conf</span><span class="p">)</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">check_config</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">app</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>proxy server的工厂方法，初始化server对象并检查配置，然后返回创建好的对象。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[swift源码详解（一）——开始]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/04/19/swift-code-explain-total/"/>
    <updated>2014-04-19T17:19:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/04/19/swift-code-explain-total</id>
    <content type="html"><![CDATA[<p>从今天开始准备仔细再看一下swift的源码，然后把理解的内容记录下来。下面是swift源码的代码结构，准备每天更新1～2个文件的代码理解，更新好的在文件名上会在下面的代码结构上有链接出现。</p>

<!--more-->


<p>
swift的源码因为不断在更新，笔记记录的代码就以2014-4-18的为准，我已经fork了一份swift源码到我github上，地址是：<a href="https://github.com/zhaozhiming/swift">https://github.com/zhaozhiming/swift</a>，代码结构如下：</p>

<ul>
<li><h3>swift</h3>

<ul>
<li><h3>account</h3>

<ul>
<li>auditor.py</li>
<li>backend.py</li>
<li>reaper.py</li>
<li>replicator.py</li>
<li>server.py</li>
<li>utils.py</li>
</ul>
</li>
<li><h3>cli</h3>

<ul>
<li>info.py</li>
<li>recon.py</li>
<li>ringbuilder.py</li>
<li>ringbuilder.py</li>
</ul>
</li>
<li><h3>common</h3>

<ul>
<li><h3>middleware</h3>

<ul>
<li>account_quotas.py</li>
<li>acl.py</li>
<li>bulk.py</li>
<li>catch_errors.py</li>
<li>cname_lookup.py</li>
<li>container_quotas.py</li>
<li>container_sync.py</li>
<li>crossdomain.py</li>
<li>dlo.py</li>
<li>domain_remap.py</li>
<li>formpost.py</li>
<li>gatekeeper.py</li>
<li>healthcheck.py</li>
<li>list_endpoints.py</li>
<li>memcache.py</li>
<li>name_check.py</li>
<li>proxy_logging.py</li>
<li>ratelimit.py</li>
<li>recon.py</li>
<li>slo.py</li>
<li>staticweb.py</li>
<li>tempauth.py</li>
<li>tempurl.py</li>
</ul>
</li>
<li><h3>ring</h3>

<ul>
<li>builder.py</li>
<li>ring.py</li>
<li>utils.py</li>
</ul>
</li>
<li>bufferedhttp.py</li>
<li>constraints.py</li>
<li>container_sync_realms.py</li>
<li>daemon.py</li>
<li>db.py</li>
<li>db_replicator.py</li>
<li>direct_client.py</li>
<li>exceptions.py</li>
<li>http.py</li>
<li>internal_client.py</li>
<li>manager.py</li>
<li>memcached.py</li>
<li>request_helpers.py</li>
<li>swob.py</li>
<li>swob.py</li>
<li>utils.py</li>
<li>wsgi.py</li>
</ul>
</li>
<li><h3>container</h3>

<ul>
<li>auditor.py</li>
<li>backend.py</li>
<li>replicator.py</li>
<li>server.py</li>
<li>sync.py</li>
<li>updater.py</li>
</ul>
</li>
<li><h3>obj</h3>

<ul>
<li>auditor.py</li>
<li>diskfile.py</li>
<li>expirer.py</li>
<li>mem_diskfile.py</li>
<li>mem_server.py</li>
<li>replicator.py</li>
<li>server.py</li>
<li>ssync_receiver.py</li>
<li>ssync_sender.py</li>
<li>updater.py</li>
</ul>
</li>
<li><h3>proxy</h3>

<ul>
<li>controllers

<ul>
<li>account.py</li>
<li><a href="http://zhaozhiming.github.io/blog/2014/05/04/swift-code-explain-3-proxy-controllers-base/">base.py</a></li>
<li>container.py</li>
<li>obj.py</li>
</ul>
</li>
<li><a href="http://zhaozhiming.github.io/blog/2014/04/20/swift-code-explain-proxy-server/">server.py</a></li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在ubunut下使用pycharm和eclipse进行python远程调试]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/04/13/python-remote-debug-setting-by-pycharm-and-eclipse-in-ubuntu/"/>
    <updated>2014-04-13T15:54:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/04/13/python-remote-debug-setting-by-pycharm-and-eclipse-in-ubuntu</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-4/pycharm_and_eclipse.jpg"></p>

<p>我比较喜欢Pycharm，因为这个是JetBrains公司出的python IDE工具，该公司下的java IDE工具——IDEA，无论从界面还是操作上都甩eclipse几条街，但项目组里有些人使用eclipse比较久了，一时让他们转pycharm比较困难，所以还是两边的设置都介绍一下吧。</p>

<!--more-->


<p></p>

<h2>pycharm远程调试</h2>

<p>pycharmd的远程调试比eclipse的简单多了，而且调试程序也比较稳定，不像eclipse那样容易出一些莫名其妙的问题，步骤如下。</p>

<ol>
<li>将pycharm安装目录下的pycharm-debug.egg文件拷贝到远程机器上（如果是python3的话就拷贝pycharm-debug-py3k.egg文件）。</li>
<li>在远程机器上安装pycharm-debug.egg，安装命令： <code>easy_install pycharm-debug.egg</code>。</li>
<li><p>在pycharm中设置断点监听配置。<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/pycharm-debug/pycharm-1.png"><br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/pycharm-debug/pycharm-2.png"><br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/pycharm-debug/pycharm-3.png"></p></li>
<li><p>启动调试监听程序。<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/pycharm-debug/pycharm-4.png"><br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/pycharm-debug/pycharm-5.png"></p></li>
<li><p>在远程机器上启动服务并发起http请求。<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-10.png"></p></li>
<li><p>pycharm监听到请求会进入断点。
<img src="http://zhaozhiming.github.io/images/post/2014-4/pycharm-debug/pycharm-6.png"></p></li>
</ol>


<p>更多关于pycharm远程调试的信息可以参阅<a href="http://www.jetbrains.com/pycharm/webhelp/remote-debugging.html">这里</a>。</p>

<h2>eclipse远程调试</h2>

<p>使用eclipse进行python远程调试，需要先在ubuntu下面安装eclipse和eclipse的python插件PyDev。</p>

<ul>
<li>Eclipse安装比较简单，直接解压下载后的eclipse包即可使用。</li>
<li><p>PyDev可以按照<a href="http://pydev.org/manual_101_install.html">官网的向导</a>进行安装。<br/>
安装完后按照下面的步骤进行远程调试。</p></li>
<li><p>在window->Preperences->PyDev->Debug中，设置debug端口，比如12306。<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-1.png"></p></li>
<li><p>新增PyDev视图。<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-2.png"><br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-3.png"></p></li>
<li><p>在Pydev试图中增加remote debug菜单。<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-4.png"><br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-5.png"></p></li>
<li><p>在远程机器的源码里面添加调试代码和断点。<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-6.png"></p></li>
<li><p>断点设置语句：<br/>
<code>pydevd.settrace('192.168.8.128', port=12306, stdoutToServer=True, stderrToServer=True)</code><br/>
注意：这里的ip是指设置了调试监听的机器ip。<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-7.png"></p></li>
<li><p>通过Pydev菜单打开调试监听。<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-8.png"><br/>
开始监听显示信息如下：<br/>
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-9.png"></p></li>
<li><p>启动远程服务并发起http请求。
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-10.png"></p></li>
<li><p>Pydev监听到请求后就会进入断点。
<img src="http://zhaozhiming.github.io/images/post/2014-4/eclipse-debug/eclipse-11.png"></p></li>
</ul>


<p>更多远程调试的内容可以参照Pydev的<a href="http://pydev.org/manual_adv_remote_debugger.html">官网步骤</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[swift单节点多dev环境部署]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/04/09/swift-multiply-nodes-deploy-in-one-machine/"/>
    <updated>2014-04-09T20:45:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/04/09/swift-multiply-nodes-deploy-in-one-machine</id>
    <content type="html"><![CDATA[<h2>环境目标</h2>

<ul>
<li>同一台机器</li>
<li>1台proxy server</li>
<li>5个storage node</li>
<li>每个storage node有2个dev</li>
</ul>


<!--more-->


<p></p>

<p>安装过程可以按照<a href="http://docs.openstack.org/developer/swift/development_saio.html">swift all in one</a>文档进行搭建，在操作过程中需要修改以下的地方。</p>

<h2>Using a loopback device for storage</h2>

<ol>
<li>Create the file for the loopback device:<br/>
<code>(这里的标题和编号是与saio的保持一致，这样方便大家按照saio的编号进行修改，后面的步骤与此相同，不再做说明)</code></li>
</ol>


<p>修改前：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo truncate -s 1GB /srv/swift-disk
</span></code></pre></td></tr></table></div></figure>


<p>修改后：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo truncate -s 500GB /srv/swift-disk
</span></code></pre></td></tr></table></div></figure>


<p>将xfs文件系统的大小改为500GB，原来的1GB太小不适合做测试。</p>

<ol>
<li>Create the mount point and the individualized links: <br/>
将原来的脚本修改为：</li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir /mnt/sdb1
</span><span class='line'>sudo mount /mnt/sdb1
</span><span class='line'>sudo mkdir /mnt/sdb1/1 /mnt/sdb1/2 /mnt/sdb1/3 /mnt/sdb1/4 /mnt/sdb1/5
</span><span class='line'>sudo chown <span class="k">${</span><span class="nv">USER</span><span class="k">}</span>:<span class="k">${</span><span class="nv">USER</span><span class="k">}</span> /mnt/sdb1/*
</span><span class='line'><span class="k">for </span>x in <span class="o">{</span>1..5<span class="o">}</span>; <span class="k">do </span>sudo ln -s /mnt/sdb1/<span class="nv">$x</span> /srv/<span class="nv">$x</span>; <span class="k">done</span>
</span><span class='line'>sudo mkdir -p /srv/1/node/dev1 /srv/1/node/dev2 /srv/2/node/dev3 /srv/2/node/dev4 /srv/3/node/dev5 /srv/3/node/dev6 /srv/4/node/dev7 /srv/4/node/dev8 /srv/5/node/dev9 /srv/5/node/dev10 /var/run/swift
</span><span class='line'>sudo chown -R <span class="k">${</span><span class="nv">USER</span><span class="k">}</span>:<span class="k">${</span><span class="nv">USER</span><span class="k">}</span> /var/run/swift
</span><span class='line'><span class="c"># **Make sure to include the trailing slash after /srv/$x/**</span>
</span><span class='line'><span class="k">for </span>x in <span class="o">{</span>1..5<span class="o">}</span>; <span class="k">do </span>sudo chown -R <span class="k">${</span><span class="nv">USER</span><span class="k">}</span>:<span class="k">${</span><span class="nv">USER</span><span class="k">}</span> /srv/<span class="nv">$x</span>/; <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建属于5个节点的文件夹，在每个节点文件夹下创建2个dev文件夹，表示1个节点有2个dev，其中region1有6台dev(1~6)，region2有4台dev(7~10)。</p>

<h2>Common Post-Device Setup</h2>

<p>Add the following lines to /etc/rc.local (before the exit 0): <br/>
修改前：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /var/cache/swift /var/cache/swift2 /var/cache/swift3 /var/cache/swift4
</span></code></pre></td></tr></table></div></figure>


<p>修改后：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /var/cache/swift /var/cache/swift2 /var/cache/swift3 /var/cache/swift4 /var/cache/swift5
</span></code></pre></td></tr></table></div></figure>


<p>因为有5个节点，所以增加了1个新节点的缓存文件夹。</p>

<h2>Setting up rsync</h2>

<p>Here is the default rsyncd.conf file contents maintained in the repo that is copied and fixed up above:</p>

<p>在/etc/rsyncd.conf文件追加以下内容：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>account6052<span class="o">]</span>
</span><span class='line'>max <span class="nv">connections</span> <span class="o">=</span> 25
</span><span class='line'><span class="nv">path</span> <span class="o">=</span> /srv/5/node/
</span><span class='line'><span class="nb">read </span><span class="nv">only</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>lock <span class="nv">file</span> <span class="o">=</span> /var/lock/account6052.lock
</span><span class='line'>
</span><span class='line'><span class="o">[</span>container6051<span class="o">]</span>
</span><span class='line'>max <span class="nv">connections</span> <span class="o">=</span> 25
</span><span class='line'><span class="nv">path</span> <span class="o">=</span> /srv/5/node/
</span><span class='line'><span class="nb">read </span><span class="nv">only</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>lock <span class="nv">file</span> <span class="o">=</span> /var/lock/container6051.lock
</span><span class='line'>
</span><span class='line'><span class="o">[</span>object6050<span class="o">]</span>
</span><span class='line'>max <span class="nv">connections</span> <span class="o">=</span> 25
</span><span class='line'><span class="nv">path</span> <span class="o">=</span> /srv/5/node/
</span><span class='line'><span class="nb">read </span><span class="nv">only</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>lock <span class="nv">file</span> <span class="o">=</span> /var/lock/object6050.lock
</span></code></pre></td></tr></table></div></figure>


<p>增加了新节点的account, container, object服务的同步配置。</p>

<p>You should see the following output from the above command:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>account6012
</span><span class='line'>account6022
</span><span class='line'>account6032
</span><span class='line'>account6042
</span><span class='line'>account6052
</span><span class='line'>container6011
</span><span class='line'>container6021
</span><span class='line'>container6031
</span><span class='line'>container6041
</span><span class='line'>container6051
</span><span class='line'>object6010
</span><span class='line'>object6020
</span><span class='line'>object6030
</span><span class='line'>object6040
</span><span class='line'>object6050
</span></code></pre></td></tr></table></div></figure>


<p>验证rsync可以看到新增的account, container, object信息。</p>

<h2>Optional: Setting up rsyslog for individual logging</h2>

<p>将/etc/rsyslog.d/10-swift.conf文件内容修改为：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Uncomment the following to have a log containing all logs together</span>
</span><span class='line'><span class="c">#local1,local2,local3,local4,local5.*   /var/log/swift/all.log</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Uncomment the following to have hourly proxy logs for stats processing</span>
</span><span class='line'><span class="c">#$template HourlyProxyLog,&quot;/var/log/swift/hourly/%$YEAR%%$MONTH%%$DAY%%$HOUR%&quot;</span>
</span><span class='line'><span class="c">#local1.*;local1.!notice ?HourlyProxyLog</span>
</span><span class='line'>
</span><span class='line'>local1.*;local1.!notice /var/log/swift/proxy.log
</span><span class='line'>local1.notice           /var/log/swift/proxy.error
</span><span class='line'>local1.*                ~
</span><span class='line'>
</span><span class='line'>local2.*;local2.!notice /var/log/swift/storage1.log
</span><span class='line'>local2.notice           /var/log/swift/storage1.error
</span><span class='line'>local2.*                ~
</span><span class='line'>
</span><span class='line'>local3.*;local3.!notice /var/log/swift/storage2.log
</span><span class='line'>local3.notice           /var/log/swift/storage2.error
</span><span class='line'>local3.*                ~
</span><span class='line'>
</span><span class='line'>local4.*;local4.!notice /var/log/swift/storage3.log
</span><span class='line'>local4.notice           /var/log/swift/storage3.error
</span><span class='line'>local4.*                ~
</span><span class='line'>
</span><span class='line'>local5.*;local5.!notice /var/log/swift/storage4.log
</span><span class='line'>local5.notice           /var/log/swift/storage4.error
</span><span class='line'>local5.*                ~
</span><span class='line'>
</span><span class='line'>local6.*;local6.!notice /var/log/swift/storage5.log
</span><span class='line'>local6.notice           /var/log/swift/storage5.error
</span><span class='line'>local6.*                ~
</span><span class='line'>
</span><span class='line'>local7.*;local7.!notice /var/log/swift/expirer.log
</span><span class='line'>local7.notice           /var/log/swift/expirer.error
</span><span class='line'>local7.*                ~
</span></code></pre></td></tr></table></div></figure>


<p>修改日志配置，将原来的local6指向storage node 5, 原来的expirer用local7来记录日志（<code>注意：后面在修改各个节点的服务配置文件时需要知道这些日志配置信息</code>）。</p>

<h2>Configuring each node</h2>

<ol>
<li>/etc/swift/object-expirer.conf</li>
</ol>


<p>修改前：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">log_facility</span> <span class="o">=</span> LOG_LOCAL6
</span></code></pre></td></tr></table></div></figure>


<p>修改后：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">log_facility</span> <span class="o">=</span> LOG_LOCAL7
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>新增account5的配置文件 /etc/swift/account-server/5.conf：</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>DEFAULT<span class="o">]</span>
</span><span class='line'><span class="nv">devices</span> <span class="o">=</span> /srv/5/node
</span><span class='line'><span class="nv">mount_check</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="nv">disable_fallocate</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nv">bind_port</span> <span class="o">=</span> 6052
</span><span class='line'><span class="nv">workers</span> <span class="o">=</span> 1
</span><span class='line'><span class="nv">user</span> <span class="o">=</span> swift
</span><span class='line'><span class="nv">log_facility</span> <span class="o">=</span> LOG_LOCAL6
</span><span class='line'><span class="nv">recon_cache_path</span> <span class="o">=</span> /var/cache/swift5
</span><span class='line'><span class="nv">eventlet_debug</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>pipeline:main<span class="o">]</span>
</span><span class='line'><span class="nv">pipeline</span> <span class="o">=</span> recon account-server
</span><span class='line'>
</span><span class='line'><span class="o">[</span>app:account-server<span class="o">]</span>
</span><span class='line'><span class="nv">use</span> <span class="o">=</span> egg:swift#account
</span><span class='line'>
</span><span class='line'><span class="o">[</span>filter:recon<span class="o">]</span>
</span><span class='line'><span class="nv">use</span> <span class="o">=</span> egg:swift#recon
</span><span class='line'>
</span><span class='line'><span class="o">[</span>account-replicator<span class="o">]</span>
</span><span class='line'><span class="nv">vm_test_mode</span> <span class="o">=</span> yes
</span><span class='line'>
</span><span class='line'><span class="o">[</span>account-auditor<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>account-reaper<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>新增container5的配置文件/etc/swift/container-server/5.conf：</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>DEFAULT<span class="o">]</span>
</span><span class='line'><span class="nv">devices</span> <span class="o">=</span> /srv/5/node
</span><span class='line'><span class="nv">mount_check</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="nv">disable_fallocate</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nv">bind_port</span> <span class="o">=</span> 6051
</span><span class='line'><span class="nv">workers</span> <span class="o">=</span> 1
</span><span class='line'><span class="nv">user</span> <span class="o">=</span> swift
</span><span class='line'><span class="nv">log_facility</span> <span class="o">=</span> LOG_LOCAL6
</span><span class='line'><span class="nv">recon_cache_path</span> <span class="o">=</span> /var/cache/swift5
</span><span class='line'><span class="nv">eventlet_debug</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nv">allow_versions</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>pipeline:main<span class="o">]</span>
</span><span class='line'><span class="nv">pipeline</span> <span class="o">=</span> recon container-server
</span><span class='line'>
</span><span class='line'><span class="o">[</span>app:container-server<span class="o">]</span>
</span><span class='line'><span class="nv">use</span> <span class="o">=</span> egg:swift#container
</span><span class='line'>
</span><span class='line'><span class="o">[</span>filter:recon<span class="o">]</span>
</span><span class='line'><span class="nv">use</span> <span class="o">=</span> egg:swift#recon
</span><span class='line'>
</span><span class='line'><span class="o">[</span>container-replicator<span class="o">]</span>
</span><span class='line'><span class="nv">vm_test_mode</span> <span class="o">=</span> yes
</span><span class='line'>
</span><span class='line'><span class="o">[</span>container-updater<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>container-auditor<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>container-sync<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>新增object5的配置文件/etc/swift/object-server/5.conf：</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>DEFAULT<span class="o">]</span>
</span><span class='line'><span class="nv">devices</span> <span class="o">=</span> /srv/5/node
</span><span class='line'><span class="nv">mount_check</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'><span class="nv">disable_fallocate</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="nv">bind_port</span> <span class="o">=</span> 6050
</span><span class='line'><span class="nv">workers</span> <span class="o">=</span> 1
</span><span class='line'><span class="nv">user</span> <span class="o">=</span> swift
</span><span class='line'><span class="nv">log_facility</span> <span class="o">=</span> LOG_LOCAL6
</span><span class='line'><span class="nv">recon_cache_path</span> <span class="o">=</span> /var/cache/swift5
</span><span class='line'><span class="nv">eventlet_debug</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>pipeline:main<span class="o">]</span>
</span><span class='line'><span class="nv">pipeline</span> <span class="o">=</span> recon object-server
</span><span class='line'>
</span><span class='line'><span class="o">[</span>app:object-server<span class="o">]</span>
</span><span class='line'><span class="nv">use</span> <span class="o">=</span> egg:swift#object
</span><span class='line'>
</span><span class='line'><span class="o">[</span>filter:recon<span class="o">]</span>
</span><span class='line'><span class="nv">use</span> <span class="o">=</span> egg:swift#recon
</span><span class='line'>
</span><span class='line'><span class="o">[</span>object-replicator<span class="o">]</span>
</span><span class='line'><span class="nv">vm_test_mode</span> <span class="o">=</span> yes
</span><span class='line'>
</span><span class='line'><span class="o">[</span>object-updater<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>object-auditor<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Setting up scripts for running Swift</h2>

<ol>
<li>Construct the initial rings using the provided script:</li>
</ol>


<p>先修改bin/remakerings文件，在执行remakerings命令：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">cd</span> /etc/swift
</span><span class='line'>
</span><span class='line'>rm -f *.builder *.ring.gz backups/*.builder backups/*.ring.gz
</span><span class='line'>
</span><span class='line'>swift-ring-builder object.builder create 19 6 1
</span><span class='line'>swift-ring-builder object.builder add r1z1-127.0.0.1:6010/dev1 1
</span><span class='line'>swift-ring-builder object.builder add r1z1-127.0.0.1:6010/dev2 1
</span><span class='line'>swift-ring-builder object.builder add r1z2-127.0.0.1:6020/dev3 1
</span><span class='line'>swift-ring-builder object.builder add r1z2-127.0.0.1:6020/dev4 1
</span><span class='line'>swift-ring-builder object.builder add r1z3-127.0.0.1:6030/dev5 1
</span><span class='line'>swift-ring-builder object.builder add r1z3-127.0.0.1:6030/dev6 1
</span><span class='line'>swift-ring-builder object.builder add r2z1-127.0.0.1:6040/dev7 1
</span><span class='line'>swift-ring-builder object.builder add r2z1-127.0.0.1:6040/dev8 1
</span><span class='line'>swift-ring-builder object.builder add r2z2-127.0.0.1:6050/dev9 1
</span><span class='line'>swift-ring-builder object.builder add r2z2-127.0.0.1:6050/dev10 1
</span><span class='line'>swift-ring-builder object.builder rebalance
</span><span class='line'>swift-ring-builder container.builder create 19 6 1
</span><span class='line'>swift-ring-builder container.builder add r1z1-127.0.0.1:6011/dev1 1
</span><span class='line'>swift-ring-builder container.builder add r1z1-127.0.0.1:6011/dev2 1
</span><span class='line'>swift-ring-builder container.builder add r1z2-127.0.0.1:6021/dev3 1
</span><span class='line'>swift-ring-builder container.builder add r1z2-127.0.0.1:6021/dev4 1
</span><span class='line'>swift-ring-builder container.builder add r1z3-127.0.0.1:6031/dev5 1
</span><span class='line'>swift-ring-builder container.builder add r1z3-127.0.0.1:6031/dev6 1
</span><span class='line'>swift-ring-builder container.builder add r2z1-127.0.0.1:6041/dev7 1
</span><span class='line'>swift-ring-builder container.builder add r2z1-127.0.0.1:6041/dev8 1
</span><span class='line'>swift-ring-builder container.builder add r2z2-127.0.0.1:6051/dev9 1
</span><span class='line'>swift-ring-builder container.builder add r2z2-127.0.0.1:6051/dev10 1
</span><span class='line'>swift-ring-builder container.builder rebalance
</span><span class='line'>swift-ring-builder account.builder create 19 6 1
</span><span class='line'>swift-ring-builder account.builder add r1z1-127.0.0.1:6012/dev1 1
</span><span class='line'>swift-ring-builder account.builder add r1z1-127.0.0.1:6012/dev2 1
</span><span class='line'>swift-ring-builder account.builder add r1z2-127.0.0.1:6022/dev3 1
</span><span class='line'>swift-ring-builder account.builder add r1z2-127.0.0.1:6022/dev4 1
</span><span class='line'>swift-ring-builder account.builder add r1z3-127.0.0.1:6032/dev5 1
</span><span class='line'>swift-ring-builder account.builder add r1z3-127.0.0.1:6032/dev6 1
</span><span class='line'>swift-ring-builder account.builder add r2z1-127.0.0.1:6042/dev7 1
</span><span class='line'>swift-ring-builder account.builder add r2z1-127.0.0.1:6042/dev8 1
</span><span class='line'>swift-ring-builder account.builder add r2z2-127.0.0.1:6052/dev9 1
</span><span class='line'>swift-ring-builder account.builder add r2z2-127.0.0.1:6052/dev10 1
</span><span class='line'>swift-ring-builder account.builder rebalance
</span></code></pre></td></tr></table></div></figure>


<p>新ring环有2的19次方，6个副本，修改后重新生成ring环即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书笔记——乔布斯，做最好的自己，共创式教练]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/03/13/read-book-note-2014-3/"/>
    <updated>2014-03-13T21:39:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/03/13/read-book-note-2014-3</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-3/read_books.jpg"></p>

<p>这段时间出差比较频繁，出差无聊，就把之前想看的书看了，这里记一下读书笔记。</p>

<!--more-->


<p></p>

<h2>《乔布斯传》</h2>

<p><img class="right" src="http://zhaozhiming.github.io/images/post/2014-3/Jobs.jpg"></p>

<p>《乔布斯传》这本书应该很多人都看过，这本书记录了乔布斯创奇的一生。苹果的两位创始人——乔布斯和技术天才史蒂芬.沃茨，我在之前听到的更多的是关于沃茨的声音，因为沃茨一直是开发人员眼中大师级的代表，身兼超强软件硬件开发能力于一身的神一般的人物。我之前一直以为乔帮主是沾了沃茨的光才成功的。但实际上是，如果没有乔布斯，沃茨开发的苹果电脑可能永远也不会被那么多人所知道。沃茨和乔布斯是完全的两类人，一个是技术天才，一个是设计天才。但乔布斯的对伟大产品的追求，让他更加成功。</p>

<p>前几天在网上看到对三星和苹果高管的专访，三星的高管们谈的大多是什么市场份额、市场占有率，而现苹果几位高管谈的却是产品设计，比如这个东西的边框为什么要设计成这样，这个角度为什么要设计成圆弧等等。因为乔布斯一直就是这样给公司灌输理念的——做伟大的产品，做出改变世界的伟大产品。书里面有个有趣的故事，在乔布斯得癌症住院期间，他看到医生拿给他戴的氧气罩，觉得设计非常丑陋，用他的话来说就是“一坨屎”，坚决要求医生拿出多款氧气罩让他选择，最后还给氧气罩的设计提出了自己的建议，完全不顾自己是一个身患绝症的病人。</p>

<p>从乔布斯传里面还学到“专注”。乔布斯每年都会带领一班人去到一个与世隔绝的地方，在那里大家展开头脑风暴，对公司明年的发展提出各种观点，大家从里面选出十个最好的点子，写到白板上，然后乔布斯拿起笔划掉后面七个，说明年我们只做这三件事情。乔布斯回归苹果后，立即着手砍掉公司一些不赚钱的业务，让公司专注在开发新的Mac电脑上，使得苹果公司起死回生，慢慢走向了世界顶级企业之路。一个人的精力是有限的，如果什么都想学，什么都想做，那势必什么都学不精，什么都做不好。</p>

<p>乔布斯的伟大之处还在于其创造了“封闭一体化”的产品设计。与软件开发者崇尚的开源思想截然相反的一种设计理念，但是在乔布斯的掌控下却产生了一个又一个伟大的产品。这与乔布斯强大的控制欲有关，为了得到完美的用户体验，对端到端的控制是一个有效的办法。用户不需要知道产品里面的结构和原理，因为产品已经设计得足够简单，让你一上手就会使用。这种“封闭一体化”的设计也渐渐被业界青睐，Google等企业最近也在纷纷效仿。但乔布斯一辈子的对手——比尔盖茨说，这种封闭一体化设计，只有乔布斯可以成功。</p>

<h2>《做最好的自己》</h2>

<p><img class="right" src="http://zhaozhiming.github.io/images/post/2014-3/be_best_yourself.jpg"></p>

<p>李开复老师的一本激励人心的书，为广大中国大学生的未来之路提供了宝贵的建议。开复老师在书中讲了很多做人做事的方法和建议，并引用自己亲身经历的事迹来论证自己的观点，让人在学到这些道理的同时又对开复老师的人生经历多了一些了解。</p>

<p>开复老师也是一名技术很牛的开发人员，他自创了通过统计学进行语音识别技术的开发，使得识别率达到了96%，这是一个后人难以企及的高度，这也让他得到了苹果公司的青睐。在苹果公司工作的期间，他的建议让公司走向了数字媒体的发展方向，可惜在他任职期间，刚好是乔布斯离开苹果的那段时间，后来乔布斯极力想邀请他重回苹果，但开复老师的心已经放在中国大学生上面，从而没有答应请求。后来开复老师到了微软，一手创建了微软中国研究院，培养了一大批高素质的技术人才。”follow my heart&#8221;，是开复老师离开微软加入Google时说的话，Google当时面对中国对手——百度强有力的竞争，需要一位深谙东西方文化，德高望重的人物做中国区总裁，他是当时Google的最佳人选。加入Google后，由于受微软诉讼的限制，开复老师只能负责招聘方面的工作，但这正是他心中的理想工作，他又为Google输送和培养了大批优质的毕业生，这些人才的培养可能会使Google中国短时间内落后百度的研发速度，但对于Google的长期发展是非常有利的。</p>

<p>我最喜欢书中讲的一个故事，分享一下。</p>

<blockquote><p>年轻人问智者：智慧从哪里来？<br/>智者：正确的判断。<br/>年轻人问：正确的判断从哪里来？<br/>智者：经验。<br/>年轻人问：从哪里来？<br/>智者：错误的判断。</p></blockquote>


<p></p>

<p>最后祝开复老师早日康复。</p>

<h2>《共创式教练》</h2>

<p><img class="right" src="http://zhaozhiming.github.io/images/post/2014-3/Coach.jpg"></p>

<p>《共创式教练》指导如何成为一个既能帮助客户解决问题，帮助客户成长，又能和客户共同一起成长的教练，也是最近出差学习的内容之一。</p>

<p>共创式教练相信每个人都是可以自己解决问题的，每个人都是有资源的，教练不是给客户解决方案，而是通过各种技能技巧让用户知道如何自己解决问题，并在解决问题的过程中得到成长，同时教练和客户一起成长。</p>

<p>共创式教练的三大原则：自我实现，自觉选择，活在当下。这些原则的目的就是帮助客户提高潜能自己解决问题。另外还有各种比较有用的技巧，比如“强有力的问题”，“好奇心”，“聆听”，“直觉”等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[压力测试工具——Galting]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/02/28/hello-galting/"/>
    <updated>2014-02-28T07:30:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/02/28/hello-galting</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-2/gatling.png"></p>

<p>为什么要写Gatling呢？网上已经有一些介绍Gatling的好文章了，比如两位TW同事的文章，可以看<a href="http://www.infoq.com/cn/articles/new-generation-server-testing-tool-gatling">这里</a>（我知道Gatling也是因为这位作者介绍的），还有<a href="http://www.cnblogs.com/huang0925/p/3488313.html">这里</a>。主要是因为最近在使用Gatling做压力测试，感觉这个工具非常好用，所以想结合自己的使用情况也推荐一下。Gatling是基于scala写的一个开源的压力测试工具，它的特点是简单易用，测试报告简洁漂亮，api通俗易懂。</p>

<!--more-->


<p></p>

<h2>JDK1.7</h2>

<p>Gatling是基于jdk1.7开发的，所以还在用jdk1.6的同学需要先下载jdk1.7，才可以启动Gatling。顺便说一下，JDK1.7以后肯定是会替换JDK1.6的，但由于历史原因（主要是JDK1.6用的人实在太多了，我想也是由于JDK1.7升级的太晚了）大家都不想升级，我也这也是JAVA走下坡路的原因。</p>

<h2>Scala</h2>

<p>前面讲过Gatling是用scala写的，像scala、groovy和clojuer都是基于jvm开发的一种语言，不仅继承了java众多成熟的api和稳定的jvm，而且提供了更佳简洁易用的语法。基于某种语言的内核来重新设计一门新语言的这种做法，现在慢慢多了起来，这种做法的最大好处就是不用自己再重新设计编程语言底层相关的一些东西，而且可以使用原有语言大量的成熟api，让新语言就只专注地实现自己的功能，从而使新的语言性能稳定，易用性更高，甚至可以吸引一些原有语言的开发人员。</p>

<h2>DSL</h2>

<p>看过Galting的api的人就会发现，它的语法很像自然语言，比如测试一个get类型的http请求，它可能会这样写：</p>

<figure class='code'><figcaption><span>demo </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;demo&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;http://www.myweb.com/helloworld&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是很容易懂，这种就是基于DSL来写的代码，关于DSL可以看<a href="http://book.douban.com/subject/21964984/">这本书</a>，这本书我还没怎么看，等看完了以后再做分享，DSL不单单只是把代码写得像自然语言那样简单。</p>

<h2>API</h2>

<p>要想了解Gatling的各种api，这里推荐看Gatling源码里面的HttpCompileTest这个测试类，这里包含了http几乎所有的api使用示例。下面是截取的代码片段，全部代码可以看<a href="https://github.com/excilys/gatling/blob/f5aeee2492dedd665b0dcf0b5b60f0a2227a53b6/gatling-bundle/src/test/scala/io/gatling/bundle/test/HTTPCompileTest.scala">这里</a>。</p>

<figure class='code'><figcaption><span>demo </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">.</span><span class="n">group</span><span class="o">(</span><span class="s">&quot;C&#39;est ici qu&#39;on trouve des Poneys&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">post</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)</span>
</span><span class='line'>              <span class="o">.</span><span class="n">param</span><span class="o">(</span><span class="s">&quot;baz&quot;</span><span class="o">,</span> <span class="s">&quot;${qix}&quot;</span><span class="o">)</span>
</span><span class='line'>              <span class="o">.</span><span class="n">multivaluedParam</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="nc">Seq</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">)))</span>
</span><span class='line'>              <span class="o">.</span><span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">post</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">).</span><span class="n">multivaluedParam</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="s">&quot;${bar}&quot;</span><span class="o">))</span>
</span><span class='line'>              <span class="o">.</span><span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">).</span><span class="n">queryParam</span><span class="o">(</span><span class="s">&quot;omg&quot;</span><span class="o">,</span> <span class="s">&quot;foo&quot;</span><span class="o">))</span>
</span><span class='line'>              <span class="o">.</span><span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">).</span><span class="n">queryParam</span><span class="o">(</span><span class="s">&quot;omg&quot;</span><span class="o">,</span> <span class="s">&quot;${foo}&quot;</span><span class="o">))</span>
</span><span class='line'>              <span class="o">.</span><span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">).</span><span class="n">queryParam</span><span class="o">(</span><span class="s">&quot;omg&quot;</span><span class="o">,</span> <span class="n">session</span> <span class="k">=&gt;</span> <span class="s">&quot;foo&quot;</span><span class="o">))</span>
</span><span class='line'>              <span class="o">.</span><span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">).</span><span class="n">multivaluedQueryParam</span><span class="o">(</span><span class="s">&quot;omg&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">)))</span>
</span><span class='line'>              <span class="o">.</span><span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">).</span><span class="n">multivaluedQueryParam</span><span class="o">(</span><span class="s">&quot;omg&quot;</span><span class="o">,</span> <span class="s">&quot;${foo}&quot;</span><span class="o">))</span>
</span><span class='line'>              <span class="o">.</span><span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">).</span><span class="n">multivaluedQueryParam</span><span class="o">(</span><span class="s">&quot;omg&quot;</span><span class="o">,</span> <span class="nc">List</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="o">.</span><span class="n">uniformRandomSwitch</span><span class="o">(</span><span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)),</span> <span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Licorne&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">.</span><span class="n">randomSwitch</span><span class="o">(</span>
</span><span class='line'>          <span class="mi">40</span><span class="n">d</span> <span class="o">-&gt;</span> <span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)),</span>
</span><span class='line'>          <span class="mi">50</span><span class="n">d</span> <span class="o">-&gt;</span> <span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Licorne&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">.</span><span class="n">randomSwitch</span><span class="o">(</span><span class="mi">40</span><span class="n">d</span> <span class="o">-&gt;</span> <span class="n">exec</span><span class="o">(</span><span class="n">http</span><span class="o">(</span><span class="s">&quot;Catégorie Poney&quot;</span><span class="o">).</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">.</span><span class="n">pause</span><span class="o">(</span><span class="n">pause2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里说下randomSwitch这个方法，这个方法可以模拟负载均衡，比如上面40d和50d的两行代码，会有40%的几率执行上面一行代码，50%的几率执行下面一行代码。</p>

<h2>Question</h2>

<p>如果看过上面的示例代码代码，还不知道具体的api怎么用，可以到<a href="https://groups.google.com/d/forum/gatling">google group</a>上面的分组提问题，很快就有人回答你的问题。github上面的问题区是让开发提bug或者feature用的，所以尽量不要在上面提问题。</p>

<h2>Report</h2>

<p>下面是Gatling的报告截图，界面很漂亮，而且参数很齐全，包括全部的请求数，成功/失败的请求数，请求的最大/最小/平均响应时间等。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2014-2/gatling_report.png"></p>

<h2>Http &amp; JMS</h2>

<p>目前Gatling支持的协议不多，毕竟是一个轻量级的测试工具，目前只支持Http和JMS(以前用的时候还只是支持HTTP)，随着Gatling的发展，以后肯定会支持更多的协议。现在大部分的系统和应用都是提供http协议的api，所以基于http协议的测试也能满足大部分的测试场景了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[番茄工作法和Bullet journal笔记法]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/02/26/tomato-work-method-and-bullet-journal/"/>
    <updated>2014-02-26T20:31:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/02/26/tomato-work-method-and-bullet-journal</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-2/tomato_and_bullet_journal.jpg"></p>

<p>番茄工作法是一套时间管理方法，Bullet journal是一套笔记记录的方法，最近通过学习这2个方法来管理自己的时间，让自己战胜拖延症。</p>

<!--more-->


<p></p>

<h1>番茄工作法</h1>

<p>番茄工作法的整体思路就是将时间分割成一个个小时间段，每个时间段25分钟，在每个时间段里面排除所有干扰，集中精力完成自己制定的任务，让工作效率最大化。</p>

<h4>为什么叫番茄工作法</h4>

<p>番茄工作法是弗朗西斯科·西里洛于1992年创立的一种时间管理方法，通过一种外貌类似番茄的厨房定时器设置好25分钟，在25分钟内把任务做完，根据定时器的形状命名为番茄工作法。其实不一定要找一个像番茄一样的计时器，可以根据自己需要选择任意的计时器，只要有定时的功能就可以，现在手机都有这个功能，也可以使用手机来代替。</p>

<h4>如何实施</h4>

<ul>
<li>制定计划。找一张纸和一支笔，列出自己接下来的时间要完成的任务清单，每个任务后面可以画上需要一个或者多个番茄钟，这个是你预估此项任务要花费的时间。比如要开发某个功能，自己预估这项任务可能需要2～3个小时，那就在任务后面画上4～6个番茄钟，这个就是你的预估时间量。</li>
<li>排除干扰。在你开始番茄钟之前，请把干扰源去掉，比如邮箱、电话、手机等，把它们关掉或者调成静音，以便自己在番茄钟内工作时不受打扰。</li>
<li>开始工作。扭动番茄钟，将其设置为25分钟后响铃，然后开始集中精力做你的任务。如果中间想起另外一件更重要的事情，请不要中断手头的任务去做它，而要将该事情记录到你的任务清单里面，然后回过头来继续你的任务，直到番茄钟响起。</li>
<li>完成休息。当番茄钟响起的时候，停止手头的工作，在之前画在任务后面的番茄钟上划掉一个，表示你已经完成了一个番茄钟。然后休息5分钟，让自己在休息时间内充分放松，为下个番茄钟做好准备。</li>
</ul>


<p>按照以上的步骤循环进行，直到完成自己的任务。</p>

<h4>有什么好处</h4>

<p>首先番茄钟工作法可以让你更有效率地完成自己的工作任务，想象一下自己平时工作的时候经常会被别人打断，打断过后需要一段时间才能回复到原来的工作状态，这样很浪费时间。有的人会觉得整天忙忙碌碌的，但回想一下基本没有完成什么任务。</p>

<p>这里还要说一下遇到外部的干扰的情况，比如同事来找你问问题这种干扰，可以根据具体情况处理：</p>

<ul>
<li>跟同事说明自己在番茄钟内，请他在番茄钟完了后再找你;</li>
<li>如果事情比较重要，停下手头的任务，先帮他解决问题，然后重新开始一个番茄钟，继续完成刚才的任务;</li>
</ul>


<p>其次番茄工作法让你养成一个习惯，每当你扭开番茄钟开始计时的时候，身体会暗示你现在准备开始工作，使你进入全身心投入的状态，让你更好的完成任务。</p>

<p>再次番茄工作法会锻炼你的时间预估能力，每次你都会为自己的任务预估一个时间，可能开始的时候不准确，但是时间久了以后，就会慢慢让自己预估的时间与实际完成的时间相符了。</p>

<p>最后是番茄工作法会带给你成就感，每当你划掉一个番茄钟或者完成一个任务，就会让自己觉得今天自己没有浪费时间，会真的看到自己实实在在做完了哪些事情。</p>

<p>我自己也是刚学习番茄工作法，还在养成习惯中。我试用了3个星期，基本上将之前拖延的一些任务完成了，比如写blog，之前老是拖拉想放到以后再写，导致几个月都没有更新，现在基本上一个月可以写到3～4篇blog了。所以我觉得番茄工作法还是比较有用的。</p>

<h1>Bullet Journal笔记法</h1>

<p>Bullet Journal是由纽约艺术家Ryder Carroll发明的。这一快速笔记系统简单灵活，十分容易上手。这里有<a href="http://www.bulletjournal.com/">它的网站</a>，感兴趣的同学可以看一下。</p>

<p>Bullet Journal很简单，20分钟就可以学会，只需要一个空白笔记本和一支笔。</p>

<h4>目录</h4>

<p>首先在笔记本的前面几页写上目录标题，然后在开始记录任务的每一页下角写上页数，以后笔记有更新，就可以随时更新目录的内容。</p>

<h4>目标和日期</h4>

<p>在目录后面，开始记录当月的目标，在目标页前面一页写上当月的日期，每一行记录一个日期，以后如果有什么重要的事件完成了，就可以在日期后面写上备注。</p>

<h4>每日日记</h4>

<p>Bullet Journal最重要的部分就是当天的日记，有3种标志：</p>

<ul>
<li>勾选框表示要完成的任务</li>
<li>圆圈表示特定时间要完成事情，可以在后面备注时间</li>
<li>圆点表示备注，可以记录任何事情，包括你的想法。</li>
</ul>


<p><img src="http://zhaozhiming.github.io/images/post/2014-2/bullet_journal.jpg"></p>

<p>这3种标志可以自由组合，比如勾选框下面可以有子勾选框，圆点，圆圈等，表示该项任务有子任务。根据自己需要灵活配置。</p>

<p>可能用文字描述比较难懂，不理解的同学可以看一下<a href="http://www.youtube.com/watch?v=GfRf43JTqY4">这里</a>的视频（youtube，需要翻墙），看完大概就可以理解了，Bullet Journal就是这么简单。它还可以配合番茄工作法一起工作，之前谈到番茄工作法也是需要列任务清单，我们就可以将任务清单用Bullet Journal的方式记录下来，然后进行操作。两者互相配合，效果更佳。</p>

<p>开始使用Bullet Journal的时候不需要买太好的笔记本，官网推荐的是米国一款感觉特别高级的笔记本，带小格子的，其实完全没有必要，只要找一本普通的笔记本就可以了（像我用的是公司发的笔记本，每年都会发一本，基本用不完，就拿来做Bullet Journal笔记本了），或者在淘宝上面买个差不多的，也就10～20块，还包邮哦亲～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[openstack swift中间件编写]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/02/17/how-to-write-a-openstack-swift-middle-ware/"/>
    <updated>2014-02-17T20:33:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/02/17/how-to-write-a-openstack-swift-middle-ware</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2014-2/swift.jpg"></p>

<p>关于openstack swift的资料可以看<a href="http://zh.wikipedia.org/wiki/OpenStack">这里</a>，<a href="http://www.programmer.com.cn/12403/">这里</a>还有<a href="http://www.ibm.com/developerworks/cn/cloud/library/1310_zhanghua_openstackswift/">这里</a>。</p>

<!--more-->


<p></p>

<h2>准备环境</h2>

<p>从零开始接触的同学可以先从swift的<a href="http://docs.openstack.org/developer/swift/development_saio.html">all in one</a>部署开始学习，在本机搭建好swift环境就可以进行简单的测试了。由于swift是用Python语言写的，如果要开发swift的中间件的还需要在本地安装Pythone的IDE，我比较喜欢JETBRAIN（他们比较出名的是JAVA的IDE——IDEA）公司的IDE——Pycharm。准备环境如下:</p>

<ul>
<li>Ububutn 12.04 LTS 64bit</li>
<li>Python2.7(虽然现在已经有Python3了，但swift是用2.x的Python写的，Python3不向后兼容Python2)</li>
<li>Pycharm3</li>
</ul>


<h2>中间件介绍</h2>

<p>swift通过提供基于HTTP协议的API给外界调用来完成对象存储的功能，我们从swift的各个部署说明里面可以看到，proxy server和storage node的配置文件里面都有一个<code>[pipeline:main]</code>，这个是swift各个服务的请求链，由多个中间件组成的一个中间件集合。pipeline有点像J2EE里面filter，每个http请求需要经过各个服务的pipeline。</p>

<figure class='code'><figcaption><span>proxy-server.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>...
</span><span class='line'>[pipeline:main]
</span><span class='line'># Yes, proxy-logging appears twice. This is so that
</span><span class='line'># middleware-originated requests get logged too.
</span><span class='line'>pipeline = catch_errors healthcheck proxy-logging bulk ratelimit crossdomain slo cache tempurl tempauth staticweb account-quotas container-quotas proxy-logging proxy-server
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>account-server.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>...
</span><span class='line'>[pipeline:main]
</span><span class='line'>pipeline = recon account-server
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h2>中间件编写</h2>

<p>了解了swift的基本功能流程后，我们就可以来写自己的中间件了。</p>

<p>没有写过中间件的同学可以通过学习其他中间件开始，在swift的源码中配置了很多中间件，有一些功能非常简单。比如name_check中间件，这个中间件的作用是拿来分析请求的url，判断url中是否有特殊字符，长度是否超出规定长度等。这个中间件没有配置在swift的标准配置中，有需要的可以自行加上本机的swift环境做测试。</p>

<p>我们先来看一下name_check中间件的配置信息：</p>

<figure class='code'><figcaption><span>proxy-server.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>[pipeline:main]
</span><span class='line'>pipeline = catch_errors healthcheck name_check cache ratelimit tempauth sos
</span><span class='line'>           proxy-logging proxy-server
</span><span class='line'>
</span><span class='line'>[filter:name_check]
</span><span class='line'>use = egg:swift#name_check
</span><span class='line'>forbidden_chars = &#39;&quot;`<span class="err">&lt;</span>&gt;
</span><span class='line'>maximum_length = 255
</span></code></pre></td></tr></table></div></figure>


<p>在上面的例子中，name_check中间件加在healthcheck这个中间件后面，filter:name_check下面的配置信息是name_check的一些配置参数。</p>

<ul>
<li>forbidden_chars: 指url中不能包含的特殊字符</li>
<li>maximum_length: 指url的最大长度</li>
</ul>


<p>我们再来看name_check的单元测试：</p>

<figure class='code'><figcaption><span>test_name_check.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">FakeApp</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">start_response</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">body</span><span class="o">=</span><span class="s">&quot;OK&quot;</span><span class="p">)(</span><span class="n">env</span><span class="p">,</span> <span class="n">start_response</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestNameCheckMiddleware</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">conf</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;maximum_length&#39;</span><span class="p">:</span> <span class="n">MAX_LENGTH</span><span class="p">,</span> <span class="s">&#39;forbidden_chars&#39;</span><span class="p">:</span>
</span><span class='line'>                     <span class="n">FORBIDDEN_CHARS</span><span class="p">,</span> <span class="s">&#39;forbidden_regexp&#39;</span><span class="p">:</span> <span class="n">FORBIDDEN_REGEXP</span><span class="p">}</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">test_check</span> <span class="o">=</span> <span class="n">name_check</span><span class="o">.</span><span class="n">filter_factory</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">conf</span><span class="p">)(</span><span class="n">FakeApp</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_valid_length_and_character</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">path</span> <span class="o">=</span> <span class="s">&#39;/V1.0/&#39;</span> <span class="o">+</span> <span class="s">&#39;c&#39;</span> <span class="o">*</span> <span class="p">(</span><span class="n">MAX_LENGTH</span> <span class="o">-</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="n">blank</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">environ</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;REQUEST_METHOD&#39;</span><span class="p">:</span> <span class="s">&#39;PUT&#39;</span><span class="p">}</span>
</span><span class='line'>                             <span class="p">)</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">test_check</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertEquals</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">body</span><span class="p">,</span> <span class="s">&#39;OK&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">......</span> <span class="c"># other test cases    </span>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">unittest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>看源码先从单元测试看起，可以以最快的速度了解源代码的功能。在这个测试案例中，测试先mock了一个虚拟的app，这个app不会真实的调用swift，而是会将http response返回预设好的值。<br/>
再看其中的一个测试案例，这里给定了一个最大长度url，然后通过调用name_check中间件，期望请求可以正常通过。</p>

<p>最后我们再来看name_check中间件的<a href="https://github.com/openstack/swift/blob/master/swift/common/middleware/name_check.py">源码</a>几个方法：
* <strong>init</strong>: 中间件的初始化方法
* <strong>call</strong>: 中间件被调用时触发的方法
* filter_factory: 这个是类以外的方法，在swift服务启动时会创建中间件实例，并加入到pipeline中。</p>

<p>学习完这个简单的中间件后，相信大家都可以依葫芦画瓢开始写自己的中间件了。</p>

<h2>修改配置文件</h2>

<p>编写完中间件之后，还需要将中间件配置到swift中，这样才算真正完成中间件的创建。</p>

<h4>首先先停止swift的服务</h4>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>swift@ubuntu:~$ swift-init main stop
</span></code></pre></td></tr></table></div></figure>


<h4>接着修改conf文件</h4>

<p>假设你增加的中间件是proxy server的中间件，就修改proxy-server.conf，自行决定要放到pipeline中的哪个位置，具体要看你的中间件是执行什么功能。</p>

<figure class='code'><figcaption><span>proxy-server.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>[pipeline:main]
</span><span class='line'>pipeline = catch_errors healthcheck your_middleware cache ratelimit tempauth sos
</span><span class='line'>           proxy-logging proxy-server
</span><span class='line'>
</span><span class='line'>[filter:your_middleware]
</span><span class='line'>use = egg:swift#your_middleware
</span><span class='line'>your_middleware_config1 = value1
</span><span class='line'>your_middleware_config1 = value2
</span></code></pre></td></tr></table></div></figure>


<h4>要修改swift的根目录下的setup.cfg文件</h4>

<figure class='code'><figcaption><span>setup.cfg </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>paste.filter_factory =
</span><span class='line'>  #这里加入一行自己的中间件，可以看下name_check中间件是怎么写的
</span><span class='line'>  name_check = swift.common.middleware.name_check:filter_factory
</span></code></pre></td></tr></table></div></figure>


<h4>执行命令重新安装swift</h4>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>swift@ubuntu:~$ cd swift目录
</span><span class='line'>swift@ubuntu:~$ sudo python setyp.py develop
</span></code></pre></td></tr></table></div></figure>


<h4>最后重启swift服务</h4>

<figure class='code'><figcaption><span>shell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>swift@ubuntu:~$ swift-init main start
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《黑客》读书笔记]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/02/10/make-harker-booke-note/"/>
    <updated>2014-02-10T21:41:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/02/10/make-harker-booke-note</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/hacker.jpg"></p>

<h2>简介</h2>

<p>《黑客》这本书介绍的是上世纪50～80年代的一段计算机历史，介绍第一代黑客的起源，第二代硬件黑客对世界的影响，第三代游戏黑客如何让电脑融入大众生活，类似“魔戒三部曲”一样宏伟的一部计算机编年史。</p>

<!--more-->


<p></p>

<h2>黑客的起源</h2>

<p>MIT AI实验室第九大楼是黑客的发源地，&#8221;hack&#8221;一词大概最早就是由MIT的学生提出的，原来是用来形容本校学生的一些精心策划的恶作剧，但AI实验室的黑客们对&#8221;hack&#8221;却有着极大的尊敬。一般一项技艺能称为&#8221;hack&#8221;，它必须有创新，有风格，有技术含量，AI实验室里面效率最高的人就非常骄傲的称自己为&#8221;hacker&#8221;。</p>

<h2>黑客马拉松</h2>

<p>熟悉Facebook的人对黑客马拉松都会有所了解，Facebook每年都会举办几场黑客马拉松编程比赛，在这些比赛中也诞生了很多伟大的产品，在《黑客》这本书里面讲到这一活动的早期雏形。在上个世纪50年代，个人电脑还没有普及，在MIT学校里面接触电脑的那一帮最早的黑客只能通过大型机编程。但是大型机就那么几台，所以喜欢编程的黑客们的上机时间非常有限，一般是一个人刚上完机，另外一个人就迫不及待地顶替他的位置编写自己的代码，甚至有些黑客觉得白天上机的时间不够，会晚上偷偷溜进实验室继续编程。虽然现在个人电脑已经很普遍了，但黑客们还是很喜欢这种长时间编程活动。</p>

<h2>黑客道德与敏捷开发</h2>

<p>敏捷开发中有什么？有快速迭代，代码所有制，团队自组织，了解敏捷开发的同学对此都比较清楚，而黑客道德里面也有一些很相似的共同点，我因此觉得黑客道德是敏捷开发的原型。</p>

<h4>信息应该免费</h4>

<p>黑客普遍认为信息应该免费共享（为什么说普遍？因为比尔盖茨不是这样认为的，他认为软件也是脑力劳动的成果，所有人应该尊重劳动成果，所以他写了那一封很著名的信——<a href="http://en.wikipedia.org/wiki/Open_Letter_to_Hobbyists">给电脑爱好者的公开信</a>），他们认为计算机（包括软件和硬件）应该公开其中的黑盒，让所有人参与到其中的开发并对其进行完善，这样计算机才能取得更大的进步。敏捷开发中的代码所有制与此观点相同，认为团队中的代码不应该为个人所有，应该所有人都有权对代码进行修改。</p>

<h4>快速开发产品原型</h4>

<p>在Facebook崇尚的黑客之道中，就有<code>Done is better than Perfect</code>的说法，就是说一开始不要追求产品的完美，先做出产品的原型得到市场的反馈，再慢慢根据反馈来完善产品。黑客们一直以来也是这样做的，遇到感兴趣的问题不会想太多，做了再说，快速把核心功能开发出来验证自己的想法，很多伟大的产品都源自于此。敏捷开发中的快速迭代也是类似的原理，甚至最近比较火的精益创业也是此种观点。</p>

<h4>对权威挑战</h4>

<p>黑客希望信息共享，能快速开发产品，对开发的效率要求是十分严格，他们对工具的追求像对完美艺术追求一样。但大部分权威机构的产品都不能满足黑客们的要求，它们笨重、不开放、设计保守。黑客们更倾向于自己开发工具，自给自足，然后开放给其他黑客一起使用，大家一起完善。这是一种对权威的挑战、蔑视，黑客与生俱来的叛逆精神。</p>

<h4>优雅简洁的代码</h4>

<p>在还是大型机的时代，电脑的内存和容量非常小，黑客在编程的时候需要让自己的代码尽可能的少，这样才能“塞进”机器里面运行。比如实现某个功能，如果某人只是按部就班的实现这个功能，大家可能会觉得他只是靠蛮力解决了问题，勉强算是一个程序员，但如果他使用了一种奇妙的算法，让代码量大大减少了，那么大家会觉得他是一个黑客，是一位追求完美的艺术家，比如比尔盖茨编写的4KB大小的BASIC程序就经常为黑客们所津津乐道。敏捷开发中对代码的重构推崇有加，介绍重构的资料最经典的是Martin.Flower<a href="http://book.douban.com/subject/1229923/">重构</a>一书，技术背后的思想我觉得跟这些早期黑客是一致的，要像艺术家一样对待自己的代码，追求优雅和完美，是一种对自我的超越。有个说法是，如果你看自己以前的代码觉得很烂，证明你已经进步了，看自己代码的时间间隔越短，证明你进步的越快，比如上午写完的代码，下午review时觉得太糟糕了，那恭喜你，你已经进步了。</p>

<h2>防御性编程</h2>

<p>最后说一下防御性编程，比较有意思。以前有一位外号叫“嘎吱船长”的黑客约翰.德拉浦，他是位天才的技术家，他喜欢的编程风格就是“防御式编程”。大部分人在修复bug时，一般都会找到出错的代码，然后改正它，而船长的改法比较特别，不修改出错的代码，而是加上另外一段代码来让程序自己发现问题后自己修复。比如下面的一段有错误的代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="k">def</span> <span class="nf">method_name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>      <span class="nb">sum</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">sum</span> <span class="o">==</span> <span class="mi">5</span><span class="p">:</span>
</span><span class='line'>          <span class="c"># do something</span>
</span><span class='line'>          <span class="o">...</span>      
</span></code></pre></td></tr></table></div></figure>


<p>正常人会这样改：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="k">def</span> <span class="nf">method_name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>      <span class="nb">sum</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">sum</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span> <span class="c">#一般会改这里</span>
</span><span class='line'>          <span class="c"># do something</span>
</span><span class='line'>          <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是船长是这样来修复：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>   <span class="k">def</span> <span class="nf">method_name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>      <span class="nb">sum</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>
</span><span class='line'>      <span class="c">#在这里加代码...  </span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">sum</span> <span class="o">!=</span> <span class="mi">5</span><span class="p">:</span>
</span><span class='line'>          <span class="nb">sum</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="nb">sum</span> <span class="o">==</span> <span class="mi">5</span><span class="p">:</span>
</span><span class='line'>          <span class="c"># do something</span>
</span><span class='line'>          <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>让程序完成自我救赎~~~^_^</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用腻了bootstrap的可以试试semantic-ui]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/12/16/hello-semantic-ui/"/>
    <updated>2013-12-16T07:16:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/12/16/hello-semantic-ui</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/semantic-ui.png"></p>

<h2>semancti-ui介绍</h2>

<p><a href="http://semantic-ui.com/">semantic-ui</a>是html/css框架的新贵，是继bootstrap和foundation之后的又一css神器。semantic-ui一出现在github上就受到火热的关注，一直在关注排行榜前列。semantic-ui最大的特点：充分利用CSS3动画特效，简洁实用漂亮的样式这些都是其最受欢迎的原因之一。</p>

<!--more-->


<p></p>

<h2>扁平化设计</h2>

<p>随着iOS 7的发布，扁平化设计(flat design)被更多人所熟识。什么是扁平化设计呢？在实际当中，扁平化设计一词所指的是抛弃那些已经流行多年的渐变、阴影、高光等拟真视觉效果，从而打造出一种看上去更“平”的界面。扁平风格的一个优势就在于它可以更加简单直接的将信息和事物的工作方式展示出来，减少认知障碍的产生。</p>

<p>在主流的css框架bootstrap中，开始是不支持扁平化设计的（bootstrap2），但在最新的bootstrap3中，几乎所有的组件都改用了扁平化的设计，但由于设计的不好，3的版本被很多原使用bootstarp的开发所诟病。</p>

<p>而semantic-ui是天生就是扁平化的设计，让人用起来更加觉得时尚、简洁。</p>

<h2>响应式设计</h2>

<p>什么是响应式设计？响应式Web设计(Responsive Web design)的理念是，页面的设计与开发应当根据用户行为以及设备环境(系统平台、屏幕尺寸、屏幕定向等)进行相应的响应和调整。具体的实践方式由多方面组成，包括弹性网格和布局、图片、CSS media query的使用等。无论用户正在使用笔记本还是iPad，我们的页面都应该能够自动切换分辨率、图片尺寸及相关脚本功能等，以适应不同设备;换句话说，页面应该有能力去自动响应用户的设备环境。这样，我们就可以不必为不断到来的新设备做专门的版本设计和开发了。</p>

<p>在semantci-ui的官网里面是这样说的：</p>

<blockquote><p>Every component is defined using em and rem so that components can be resized simply on the fly. Want a menu to get smaller on mobile? Simply have it&#8217;s font-size change using a media query.</p></blockquote>


<p>semantic-ui的每个组件都是使用“em”和“rem&#8221;，所以组件可以在不同的显示设备上自动地调整大小。</p>

<h2>semantic-ui兼容性</h2>

<p><strong>支持的浏览器如下</strong></p>

<ul>
<li>Last 2 Versions FF, Chrome, IE (aka 10+)</li>
<li>Safari 6</li>
<li>IE 9+ (Browser prefix only)</li>
<li>Android 4</li>
<li>Blackberry 10</li>
</ul>


<p>前几天在semantic-ui的github项目里提了个问题，问<a href="https://github.com/Semantic-Org/Semantic-UI/issues/431">semantic-ui是否支持IE6～8</a>，下面有个老外来了句：Support IE6? Are you creazy?呵呵，看来在国外还是不鸟IE的偏多。</p>

<p>在这里吐槽一下IE，IE可以算是浏览器界的一朵奇葩&hellip;不对，奇葩还有些褒意在里面，应该是浏览器界的一个毒瘤，一直阻碍着前端框架的发展，好在现在很多前端框架都不care IE了，比如angularjs，bootstrap等就直接只支持IE8+（不包括IE8），就连鼎鼎大名的Jquery也宣布从2.x版本开始不支持IE6～8，看来IE的淘汰是在所难免了哈。</p>

<p>不过IE9以后情况还是有所好转，《Javascript高级程序设计》的作者 Nicholas C. Zakas也让大家对IE9以后的版本可以另眼相看。但不管怎么样，IE6～8的各种bug和不兼容让web前端开发举步维艰是个不争的事实，该淘汰的时候就应该淘汰。最好的做法让用户升级浏览器或改用chrome，不要在兼容性上面浪费精力。</p>

<h2>semantic-ui示例</h2>

<p>刚刚进入到semantci-ui的网站的时候，就被它的各种控件样式吸引住了，感觉比bootstrap好看很多，又很符合当前流行的“扁平化设计”的风格,这里列一下几个看起来比较酷的控件。</p>

<h4>好看的按钮</h4>

<div class="ui buttons">
  <div class="ui button">Cancel</div>
  <div class="or"></div>
  <div class="ui positive button">Save</div>
</div>


<h4>代码如下</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui buttons&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui button&quot;</span><span class="nt">&gt;</span>Cancel<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;or&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui positive button&quot;</span><span class="nt">&gt;</span>Save<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<div class="ui divider"></div>


<p></p>

<h4>好看的标签</h4>

<div class="ui two column grid" style="display: block;">
  <div class="row">
    <div class="column">
      <div class="ui raised segment">
        <div class="ui ribbon label">Dogs</div>
        <p>Pretty nice animals.</p>
        <div class="ui teal ribbon label">Cats</div>
        <p>Also pretty nice animals, but can prefer solitude.</p>
        <div class="ui red ribbon label">Ogres and monsters</div>
        <p>Never seen one as a pet before, but I imagine they&#8217;d make pretty terrible companions.</p>
      </div>
    </div>
  </div>
</div>


<h4>代码如下</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui two column grid&quot;</span> <span class="na">style=</span><span class="s">&quot;display: block;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;column&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui raised segment&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui ribbon label&quot;</span><span class="nt">&gt;</span>Dogs<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;</span>Pretty nice animals.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui teal ribbon label&quot;</span><span class="nt">&gt;</span>Cats<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;</span>Also pretty nice animals, but can prefer solitude.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui red ribbon label&quot;</span><span class="nt">&gt;</span>Ogres and monsters<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;</span>Never seen one as a pet before, but I imagine they&#39;d make pretty terrible companions.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<div class="ui divider"></div>


<p></p>

<h4>好看的注解</h4>

<div class="ui comments">
  <div class="comment">
    <a class="avatar">
      <img src="http://zhaozhiming.github.io/images/post/photo2.jpg">
    </a>
    <div class="content">
      <a class="author">Dog Doggington</a>
      <div class="text">
        I think this is a great idea and i am voting on it
      </div>
    </div>
  </div>
</div>


<h4>代码如下</h4>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ui comments&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;comment&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;avatar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;/images/post/photo2.jpg&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;author&quot;</span><span class="nt">&gt;</span>Dog Doggington<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;text&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        I think this is a great idea and i am voting on it
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是非常酷？想使用这些很酷很炫的特性，就赶快使用semantic-ui吧～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[类似github的框架]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/10/25/something-like-github-can-build-by-self/"/>
    <updated>2013-10-25T07:36:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/10/25/something-like-github-can-build-by-self</id>
    <content type="html"><![CDATA[<p>github是程序员经常上的网站，但如果是在一家苦逼不能访问外网的公司，那不能把自己的代码托管在github上绝对是一件非常痛苦的事情。如果想要在公司内网也可以用github托管自己的代码，那就要自己搭建类似github的服务器，好在类似github的框架有很多，基本上都是基于git的，可以无缝衔接github而无需额外学习其他技术。</p>

<!--more-->


<h2>github企业版</h2>

<p><a href="https://enterprise.github.com/">github enterprise</a>，如果你的基金充足，github企业版绝对是你的首选。它基本上包涵了现有github网站上面的一切功能，你使用它甚至在视觉上都不会发生任何变化，界面都是和现有github一样的。而且安装十分方便，安装文件就是一个虚拟机镜像文件，只要用虚拟机加载就可以了。但刚才说了“如果你的基金充足”，说明它是要收费的，而且价格不菲，1个20人团队的license每年要5000美刀。国外有用到github企业版的公司有Bizzard（玩游戏的都知道），国内用的很少，我了解到的只有豆瓣在用，而且只用在其中一个或几个项目组（PS:豆瓣好像有自己的代码托管工具叫豆瓣Code，克隆github且增加了自己的特性）。</p>

<h2>gitlab</h2>

<p><a href="https://github.com/gitlabhq/gitlabhq">gitlab</a>，是用Ruby On Rails开发的一款开源代码托管框架，界面也是仿照github设计的，github用户可以快速上手，最重要的是它是一个开源的软件，这意味着你可以免费获取到软件，并将它部署到自己的机器上。但是gitlab的安装过程比较复杂，安装需要依赖以下几个工具：</p>

<ul>
<li>ruby 1.9.3+</li>
<li>git 1.7.10+</li>
<li>redis 2.0+</li>
<li>MySQL or PostgreSQL</li>
</ul>


<p>另外gitlab的markdown文件显示功能不是很好，比如markdown中的table和嵌入html在github上面是可以正常显示，但是在gitlab上面就不行。</p>

<h2>GitBucket</h2>

<p><a href="https://github.com/takezoe/gitbucket">GitBucket</a>，是一个用scala写的高仿github的代码托管框架。这个框架是今年才开发的，目前功能还不是很齐全，数据库也是用的内存数据库，但是github上面的基本功能都有。它的一个最重要的特点是<strong>安装非常方便</strong>，只需要下载gitbucket最新版本的war包，然后放到随便哪个web容器（Jetty，Tomcat）就可以启起来了，想尝尝鲜的同学可以试用一下。</p>

<h2>其他框架</h2>

<p>下面列举一些其他类似的框架，没怎么用过不好做评价，下面的括号表示用哪种语言写的。</p>

<ul>
<li><a href="http://gitorious.org/">Gitorious</a>(Ruby)</li>
<li><a href="http://www.indefero.net">InDefero</a>(PHP)</li>
<li><a href="http://repo.or.cz">Girocco</a>(Perl)</li>
<li><a href="http://eagain.net/gitweb/?p=gitosis.git">Gitosis</a>(Python)</li>
<li><a href="http://github.com/sitaramc/gitolite">Gitolite</a>(Perl)</li>
</ul>


<p>这里也有一篇文章是介绍类似github框架的框架，看<a href="http://blacka.com/david/2010/09/28/hosting-your-own-git-repositories/">这里</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何了解新技术（三）——微信公众号]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/10/24/how-to-know-new-technique-about-it-part3/"/>
    <updated>2013-10-24T07:32:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/10/24/how-to-know-new-technique-about-it-part3</id>
    <content type="html"><![CDATA[<p>随着微博等新兴社交工具的兴起，很多个人博客的博主都放弃了博客而去转战微博，但仍然有一些个人博客坚持了下来，在微信平台搭建了自己的公众帐号，以自身博客内容做起了自媒体。下面就介绍一下几个比较出名的公众帐号。</p>

<!--more -->


<h2>微信的公众帐号——小道消息，道哥的黑板报，MacTalk池建强等</h2>

<p><a href="http://wemedia.so.com/xiaodaoxiaoxi.html">小道消息</a>，“丁香园”技术负责人冯大辉，以科技人文类的文章，IT业界的小道消息吸引读者。作者前身是在淘宝做数据库方面的工作，技术能力很强，文笔也很犀利，后出来自主创业，所以文章涵盖了作者在技术，管理和成长等各方面的独到见解。</p>

<p><a href="http://taosay.net/">道哥的黑板报</a>，《白帽子讲Web安全》的作者，前淘宝（淘宝的牛人真不少啊）的高级安全专家，现在也出来自主创业。首先作者是一名黑客，而且是一名顶级黑客，手握很多未公开漏洞的人之一。文章大部分内容讲的是安全相关的东西，比如今年struts2漏洞相关的内容；还有讲一些黑客的传奇历史，比如最近介绍一名中国传奇黑客的成长史；还有其他跟技术，成长，文学相关的文章。</p>

<p><a href="http://macshuo.com/">MacTalk池建强</a>，原本是介绍Mac技巧的文章，但后来慢慢变成技术和人文结合的文章，时而技术时而随笔，最近作者还将其公众帐号上面的文章整理形成一本书叫《MacTalk·人生元编程》，在各大电子阅读平台上都有售。公众帐号之间经常有互相推荐，这个帐号也是在小道消息和道哥的推荐下我才关注的，慢慢发现作者的文笔风趣，文章内容也十分有料。现在这3个公众帐号号称微信三jian客(我也不知道哪个jian&hellip;)，他们还将在最近的上海Qcon上面做演讲，有兴趣的同学可以关注他们哦。</p>

<p><a href="http://www.guifabu.com/">硅发布</a>，是一个专注中国和美国科技信息、分析和观点的新媒体，在最近的中国自媒体评选中排名中国前十。</p>

<p>还有之前提到的比如infoQ，36氪，极客公园等也有自己的公众帐号，其实越来越多的IT网站都慢慢创建了自己的微信公众帐号，有兴趣的同学可以自行搜索一下。</p>

<h2>顺藤摸瓜</h2>

<p>最近在知乎上面看到了关于读书的一些讨论，有介绍书的，有讨论读书方法的等等。</p>

<p>其中有人提问如何读到好书？有人就回答道：想要读好书，就要从自己喜欢的书或作者开始，看看里面推荐的一些书和作者，这样顺藤摸瓜就可以找到很多好书，避免浪费时间去读一些垃圾书。其实了解技术的渠道也是一样的，从一个大牛开始了解，找他喜欢的书或者blog，顺藤摸瓜挨个这样找下去，就可以找到更多大牛和高质量的博客了。</p>

<p>说到这里要补充一下之前讲到的关于网站的内容，其实大部分的网站和博客的收录可以使用rss阅读器来完成，之前比较出名的是Google Reader，现在Google Reader关闭了可以用<a href="http://www.feedly.com">feedly</a>来代替，而且可以完整迁移原Google Reader里面的数据。</p>

<p>还有一个讨论是关于如何专注阅读的，对于程序员来讲技术书的阅读是必不可少的，但是技术书需要集中精神，不受外界干扰的阅读才能有所收获，简单分享一下讨论内容：</p>

<ul>
<li>首先要把看技术类书籍当成一件严肃的事情，不能跟看小说看杂志一样随便。</li>
<li>其次要选择一段完整的时间来做阅读，保证中间不要被干扰。</li>
<li>然后记录读书笔记。</li>
<li>最后是温习，用提问题或者画思维导图的方式来回顾之前看的内容。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何了解新技术（二）——电子杂志]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/10/17/how-to-know-new-technique-about-it-part2/"/>
    <updated>2013-10-17T20:45:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/10/17/how-to-know-new-technique-about-it-part2</id>
    <content type="html"><![CDATA[<p>除了平时浏览网站外，我们还可以通过手机来了解技术资讯。这里推荐一款APP——多看阅读，这是一款很不错的阅读APP，它以精品阅读来吸引喜欢读书的朋友，虽然上面的电子书没有亚马逊的多，但他们的电子书制作十分精良，每一本书都让人爱不释手，而且完美匹配各种移动设备的尺寸&hellip;不说了，说多了就有广告嫌疑了。下面就说说多看上面的电子杂志。</p>

<!--more -->


<h2>免费的电子杂志——极客公园、码农、虎嗅等</h2>

<p><a href="http://www.geekpark.net">极客公园</a>，内容和36氪相近，也是有很多质量很好的文章，介绍最新的APP或者创业公司。极客公园每个月都有一个主题，比如最近几期的智能硬件，打车应用等。还定期举办了一些活动，记得有一期邀请了很多IT大佬比如百度的李彦宏，360的周鸿祎，微信的张小龙等来做演讲，内容十分精彩。每月一期的电子杂志涵盖了这个月里面的精华文章内容，让你足不出户就可以了解最近发生的IT资讯。</p>

<p><img class="right" src="http://zhaozhiming.github.io/images/post/1074.948.big.jpg">  <br/>
<strong>码农</strong>，是图灵社区出版的一本关于程序员的电子杂志。这里面重点介绍的是技术，比如编程语言，算法，技术框架等，还有一些科技人文，比如有一期对几位国内的大牛进行访谈，介绍了他们从菜鸟蜕变到大牛的过程。因为是图灵社区出版的书，所以里面还有一些新书推荐，基本上都是关于技术类的。有点可惜的是，杂志好像不再更新了，最晚的一期是今年7月。</p>

<p><a href="http://www.huxiu.com">虎嗅</a>是一个有视角的，个性化商业资讯与交流平台，核心关注对象是包括公众公司与创业型企业在内的一系列明星公司。杂志的内容和36氪，极客公园有点类似，但更偏重于商业。杂志是从去年开始的，前面几期杂志是免费的，但从最近开始杂志开始收费，每本是￥2.99。</p>

<p><strong>36氪</strong>，之前讲的36氪网站，它在多看上面也有自己的电子杂志，而且是免费的。</p>

<p><strong>知乎周刊</strong>，这个是最近发现的比较好玩的一个电子杂志，上面的内容来自最近一周的精彩问答（应该是根据点赞的次数来统计的），每一期都有一个主题，比如关于旅游，设计，健身等。杂志的内容虽然不是全部都和技术相关，但有时候看看这种也可以扩展自己的视野，了解了解IT以外的世界。</p>

<h2>电子书和纸质书</h2>

<p>顺便说下电子阅读和纸质书阅读，我现在大部分的阅读都是通过智能手机（其实也可以通过其他移动设备，比如pad，kindle等），因为手机随身携带，无论走到哪都可以阅读，只要有空闲时间也可以阅读，anywhere，anytime，非常方便。纸质书在这一点上是不能与之相比的。</p>

<p>传统的纸质书长时间的专注，而现在外界干扰的东西太多了,以致我们很难长时间地阅读（比如有时候想起什么事情，或者看看网站，看看电视什么的等，也可能是我的自制力比较弱吧:(），特别是看技术类的书，如果无法专注的话，阅读的进度会非常缓慢，有时候我看一本技术书甚至要几个月的时间才看完:(。而电子书就不存在这个问题了，等车的时候可以看，等电梯的时候也可以看，一般这种碎片时间都比较短，专注相对比较容易，阅读内容可以较快吸收。</p>

<p>如果在公交车上拿出一本专业书来看，别人可能会觉得你装，但如果是用手机读书的话，别人就不知道你看的是什么书了，别人或许以为你和他读的一样的YY小说呢，这样既可以避开别人的眼光又可以心安理得的读自己的书，低调奢华又不失内涵，多好。</p>

<p>价格方面，电子书相比纸质书要便宜一半甚至一半以上，但电子书的数量现在还不是很多，可能是因为电子书是一种新兴的产物，还没有一种更快捷更成熟的方式来创建电子书。或者是因为传统观念还未转变过来，可能大家觉得电子书像以前的pdf一样，应该是免费的，付费去买一件虚拟的东西感觉“不划算”，没有利益就很难驱动生产。但随着接受电子书的用户越来越多，电子书的需求也会随着增多，这样在市场利益的驱动下，电子书的产量和质量也会越来越高，而纸质书将会慢慢淡出市场。</p>

<p>总结电子书的优点就是：随时随地，小巧灵活，价格便宜。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何了解新技术（一）——网站]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/10/15/how-to-know-new-technique-about-it-part1/"/>
    <updated>2013-10-15T21:28:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/10/15/how-to-know-new-technique-about-it-part1</id>
    <content type="html"><![CDATA[<p>说说自己平时了解业界新技术和技术资讯的途径，其实基本上都是国内的网站，或者是中文的blog，因为自己实在懒得费精力去看英文哈。</p>

<!--more -->


<h2>大型的科技资讯网和博客网——infoQ，博客园，36氪等</h2>

<p><a href="http://www.infoq.com/cn">InfoQ</a>，全球知名的IT资讯网站，在上面可以看到一些大神的访谈，前沿技术的介绍，知名网站的案例分析等，文章质量颇高(这里主要是指国内作者投稿的文章，而国外文章翻译过来的就没那么好了）。InfoQ还会定期举办QCon全球软件大会，今年5月份有幸参加了北京的QCon大会，认识到了安全专家道哥和golang国内传道者（也是go的web框架beego作者）astaxie谢，收获颇丰。。。额，跑题了。</p>

<p><a href="http://www.cnblogs.com">博客园</a>，聚集了大量高质量技术博客在上面，简洁的页面，漂亮的代码嵌入页面，没有太多恼人的广告（一点广告都没有不现实，毕竟网站也是要盈利的），这些都是我喜欢的。有很多技术大牛也在上面写自己的博客，比如新浪技术大V老赵（现在他的博客不知道搬哪了-_-）等。</p>

<p><a href="http://www.36kr.com">36氪</a>，是一家关注互联网创业，提供国内外最新互联网资讯的公司。这家网站提供的资讯主要是针对创业公司，创业项目，创新产品等，相对技术类的介绍比较少。其实我在PC上看浏览这个网站比较少，因为我关注了他们的电子杂志，每个月有一本（免费的，在多看阅读上有，电子杂志后面会介绍），上面收集了一个月内36氪的精华文章。</p>

<p>还有其他比较有名的网站和博客，比如：</p>

<p><a href="http://www.oschina.net">开源中国</a>——主要介绍开源项目，每天会介绍最新的国内和国外开源项目，定期也会举办一些线下活动。</p>

<p><a href="http://coolshell.cn">酷壳</a>——原来是技术大牛陈皓搭建的个人博客，后来由于超高的博客质量以及其观点的争议性，吸引了很多技术人员的关注，并在上面投稿发表文章。</p>

<p><a href="http://www.ruanyifeng.com/blog">阮一峰的网络日志</a>——IT技术名人，也是以高质量的博客内容出名。</p>

<p>如果想了解国外的IT技术资讯网站，可以看看知乎<a href="http://www.zhihu.com/question/19557033">这个问题</a>的答案。</p>

<p>可能有人会问，怎么没有介绍CSDN和ITeye？<br/>
说实话，我以前还是经常上这2个网站的，但现在，我只能说“呵呵”。<br/>
CSDN有时候开个首页要让我等半天，而且老是弹出广告让我很不爽，帖子内容也普遍低下，问题回答区基本没人（都上stackoverflow去了）。引用酷壳陈皓的话<code>CSDN算技术网站吗？</code><br/>
ITeye呢感觉沦为菜鸟集中地，看着帖子里面夹杂着大片大片无格式的代码就觉得头晕，而且大部分帖子还是转载的。<br/>
顺便再吐槽一下百度，前段时间酷壳的404页面写着<strong>“做环保的程序员，从不用百度开始”</strong>，百度觉得名誉遭到“贬损”，于是酷壳陈皓收到了百度的律师信。。。就我个人使用经验来说，我用百度来搜技术类的问题真的什么也搜不到，即使有也是上面那2个网站的链接，所以陈皓的告诫我觉得是对的。现在我一般是用Google加英文描述来查找我需要的答案，如果有时候出现Google访问不了的情况（再次BS一下GFW），就用Bing来搜，也能搜出跟Google差不多的答案出来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何重构一个圈复杂度超30的类]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/10/08/how-to-refactor-a-class-which-cyclomatic-complexity-over-30/"/>
    <updated>2013-10-08T20:43:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/10/08/how-to-refactor-a-class-which-cyclomatic-complexity-over-30</id>
    <content type="html"><![CDATA[<p>下面的类是一个老系统的代码，现在放到sonar上面进行扫描，扫出来的结果发现复杂度超过了30。</p>

<p>代码复杂度是指代码中的分支数量，比如有一个if分支，代码复杂度就加1，如果if中有“||”或者“&amp;&amp;”那么代码复杂度就加2，for和while同理。一般复杂度超过10的类就算是比较复杂的了，而这个类的复杂度竟然达到了30，代码的糟糕程度可见一斑，现在我们就来重构一下这个类的代码。</p>

<!--more-->


<p>原始文件在<strong><a href="https://github.com/zhaozhiming/zhaozhiming.github.com/blob/source/source/file/SomeClient(old).java">这里</a>。</strong><br/>
重构开始吧！</p>

<h2>多处String类型非空判断</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">StringUtil</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">username</span><span class="o">))</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="s">&quot;username can not be null&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">StringUtil</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">password</span><span class="o">))</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="s">&quot;password can not be null&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">udto</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="s">&quot;ICRUploadDTO can not be null&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>重构之后：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//将原来的地方替换为</span>
</span><span class='line'><span class="n">checkStringParamEmpty</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="s">&quot;username&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">checkStringParamEmpty</span><span class="o">(</span><span class="n">password</span><span class="o">,</span> <span class="s">&quot;password&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">checkStringParamEmpty</span><span class="o">(</span><span class="n">udto</span><span class="o">.</span><span class="na">getUrlPath</span><span class="o">(),</span> <span class="s">&quot;urlPath&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="c1">//新增一个方法</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">checkStringParamEmpty</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ICRClientException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">StringUtil</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">value</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot; can not be null&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>原代码中不止这3个参数的校验，还有很多，越多参数的校验，我们重构后的复杂度就会越低。</p>

<p><strong>代码复杂度变化：原来是3，修改后为1。</strong></p>

<h2>多String值判断</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(!</span><span class="n">udto</span><span class="o">.</span><span class="na">getPriority</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;0&quot;</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">udto</span><span class="o">.</span><span class="na">getPriority</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;1&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">udto</span><span class="o">.</span><span class="na">getPriority</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;2&quot;</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">udto</span><span class="o">.</span><span class="na">getPriority</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;3&quot;</span><span class="o">))</span>
</span><span class='line'><span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="s">&quot;priority must be 0/1/2/3&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>重构之后：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//将原来代码替换为</span>
</span><span class='line'><span class="n">checkValueWithinList</span><span class="o">(</span><span class="n">udto</span><span class="o">.</span><span class="na">getPriority</span><span class="o">());</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="c1">//新增一个方法：</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">checkValueWithinList</span><span class="o">(</span><span class="n">String</span> <span class="n">priority</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ICRClientException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;0&quot;</span><span class="o">,</span> <span class="s">&quot;1&quot;</span><span class="o">,</span> <span class="s">&quot;2&quot;</span><span class="o">,</span> <span class="s">&quot;3&quot;</span><span class="o">).</span><span class="na">contains</span><span class="o">(</span><span class="n">priority</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="s">&quot;priority must be 0/1/2/3&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>代码复杂度变化：原来是4，修改后为1。</strong></p>

<h2>对list的非空判断</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">list</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="s">&quot;list can not be null&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>重构之后：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//将原来的代码替换为</span>
</span><span class='line'><span class="n">checkValueWithinList</span><span class="o">(</span><span class="n">udto</span><span class="o">.</span><span class="na">getPriority</span><span class="o">());</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="c1">//新增一个方法</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">checkListNoNull</span><span class="o">(</span><span class="n">List</span> <span class="n">list</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ICRClientException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">ICRClientException</span><span class="o">(</span><span class="s">&quot;list can not be null&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>代码复杂度变化：原来是2，修改后为1。</strong></p>

<h2>多个catch的内容相同</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">code</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">code</span> <span class="o">=</span> <span class="n">httpClient</span><span class="o">.</span><span class="na">executeMethod</span><span class="o">(</span><span class="n">post</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">HttpException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>重构之后：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//将原来的地方替换为</span>
</span><span class='line'><span class="kt">int</span> <span class="n">code</span> <span class="o">=</span> <span class="n">executeHttpClient</span><span class="o">(</span><span class="n">httpClient</span><span class="o">,</span> <span class="n">post</span><span class="o">);</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="c1">//新增一个方法</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="nf">executeHttpClient</span><span class="o">(</span><span class="n">HttpClient</span> <span class="n">httpClient</span><span class="o">,</span> <span class="n">PostMethod</span> <span class="n">post</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ICRClientException</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">code</span><span class="o">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">code</span> <span class="o">=</span> <span class="n">httpClient</span><span class="o">.</span><span class="na">executeMethod</span><span class="o">(</span><span class="n">post</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">code</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>代码复杂度变化：原来是2，修改后为1。</strong></p>

<h2>if判断结果复杂化</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="k">if</span> <span class="o">(</span><span class="n">code</span> <span class="o">==</span> <span class="mi">200</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">post</span><span class="o">.</span><span class="na">getResponseBodyAsString</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;ok&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">code</span> <span class="o">==</span> <span class="mi">500</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="n">post</span><span class="o">.</span><span class="na">getResponseBodyAsString</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="n">code</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">post</span><span class="o">.</span><span class="na">getStatusText</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>重构之后:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//将原来代码替换为</span>
</span><span class='line'><span class="k">return</span> <span class="nf">returnFinialResult</span><span class="o">(</span><span class="n">post</span><span class="o">,</span> <span class="n">code</span><span class="o">);</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="c1">//新增一个方法</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">returnFinialResult</span><span class="o">(</span><span class="n">PostMethod</span> <span class="n">post</span><span class="o">,</span> <span class="kt">int</span> <span class="n">code</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ICRClientException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">code</span> <span class="o">==</span> <span class="mi">500</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">ICRClientException</span><span class="o">(</span><span class="n">post</span><span class="o">.</span><span class="na">getResponseBodyAsString</span><span class="o">());</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">code</span> <span class="o">!=</span> <span class="mi">200</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">ICRClientException</span><span class="o">(</span><span class="n">code</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">post</span><span class="o">.</span><span class="na">getStatusText</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">post</span><span class="o">.</span><span class="na">getResponseBodyAsString</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;ok&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ICRClientException</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>代码复杂度变化：原来是4，修改后为3。</strong></p>

<h2>本地变量始终不为null</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">uploadToICR</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">,</span> <span class="n">ICRUploadDTO</span> <span class="n">udto</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ICRClientException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">HttpClient</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">PostMethod</span> <span class="n">post</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">httpClient</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpClient</span><span class="o">();</span>
</span><span class='line'>  <span class="c1">//some code here</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">post</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">post</span><span class="o">.</span><span class="na">releaseConnection</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">httpClient</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">httpClient</span><span class="o">.</span><span class="na">getHttpConnectionManager</span><span class="o">().</span><span class="na">closeIdleConnections</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>重构之后：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">uploadToICR</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">,</span> <span class="n">ICRUploadDTO</span> <span class="n">udto</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ICRClientException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">HttpClient</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpClient</span><span class="o">();</span>
</span><span class='line'>    <span class="n">PostMethod</span> <span class="n">post</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="c1">//some code here</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">post</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">post</span><span class="o">.</span><span class="na">releaseConnection</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>代码复杂度变化：原来是1，修改后为0。</strong></p>

<h2>读取IO流的方法，为什么要自己实现？</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">readData</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">ins</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">2048</span><span class="o">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">byte</span> <span class="n">data</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">2048</span><span class="o">];</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">((</span><span class="n">len</span> <span class="o">=</span> <span class="n">ins</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">2048</span><span class="o">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">newcount</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="n">len</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">newcount</span> <span class="o">&gt;</span> <span class="n">buf</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="kt">byte</span> <span class="n">newbuf</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">Math</span>
</span><span class='line'>                        <span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">buf</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="o">,</span> <span class="n">newcount</span><span class="o">)];</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">newbuf</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
</span><span class='line'>                <span class="n">buf</span> <span class="o">=</span> <span class="n">newbuf</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">buf</span><span class="o">,</span> <span class="n">count</span><span class="o">,</span> <span class="n">len</span><span class="o">);</span>
</span><span class='line'>            <span class="n">count</span> <span class="o">=</span> <span class="n">newcount</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">count</span><span class="o">];</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">result</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ins</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在原代码里面自己实现了一个对读取IO流字节的方法，这个可以使用apache-io或者guava的API代替：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//使用apache io API的实现：</span>
</span><span class='line'><span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="n">IOUtils</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
</span><span class='line'><span class="c1">//使用guava API的实现：</span>
</span><span class='line'><span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes1</span> <span class="o">=</span> <span class="n">ByteStreams</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>代码复杂度变化：原来是很多，修改后为0。</strong></p>

<p>最终重构后的版本见<strong><a href="https://github.com/zhaozhiming/zhaozhiming.github.com/blob/source/source/file/SomeClient(new).java">这里</a></strong>，最后的代码复杂度从原来的30降到了3。<br/>
代码写的比较仓促，没有写单元测试，其实最好的做法是在重构之前先写好单元测试，然后再慢慢修改原来的代码，每修改一处地方跑一遍单元测试，这样可以保证你的重构没有破坏原来的代码逻辑。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的octopress配置]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/09/05/my-octopress-setting/"/>
    <updated>2013-09-05T07:33:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/09/05/my-octopress-setting</id>
    <content type="html"><![CDATA[<p>在github上用octopress搭建了自己的blog，octopress号称是“专门给黑客打造的博客（A blogging framework for
把hackers）”，使用Markdown语法来写blog确实感觉像写代码一样，而且写好的
把blog可以本地调试好了再上传到github的服务器，就像你的应用程序调试好了部署到服务器一样。</p>

<!--more-->


<p>
我最喜欢的是octopress的代码片段，简洁清晰，而且支持各种语言的高亮显示，你还可以在你的blog中嵌入不同的js框架（比如jquery或angularJs），展示js代码的效果。octopress支持的插件很多，还可以选择各种主题来装饰你的blog，下面我也按照惯例秀秀自己的octopress配置。</p>

<h3>主题</h3>

<p>你当然可以使用octopress的默认主题，但这样很容易和其他人的界面“撞衫”，想要让自己的octopress与众不同，就要定制自己的主题界面。在github上面可以找到octopress的第三方主题，地址在<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">这里</a>，另外还有一个网站也是专门介绍octopress主题的，地址在<a href="http://opthemes.com/">这里</a>。其中也有一些国人制作的主题界面，非常漂亮。</p>

<h3>评论插件</h3>

<p>原先使用的是国外的一个第三方评论插件Disqus，但由于国外多用facebook或twitter等帐号来登录这个插件，而这些网站都被我们伟大的GFW墙了，所以我选择了国内的一个同类产品——多说（其实应该是山寨Disqus的）。多说可以使用国内主流应用的帐号来登录，比如新浪微博或QQ等，可以将你blog中的评论保存到服务器上，后续不管你把blog迁移到什么地方，评论都不会消失。可以到<a href="http://duoshuo.com/">这里</a>下载。</p>

<h3>标签云</h3>

<p>octopress默认的只有目录（categories），没有标签（Tag），目录和标签是不一样的，每一篇blog只能归在一个目录里面，但却可以归在多个标签中。随着标签慢慢增多，可以将标签做成标签云，放在blog的边栏上，不仅非常美观，还可以看出你的blog关注方向有哪些。想做标签云，需要使用到2个插件，<a href="https://github.com/robbyedwards/octopress-tag-pages">robbyedwards/octopress-tag-pages</a>和<a href="https://github.com/robbyedwards/octopress-tag-cloud">robbyedwards/octopress-tag-cloud</a>。具体安装步骤请参照该github上的说明。</p>

<h3>同步插件</h3>

<p>在github上面搭建自己的octopress博客，有个缺点是在搜索引擎中没有收录你的网站，导致别人很难在google或者百度里面找到你的文章，如果你的blog放在比较大的博客网站的话（比如博客园、博客大巴等），在各大搜索网站就可以很容易搜到你的blog。我曾经试过在每篇blog上面加上“keywords&#8221;标签来记录post的关键字，希望搜索引擎可以搜录，但结果还是不行。<br/>
在网上搜了一下，发现有人写了一个octopress插件，可以将octopress的blog同步到几个比较大的博客网站，可以同步所有的blog，也可以同步最近一篇blog。网址在<a href="https://github.com/huangbowen521/octopress-syncPost">这里</a>。<br/>
上面几个是我的octopress主要插件，主题上面我还是不大满意，可能以后还会更新。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[facebook的工程师文化——《打造facebook》读后感]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/06/04/facebook-engineer-culture/"/>
    <updated>2013-06-04T07:36:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/06/04/facebook-engineer-culture</id>
    <content type="html"><![CDATA[<p>在今年北京的QCon大会上听了facebook早期中国籍工程师王淮的演讲，受益匪浅，主题是如何打造高效能团队，主要介绍他在facebook的一些经历和管理上的经验分享。现在的他是一名天使投资人，投资的领域有移动互联，支付，云应用等。他还写了《打造facebook》一书，讲了facebook的公司文化和他在其中的开发管理等经历。</p>

<!--more-->


<p></p>

<h3>工具文化</h3>

<p>这本书给我印象最深的一点是facebook的&#8221;工具文化&#8221;。为帮助工程师更好的进行产品开发，facebook对内部工具Tools是非常关注的。facebook极力强调，要将最好的工程师放到工具开发这一块，因为工具做好了，可以达到事半功倍的效果，所有人的效率都可以提高，而不仅仅是工程师。还有通过工具来解决流程上面的问题，比如公司在推广一些规范性的规则，传统的方法是反复强调，另一种是开发出好用的工具，将这些东西固定在工具里面，借助工具进行强制性推广。不断的更新和完善公司自己的工具，并将公司的企业文化也融入到工具之中，有时候比找到一个伟大的创意更重要。</p>

<p>facebook研发的工具有很多，比如新人刚加入facebook时，需要分配自己的开发服务器，facebook就有一个工具来管理公司的开发机器。在这个工具上，你可以看到所有机器的详细信息，包括分配给什么人，什么时间分配的，机器的配置信息等。在还未申请的机器上面，只需要点击一个按钮就会帮你安装好开发服务器，非常方便和简单。对于我们开发人员来说工作主要是写代码，facebook针对代码管理业开发了很多工具。比如有一款工具是在开发人员提交代码之前对代码进行检查，如果代码不符合代码规范或者没有写测试案例，工具会发出警告并交给开发人员修改。还有一款code review的工具叫Phabricator，开发人员可以在上面针对每一行代码进行讨论，如果代码有问题，代码审查者可以提问题，或者让代码提交者修改等，只有代码明确接受后，才可以提交到服务器的代码库中。这些工具的理念是将重复性的劳动交给电脑来执行，以&#8221;Don&rsquo;t Make Me Think&#8221;的方式来推广好习惯。</p>

<h3>黑客文化</h3>

<p>facebook一直强调公司的黑客文化，总部基地建有&#8221;黑客广场&#8221;，公司内部随处可见的黑客标志，facebook还会定期举行黑客马拉松(Hackathon)。像Google 允许员工用工作时间的20%来做自己喜欢的东西一样，Hackathon也是facebook让员工保持创造力，避免工作枯燥而失去工作激情的一种方式，在这个过程中，也催生了很多伟大的作品，比如timeline(时间轴)，全屏照片视图等。参加Hackathon虽然是自愿的，但facebook强烈建议每个员工都去参加Hackahton，甚至有的工程师因为要安排产品上线而无法参加Hackathon，公司会调整产品的上线时间来让工程师去参加Hackathon。</p>

<p>facebook的CEO 扎克伯格本身就是一个黑客，看过《社交网络》的朋友都会记得电影开始的那一段场景，扎克伯格做了一个哈佛版美女评选网站（Facemash），为了得到更多女同学的照片，他黑进了当时学生宿舍里面每个学生的电脑去获取他们同学的照片。扎克伯格想打造独一无二的企业文化和管理方式，他将公司的这种文化称之为&#8221;黑客之道&#8221;(Hacker Wiay)，他诠释说，黑客文化是一种持续改进的做事方法，黑客迅速发布小规模的更新，然后从中获取到经验，在下一次更新中更好的改进，直到产品完成（有点敏捷开发的意思）。Done is better than prefect（完成胜于完美），这是facebook对这种黑客精神的诠释。</p>

<p>facebook的黑客文化还包括一种亲身实践，积极进取的精神。Code Wins Arguments（代码胜于雄辩），在facebook的产品开发过程中，经常会有一个工程师站出来说，给我2天的时间我做个demo出来，证明我的想法是可行的。facebook不会有那种长达几天的马拉松会议，工程师们会开发出产品原型来证明是否行得通，在facebook每个工程师都是顶尖的人才，他们具有这样一种快速开发的能力。</p>

<p>书中除了谈到上面所讲的这些点外，还谈到了作者在facebook中的项目管理经验，适合做项目管理的同学参考借鉴，最后希望大家也喜欢facebook的黑客文化。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用Sonar定制自定义JS扫描规则（三）——SSLR JavaScript Toolkit 使用说明]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/05/20/use-sonar-create-customer-js-verify-rule-part-3/"/>
    <updated>2013-05-20T11:20:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/05/20/use-sonar-create-customer-js-verify-rule-part-3</id>
    <content type="html"><![CDATA[<p>在上一篇blog中讲了在sonar中如何新增自定义的JS规则，这里面比较难的地方是XPath语句的编写，而要编写正确的XPath语句，首先要拿到语法的AST，下面我们就来介绍如何使用SSLR JavaScript Toolkit 工具来得到源代码的语法树。</p>

<!--more-->


<p>首先通过在<a href="http://repository.codehaus.org/org/codehaus/sonar-plugins/javascript/sslr-javascript-toolkit/1.3/sslr-javascript-toolkit-1.3.jar">这里</a>下载SSLR JavaScript Toolkit 工具，下载下来是一个jar包，在cmd窗口使用java -jar sslr-javascript-toolkit-1.3.jar打开这个工具，操作界面如下：<br/>
<img src="http://zhaozhiming.github.io/images/post/02073536-58b547f5394041cdb795a717087eca35.png"></p>

<p>左上方的窗口是用来输入你的源代码，右上方的窗口是来显示你的AST，最下面的窗口是来输入你的XPath规则。</p>

<p>我们现在左上方输入一些简单的javascript代码，然后点击 Parse Source Code按钮，可以得到源代码的语法树：</p>

<p><img src="http://zhaozhiming.github.io/images/post/02074124-ca30984af1704101962348b52d4a5f34.png"></p>

<p>得到语法树后，我们也可以点击右边窗口的XML页面，得到的是语法树的XML文档。有了XML文档，就可以通过XPath轻松得到你想要的语句了。</p>

<p>举个例子：比如我想得到本地变量名，即var关键字后面的变量名，可以通过XPath的语法来查询。</p>

<p>在最下方的窗口输入XPath语法规则，点击Evaluate XPath按钮，如果语法正确，就会出现返回结果，并高亮选中你想要查询的代码，如下：</p>

<p><img src="http://zhaozhiming.github.io/images/post/02074943-45053229678b4effbec60cf2c363b076.png"></p>

<p>如果语法错误，右边的窗口会给出提示，如果查询语句不正确，任何源代码都不会被选中。更多的XPath语法可以参考<a href="http://www.w3schools.com/xpath/">http://www.w3schools.com/xpath/</a>。<br/>
总结：sonar其实很早就支持了对JS的代码校验，但是你如果想自己定制校验规则，最简单的方式就是通过sonar的web接口增加XPath规则，这个需要在XPath语法上多花点力气，如果写出来的查询语法不正确，可以多试几遍，用SSLR JavaScript Toolkit 可以很方便的调试。最后祝大家都可以在sonar上配置自己的自定义规则。</p>
]]></content>
  </entry>
  
</feed>
