<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2017-10-22T11:13:39+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 CSS 显示元素的四个角边框]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/10/21/how-to-add-4-corner-border-with-css/"/>
    <updated>2017-10-21T08:25:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/10/21/how-to-add-4-corner-border-with-css</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/10/css_corner.png" width="400" height="300"></p>

<p>为元素加上边框很简单，但是要单独给每个角加上边框就有点难了，下面介绍下实现该效果的两种方法，以及这两种方法优缺点的总结。</p>

<!--more-->


<h2>伪元素边框法</h2>

<p>在看 CSS 代码之前，让我们先看看 html 的结构。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;outter&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里使用了内外 2 层 div，因为单独使用 1 个 div 来实现 4 个角边框不好实现，所以要用 2 个 div，每个 div 实现 2 个角边框的效果。</p>

<p>咱们再来看看 CSS 代码。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.outter</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">//</span> <span class="err">外层右上有左下</span> <span class="nt">2</span> <span class="err">个角</span>
</span><span class='line'><span class="nc">.outter</span><span class="o">:</span><span class="nd">:before</span><span class="o">,</span>
</span><span class='line'><span class="nc">.outter</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">content</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.outter</span><span class="o">:</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">right</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-right</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-top</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.outter</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">bottom</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-left</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-bottom</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">//</span> <span class="err">内层左上和右下</span> <span class="nt">2</span> <span class="err">个角</span>
</span><span class='line'><span class="nc">.content</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:before</span><span class="o">,</span>
</span><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">content</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">-5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">-5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-left</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-top</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">right</span><span class="o">:</span> <span class="m">-5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">bottom</span><span class="o">:</span> <span class="m">-5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-right</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-bottom</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里主要使用了伪元素来实现角边框，我们知道<code>::before</code> 和 <code>::after</code> 这 2 个伪元素可以添加显示内容，所以我们就用<code>::before</code>来实现其中一个角边框，<code>::after</code>实现另外一个。</p>

<p>但每个元素的<code>::before</code> 和 <code>::after</code>只能出现一次，所以我们需要 2 个 div 来分别实现 4 个角边框的效果。</p>

<p>在实现每个角边框的时候，我们可以通过绝对定位的方式来设置每个角边框的位置，比如外层 div <code>outter</code>的<code>::before</code>伪元素，我们设置其位置为<code>top: 0; right: 0;</code>，它的位置就是右上角。</p>

<p>这里要注意的是，如果内层和外层 div 不是完全重叠的话，内层伪元素的位置就要有所偏移，比如内层 div <code>content</code>的<code>::before</code>伪元素，我们设置其位置为<code>top: -5px; left: -5px;</code>，这是因为外层和内层 div 因为<code>padding</code>而偏移了<code>5px</code>的位置，所以这里的绝对定位就不是<code>top: 0; left: 0;</code>了。</p>

<h3>效果图</h3>

<p><img src="http://zhaozhiming.github.io/images/post/2017/10/border-sloved1.png" width="400" height="300"></p>

<h3>优缺点</h3>

<ul>
<li>优点：灵活性高。</li>
<li>缺点：CSS 代码比较多，html 结构也比较复杂，需要 2 个 div 来实现。</li>
</ul>


<h2>伪元素遮盖法</h2>

<p>我们接着来看第二种方法，还是来先看下 html 的结构，这种方法的 html 结构相对比较简单。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;your/image/path&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的<code>img</code>是我们要用角边框包括起来的内容，所以实际上我们只用到了 1 层 div。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.content</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">2px</span> <span class="k">solid</span> <span class="m">#ca1c1e</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">25px</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">25px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.content</span> <span class="nt">img</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">z-index</span><span class="o">:</span> <span class="m">5</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:before</span><span class="o">,</span>
</span><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">content</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="m">#fff78e</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">100</span><span class="o">%</span> <span class="o">+</span> <span class="m">50px</span> <span class="o">+</span> <span class="m">4px</span> <span class="o">-</span> <span class="m">120px</span><span class="p">);</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">100</span><span class="o">%</span> <span class="o">+</span> <span class="m">4px</span><span class="p">);</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">-2px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">50</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">translateX</span><span class="p">(</span><span class="m">-50</span><span class="o">%</span><span class="p">);</span>
</span><span class='line'>  <span class="k">z-index</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">100</span><span class="o">%</span> <span class="o">+</span> <span class="m">50px</span> <span class="o">+</span> <span class="m">4px</span> <span class="o">-</span> <span class="m">120px</span><span class="p">);</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">100</span><span class="o">%</span> <span class="o">+</span> <span class="m">4px</span><span class="p">);</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">-2px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">50</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">translateY</span><span class="p">(</span><span class="m">-50</span><span class="o">%</span><span class="p">);</span>
</span><span class='line'>  <span class="k">z-index</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方法同样是利用了伪元素，但不是用伪元素来实现边框，而是用来遮盖边框。</p>

<p>我们看到最外层的<code>div</code>设置了一个边框<code>border: 2px solid #ca1c1e</code>，这个就是我们最终会看到的角边框的边框，但是其中一些部分会被遮盖掉。</p>

<p>以<code>::before</code>伪元素的代码来讲解：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">100</span><span class="o">%</span> <span class="o">+</span> <span class="m">50px</span> <span class="o">+</span> <span class="m">4px</span> <span class="o">-</span> <span class="m">120px</span><span class="p">);</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">100</span><span class="o">%</span> <span class="o">+</span> <span class="m">4px</span><span class="p">);</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">-2px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">50</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">translateX</span><span class="p">(</span><span class="m">-50</span><span class="o">%</span><span class="p">);</span>
</span><span class='line'>  <span class="k">z-index</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用伪元素<code>::before</code>遮盖掉了上下两边框的中间部分，可以看到其宽度设置为<code>width: calc(100% + 50px + 4px - 120px)</code>，我们来解读一下这些数字的含义。</p>

<ul>
<li><code>50px</code>是左右<code>padding</code>的宽度</li>
<li><code>4px</code>是<code>border</code>的宽度</li>
<li><code>120px</code>是最后我们想显示的角边框的总宽度，首先它必须大于<code>50px + 4px</code>，不然会把边框完全挡掉，这里设置成<code>120px</code>，那么相当于角边框的宽度就是<code>120 - 50 - 4 = 66</code>，所以每个角边框的宽度就是<code>33px</code>。</li>
</ul>


<p><code>height: calc(100% + 4px)</code>: 高度就是总高度再加上<code>border</code>的宽度。</p>

<p><code>top: -2px</code>: 从边框的上面开始定位，是为了把上边的边框挡住。</p>

<p><code>left: 50%;transform: translateX(-50%);</code>: 水平居中。</p>

<p><code>z-index: 1;</code>: 让伪元素可以挡住外层的 div。</p>

<p><code>::after</code>伪元素原理和<code>::before</code>大致相同，只是把水平和垂直方向调换一下。</p>

<h3>效果图</h3>

<p><img src="http://zhaozhiming.github.io/images/post/2017/10/border-sloved2.png" width="400" height="300"></p>

<h3>优缺点</h3>

<ul>
<li>优点：一层 div 就可以搞定，结构相对简单。</li>
<li>缺点：如果背景色需要透明的话则不适用。</li>
</ul>


<h2>总结</h2>

<p>这就是实现元素角边框的两种方法，其实还有一种方法，就是使用 CSS 的<code>clip-path</code>来实现，但代码相对比较<code>hard code</code>，而且这个特性还是实验性的，所以具体怎么实现这里就不介绍了，感兴趣的同学可以看下这个 <a href="https://codepen.io/bennettfeely/pen/NdVyvR">code pen</a>。</p>

<p>如果还有其他更好的实现方法欢迎留言，大家一起学习进步，谢谢！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[研发面试官的面试指南（三）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part3/"/>
    <updated>2017-09-23T19:33:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part3</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/09/interview3.jpeg" width="400" height="300"></p>

<p>之前讲了面试流程和技术面试环节，最后讲一下技术面试中的注意事项，可以提高面试的效率和准确率。</p>

<!--more-->


<h2>注意事项</h2>

<h3>提前准备</h3>

<p>一般 HR 会在面试之前给你发送一份应聘者的简历，如果有笔试环节的话，会附带一份笔试题答题结果，这个时候需要提前对应聘者有所了解。</p>

<p>通过简历可以了解应聘者的技术背景，提前想好面试时要重点问哪一方面的问题。有笔试题的话可以通过笔试结果对应聘者掌握的知识点和代码规范有一定了解。</p>

<p>准备时间建议不超过 15 分钟，不要让应聘者等待太久。</p>

<h3>结对（组队）面试</h3>

<p>尽量避免一个人去面试，每个人的知识点都有盲区，一个人的主观因素会比较大，容易造成判断失误。</p>

<p>建议是两个人一起面试，面试完后沟通各自观点，如果面试官中有一个人觉得应聘者不合适，则不建议录用，要选择同时让两位面试官都满意的人。</p>

<p>如果对是否录用应聘者感到纠结的话，建议是按不录用来处理，宁可漏招一个牛人，也不错招一个不合适的人。</p>

<h3>提前结束</h3>

<p>如果在考察过程中发现应聘者不是合适的人，或者技能上有所欠缺，建议提前结束面试，以提高面试的效率，也为了节省双方的时间。</p>

<p>但不建议面试不到5分钟就停止面试，要站在应聘者的角度上考虑问题，可能应聘者费了很大的劲才过来面试，结果面试不到5分钟就结束了，这样对应聘者的体验是相当不好的。</p>

<p>建议多问几个不同方面的问题来考察应聘者，可能应聘者某个方面存在知识盲点，但其他方面却能力突出呢。</p>

<h3>控制时间</h3>

<p>有时候应聘者讲起话来会滔滔不绝，如果每问一个问题都要等10分钟的话，那整个面试过程要么很长，要么不能有效地从全方面了解应聘者。</p>

<p>这时候要注意控制时间，可以适当地打断应聘者，让其讲重点内容。</p>

<p>整个面试过程建议是不要超过 1 个小时。</p>

<h2>总结</h2>

<p>以上就是作为面试官的一些经验和总结，希望可以帮助到正在做面试官的同行，也希望大家可以招到自己满意和合适的人。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[研发面试官的面试指南（二）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part2/"/>
    <updated>2017-09-23T19:33:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part2</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/09/interview2.png" width="400" height="300"></p>

<p>除了面试流程，研发面试最关键的还是技术面试环节，这个环节要确认应聘者的技术基本功是否扎实，以及技术的深度和广度，与公司部门的技术栈是否匹配等等。</p>

<!--more-->


<p></p>

<h2>技能考察</h2>

<p>面试过程中除了通过项目了解应聘者外，还需要通过一些技术问题来了解应聘者的真实能力。</p>

<h3>技术基础</h3>

<p>这里以前端岗位为例，技术基础就是JS、CSS和HTML。这方面的问题网上都有很多人做过总结，所以尽量不要问一些烂大街的问题，可以结合平时工作遇到的问题来进行提问，或者内部团队专门设计一些巧妙的面试问题来考验应聘者。</p>

<p>技术问题可以结合公司的技术栈提问，比如公司用的<code>React</code>和<code>Nodejs</code>，就可以问一些这方面相关的问题。</p>

<h3>手写代码</h3>

<p>很多人讨厌 Google 公司的“白板面试”环节，我觉得讨厌的原因主要是要让应聘者手写二叉树查询算法这种太过困难的任务，在很多实际项目开发中很少涉及到复杂算法，更不要说手写了。<br/>
但是我觉得考察应聘者手写代码的能力还是有必要的，特别是没有笔试环节的情况下。可以出一道简单的编程题目，让应聘者通过编写实际代码或者伪代码来解答，主要考察的是编程思路，代码编写规范等。<br/>
有些应聘者在自己的项目上说的头头是道，但是一旦要实际写代码却困难重重，这个时候就要质疑应聘者的实际能力了，如果是天天和代码打交道的人是不会写不出代码的。</p>

<h3>项目管理（可选）</h3>

<p>如果面试的岗位需要带团队做项目，就可以提问一些项目管理相关的问题。可以从以下方面了解：</p>

<ul>
<li>如何把控项目进度</li>
<li>如何保证项目质量</li>
<li>如何汇报项目进展</li>
<li>如何让新人快速融入团队</li>
<li>等等</li>
</ul>


<h3>代码质量</h3>

<p>优秀的研发人员对代码是有要求甚至是有洁癖的，可以从以下方面了解：</p>

<ul>
<li>有没有做过code review？有的话是怎么做的？一般会对哪些代码提出建议？</li>
<li>最不能忍受的代码是什么样的？</li>
<li>项目中有没有做自动化代码检查？（比如前端的话是否有用Lint类的工具）</li>
<li>有没有写过单元测试？平时单元测试用的框架是什么？好的单元测试一般是什么样的？</li>
<li>等等</li>
</ul>


<h3>过程控制</h3>

<p>效率高的研发人员会对软件开发的流程有一定的了解和关注，并且有自己的一套方法方式，可以从以下方面了解：</p>

<ul>
<li>什么是持续集成和持续部署？持续集成用的哪些工具？</li>
<li>平时项目中的持续集成一般会做一些什么事情？</li>
<li>对敏捷开发是否了解？平时的开发流程是怎么样的？</li>
<li>拿到开发任务后有没有对任务进行拆解？有的话是如何拆分任务的？</li>
<li>等等</li>
</ul>


<h3>学习和分享</h3>

<p>爱分享的研发人员一般能力不会差，可以从以下方面了解：</p>

<ul>
<li>最近了解到的最新技术是哪些？</li>
<li>平时是通过什么渠道了解技术资讯的？</li>
<li>是否经常写博客？</li>
<li>是否参与开源项目？</li>
<li>等等</li>
</ul>


<h3>其他方面</h3>

<p>最后可以从其他方面了解应聘者的综合能力，可以从以下方面了解：</p>

<ul>
<li>感兴趣的技术方向（看是否与公司部门的技术方向匹配）</li>
<li>文档能力（具备良好的文档编写能力绝对是加分项）</li>
<li>沟通能力（是主动沟通还是被动沟通）</li>
<li>抗压能力（面对压力时如何应对）</li>
<li>等等</li>
</ul>


<h2>总结</h2>

<p>仅凭一次面试就想真正了解一个人是很难的，但通过以上方面可以把握一些正确的选人方向，后面再继续讨论面试过程应该注意的一些事项，以及如何提高面试的效率，敬请期待。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[研发面试官的面试指南（一）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part1/"/>
    <updated>2017-09-23T19:33:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part1</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/09/interview.jpg" width="400" height="300"></p>

<p>面试研发人员，如果面试过程处理地不好，不仅招不到合适的人，而且会给应聘者带来不好的体验，从而影响公司的整体形象。最近整理了一些面试官的经验，写出来和大家分享一下。</p>

<!--more-->


<h1>面试流程</h1>

<p>如果把面试比作软件开发，那面试流程就是系统架构，只有把架构设计好了，你才知道面试过程中的每一步要怎么走，才能更好地把握面试的节奏。</p>

<h2>自我介绍</h2>

<p>这里的自我介绍是指双方的自我介绍。</p>

<h3>面试官</h3>

<p>首先作为面试官，出于礼貌应该先介绍自己，可以介绍自己的<code>名字</code>和<code>职务</code>，并说明这次的面试是流程中的哪个环节（初试、复试或其他），这也是一个礼貌且友好的开场。</p>

<h3>简要问题</h3>

<p>介绍完自己后可以简单地问下应聘者的重要信息，这些信息可以帮助你快速判断这个人是否值得招聘，还可以了解到招募的可能性和招聘所需的代价等信息。</p>

<p>对于社招岗位，可以了解以下方面：</p>

<ul>
<li>是否在职？</li>
<li>在职的话要找工作的原因是什么？</li>
<li>离职的话离职原因是什么？</li>
</ul>


<p>对于实习岗位，可以了解以下方面：</p>

<ul>
<li>是大学 / 研究生几年级？</li>
<li>一周可以实习几天？</li>
<li>学习开发（前端）多长时间？</li>
</ul>


<h3>应聘者</h3>

<p>接着请应聘者开始做自我介绍，同时保持倾听。<br/>
注意这时候不要光顾看简历而不听应聘者讲话，提前了解简历内容是面试前就应该做的事情，而且一般应聘者讲的内容都会比简历上写的更详细。</p>

<h2>项目介绍</h2>

<p>应聘者在做完自我介绍后，如果对他的某个项目感兴趣，可以让他再详细讲下这个项目，比如：</p>

<ul>
<li>项目团队有多少人？</li>
<li>他在这个项目中主要负责什么工作？</li>
<li>在项目期间遇到过什么印象比较深刻的问题？</li>
<li>这些问题是如何解决的？</li>
<li>等等</li>
</ul>


<p>如果没有感兴趣的项目，也可以让应聘者挑一个他自己觉得印象深刻的项目来讲。</p>

<h2>让应聘者提问</h2>

<p>在流程的最后，在这个时候面试官已经问了一堆问题了，对应聘者也有一定了解，但应聘者对招聘方还不够了解，这时候需要给应聘者一个机会来进行了解，就是让应聘者提问问题，面试官进行解答。</p>

<p>如果是技术面试，而应聘者问道了薪酬或者福利相关的问题你又不方便回答，可以礼貌地回应说<code>这方面的信息后面 HR 会和你聊</code>。</p>

<p>这一环节结束后，就可以根据面试情况，看是安排应聘者进行复试呢，还是让应聘者先行回去。如果让应聘者先回去，需要告之多久时间（一般是一个星期）内会回复他。</p>

<p>最后把面试结果告诉 HR，整个面试过程结束。</p>

<p>上面介绍的是面试的一个通用流程，在下一篇文章会介绍面试的关键环节——技术考察，敬请期待。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Sharedarraybuffers 中使用 Atomics 来避免竞态条件]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/06/21/avoiding-race-conditions-in-sharedarraybuffers-with-atomics-zh/"/>
    <updated>2017-06-21T15:53:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/06/21/avoiding-race-conditions-in-sharedarraybuffers-with-atomics-zh</id>
    <content type="html"><![CDATA[<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_29.png" width="400" height="350"></p>

<p>这是 3 篇文章中的第三篇：</p>

<ul>
<li><a href="http://zhaozhiming.github.io/blog/2017/06/20/a-crash-course-in-memory-management-zh/">内存管理速成教程</a></li>
<li><a href="http://zhaozhiming.github.io/blog/2017/06/20/a-cartoon-intro-to-arraybuffers-and-sharedarraybuffers-zh/">通俗漫画介绍 ArrayBuffers 和 SharedArrayBuffers</a></li>
<li>在 Sharedarraybuffers 中使用 Atomics 来避免竞态条件</li>
</ul>


<p>原文链接：<a href="https://hacks.mozilla.org/2017/06/avoiding-race-conditions-in-sharedarraybuffers-with-atomics/">Avoiding race conditions in SharedArrayBuffers with Atomics</a></p>

<!--more-->


<h1>在 Sharedarraybuffers 中使用 Atomics 来避免竞态条件</h1>

<p>在<a href="http://zhaozhiming.github.io/blog/2017/06/20/a-cartoon-intro-to-arraybuffers-and-sharedarraybuffers-zh/">上一篇文章</a> 中，我讲述了使用 SharedArrayBuffers 会导致竞态条件，这让 SharedArrayBuffers 使用困难，我们不希望应用开发人员直接使用 SharedArrayBuffers。</p>

<p>但在其他语言上有多线程开发经验的库开发人员可以使用新的底层 API 来创建高级别的工具，应用开发人员就可以使用这些工具而无需直接接触 SharedArrayBuffers 和 Atomics。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_15.png" width="400" height="350"></p>

<p>尽管你可能不会直接同 SharedArrayBuffers 和 Atomics 打交道，但我觉得了解它们的工作原理还是比较有意思的，所以在这篇文章中，我将讲解它们会带来哪种类型的竞态条件，然后 Atomics 是如何帮助我们避开它们的。</p>

<p>但首先，什么是竞态条件？</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_13.png" width="400" height="350"></p>

<h2>竞态条件：一个你之前可能看过的例子</h2>

<p>一个相当简单的竞态条件的例子就是，你在两个线程间共享一个变量。说具体一些，一个线程想要加载一个文件，另外一个线程想检查文件是否存在，它们共享了一个变量叫<code>fileExists</code>，通过它来进行通信。</p>

<p>开始时，<code>fileExists</code>被设置为 false。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_03.png" width="400" height="350"></p>

<p>只要线程 2 的代码先运行，文件将会被加载。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_04.png" width="400" height="350"></p>

<p>但如果线程 1 的代码先运行，那么它将给用户一个错误记录，说文件不存在。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_05.png" width="400" height="350"></p>

<p>但文件是否存在不是问题所在，真正的问题是竞态条件。</p>

<p>即使是在单线程代码中，很多 JavaScript 开发人员也会遇到这类竞态条件。要了解为什么这是竞态，并不需要明白什么是多线程。</p>

<p>尽管如此，有些类型的竞态条件在单线程代码中不会出现，但在你进行共享内存的多线程编程时会出现。</p>

<h2>不同类型的竞态条件和 Atomics 如何辅助</h2>

<p>让我们来探索一些你在多线程代码中会遇到的不同类型的竞态条件，然后 Atomics 如何帮助我们避开它们。这里没有覆盖所有的竞态条件，但告诉了你关于为什么 API 会提供这些方法的一些想法。</p>

<p>在我们开始之前，我想要再次申明：你不应该直接使用 Atomics。编写多线程代码是公认的难题，相反地，你应该在你的多线程代码中使用可靠的库来和共享内存打交道。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_06.png" width="400" height="350"></p>

<h2>单个操作中的竞态条件</h2>

<p>比方说我们有两个线程来递增相同的变量，你可能会认为不管哪个线程先执行，最终的结果都是一样的。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_07.png" width="400" height="350"></p>

<p>尽管在源码中，递增一个变量看起来是一个单步操作，但在编译后的代码中，它并不是一个单步操作。</p>

<p>在 CPU 层面，递增变量分为三个指令，那是因为计算机既有长期内存也有短期内存（我在<a href="https://hacks.mozilla.org/2017/02/a-crash-course-in-assembly/">另外一篇文章</a> 讲过它们是如何工作的）。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_08.png" width="400" height="350"></p>

<p>所有线程都共享长期内存，但线程间不共享短期内存（注册者）。</p>

<p>每个线程需要从内存中取到值并放入到短期内存中，然后在短期内存中执行运算，然后把结果从短期内存写回到长期内存。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_09.png" width="400" height="350"></p>

<p>如果线程 1 的所有操作都先发生，然后线程 2 的所有操作接着发生，那么我们将得到期望的结果。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_10.png" width="400" height="350"></p>

<p>但如果它们交叉进行，线程 2 放入它的注册者中的值不是内存中同步运行后的结果，这意味着线程 2 没有考虑线程 1 的计算结果，它放弃了线程 1 将自己的值写入到内存的结果。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_11.png" width="400" height="350"></p>

<p>原子操作做的就是把这些计算机觉得是多步的操作作为单步操作，并让计算机也把它们看成是单步操作。</p>

<p>这就是为什么它们叫做原子操作，因为它们执行一个操作，通常这个操作会有多个指令（指令可以暂停和恢复），让所有指令看似瞬间发生，就好像它是一条指令，就像一个不可分割的原子。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_12.png" width="400" height="350"></p>

<p>使用原子操作，递增变量的代码看起来有点不一样。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_13.png" width="400" height="350"></p>

<p>现在我们使用<code>Atomics.add</code>，递增变量的多个步骤将不会在线程间相互交叉，相反，一个线程在完成它的原子操作前不会让其他线程先开始，等本身线程操作执行完了后再让其他线程执行自己的原子操作。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_14.png" width="400" height="350"></p>

<p>Atomics 的方法帮助避免这类竞态：</p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/add">Atomics.add</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/sub">Atomics.sub</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/and">Atomics.and</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/or">Atomics.or</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/xor">Atomics.xor</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/exchange">Atomics.exchange</a></li>
</ul>


<p>你会发现这个列表相当有限，甚至没有包括乘除操作，虽然库开发人员可以创建类似的原子操作。</p>

<p>开发人员可以使用<code>Atomics.compareExchange</code>来做到这点，通过这个方法，你可以从 SharedArrayBuffer 中取到一个值，然后执行操作，如果你是第一个检出的，就没有其他线程会更新它，执行完了再把它写回到 SharedArrayBuffer 里面；如果其他线程更新了它，那么你可以获取最新的值，然后再操作一次。</p>

<h2>在多操作中的竞态条件</h2>

<p>Atomic 的操作可以帮助你在“单步操作”中避免竞态条件，但有时候你需要改变一个对象的多个值（通过多操作的方式），同时不希望在同一时刻有其他人来更新这个对象。基本上，这意味着每次对象的改变，对象本身相对其他线程来说是锁定并且不可访问的。</p>

<p>Atomics 对象没有提供工具来直接处理这个问题，但它提供了库开发人员可以用来解决这个问题的工具，库开发人员可以创建一个锁。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_15.png" width="400" height="350"></p>

<p>如果代码想要锁住数据，它必须要有数据的锁，然后它可以用锁来防住其他线程，只有当锁可以用的时候才可以对数据进行访问和更新。</p>

<p>为了创建一个锁，库开发人员可以使用<code>Atomics.wait</code> 和 <code>Atomics.wake</code>，还有其他的方法比如<code>Atomics.compareExchange</code> 和<code>Atomics.store</code>。如果你想要了解这些方法是如何工作的，可以看一下<a href="https://github.com/lars-t-hansen/js-lock-and-condition">这个基本的锁实现</a>。</p>

<p>在这个例子中，线程 2 会要求数据的锁并把<code>locked</code>的值设为 true，这意味着在线程 2 解锁之前线程 1 不能访问数据。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_16.png" width="400" height="350"></p>

<p>如果线程 1 想要访问数据，它会尝试获取锁，但因为锁已经被占用了，所以它获取不到，线程会等待（所以会有阻塞）直到锁可用。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_17.png" width="400" height="350"></p>

<p>一旦线程 2 完成了，它会调用解锁操作，完了锁会通知那些一直在等待锁的线程们：我现在可以用了。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_18.png" width="400" height="350"></p>

<p>然后线程会取到锁，为它自己能单独使用而将数据锁住。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_19.png" width="400" height="350"></p>

<p>一个关于锁的库会使用 Atomics 对象多个不同的方法，但在这种情况下最重要的方法是：</p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait">Atomics.wait</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wake">Atomics.wake</a></li>
</ul>


<h2>指令重排序引起的竞态条件</h2>

<p>这是 Atomics 负责的第三种同步问题，这一个会让人惊讶。</p>

<p>你可能没有意识到这一点，但这是一个好机会（让你了解它），你写的代码没有按照你的预期顺序运行，编译器和 CPU 会重新排序代码让其跑得更快。</p>

<p>打个比方，假如说你要写代码来计算总数，你想要在总数计算完成后设置一个标示。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_20.png" width="400" height="350"></p>

<p>为了编译这些代码，我们需要为每个变量决定使用哪个注册机，然后我们可以将源码翻译成指令给计算机看。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_21.png" width="400" height="350"></p>

<p>到目前为止，所有事情都按预期进行。</p>

<p>如果你不理解计算机是如何在限制条件下工作的（和如何使用管道来执行代码），那么这看起来会不明显，第二行代码会在它执行之前稍微等一会。</p>

<p>大部分计算机会把执行指令的过程分成多个步骤，这样确保了 CPU 在不同区域都能保持一直忙碌，这样可以充分利用 CPU。</p>

<p>这里是一个指令的过程步骤示例：</p>

<ul>
<li>从内存中获取下个指令</li>
<li>计算出指令告诉我们要做什么（比如解码指令），然后从注册者中取到值</li>
<li>执行指令</li>
<li>把结果写回注册者</li>
</ul>


<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_22.png" width="400" height="350"></p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_23.png" width="400" height="350"></p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_24.png" width="400" height="350"></p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_25.png" width="400" height="350"></p>

<p>这就是一个指令是经过管道的过程。理想情况下，我们想要紧接着执行第二个命令，一旦我们进入第二步，我们就会去获取下个指令。</p>

<p>问题在于指令#1 和指令#2 之间会有依赖。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_26.png" width="400" height="350"></p>

<p>我们可以暂停 CPU 直到指令#1 在注册机中更新完<code>subTotal</code>，但这会减慢速度。</p>

<p>为了让事情更有效率，大部分编译器和 CPU 将会重新排序代码，他们会寻找那些没有使用<code>subTotal</code>或<code>total</code>的指令，然后把它们移动到这两行代码中间。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_27.png" width="400" height="350"></p>

<p>这可以让指令源源不断地移动通过管道。</p>

<p>因为第 3 行没有依赖第 1 或 2 行的值，所以编译器或者 CPU 计算出它重排序是安全的。当你在一个单线程中运行时，没有其他代码会看到这一部分值，直到整个函数执行完成。</p>

<p>但当你在另外一个处理器上有其他的线程在同时运行时，情况就不一样了。其它线程不用等方法完成后再去看这些变化，它可以在回写内存时马上看到它们，所以<code>isDone</code>标示在被告知总数前就被设置好了。</p>

<p>如果你想要用<code>isDone</code>来表示总数已经计算完成并准备用于其他线程，那么这种重排序将产生竞态条件。</p>

<p>Atomics 尝试解决其中的一些缺陷，当你使用一个 Atomic 写操作，就好比在代码的两部分中间放入一个栅栏。</p>

<p>Atomic 没有彼此间的重排序操作，也没有其他操作可以移动它们。实际上，有两个操作经常用于控制顺序：</p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/load">Atomics.load</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/store">Atomics.store</a></li>
</ul>


<p>在同一方法的代码中，所有在<code>Atomics.store</code>上面的变量，它们的更新在其写回内存之前都会在<code>Atomics.store</code>完成之前完成，即使有非原子指令在彼此间重新排序，它们中任何一个指令也不能移动到<code>Atomics.store</code>下面去执行。</p>

<p>在同一方法的代码中，所有在<code>Atomics.load</code>下面的变量，它们的加载都会在<code>Atomics.load</code>完成之后完成，同样地，即使有非原子指令在彼此间重新排序，它们中任何一个指令也不能移动到<code>Atomics.load</code>上面去执行。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_28.png" width="400" height="350"></p>

<p>注意，我在这里展示的 while 循环叫做自旋锁，它的效率是非常低的。如果它在主线程中，它可能会让你的应用挂起，你肯定不会在真实代码中使用它。</p>

<p>再次申明，在应用代码中不要直接使用这些方法，相反地，库会用它们来创建锁。</p>

<h2>总结</h2>

<p>共享内存的多线程编程是困难的，有很多种不同类型的竞态条件的坑等着你去踩。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/03_29.png" width="400" height="350"></p>

<p>这就是为什么不要在你的应用代码中直接用 SharedArrayBuffers 和 Atomics，你应该依赖那些有多线程开发经验的开发者开发出来的库，他们花了很多时间在研究内存模型。</p>

<p>现在离 SharedArrayBuffer 和 Atomics 的到来还有点早，这些库也还没创建出来，但这些新的 API 提供了基础功能来创建它们。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通俗漫画介绍 ArrayBuffers 和 SharedArrayBuffers]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/06/20/a-cartoon-intro-to-arraybuffers-and-sharedarraybuffers-zh/"/>
    <updated>2017-06-20T22:44:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/06/20/a-cartoon-intro-to-arraybuffers-and-sharedarraybuffers-zh</id>
    <content type="html"><![CDATA[<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_15.png" width="400" height="350"></p>

<p>这是 3 篇文章中的第二篇：</p>

<ul>
<li><a href="http://zhaozhiming.github.io/blog/2017/06/20/a-crash-course-in-memory-management-zh/">内存管理速成教程</a></li>
<li>通俗漫画介绍 ArrayBuffers 和 SharedArrayBuffers</li>
<li><a href="http://zhaozhiming.github.io/blog/2017/06/21/avoiding-race-conditions-in-sharedarraybuffers-with-atomics-zh/">在 Sharedarraybuffers 中使用 Atomics 来避免竞态条件</a></li>
</ul>


<p>原文链接：<a href="https://hacks.mozilla.org/2017/06/a-cartoon-intro-to-arraybuffers-and-sharedarraybuffers/">A cartoon intro to ArrayBuffers and SharedArrayBuffers</a></p>

<!--more-->


<h1>通俗漫画介绍 ArrayBuffers 和 SharedArrayBuffers</h1>

<p>在<a href="http://zhaozhiming.github.io/blog/2017/06/20/a-crash-course-in-memory-management-zh/">上一篇文章中</a>，我解释了像 JavaScript 这样的内存自动管理语言如何操作内存，我也解释了像 C 语言这样的手动内存管理语言如何工作的。</p>

<p>为什么当我们讨论 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer">ArrayBuffers</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer">SharedArrayBuffers</a> 时这部分内容很重要呢？</p>

<p>这是因为 ArrayBuffers 提供了一种让你可以手动操作数据的方式，即使你是使用像 JavaScript 这种内存自动管理的语言。</p>

<p>为什么你将来会去做这件事（指内存管理）？</p>

<p>正如上一篇文章所说的，这是自动内存管理的一个权衡，它方便开发人员，但增加了开销，某些情况下，这种开销会导致性能问题。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_01.png" width="400" height="350"></p>

<p>举个例子，当你要在 JS 中创建一个变量，引擎必须猜测这个变量是哪种类型，如何在内存中展示。因为这种猜测，JS 引擎通常会为变量预留比实际占用的更多的空间，依赖于变量，内存槽容量可能比实际需要的要大 2 到 8 倍，这将导致很多内存的浪费。</p>

<p>另外，某些创建和使用 JS 对象的模式可能让垃圾回收难以进行，如果你可以手动管理内存，你就可以在工作中选择一个正确分配和释放内存的策略。</p>

<p>大部分情况下，这不会有什么问题。大部分系统性能不会如此敏感，以致要你使用手动内存管理，而且通常情况下，手动管理内存甚至可能让程序变得更慢。</p>

<p>但有时候你需要处理一些底层的工作来让你的代码运行得尽可能的快，ArrayBuffers 和 SharedArrayBuffers 给你另外一个选择。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_02.png" width="400" height="350"></p>

<h2>那么 ArrayBuffer 是如何工作的？</h2>

<p>基本上它就像 JavaScript 中的其他数组，但是你不能在里面放任何类型的数据，比如字符串和对象，你只能在里面放二进制字节（可以用来表示数字的那个东西）。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_03.png" width="400" height="350"></p>

<p>有件事情我必须在这里澄清，实际上你不能直接添加二进制字节到 ArrayBuffer，ArrayBuffer 本身不知道这个字节应该多大，不同类型的数字应该如何转换成字节。</p>

<p>ArrayBuffer 本身只是一个 0 和 1 存放在一行里面的一个集合，ArrayBuffer 不知道第一个和第二个元素在数组中该如何分配。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_04.png" width="400" height="350"></p>

<p>为了能提供上下文，为了能真正分解数据并放入到盒子中，我们需要将其封装在一个叫做 view 的东西里面。这些在数据上的 view 可以被添加进确定类型的数组，而且我们有很多种确定类型的数据可以使用。</p>

<p>例如，你可以使用一个 Int8 的确定类型数组来分离存放 8 位二进制字节。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_05.png" width="400" height="350"></p>

<p>或者你可以使用一个无符号的 Int16 数组来分离存放 16 位二进制字节，这样如果是一个无符号的整数也能处理。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_06.png" width="400" height="350"></p>

<p>你甚至可以在相同基础的 buffer 上使用不同的 view，同样的操作不同的 view 会给你不同的结果。</p>

<p>比如，如果我们在这个 ArrayBuffer 中从 Int8 view 里获取了元素 0 和 1，在 Uint16 view 中元素 0 会返回给我们不同的值，尽管它们包含的是完全相同的二进制字节。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_07.png" width="400" height="350"></p>

<p>在这种方式中，ArrayBuffer 基本上扮演了一个原生内存的角色，它模拟了像 C 语言才有的那种直接访问内存的方式。</p>

<p>你可能想知道为什么我们不让程序直接访问内存，而是添加了这种抽象层。直接访问内存将导致一些安全漏洞，我会在以后的文章中解释。</p>

<h2>那么什么是 SharedArrayBuffer？</h2>

<p>为了解释 SharedArrayBuffers，我需要解释一点关于并行运行代码和 JavaScript 的知识。</p>

<p>你可以并行运行代码让你的代码跑的更快，或者让其更快地响应用户事件。为了做到这点，你需要分离你的工作。</p>

<p>在一个典型的 app 中，所有工作都在一个单独独立的主线程中被照看着，我以前讲过这个。主线程就像一个全栈开发，它负责 JavaScript，DOM 结构和页面布局。</p>

<p>如果你能减少主线程的工作量，不管是什么事情都对工作负载有帮助，在某些情况下，ArrrayBuffer 可以减少主线程的工作量。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_08.png" width="400" height="350"></p>

<p>但是有些时候减少主线程的工作负载是不够的，有时候你需要一些援助，你需要分离工作。</p>

<p>在大部分编程语言中，通常分离工作的方式就是使用一种叫做线程的东西，基本上这就像有多个人在做同一个项目。如果你的任务都比较独立，你就可以将任务分配给不同的线程，这样所有线程都可以在相同的时间内独立完成任务。</p>

<p>在 JavaScript 中，你可以使用一个叫做 web worker 的东西来做这件事情，这些 web worker 跟你在其他语言中用到的线程有些许差别，它们默认不共享内存。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_09.png" width="400" height="350"></p>

<p>这意味着如果你想要共享一些数据给其他线程，你需要复制它们，方法 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage"><code>postMessage</code></a> 可以做到这点。</p>

<p>postMessage 获取你放进去的任何数据，序列化它们，再将其发送给其他 web worker，然后其他 web worker 反序列数据再将其放入到内存。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_10.png" width="400" height="350"></p>

<p>这是一个非常慢的过程。</p>

<p>某些类型的数据，像 ArrayBuffer，你能做的操作叫做转移内存，这意味着移动指定的内存块让其他 web worker 可以访问数据。<br/>
但第一个 web worker 就不能再访问移动后的数据了。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_11.png" width="400" height="350"></p>

<p>在某些情况下这可以工作，但大部分情况是你需要高性能的并行方式，你真正需要的是拥有可以共享的内存。</p>

<p>这就是需要 SharedArrayBuffers 的原因。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_12.png" width="400" height="350"></p>

<p>通过 SharedArrayBuffer，不管是 web worker，还是线程，都可以从相同的内存块中读写数据。</p>

<p>这意味着你不会有使用 postMessage 时的交流开销和延迟。所有 web worker 都可以立即访问数据。</p>

<p>在同一时刻所有线程都访问同一数据会有些危险，可能引起一个叫竞态条件的问题。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_13.png" width="400" height="350"></p>

<p>我将在<a href="http://zhaozhiming.github.io/blog/2017/06/21/avoiding-race-conditions-in-sharedarraybuffers-with-atomics-zh/">下一篇文章</a> 中解释。</p>

<h2>SharedArrayBuffers 当前的现状是怎样的？</h2>

<p>SharedArrayBuffers 不久将会出现在所有主流浏览器中。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_14.png" width="400" height="350"></p>

<p>它们已经在 Safari（在 Safari 10.1）里了，Firefox 和 Chrome 将在他们的 7/8 月的发布中引进它们，而且 Edge 也将在秋季的 Windows 更新中引进它们。</p>

<p>不过即使它们在所有主流浏览器中都可用，我们也不希望应用开发人员直接使用它们。实际上，我们推荐不用它们，你应该使用最高级别的抽象封装。</p>

<p>我们希望 JavaScript 库开发人员来创建对应的库来让你更方便和安全地使用 SharedArrayBuffers。</p>

<p>另外，一旦 SharedArrayBuffers 内置到平台中，WebAssembly 就可以使用它们来实现多线程支持。一旦到位，你就可以使用像 Rust 那样的并发抽象技术，Rust 的主要目标之一就是让你无所畏惧地使用并发编程。</p>

<p>在<a href="http://zhaozhiming.github.io/blog/2017/06/21/avoiding-race-conditions-in-sharedarraybuffers-with-atomics-zh/">下一篇文章</a>中，我们将介绍这些库作者使用的工具（Atomics），他们用来构建抽象层同时避免竞态条件。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/02_15.png" width="400" height="350"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[内存管理速成教程]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/06/20/a-crash-course-in-memory-management-zh/"/>
    <updated>2017-06-20T19:29:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/06/20/a-crash-course-in-memory-management-zh</id>
    <content type="html"><![CDATA[<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_07.png" width="400" height="350"></p>

<p>我一直很佩服那些能将复杂原理讲得通俗易懂的人，<a href="http://code-cartoons.com/">Lin Clark 女神</a> 就是其中一个，拜读完她新发布的系列文章“通俗漫画介绍 SharedArrayBuffers”之后，深深为之折服，文章不仅一如既往地通俗易懂，作者亲自画的图更是和文章相得益彰。看完萌生出了翻译该系列文章的想法，不过本人英文能力有限，如果觉得翻译地不好的还请看英文原版，英文版也是很容易理解的。</p>

<p>这是 3 篇文章中的第一篇：</p>

<ul>
<li>内存管理速成教程</li>
<li><a href="http://zhaozhiming.github.io/blog/2017/06/20/a-cartoon-intro-to-arraybuffers-and-sharedarraybuffers-zh/">通俗漫画介绍 ArrayBuffers 和 SharedArrayBuffers</a></li>
<li><a href="http://zhaozhiming.github.io/blog/2017/06/21/avoiding-race-conditions-in-sharedarraybuffers-with-atomics-zh/">在 Sharedarraybuffers 中使用 Atomics 来避免竞态条件</a></li>
</ul>


<p>原文链接：<a href="https://hacks.mozilla.org/2017/06/a-crash-course-in-memory-management/">A crash course in memory management</a></p>

<!--more-->


<h1>内存管理速成教程</h1>

<p>为了搞明白我们为什么把 SharedArrayBuffer 加入到 JavaScript，你首选需要搞懂一点关于内存管理方面的知识。</p>

<p>你可以把机器中的内存想象成一堆盒子，我觉得这个有点像你工作中的办公邮箱，或者学校学生的储物柜。</p>

<p>如果你想给学生们留一些东西，你可以把东西放到盒子里面。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_01.png" width="400" height="350"></p>

<p>在每个盒子旁边都有一个数字，这就是内存地址，这用来让你告诉别人留给他们的东西在哪个位置。</p>

<p>每个盒子都有相同的大小，能容纳一定量的信息。盒子的容量指定给了机器，这个容量就叫字长。字长一般是 32 位或者 64 位，但为了让它容易演示，我会使用 8 位的字长。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_02.png" width="400" height="350"></p>

<p>如果我们想要把数字 2 放到其中的一个盒子里，我们可以很容易地做到，因为数字很容易<a href="https://www.khanacademy.org/math/algebra-home/alg-intro-to-algebra/algebra-alternate-number-bases/v/decimal-to-binary">表现成二进制</a>。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_03.png" width="400" height="350"></p>

<p>如果我们想要放一个不是数字的东西呢？比如字母 H ？</p>

<p>我们需要一个方法将其展示成数字，为了做到这一点，我们需要编码格式，比如 <a href="https://en.wikipedia.org/wiki/UTF-8">UTF-8</a>，然后我们需要一个东西将其转换成数字。比如一个编码环，这样我们就可以存储它了。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_04.png" width="400" height="350"></p>

<p>当我们想要从盒子中取出它时，我们需要一个解码器将其转换回字符 H 。</p>

<h2>自动内存管理</h2>

<p>当你使用 JavaScript 时，实际上你不需要过多考虑内存的事情，它是远离你的一个抽象概念，这意味着你不会直接和内存打交道。</p>

<p>JS 引擎作为一个中间人的角色来代替你打交道，它替你管理着内存。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_05.png" width="400" height="350"></p>

<p>让我们写一些 JS 代码，比如 React，需要创建一个变量。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_06.png" width="400" height="350"></p>

<p>JS 引擎做的事情就是运行通过编码器转换成二进制表示的值。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_07.png" width="400" height="350"></p>

<p>然后它找到可以存放二进制表示值的空间，这个过程叫做分配内存。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_08.png" width="400" height="350"></p>

<p>然后，引擎会跟踪这个变量是否仍然在程序中被引用，如果变量不在被使用，内存将被回收，这样 JS 引擎就可以存放新的值了。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_09.png" width="400" height="350"></p>

<p>观察内存中的变量（包括字符串，对象和其他类型的值），当它们不再有用的时候清除它们的过程，叫做垃圾回收。</p>

<p>像 JavaScript 这种不用直接处理内存的语言，叫做内存自动管理语言。</p>

<p>内存自动管理可以让开发人员开发程序更加简单，但也增加了程序的开销，这些开销有时候会让性能变得不可预测。</p>

<h2>手动管理内存</h2>

<p>手动管理内存的语言不一样。举个例子，让我们看一下如果用 C 语言来写 React 的话（现在可以使用 WebAssembly 做到这一点），将如何处理内存。</p>

<p>C 语言没有像 JavaScript 那样有一个抽象层来管理内存，相反，你可以直接操作内存，你可以从内存中加载数据，你也可以直接在内存中存储数据。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_10.png" width="400" height="350"></p>

<p>当你编译 C 或者其他语言成 WebAssembly 时，你使用的工具会添加一些辅助代码到你的 WebAssembly，例如添加编码和解码二进制字节的代码。这个代码叫做运行时环境。运行时代码会做一些像 JS 引擎在 JS 中做的事情。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_11.png" width="400" height="350"></p>

<p>但对于一个手动管理内存语言来说，运行期不包括垃圾回收。</p>

<p>这并不意味着你什么事情都要自己做，即使是在手动管理内存语言里，你也会常受到语言运行期的帮助，拿 C 语言来说，运行期会跟踪自由列表中打开的内存地址。</p>

<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/06/01_12.png" width="400" height="350"></p>

<p>你可以使用<code>malloc</code>方法（内存分配）来让运行期找到哪些内存地址可以来存放你的数据，这将从自由列表中取出这些地址，当你处理完这些数据，你必须使用<code>free</code>方法来释放内存，然后这些地址将重新回到自由列表中。</p>

<p>你必须计算出什么时候来调用这些方法，这就是为什么我们叫它做手动内存管理了，你要自己来管理内存。</p>

<p>对于一个开发人员来说，计算出什么时候该释放哪个区域的内存是很难的，如果你的计算时间出错了，那么将可能引发缺陷甚至会导致一个安全漏洞，如果你不释放内存，那么内存终将会耗尽。</p>

<p>这就是为什么很多现代语言会使用自动内存管理，为了避免人为的错误，但这也带来了性能上的开销，我会在<a href="http://zhaozhiming.github.io/blog/2017/06/20/a-cartoon-intro-to-arraybuffers-and-sharedarraybuffers-zh/">下一篇文章</a> 讲更多这方面的内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[超乎你想像的 styled-components]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/06/18/styled-component-beyond-the-expected/"/>
    <updated>2017-06-18T11:32:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/06/18/styled-component-beyond-the-expected</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/06/styled-components.png" width="400" height="350"></p>

<p>Css 在 React 中的写法一直在持续改进，从原生的 Css 到 <a href="https://github.com/css-modules/css-modules">CSS Modules</a>，再到 Css In Js，目标是让开发者更高效地写组件的样式。</p>

<p><a href="https://www.styled-components.com/"><code>styled-components</code></a> 是基于 Css In Js 方式实现的一个库，刚开始看到这个库时，我简单地以为它只是使用了内联方式来实现 React 组件的样式，但试用了之后，才发现不仅它的实现不是内联的方式，而且因为样式是写在 JS 里面，所以它的强大远超过我的预期。</p>

<!--more-->


<h2>使用 ES6 的字符串模板</h2>

<p>使用过 React 的同学可能比较清楚，如果要在一个组件通过 JS 来定义 css 样式，就必须在 React 组件里面通过<code>style</code>属性来写。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Home</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=</span><span class="p">{{</span> <span class="nx">marginLeft</span><span class="o">:</span> <span class="mi">10</span> <span class="p">}}</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">World</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种方式有很多<code>缺点</code>：</p>

<ul>
<li>样式属性与原生 css 的写法不一致，样式名称必须用驼峰的命名方式来命令，而不是多个单词用<code>-</code>号分隔；单位的写法也不一致，百分比是用字符串形式，而<code>pixel</code>值是用数字型形式。</li>
<li>无法写伪元素，要实现<code>hover</code>的话就必须使用<code>onMouseOver</code>事件来实现，而且要写很多 JS 代码，像<code>before</code>和<code>after</code>这类伪元素则根本没法通过这种方式实现。</li>
</ul>


<p><code>styled-components</code> 最吸引开发者的是使用了 ES6 的字符串模板方式来定义 css 样式，这样使得 css 的写法与原生的 css 写法基本一致，克服了上述的缺点。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Button</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">a</span><span class="err">`</span>
</span><span class='line'>  <span class="nx">display</span><span class="o">:</span> <span class="nx">inline</span><span class="o">-</span><span class="nx">block</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">border</span><span class="o">-</span><span class="nx">radius</span><span class="o">:</span> <span class="mi">3</span><span class="nx">px</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">padding</span><span class="o">:</span> <span class="mf">0.5</span><span class="nx">rem</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">margin</span><span class="o">:</span> <span class="mf">0.5</span><span class="nx">rem</span> <span class="mi">1</span><span class="nx">rem</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">width</span><span class="o">:</span> <span class="mi">11</span><span class="nx">rem</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">background</span><span class="o">:</span> <span class="nx">transparent</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">color</span><span class="o">:</span> <span class="nx">white</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">border</span><span class="o">:</span> <span class="mi">2</span><span class="nx">px</span> <span class="nx">solid</span> <span class="nx">white</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&amp;</span> <span class="nx">hover</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">color</span><span class="o">:</span> <span class="nx">blue</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&amp;</span> <span class="nx">before</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么 <code>styled-components</code> 的底层原理是什么？为什么通过 ES6 的字符串模板可以实现这种功能？感兴趣的同学可以看下下面<code>推荐阅读</code>的文章<code>styled-components-magic-explained</code>。</p>

<p>这里列举几个例子简单感受一下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 我们有个方法来打印方法参数</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">logArgs</span> <span class="o">=</span> <span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">favoriteFood</span> <span class="o">=</span> <span class="s1">&#39;pizza&#39;</span>
</span><span class='line'><span class="c1">// 用正常的方法调用，输出结果跟预期一样，是一句完整的句子。</span>
</span><span class='line'><span class="nx">logArgs</span><span class="p">(</span><span class="err">`</span><span class="nx">I</span> <span class="nx">like</span> <span class="nx">$</span><span class="p">{</span><span class="nx">favoriteFood</span><span class="p">}.</span><span class="err">`</span><span class="p">)</span> <span class="c1">// -&gt; I like pizza.</span>
</span><span class='line'><span class="c1">// 而用字符串模板的方式来调用方法，则会变成这样：句子会被变量分隔成 2 个字符串，变量值变成数组后面的参数。</span>
</span><span class='line'><span class="nx">logArgs</span><span class="err">`</span><span class="nx">I</span> <span class="nx">like</span> <span class="nx">$</span><span class="p">{</span><span class="nx">favoriteFood</span><span class="p">}.</span><span class="err">`</span> <span class="c1">// -&gt; [&quot;I like &quot;, &quot;.&quot;] &quot;pizza&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>生成一个随机的 class 名称</h2>

<p>开始看到 <code>styled-components</code> 时我天真地以为它的样式是通过内联的方式放入到组件里面，其实不是，它的样式最终还是封装成一个 class 然后再放到组件里面。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2017/06/styled-components-class1.png">
<img src="http://zhaozhiming.github.io/images/post/2017/06/styled-components-class2.png">
<img src="http://zhaozhiming.github.io/images/post/2017/06/styled-components-class3.png"></p>

<p>这样不仅避免了内联样式的局限性，而且class 的名称是一个随机的字符串，这样也完美解决了 Css 的一个大难题：样式名称重复的问题。</p>

<h2>Css In Js 的好处</h2>

<p>使用 JS 来写 css 的好处，就是可以利用 JS 的语法来封装 CSS 对象，比如可以使用<code>if</code>语句来判断需要使用哪个样式值。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 这里利用了 `styled-components` 的特性</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">Button</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="err">`</span>
</span><span class='line'>  <span class="nx">color</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">props</span> <span class="o">=&gt;</span> <span class="nx">props</span><span class="p">.</span><span class="nx">isActive</span> <span class="o">?</span> <span class="s1">&#39;blue&#39;</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span><span class="p">};</span>
</span><span class='line'><span class="err">`</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者通过一个方法来返回一个样式对象，通过参数来动态定义样式。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Button</span> <span class="o">=</span> <span class="p">(</span><span class="nx">color</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="err">`</span>
</span><span class='line'>    <span class="nx">color</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">color</span><span class="p">};</span>
</span><span class='line'>  <span class="err">`</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个是不是很眼熟？有点像<code>sass</code>等 css 预处理器中的方法？没错！通过 JS 的特性就可以让你在 JS 中做预处理器中做的事情。</p>

<h2><code>styled-components</code> 的预处理工具</h2>

<p>说到 CSS 的预处理器，其实 <code>styled-components</code> 也有一套用 JS 实现的预处理器工具库——<a href="https://github.com/styled-components/polished">polished</a>，其中包括一些常用的 CSS 方法，比如 clearfix、hsl、mix 等，让开发者可以完全不再使用 css 预处理器来写 css 了。</p>

<h2><code>theme</code> 特性</h2>

<p><code>styled-components</code> 里面还有一个比较特别的特性是<code>theme</code>，它利用了 React 的<code>context</code>特性来传递其中的参数，可以让样式对象直接从最上层的组件传递到最下层的组件。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 首先定义一个`theme`样式对象</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">styleGuide</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">cloudy</span><span class="o">:</span> <span class="s1">&#39;#F2F4F7&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">darkGray</span><span class="o">:</span> <span class="s1">&#39;#4A637C&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">gray</span><span class="o">:</span> <span class="s1">&#39;#7A8D9F&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// ...more colors or mixins</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="p">(</span>
</span><span class='line'>  <span class="c1">// 将`theme`对象传递给上层组件`ThemeProvider`（这也是 `styled-components` 的一个 API），这样下层组件就可以通过&quot;props.theme.gray&quot;来引用其中的样式了</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">ThemeProvider</span> <span class="nx">theme</span><span class="o">=</span><span class="p">{</span><span class="nx">styleGuide</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">App</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">Switch</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">AuthRoute</span> <span class="nx">auth</span><span class="o">=</span><span class="p">{</span><span class="nx">auth</span><span class="p">}</span> <span class="nx">exact</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/&quot;</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">DashboardView</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">AuthRoute</span> <span class="nx">auth</span><span class="o">=</span><span class="p">{</span><span class="nx">auth</span><span class="p">}</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/profile&quot;</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">DashboardView</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/login&quot;</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">LoginView</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">path</span><span class="o">=</span><span class="s2">&quot;/logout&quot;</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">LogoutView</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="cm">/* ...more routes */</span><span class="p">}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Route</span> <span class="nx">component</span><span class="o">=</span><span class="p">{</span><span class="nx">NotFoundView</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/Switch&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/App&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/ThemeProvider&gt;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Define our button, but with the use of props.theme this time</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">Button</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">button</span><span class="err">`</span>
</span><span class='line'>  <span class="nx">font</span><span class="o">-</span><span class="nx">size</span><span class="o">:</span> <span class="mi">1</span><span class="nx">em</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">margin</span><span class="o">:</span> <span class="mi">1</span><span class="nx">em</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">padding</span><span class="o">:</span> <span class="mf">0.25</span><span class="nx">em</span> <span class="mi">1</span><span class="nx">em</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">border</span><span class="o">-</span><span class="nx">radius</span><span class="o">:</span> <span class="mi">3</span><span class="nx">px</span><span class="p">;</span>
</span><span class='line'>  <span class="cm">/* Color the border and text with theme properties */</span>
</span><span class='line'>  <span class="nx">color</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">props</span> <span class="o">=&gt;</span> <span class="nx">props</span><span class="p">.</span><span class="nx">theme</span><span class="p">.</span><span class="nx">darkGray</span><span class="p">};</span>
</span><span class='line'>  <span class="nx">border</span><span class="o">:</span> <span class="mi">2</span><span class="nx">px</span> <span class="nx">solid</span> <span class="nx">$</span><span class="p">{</span><span class="nx">props</span> <span class="o">=&gt;</span> <span class="nx">props</span><span class="p">.</span><span class="nx">theme</span><span class="p">.</span><span class="nx">darkGray</span><span class="p">};</span>
</span><span class='line'><span class="err">`</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>可以对样式对象下面的子元素进行样式定义</h2>

<p>在使用原生 css 的时候，经常会这样写样式。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.foo</span> <span class="nt">h1</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span> <span class="m">16px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.foo</span> <span class="nt">h2</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>很多 <code>styled-components</code> 新手（比如我）会为每个 h1 和 h2 定义一个样式对象，这样其实多写了很多代码，也没有必要，其实可以通过这种方式来定义子元素的样式。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">const</span> <span class="nt">FooDiv</span> <span class="o">=</span> <span class="nt">styled</span><span class="nc">.div</span><span class="err">`</span>
</span><span class='line'>  <span class="o">&amp;</span> <span class="nt">h1</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">16px</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&amp;</span> <span class="nt">h2</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">`</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>独立样式文件</h2>

<p>在一般的 React 组件中，样式和组件文件是分离的（比如 App.js 和 style.css），使用了 <code>styled-components</code> 后其实也可以沿用这种方式来组织文件，定义一个<code>style.js</code>文件来写样式对象，然后在组件文件中引入该样式文件。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// style.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">styled</span> <span class="nx">from</span> <span class="s1">&#39;styled-components&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">AppDiv</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="err">`</span>
</span><span class='line'>  <span class="nx">display</span><span class="o">:</span> <span class="nx">flex</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">justify</span><span class="o">-</span><span class="nx">content</span><span class="o">:</span> <span class="nx">space</span><span class="o">-</span><span class="nx">between</span><span class="p">;</span>
</span><span class='line'><span class="err">`</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// App.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">css</span> <span class="nx">from</span> <span class="s1">&#39;./style&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">css</span><span class="p">.</span><span class="nx">AppDiv</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">World</span><span class="o">&lt;</span><span class="err">/css.AppDiv&gt;;</span>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>缺点</h2>

<h3>不能用 stylelint 检查你的 Css 代码</h3>

<p>在使用 <code>styled-components</code> 的过程中也会遇到一些问题，比如我们的项目会用<code>stylelint</code>来做样式代码的检查，但是使用了 styled-compoents 后就没办法让<code>stylelint</code>的规则生效了。</p>

<h3>不能用 prettier 来格式化你的 Css 代码</h3>

<p>现在<code>prettier</code>不仅可以帮你格式化 JS 代码，还可以格式化 CSS 代码，但如果使用了<code>styled-components</code>的话，JS 中的字符串模板内容没有办法使用<code>prettier</code>来格式化，这个也比较尴尬。</p>

<h2>推荐阅读</h2>

<ul>
<li><a href="http://mxstbr.blog/2016/11/styled-components-magic-explained/">styled-components-magic-explained</a></li>
<li><a href="https://building.sentisis.com/embracing-the-power-of-styled-components-7b79a166c01b">embracing-the-power-of-styled-components</a></li>
<li><a href="https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660">a-unified-styling-language</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何安全地使用 React 的 context]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/02/19/how-to-safely-use-react-context-zh-cn/"/>
    <updated>2017-02-19T19:38:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/02/19/how-to-safely-use-react-context-zh-cn</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/02/react-context.jpeg"></p>

<p>在自己的 React 项目中使用了大量的 context，虽然知道这是一个不推荐使用的特性，但还是用了很多，想看看别人是怎么使用 context，所以翻译了下面这篇文章，注意文章中引用了嵌套的twitter内容，所以访问时最好是翻墙访问，以免影响阅读。</p>

<!--more-->


<h2>如何安全地使用 React 的 context</h2>

<p>Context 是 React 里面一个有着很多免费声明的、非常强大的特性，就像乐园里面的禁果一样。</p>

<p><img src="https://cdn-images-1.medium.com/max/1600/1*rbUZNOyFC64KmJaRhF2Kww.png"></p>

<p>这应该可以让你远离 context 了对吧？当然不是，它虽然是一个被禁用的 React 特性，但它的存在是一个不争的事实！context 可以把数据传递给组件树底层的组件，无需中间组件的参与。context 的经典用法是定制主题，本地化和路由这些方面。</p>

<p><a href="https://medium.com/@dan_abramov">Dan Abramov</a> 设计了一些明智的规则让你知道什么时候不该使用 context：</p>

<p><img src="https://cdn-images-1.medium.com/max/1600/1*b6Ev2SZ8SBlqhKVrOGDZaA.jpeg"></p>

<p>现在你可能已经按照这个明智的建议来做，但同时，使用一些使用了 context 的库，比如 <a href="https://github.com/ReactTraining/react-router">react-router</a>，当它和其他库像 <a href="https://github.com/reactjs/react-redux">react-redux</a> 或 <a href="https://github.com/mobxjs/mobx-react">mbox-react</a>组合时，甚至是和你自己的 shouldeComponentUpdate，又或者是由 React.PureComponent 提供的这个方法组合时，都仍然可能让你有陷入困境。长期存在的<a href="https://github.com/facebook/react/issues/2517">问题</a> 可以在 React 或 React 相关的第三方库的问题跟踪列中找到。</p>

<blockquote class="twitter-tweet" data-lang="zh-cn"><p lang="en" dir="ltr">Redux implements sCU, making setState + context break, forces &quot;subscribe&quot; on everybody else. Seems like React needs a generic solution.</p>&mdash; Ryan Florence (@ryanflorence) <a href="https://twitter.com/ryanflorence/status/779320581678174208">2016 年 9 月 23 日</a></blockquote>


<script async src="http://zhaozhiming.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>所以，为什么这篇博客跟你有关？这是因为：</p>

<ul>
<li>你是一个库的作者</li>
<li>你使用的库使用了 context，或者你自己使用 context，然后你想安全地使用 shouldComponentUpdate (SCU)，或者一些基于此的已有实现（比如 PureComponent, Redux 的 connect, 或者 MobX 的 observer）。</li>
</ul>


<h3>为什么 Context + ShouldComponentUpdate 有问题？</h3>

<p>Context 用来和嵌套很深的组件交流，例如，一个根组件定义了一个主题，然后这个组件树中的任何组件可能（也可能不）对这个信息感兴趣，就像<a href="https://facebook.github.io/react/docs/context.html#passing-info-automatically-through-a-tree">官方的 context 示例</a>。</p>

<p>shouldComponentUpdate (SCU) 另一方面在重新渲染组件树（包括子组件）的一部分中起到短路作用，例如如果 props 或者组件的 state 没有被明确的修改，组件就不会重新渲染，但这可能意外中断 context 的传播。</p>

<blockquote class="twitter-tweet" data-lang="zh-cn"><p lang="en" dir="ltr"><a href="https://twitter.com/dan_abramov">@dan_abramov</a> <a href="https://twitter.com/iammerrick">@iammerrick</a> <a href="https://twitter.com/ryanflorence">@ryanflorence</a> specifically, anything that uses context will break. Seems unfair to the rest of us :(</p>&mdash; MICHAEL JACKSON (@mjackson) <a href="https://twitter.com/mjackson/status/779329979741904896">2016 年 9 月 23 日</a></blockquote>


<p></p>

<script async src="http://zhaozhiming.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p></p>

<blockquote class="twitter-tweet" data-lang="zh-cn"><p lang="en" dir="ltr"><a href="https://twitter.com/mjackson">@mjackson</a> <a href="https://twitter.com/iammerrick">@iammerrick</a> <a href="https://twitter.com/ryanflorence">@ryanflorence</a> The thing here is that React Redux doesn’t rely on context updating correctly. It knows React is broken.</p>&mdash; Dan Abramov (@dan_abramov) <a href="https://twitter.com/dan_abramov/status/779335426377183232">2016 年 9 月 23 日</a></blockquote>


<script async src="http://zhaozhiming.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>让我们通过一个简单的 app 来模拟这个有冲突的问题：</p>

<script async src="http://zhaozhiming.github.io//jsfiddle.net/mweststrate/3ay25feh/embed/"></script>


<p>在 context 和 SCU 中产生问题的地方显而易见，当你按了“Red please!”按钮（在“Result”栏上面）时，按钮本身的颜色刷新了，但待办列表没有被更新。原因很简单，我们的 TodoList 组件是智能的，它知道当它没有接收到新的待办子项它就不需要重新渲染（最聪明的地方是继承了 PureCompnent，其重新实现了 shouldComponentUpdate方法）。</p>

<p>尽管如此，正因为这个最智能的地方（指继承了 PureCompnent，这个在大型应用是非常有必要的，因为它可以提供更好的性能），让 TodoList 中的 ThemedText 组件没有接收到更新了颜色的新 context！因为不管是 TodoList 或它的后代更新了，SCU 都返回 false。</p>

<p><img src="https://cdn-images-1.medium.com/max/1600/1*pnkWX7uEzCeY-7r5Ii_Y-A.png"></p>

<p>更糟的是，我们不能在 TodoList 中手工修改 SCU，因为它是固定了的一个方法。因为 SCU 不能接收相关的 context 数据（颜色），它不能（也不该）被订阅到指定的context数据中，毕竟它本身不是一个theme-aware的组件。</p>

<p>总的来说，shouldComponentUpdate 返回 false 导致任何 context 更新不再传播到子组件中去，非常糟不是吗？我们可以修复这个问题吗？</p>

<h3>ShouldComponentUpdate 和 Context 可以一起工作！</h3>

<p>你注意到了问题只发生在我们更新 context 的时候吗？这个是解决问题的关键所在，只要确保你一直不更新 context就可以了，换句话说：</p>

<ul>
<li>Context 不应该改变，它应该不可变</li>
<li>组件应该在其构造时只接收 context 一次</li>
</ul>


<blockquote><p>或者，为了使其不同，我们不应该直接把 state 保存到 context 中，取而代之，我们应该像依赖注入系统一样使用 conext。</p></blockquote>


<p>这意味着 SCU 不再干涉 context 需要传什么，因为不再需要传递新的 context 给子组件。棒极了！这解决了我们所有问题！</p>

<h3>通过基于 context 的依赖注入来和变更进行交流</h3>

<p>如果我们想要改变主题颜色，很简单，我们在适当的地方有一个依赖注入系统（DI），所以我们可以向下传递一个仓库来管理我们的主题并订阅它，我们绝不会传递一个新的仓库，但要确保仓库本身是有状态的，并且可以观察到组件的变化：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Theme 组件存储当前的主题状态，并允许组件订阅将来变化（的数据）</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">Theme</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">color</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">color</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">subscriptions</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">setColor</span><span class="p">(</span><span class="nx">color</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">color</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">f</span> <span class="o">=&gt;</span> <span class="nx">f</span><span class="p">())</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">subscribe</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">subscriptions</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">ThemeProvider</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// 主题提供者在它的整个生命周期中使用同样的主题对象</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">theme</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Theme</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 必要时更新主题，更新的内容会传播给订阅的主键</span>
</span><span class='line'>  <span class="nx">componentWillReceiveProps</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">theme</span><span class="p">.</span><span class="nx">setColor</span><span class="p">(</span><span class="nx">next</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">getChildContext</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span><span class="nx">theme</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">theme</span><span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">ThemeProvider</span><span class="p">.</span><span class="nx">childContextTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">theme</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">object</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">ThemedText</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 订阅未来改变的主题</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="p">.</span><span class="nx">theme</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">forceUpdate</span><span class="p">())</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=&gt;</span>
</span><span class='line'>      <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">ThemedText</span><span class="p">.</span><span class="nx">contextTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">theme</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">object</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整的可运行列表：</p>

<script async src="http://zhaozhiming.github.io//jsfiddle.net/mweststrate/pc327358/embed/"></script>


<p>注意到在这个示例里面颜色的改变已经正确了，但它仍然使用 PureComponent，而且重要组件 TodoList 和 ThemedText 的 API 并没有改变。</p>

<p>虽然我们的 ThemeProvider 的实现变得更复杂了，它创建了一个Theme 对象来保持了我们主题的状态，Theme对象同时也是一个事件发射器，这可以让像 ThemeText 一样的组件来订阅未来的变化，Theme 对象通过 ThemeProvider 在组件树中传递。context 仍然是用来做这个的，但只有刚开始的时候传递了 context，后面的更新都通过 Theme 自己来传播，并没有重新创建一个 context。</p>

<p><img src="https://cdn-images-1.medium.com/max/1600/1*ul_3UcymigXysL-JzgF8dQ.png"></p>

<p>这个实现有点过于简单，更好的实现方式是需要在 componentWillUnmount 中清理事件监听器，并且应该使用 setState 来代替 forceUpdate，但好消息是你关注的内容已经有第三方库在开发了，它不会影响库的使用者，以后中间组件意外的 shouldComponentUpdate 实现将不再破坏库的行为。</p>

<h3>总结</h3>

<p>通过依赖注入系统而不是状态的容器来限制使用 context，我们可以同时构造基于 context 的库和正确行为的 shouldComponentUpdate，而不会被干涉和破坏消费者的 API，还有非常重要的一点是，在当前受限的 React context 系统中可以正常工作，只要你遵守这条简单的规则：</p>

<blockquote><p>Context 在每个组件中应该只被接收一次。</p></blockquote>




<blockquote class="twitter-tweet" data-lang="zh-cn"><p lang="en" dir="ltr"><a href="https://twitter.com/ryanflorence">@ryanflorence</a> <a href="https://twitter.com/mweststrate">@mweststrate</a> <a href="https://twitter.com/dan_abramov">@dan_abramov</a> <a href="https://twitter.com/sebmarkbage">@sebmarkbage</a> huh. i never thought of context as a &quot;dependency&quot; before. i guess it is.</p>&mdash; MICHAEL JACKSON (@mjackson) <a href="https://twitter.com/mjackson/status/779375007579287552">2016 年 9 月 23 日</a></blockquote>


<script async src="http://zhaozhiming.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>最后的提醒：context 仍然是实验性的特性，你应该避免直接使用 context（看上面 Dan Abramov 的规则），作为代替使用抽象过的 context 库（看下面的一些例子），但如果你是一个库的作者，或者如果你在写一些很好的高阶组件来处理 context，坚持上面的解决方案将避免一些令人讨厌的意外。</p>

<p><strong>更新于 2016-9-29：</strong> <a href="https://medium.com/@ryanflorence">Ryan Florence</a> 刚发布了一个通用包，包含了上面讲的这个模式，所以你可以不用自己写这些代码了 <a href="https://github.com/ReactTraining/react-context-emission">react-context-emission</a>。</p>

<h3>奖励：使用 MobX observables 作为 context 来简化事情</h3>

<p>（如果你在使用或对 MobX 感兴趣那你对这一章也会感兴趣）</p>

<p>如果你使用 MobX，你完全可以跳过整个事件触发器这个东西，并且作为替代在 context 中使用仓库 observables，并通过使用 observer decorator 或高阶组件来订阅他们，这使得你不必自己管理数据的订阅。</p>

<script async src="http://zhaozhiming.github.io//jsfiddle.net/mweststrate/xpw6a5Ld/embed/"></script>


<p>实际上，更简单的方法是使用 MobX 中的 <a href="https://github.com/mobxjs/mobx-react#provider-and-inject">Provider / inject</a> 的机制，它是对 React conext 机制的一个抽象化后的结果。它移除了 contextTypes 声明和类似其他东西的代码，注意这个类似的概念可以在一些库比如 <a href="https://github.com/acdlite/recompose/blob/master/docs/API.md#withcontext">recompose</a> 或 <a href="https://github.com/gnoff/react-tunnel">react-tunnel</a> 中找到。</p>

<script async src="http://zhaozhiming.github.io//jsfiddle.net/mweststrate/b537yvcj/embed/"></script>


<p>它是很值得尝试的，注意看，虽然我们初始基于依赖注入解决方案的代码量是原始代码的 1.5 倍，但最终的解决方案的代码和原来有问题的实现方案代码一样多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[物极必反]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/01/17/too-much-is-bad/"/>
    <updated>2017-01-17T20:02:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/01/17/too-much-is-bad</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/01/too_much.jpg" width="400" height="300"></p>

<p>物极必反是很多人都明白的一个道理，在软件开发中也一样，比如过度设计，这也是为什么Fackbook推崇“完成比完美更重要”的原因。</p>

<!--more-->


<p></p>

<h2>读书</h2>

<p>读书绝对是一件好事情，但是读书多就一定有帮助吗？在软件开发领域，读了一本技术书后，如果没有动手再实践一下，那知识永远只存在于理论中，并没有真正成为自己的东西。只有动手做了项目或者demo之后，才能真正记住书里的东西，在动手的过程中可能还能发现比书里更好的方法来解决问题。</p>

<p>人的时间精力是有限的，如果把时间都花在看书上，那实践能力肯定好不到哪里去，代码只有动手写过才能真正记住。“读万卷书不如走万里路”说的也是这个道理。技术领域的发展是迅速的，没有一种技术可以一直保持领先，没有一本技术书可以不过时，所以读书我觉得要看经典的，不用太多，每月保持1~2本是比较合适的。</p>

<p>当然，如果是新项目要了解的技术比较多，那这个时候就要多读几本书恶补一下，但切记读完书后还是要动手实践，这样才能真正巩固自己的知识。</p>

<h2>代码覆盖率</h2>

<p>最近看到有个大牛说过，百分百的覆盖率就像看报纸时要看完报纸上每个字一样，没有必要。根据二八原则，当你的代码覆盖率达到80%后，你还想往上涨，那意味着你要付出的代价就越大，得到的价值就越小，与其花那么大精力在百分百覆盖率上面，还不如把精力放到其他能保证产品质量的事情上。</p>

<p>百分百的覆盖率不能保证就有好的产品质量，但高的覆盖率肯定是要有很多的测试案例来支持的，越多的测试案例就意味着需要付出越多的精力来维护，会让团队越来越讨厌单元测试。</p>

<h2>重复代码</h2>

<p>DRY原则大家都知道，<code>Don't repeat yourself</code>，但是不是一发现有重复代码就要抽取成公共代码呢？其实经常做重构的同学应该比较清楚，一开始就想把代码写得很漂亮很完美那是不可能的，漂亮的代码都是重构出来的。先用丑陋的代码把功能实现，然后再用重构的手法把代码写得更具可读性和维护性，这是一个正常可行的过程，如果一开始就想写出完美的代码，那到最后写出来的代码可能是既不好看又不实用。</p>

<p>在编码的过程中，可以稍微让重复的代码增长一些，等重复的代码多到一定的程度后，你会从这些重复代码中发现一定的规律，这个时候再来抽取公共代码，这样的话公共代码的可用性、适用范围会更好一些。</p>

<h2>舒适区</h2>

<p>以前在一些敏捷开发的书或者培训中经常听到“跳出自己的舒适区”这一说法，意思是要敢于尝试不同的编程语言或技术领域，当你在“不舒适的区域”呆习惯了，你的舒适区就扩大了，从而你的能力也就增强了。</p>

<p>但最近看到有些人开始滥用这个说法，比如有人要求团队没日没夜加班，然后美其名曰说是要<strong>逼团队每个人走出自己的舒适区</strong>，这种说法我觉得是没搞懂什么是“非舒适区”。把学习新技能（比如学习新的编程语言）作为非舒适区我可以理解，这种一旦掌握了技能就不会像原来一样不适应了，这个过程不舒适程度是随着时间慢慢减少的，是有时间限制的，除非你一直学不会新技能（其实是不想学吧-_-）。</p>

<p>但是加班不一样，加班久了你就会觉得加班很舒服吗？人的精力是有限的，熬夜加班势必导致第二天无法以正常状态上班，更何况长期的加班。加班不是让人呆在一个“非舒适区”，而是一个“不健康区域”或者叫“危险区域”，在这个区域没有办法从“不舒适”变成“舒适”，改变的只有作息规律，可能长期加班后晚上精神一点，但白天就没什么状态了，但这样做又有什么意义。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grid 的完整介绍（三）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/01/10/complete-guide-grid-zhcn-part3/"/>
    <updated>2017-01-10T19:30:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/01/10/complete-guide-grid-zhcn-part3</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/01/css_grid3.jpeg" width="400" height="350"></p>

<p>接着上篇 blog，这篇继续介绍 Grid 的网格子项属性，内容没有那么长了。</p>

<p>原文地址见这里：<a href="https://css-tricks.com/snippets/css/complete-guide-grid/">A Complete Guide to Grid</a>。</p>

<ul>
<li><a href="http://zhaozhiming.github.io/blog/2017/01/08/complete-guide-grid-zhcn-part1/">Grid 的完整介绍（一）</a></li>
<li><a href="http://zhaozhiming.github.io/blog/2017/01/09/complete-guide-grid-zhcn-part2/">Grid 的完整介绍（二）</a></li>
</ul>


<!--more-->


<h2>Grid 的完整介绍（三）</h2>

<h3>网格子项的属性</h3>

<ul>
<li><a href="#grid-column-start">grid-column-start</a></li>
<li><a href="#grid-column-end">grid-column-end</a></li>
<li><a href="#grid-row-start">grid-row-start</a></li>
<li><a href="#grid-row-end">grid-row-end</a></li>
<li><a href="#grid-column">grid-column</a></li>
<li><a href="#grid-row">grid-row</a></li>
<li><a href="#grid-area">grid-area</a></li>
<li><a href="#justify-self">justify-self</a></li>
<li><a href="#align-self">align-self</a></li>
</ul>


<h4>grid-column-start</h4>

<h4>grid-column-end</h4>

<h4>grid-row-start</h4>

<h4>grid-row-end</h4>

<p>通过参考指定的网格线来决定网格中一个网格子项的位置，<code>grid-column-start/grid-row-start</code>是指网格子项开始的线，<code>grid-column-end/grid-row-end</code>是指网格子项结束的线。</p>

<p>值有：</p>

<ul>
<li><code>&lt;line&gt;</code> &ndash; 可以是一个数字以适用被标记了数字号的网格线，或者是一个名字以适用命名了的网格线</li>
<li>span <code>&lt;number&gt;</code> &ndash; 子项将跨越指定数字的网格轨迹</li>
<li>span <code>&lt;name&gt;</code> &ndash; 子项将跨越到指定名字之前的网格线</li>
<li>auto &ndash; 表示自动布局，自动跨越或者默认跨越一个</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">start</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="k">auto</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">end</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="k">auto</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">start</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="k">auto</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">end</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">number</span><span class="o">&gt;</span> <span class="o">|</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="k">auto</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举个例子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">start</span><span class="o">:</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">end</span><span class="o">:</span> <span class="n">five</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">start</span><span class="o">:</span> <span class="n">row1</span><span class="o">-</span><span class="n">start</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">end</span><span class="o">:</span> <span class="m">3</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-start-end-a.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-b</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">start</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">end</span><span class="o">:</span> <span class="n">span</span> <span class="n">col4</span><span class="o">-</span><span class="n">start</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">start</span><span class="o">:</span> <span class="m">2</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">end</span><span class="o">:</span> <span class="n">span</span> <span class="m">2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://chris.house/images/grid-start-end-b.png"></p>

<p>如果<code>grid-column-end/grid-row-end</code>没有生命，网格子项将默认跨越一个网格轨迹。</p>

<p>网格子项可以互相重叠，你可以使用<code>z-index</code>来控制他们的层叠顺序。</p>

<h4>grid-column</h4>

<h4>grid-row</h4>

<p><code>grid-column-start</code> + <code>grid-column-end</code>，和<code>grid-row-start</code> + <code>grid-row-end</code>的简写，分别独立。</p>

<p>值有：</p>

<ul>
<li>&lt;start-line> / &lt;end-line> &ndash; 每一个属性都可以接收普通模式的值，包括<code>span</code></li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">start</span><span class="o">-</span><span class="n">line</span><span class="o">&gt;</span> <span class="o">/</span> <span class="o">&lt;</span><span class="n">end</span><span class="o">-</span><span class="n">line</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">start</span><span class="o">-</span><span class="n">line</span><span class="o">&gt;</span> <span class="o">/</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">start</span><span class="o">-</span><span class="n">line</span><span class="o">&gt;</span> <span class="o">/</span> <span class="o">&lt;</span><span class="n">end</span><span class="o">-</span><span class="n">line</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">start</span><span class="o">-</span><span class="n">line</span><span class="o">&gt;</span> <span class="o">/</span> <span class="n">span</span> <span class="o">&lt;</span><span class="n">value</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-c</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">:</span> <span class="m">3</span> <span class="o">/</span> <span class="n">span</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">:</span> <span class="n">third</span><span class="o">-</span><span class="n">line</span> <span class="o">/</span> <span class="m">4</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-start-end-c.png"></p>

<p>如果没有声明结束网格线的值，那么网格子项将默认跨越 1 个网格轨迹。</p>

<h4>grid-area</h4>

<p>给网格子项取一个名字以让它被由<code>grid-template-areas</code>属性创建的模板引用。同时，这个属性也可以用来更简短地表示<code>grid-row-start</code>+ <code>grid-column-start</code> + <code>grid-row-end</code>+ <code>grid-column-end</code>。</p>

<p>值有：</p>

<ul>
<li><code>&lt;name&gt;</code> &ndash; 一个你选择的名字</li>
<li>&lt;row-start> / &lt;column-start> / &lt;row-end> / &lt;column-end> &ndash; 可以是网格线的数字或名字</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">area</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">row</span><span class="o">-</span><span class="n">start</span><span class="o">&gt;</span> <span class="o">/</span> <span class="o">&lt;</span><span class="n">column</span><span class="o">-</span><span class="n">start</span><span class="o">&gt;</span> <span class="o">/</span> <span class="o">&lt;</span><span class="n">row</span><span class="o">-</span><span class="n">end</span><span class="o">&gt;</span> <span class="o">/</span> <span class="o">&lt;</span><span class="n">column</span><span class="o">-</span><span class="n">end</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<p>作为分配一个名字给网格子项的一种方式：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span><span class="p">{</span>
</span><span class='line'><span class="o">.</span><span class="n">item</span><span class="o">-</span><span class="n">d</span><span class="err">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">area</span><span class="o">:</span> <span class="n">header</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>作为<code>grid-row-start</code>+ <code>grid-column-start</code> + <code>grid-row-end</code>+ <code>grid-column-end</code>的一种简写：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-d</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">area</span><span class="o">:</span> <span class="m">1</span> <span class="o">/</span> <span class="n">col4</span><span class="o">-</span><span class="n">start</span> <span class="o">/</span> <span class="n">last</span><span class="o">-</span><span class="n">line</span> <span class="o">/</span> <span class="m">6</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-start-end-d.png"></p>

<h4>justify-self</h4>

<p>让网格子项的内容以列轴对齐（与之相反<code>align-self</code>是跟行轴对齐），这个值可以应用在单个网格子项的内容中。</p>

<p>值有：</p>

<ul>
<li>start &ndash; 让内容在网格区域左对齐</li>
<li>end &ndash; 让内容在网格区域右对齐</li>
<li>center &ndash; 让内容在网格区域中间对齐</li>
<li>stretch &ndash; 填充着呢个网络区域的宽度（默认值）</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="k">center</span> <span class="o">|</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-start.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-end.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-center.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-stretch.png"></p>

<p>为了让网格中的所有子项都对齐，这个行为也可以通过设置网格容器中的<code>justify-items</code>属性来实现。</p>

<h4>align-self</h4>

<p>让网格子项的内容以行轴对齐（与之相反<code>justify-self</code>是跟列轴对齐），这个值可以应用在单个网格子项的内容中。</p>

<p>值有：</p>

<ul>
<li>start &ndash; 让内容在网格区域上对齐</li>
<li>end &ndash; 让内容在网格区域下对齐</li>
<li>center &ndash; 让内容在网格区域中间对齐</li>
<li>stretch &ndash; 填充着呢个网络区域的高度（默认值）</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="k">center</span> <span class="o">|</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-start.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-end.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-center.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">self</span><span class="o">:</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-stretch.png"></p>

<p>为了让网格中的所有子项都对齐，这个行为也可以通过设置网格容器中的<code>align-items</code>属性来实现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grid 的完整介绍（二）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/01/09/complete-guide-grid-zhcn-part2/"/>
    <updated>2017-01-09T19:30:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/01/09/complete-guide-grid-zhcn-part2</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/01/css_grid2.png" width="400" height="350"></p>

<p>全篇 blog 太长，分成三篇文章分享。</p>

<p>原文地址见这里：<a href="https://css-tricks.com/snippets/css/complete-guide-grid/">A Complete Guide to Grid</a>。</p>

<ul>
<li><a href="http://zhaozhiming.github.io/blog/2017/01/08/complete-guide-grid-zhcn-part1/">Grid 的完整介绍（一）</a></li>
<li><a href="http://zhaozhiming.github.io/blog/2017/01/10/complete-guide-grid-zhcn-part3/">Grid 的完整介绍（三）</a></li>
</ul>


<!--more-->


<h2>Grid 的完整介绍（二）</h2>

<h3>网格容器的属性</h3>

<ul>
<li><a href="#display">display</a></li>
<li><a href="#grid-template-columns">grid-template-columns</a></li>
<li><a href="#grid-template-rows">grid-template-rows</a></li>
<li><a href="#grid-template-areas">grid-template-areas</a></li>
<li><a href="#grid-column-gap">grid-column-gap</a></li>
<li><a href="#grid-row-gap">grid-row-gap</a></li>
<li><a href="#grid-gap">grid-gap</a></li>
<li><a href="#justify-items">justify-items</a></li>
<li><a href="#align-items">align-items</a></li>
<li><a href="#justify-content">justify-content</a></li>
<li><a href="#align-content">align-content</a></li>
<li><a href="#grid-auto-columns">grid-auto-columns</a></li>
<li><a href="#grid-auto-rows">grid-auto-rows</a></li>
<li><a href="#grid-auto-flow">grid-auto-flow</a></li>
<li><a href="#grid">grid</a></li>
</ul>


<h4>display</h4>

<p>定义一个元素为网格容器并为其内容创建一个新的网格格式环境。</p>

<p>值有：</p>

<ul>
<li>grid &ndash; 生成一个块级别的网格</li>
<li>inline-grid &ndash; 生成一个内联级别的网格</li>
<li>subgrid &ndash; 如果你的网格容器是它自己的一个网格子项（比如内嵌的网格），你可以使用这个属性来表示你想要从其父级来获取行和列的大小而不是自己来指定它们。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="n">grid</span> <span class="o">|</span> <span class="k">inline</span><span class="o">-</span><span class="n">grid</span> <span class="o">|</span> <span class="n">subgrid</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：<code>column</code>, <code>float</code>, <code>clear</code>和<code>vertical-align</code>对网格容器没有效果。</p>

<h4>grid-template-columns</h4>

<h4>grid-template-rows</h4>

<p>通过空格分隔的一系列值来定义网格的行和列，这些值相当于轨迹大小，它们之间的距离相当于网格线。</p>

<p>值有：</p>

<ul>
<li>&lt;track-size> &ndash; 可以是一个长度，百分比或者是网格中自由空间的份数（使用<code>fr</code>这个单位）</li>
<li>&lt;line-name> &ndash; 一个你选择的任意名字</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">track</span><span class="o">-</span><span class="k">size</span><span class="o">&gt;</span> <span class="o">...</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">line</span><span class="o">-</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">track</span><span class="o">-</span><span class="k">size</span><span class="o">&gt;</span> <span class="o">...</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">track</span><span class="o">-</span><span class="k">size</span><span class="o">&gt;</span> <span class="o">...</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">line</span><span class="o">-</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">track</span><span class="o">-</span><span class="k">size</span><span class="o">&gt;</span> <span class="o">...</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<p>当你在轨迹值中间留空格，网格线将被自动以数字命名：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">40px</span> <span class="m">50px</span> <span class="k">auto</span> <span class="m">50px</span> <span class="m">40px</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="m">25</span><span class="o">%</span> <span class="m">100px</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-numbers.png"></p>

<p>但你可以给网格线指定一个名字，注意网格线命名时的中括号语法：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="p">[</span><span class="n">first</span><span class="p">]</span> <span class="m">40px</span> <span class="p">[</span><span class="n">line2</span><span class="p">]</span> <span class="m">50px</span> <span class="p">[</span><span class="n">line3</span><span class="p">]</span> <span class="k">auto</span> <span class="p">[</span><span class="n">col4</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="m">50px</span> <span class="p">[</span><span class="n">five</span><span class="p">]</span> <span class="m">40px</span> <span class="p">[</span><span class="n">end</span><span class="p">];</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="p">[</span><span class="n">row1</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="m">25</span><span class="o">%</span> <span class="p">[</span><span class="n">row1</span><span class="o">-</span><span class="n">end</span><span class="p">]</span> <span class="m">100px</span> <span class="p">[</span><span class="n">third</span><span class="o">-</span><span class="n">line</span><span class="p">]</span> <span class="k">auto</span> <span class="p">[</span><span class="n">last</span><span class="o">-</span><span class="n">line</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-names.png"></p>

<p>注意一根网格线可以有多个名字，例如在下面的例子中第二根线有两个名字：<code>row1-end</code> 和 <code>row2-start</code>。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="p">[</span><span class="n">row1</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="m">25</span><span class="o">%</span> <span class="p">[</span><span class="n">row1</span><span class="o">-</span><span class="n">end</span> <span class="n">row2</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="m">25</span><span class="o">%</span> <span class="p">[</span><span class="n">row2</span><span class="o">-</span><span class="n">end</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你定义了容器的重复部分，你可以使用<code>repeat()</code>方法来生成多个相同值：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="k">repeat</span><span class="p">(</span><span class="m">3</span><span class="o">,</span> <span class="m">20px</span> <span class="p">[</span><span class="n">col</span><span class="o">-</span><span class="n">start</span><span class="p">])</span> <span class="m">5</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>它等价于：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">20px</span> <span class="p">[</span><span class="n">col</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="m">20px</span> <span class="p">[</span><span class="n">col</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="m">20px</span> <span class="p">[</span><span class="n">col</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="m">5</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>fr</code>单元允许你将网格容器中的自由空间设置为一个份数，举个例子，下面的例子将把网格容器的每个子项设置为三分之一。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">1</span><span class="n">fr</span> <span class="m">1</span><span class="n">fr</span> <span class="m">1</span><span class="n">fr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>自由空间是在固定子项确定后开始计算的，在下面的例子中自由空间是<code>fr</code>单位的总和但不包括<code>50px</code>：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">1</span><span class="n">fr</span> <span class="m">50px</span> <span class="m">1</span><span class="n">fr</span> <span class="m">1</span><span class="n">fr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>grid-template-areas</h4>

<p>通过引用在<code>grid-area</code>属性中指定的网格区域名字来定义网格模板。重复网格区域的名字将让内容跨越那些单元。一个句点表示一个空单元，语法本身提供了一个可视化的结构网格。</p>

<p>值有：</p>

<ul>
<li>&lt;grid-area-name> &ndash; 在<code>grid-area</code>中指定的网格区域名字</li>
<li>. &ndash; 一个句点表示一个空的网格单元</li>
<li>none &ndash; 没有网格区域被定义</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">areas</span><span class="o">:</span> <span class="s2">&quot;&lt;grid-area-name&gt; | . | none | ...&quot;</span>
</span><span class='line'>                       <span class="s2">&quot;...&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举个例子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">area</span><span class="o">:</span> <span class="n">header</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.item-b</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">area</span><span class="o">:</span> <span class="n">main</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.item-c</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">area</span><span class="o">:</span> <span class="n">sidebar</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.item-d</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">area</span><span class="o">:</span> <span class="n">footer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">50px</span> <span class="m">50px</span> <span class="m">50px</span> <span class="m">50px</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">areas</span><span class="o">:</span> <span class="s2">&quot;header header header header&quot;</span>
</span><span class='line'>                       <span class="s2">&quot;main main . sidebar&quot;</span>
</span><span class='line'>                       <span class="s2">&quot;footer footer footer footer&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这将创建一个 4 乘以 3 的网格，第一行由<code>header</code>区域组成，中间一行由 2 个<code>main</code>区域和一个空单元和一个<code>sidebar</code>区域组成，最后一行由<code>footer</code>区域组成。</p>

<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-template-areas.png"></p>

<p>在你定义的每一行都需要拥有相同的单元格。</p>

<p>你可以使用任意毗邻的阶段来声明一个单独的空单元，只要这些阶段中间没有空间都可以认为是一个单独的单元。</p>

<p>注意，在这里你的语法只是命名了区域但没有对网格线进行命名，当你使这种语法时，区域任意一边的线会被自动命名。如果你的网格区域的名字是<code>foo</code>，然么网格的开始行和开始列网格线的名字将会是<code>foo-start</code>，并且它的最后一行和最后一列的网格线名字是<code>foo-end</code>。这意味着一些网格线可能有多个名字，比如上面那个例子中最左边的线，它会有三个名字分别是：<code>header-start</code>，<code>main-start</code>，<code>footer-start</code>。</p>

<h4>grid-column-gap</h4>

<h4>grid-row-gap</h4>

<p>指定网格线的大小，你可以认为它就是设置行和列中间沟槽的宽度。</p>

<p>值有：</p>

<ul>
<li>&lt;line-size> &ndash; 一个长度值</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">gap</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">line</span><span class="o">-</span><span class="k">size</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">gap</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">line</span><span class="o">-</span><span class="k">size</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">100px</span> <span class="m">50px</span> <span class="m">100px</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="m">80px</span> <span class="k">auto</span> <span class="m">80px</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">gap</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">gap</span><span class="o">:</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-column-row-gap.png"></p>

<p>只会创建行和列的沟槽，不包括边缘。</p>

<h4>grid-gap</h4>

<p>一个<code>grid-column-gap</code> + <code>grid-row-gap</code>的简称。</p>

<p>值有：</p>

<ul>
<li>&lt;grid-column-gap> &lt;grid-row-gap> &ndash; 长度值</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">gap</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">-</span><span class="n">gap</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">-</span><span class="n">gap</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">100px</span> <span class="m">50px</span> <span class="m">100px</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="m">80px</span> <span class="k">auto</span> <span class="m">80px</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">gap</span><span class="o">:</span> <span class="m">10px</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果没有写<code>grid-row-gap</code>，那么它的值将和<code>grid-column-gap</code>的一样。</p>

<h4>justify-items</h4>

<p>让网格子项的内容和列轴对齐（<code>align-items</code>则相反，是和行轴对齐），这个值对容器里面的所有网格子项都有用。</p>

<p>值有：</p>

<ul>
<li>start &ndash; 内容和网格区域的左边对齐</li>
<li>end &ndash; 内容和网格区域的右边对齐</li>
<li>center &ndash; 内容和网格区域的中间对齐</li>
<li>stretch &ndash; 填充整个网格区域的宽度（默认值）</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="k">center</span> <span class="o">|</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-items-start.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-items-end.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-items-center.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-items-stretch.png"></p>

<p>可以通过<code>justify-self</code>属性把这个行为设置到单独的网格子项。</p>

<h5>align-items</h5>

<p>让网格子项的内容和行轴对齐（<code>justify-items</code>则相反，是和列轴对齐），这个值对容器里面的所有网格子项都有用。</p>

<p>值有：</p>

<ul>
<li>start &ndash; 内容和网格区域的上边对齐</li>
<li>end &ndash; 内容和网格区域的下边对齐</li>
<li>center &ndash; 内容和网格区域的中间对齐</li>
<li>stretch &ndash; 填充整个网格区域的高度（默认值）</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="k">center</span> <span class="o">|</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-items-start.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-items-end.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-items-center.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-items-stretch.png"></p>

<p>可以通过<code>align-self</code>属性把这个行为设置到单独的网格子项。</p>

<h4>justify-content</h4>

<p>有时候你的网格总大小可能会比它的网格容器的容量小，这可能是你的所有网格子项都使用了固定值比如<code>px</code>来确定大小，在这个情况下你可以在网格容器中设置网格的对齐方式。这个属性将网格和列轴对齐（和<code>align-content</code>相反，它是和行轴对齐）。</p>

<p>值有：</p>

<ul>
<li>start &ndash; 网格在网格容器左边对齐</li>
<li>end &ndash; 网格在网格容器右边对齐</li>
<li>center &ndash; 网格在网格容器中间对齐</li>
<li>stretch &ndash; 改变网格子项的容量让其填充整个网格容器宽度</li>
<li>space-around &ndash; 在每个网格子项中间放置均等的空间，在始末两端只有一半大小</li>
<li>space-between &ndash; 在每个网格子项中间放置均等的空间，在始末两端没有空间</li>
<li>space-evenly &ndash; 在每个网格子项中间放置均等的空间，包括始末两端</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="k">center</span> <span class="o">|</span> <span class="n">stretch</span> <span class="o">|</span> <span class="n">space</span><span class="o">-</span><span class="n">around</span> <span class="o">|</span> <span class="n">space</span><span class="o">-</span><span class="n">between</span> <span class="o">|</span> <span class="n">space</span><span class="o">-</span><span class="n">evenly</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-start.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-end.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-center.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-stretch.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">space</span><span class="o">-</span><span class="n">around</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-space-around.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">space</span><span class="o">-</span><span class="n">between</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-space-between.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">space</span><span class="o">-</span><span class="n">evenly</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-space-evenly.png"></p>

<h4>align-content</h4>

<p>有时候你的网格总大小可能会比它的网格容器的容量小，这可能是你的所有网格子项都使用了固定值比如<code>px</code>来确定大小，在这个情况下你可以在网格容器中设置网格的对齐方式。这个属性将网格和行轴对齐（和<code>justify-content</code>相反，它是和列轴对齐）。</p>

<p>值有：</p>

<ul>
<li>start &ndash; 网格在网格容器上边对齐</li>
<li>end &ndash; 网格在网格容器下边对齐</li>
<li>center &ndash; 网格在网格容器中间对齐</li>
<li>stretch &ndash; 改变网格子项的容量让其填充整个网格容器高度</li>
<li>space-around &ndash; 在每个网格子项中间放置均等的空间，在始末两端只有一半大小</li>
<li>space-between &ndash; 在每个网格子项中间放置均等的空间，在始末两端没有空间</li>
<li>space-evenly &ndash; 在每个网格子项中间放置均等的空间，包括始末两端</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="k">center</span> <span class="o">|</span> <span class="n">stretch</span> <span class="o">|</span> <span class="n">space</span><span class="o">-</span><span class="n">around</span> <span class="o">|</span> <span class="n">space</span><span class="o">-</span><span class="n">between</span> <span class="o">|</span> <span class="n">space</span><span class="o">-</span><span class="n">evenly</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">start</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-start.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-end.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-center.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">stretch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-stretch.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">space</span><span class="o">-</span><span class="n">around</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-space-around.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">space</span><span class="o">-</span><span class="n">between</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-space-between.png"></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">align</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">space</span><span class="o">-</span><span class="n">evenly</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-space-evenly.png"></p>

<h4>grid-auto-columns</h4>

<h4>grid-auto-rows</h4>

<p>指定自动生成的网格迹的大小（又叫隐式网格轨迹），当你精确指定行和列的位置大于定义的网格时（通过 grid-template-rows/grid-template-columns）时隐式网格轨迹会被创建。</p>

<p>值有：</p>

<p>&lt;track-size> &ndash; 可以是一个长度，百分比或者是一个网格中自由空间的份数（通过使用<code>fr</code>单位）。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">track</span><span class="o">-</span><span class="k">size</span><span class="o">&gt;</span> <span class="o">...</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="o">&lt;</span><span class="n">track</span><span class="o">-</span><span class="k">size</span><span class="o">&gt;</span> <span class="o">...</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了说明隐式网格轨迹如何被创建，思考一下这个：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">60px</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="m">90px</span> <span class="m">90px</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-auto.png"></p>

<p>这里创建了 2 x 2 的网格。</p>

<p>但现在想象你使用<code>grid-column</code>和<code>grid-row</code>来定位你的网格子项，就像这样：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">:</span> <span class="m">1</span> <span class="o">/</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">:</span> <span class="m">2</span> <span class="o">/</span> <span class="m">3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.item-b</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">:</span> <span class="m">5</span> <span class="o">/</span> <span class="m">6</span><span class="p">;</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">:</span> <span class="m">2</span> <span class="o">/</span> <span class="m">3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/implicit-tracks.png"></p>

<p>我们告诉<code>.item-b</code>在第 5 列网格线开始第 6 列网格线结束，但我们还没有定义第 5 或者第 6 列。因为我们引用的线不存在，0 宽度的隐式网格轨迹将被创建来填充这些空缺。我们可以使用<code>grid-auto-columns</code>和<code>grid-auto-rows</code>来指定这些隐式网格轨迹的宽度：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/implicit-tracks-with-widths.png"></p>

<h4>grid-auto-flow</h4>

<p>如果你有网格子项没有明确地放置在网格中，自动布局算法会将网格子项自动放置起来，这个属性控制自动布局算法如何工作。</p>

<p>值有：</p>

<ul>
<li>row &ndash; 告诉自动布局算法在每一行中依次填充，必要时添加新行</li>
<li>column &ndash; 告诉自动布局算法在每一列中依次填充，必要时添加新列</li>
<li>dense &ndash; 告诉自动布局算法如果更小的子项出现时尝试在网格中填补漏洞</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>  <span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">flow</span><span class="o">:</span> <span class="n">row</span> <span class="o">|</span> <span class="n">column</span> <span class="o">|</span> <span class="n">row</span> <span class="n">dense</span> <span class="o">|</span> <span class="n">column</span> <span class="n">dense</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意<code>dense</code>可能让你的网格子项出现错乱。</p>

<p>举个例子：</p>

<p>考虑一下这个 HTML：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item-a&quot;</span><span class="nt">&gt;</span>item-a<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item-b&quot;</span><span class="nt">&gt;</span>item-b<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item-c&quot;</span><span class="nt">&gt;</span>item-c<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item-d&quot;</span><span class="nt">&gt;</span>item-d<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item-e&quot;</span><span class="nt">&gt;</span>item-e<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>你定义一个 5 列 2 行的网格，并设置<code>grid-auto-flow</code>为<code>row</code>（这也是默认值）：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="n">grid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">60px</span> <span class="m">60px</span> <span class="m">60px</span> <span class="m">60px</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="m">30px</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">flow</span><span class="o">:</span> <span class="n">row</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当在网格中放置子项时，你只能为其中 2 个指定斑点：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.item-a</span><span class="p">{</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">:</span> <span class="m">1</span> <span class="o">/</span> <span class="m">3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.item-e</span><span class="p">{</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">column</span><span class="o">:</span> <span class="m">5</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">row</span><span class="o">:</span> <span class="m">1</span> <span class="o">/</span> <span class="m">3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为我们设置<code>grid-auto-flow</code>为<code>row</code>，我们的网格看起来就像这样，注意这三个我们没有放置的子项（<code>item-b</code>，<code>item-c</code>，<code>item-d</code>) 将如何以行的方式流动的：</p>

<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-auto-flow-row.png"></p>

<p>如果我们将<code>grid-auto-flow</code>设为<code>column</code>，<code>item-b</code>，<code>item-c</code>和<code>item-d</code>以列的方式向下流动：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="n">grid</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">60px</span> <span class="m">60px</span> <span class="m">60px</span> <span class="m">60px</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="m">30px</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">flow</span><span class="o">:</span> <span class="n">column</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-auto-flow-column.png"></p>

<h4>grid</h4>

<p>以下属性的简写方式：<code>grid-template-rows</code>，<code>grid-template-columns</code>，<code>grid-template-areas</code>，<code>grid-auto-rows</code>，<code>grid-auto-columns</code>，<code>grid-auto-flow</code>。它也可以设置<code>grid-column-gap</code>和<code>grid-row-gap</code>为它们的初始值，尽管它们不能通过这个属性来精确设置。
值有：</p>

<ul>
<li>none &ndash; 设置所有紫属性为它们的初始值</li>
<li>&lt;grid-template-rows> / &lt;grid-template-columns> &ndash; 分别设置<code>grid-template-rows</code>和<code>grid-template-columns</code>的指定值，以及设置其他所有子属性为初始值</li>
<li>&lt;grid-auto-flow> [&lt;grid-auto-rows> [ / &lt;grid-auto-columns>] ] &ndash; 分别接收所有像<code>grid-auto-flow</code>，<code>grid-auto-rows</code>和<code>grid-auto-columnsaccepts</code>的相同值。如果<code>grid-auto-columns</code>被省略了，那么它的值会通过<code>grid-auto-rows</code>来设置，如果两个都省略了，它们将被设置为默认值。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">:</span> <span class="k">none</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">&gt;</span> <span class="o">/</span> <span class="o">&lt;</span><span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">&gt;</span> <span class="o">|</span> <span class="o">&lt;</span><span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">flow</span><span class="o">&gt;</span> <span class="p">[</span><span class="o">&lt;</span><span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">rows</span><span class="o">&gt;</span> <span class="p">[</span><span class="o">/</span> <span class="o">&lt;</span><span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">columns</span><span class="o">&gt;</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>举例：</p>

<p>下面 2 段代码是相等的：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">:</span> <span class="m">200px</span> <span class="k">auto</span> <span class="o">/</span> <span class="m">1</span><span class="n">fr</span> <span class="k">auto</span> <span class="m">1</span><span class="n">fr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="m">200px</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="m">1</span><span class="n">fr</span> <span class="k">auto</span> <span class="m">1</span><span class="n">fr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">areas</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面这 2 段代码也是等价的：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">:</span> <span class="n">column</span> <span class="m">1</span><span class="n">fr</span> <span class="o">/</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">flow</span><span class="o">:</span> <span class="n">column</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="m">1</span><span class="n">fr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="k">auto</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>它也可以接收一个更复杂但又相当方便的语法来一次性设置所有属性，你可以指定<code>grid-template-areas</code>，<code>grid-auto-rows</code>和<code>grid-auto-columns</code>，并且所有其他紫属性被设置为它们的默认值。你需要做的是指定网格线的名称和网格轨迹的大小来生成它们的网格区域。最简单的表述方法就是举一个例子：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">:</span> <span class="p">[</span><span class="n">row1</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="s2">&quot;header header header&quot;</span> <span class="m">1</span><span class="n">fr</span> <span class="p">[</span><span class="n">row1</span><span class="o">-</span><span class="n">end</span><span class="p">]</span>
</span><span class='line'>          <span class="p">[</span><span class="n">row2</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="s2">&quot;footer footer footer&quot;</span> <span class="m">25px</span> <span class="p">[</span><span class="n">row2</span><span class="o">-</span><span class="n">end</span><span class="p">]</span>
</span><span class='line'>          <span class="o">/</span> <span class="k">auto</span> <span class="m">50px</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面跟下面是等价的：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span><span class="p">{</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">areas</span><span class="o">:</span> <span class="s2">&quot;header header header&quot;</span>
</span><span class='line'>                         <span class="s2">&quot;footer footer footer&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">rows</span><span class="o">:</span> <span class="p">[</span><span class="n">row1</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="m">1</span><span class="n">fr</span> <span class="p">[</span><span class="n">row1</span><span class="o">-</span><span class="n">end</span> <span class="n">row2</span><span class="o">-</span><span class="n">start</span><span class="p">]</span> <span class="m">25px</span> <span class="p">[</span><span class="n">row2</span><span class="o">-</span><span class="n">end</span><span class="p">];</span>
</span><span class='line'>    <span class="n">grid</span><span class="o">-</span><span class="n">template</span><span class="o">-</span><span class="n">columns</span><span class="o">:</span> <span class="k">auto</span> <span class="m">50px</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grid 的完整介绍（一）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/01/08/complete-guide-grid-zhcn-part1/"/>
    <updated>2017-01-08T19:30:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/01/08/complete-guide-grid-zhcn-part1</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2017/01/css_grid.png" width="400" height="350"></p>

<p>CSS 的 flex 特性刚推出不久，现在 grid 特性又快要出来了，感谢这些新特性，让前端开发者不用像以前那么痛苦地做页面布局了。为了更好的理解这篇博文，决定把它翻译出来。</p>

<p>原文地址见这里：<a href="https://css-tricks.com/snippets/css/complete-guide-grid/">A Complete Guide to Grid</a>。</p>

<ul>
<li><a href="http://zhaozhiming.github.io/blog/2017/01/09/complete-guide-grid-zhcn-part2/">Grid 的完整介绍（二）</a></li>
<li><a href="http://zhaozhiming.github.io/blog/2017/01/10/complete-guide-grid-zhcn-part3/">Grid 的完整介绍（三）</a></li>
</ul>


<!--more-->


<h2>Grid 的完整介绍（一）</h2>

<h3>介绍</h3>

<p>CSS Grid 布局（又叫“Grid”)，是一个基于网格的二维布局系统，目的是为了完全改变我们基于网格设计用户界面的方式。CSS 可以用来做我们的网页布局，但它在这一方面做的不是很好。开始的时候我们使用<code>tables</code>, 然后使用<code>floats</code>，<code>positioning</code>和<code>inline-block</code>，但这些方法本质上都是 hack 的方法并缺少一些重要功能（比如<code>垂直居中</code>）。<code>Flexbox</code>帮助我们解决了问题，但它是简单的一维布局，而不是复杂的二维布局（实际上 Flexbox 和 Grid 可以很好地组合起来使用）。Grid 是第一个专门为了解决那些我们一直使用 hack 手段而导致的页面布局问题而创建的 CSS 模块。</p>

<p>我写这篇文章主要收到两个事情启发，第一个是<code>Rachel Andrew</code>写的一本好书——《Get Ready for CSS Grid Layout》，这本书把对 Grid 全面而清晰的介绍作为全书的基调，我高度推荐大家去买这本书来读一下。我另外一件受启发的事情是<code>Chris Coyier</code>对 Flexbox 的完整介绍，这是我推荐学习 flexbox 的首选资源，它帮助了很多人，当你用 Google 搜索 flexbox 时可以从它的搜索结果看出其影响范围。你可以看到那篇文章跟我的文章有很多相似的地方，因为我这篇文章就是通过模仿那篇最好的文章来写的。（译者注：可以看到这两篇文章都是按照两列分布的方式来介绍 flexbox 和 Grid。）</p>

<p>我这篇文章的目的是为了介绍 Grid 在最新规范中的概念，所以我不会涵盖过时的 IE 语法，并且当规范更新时我将尽力更新这篇文章。</p>

<h3>基础和浏览器支持</h3>

<p>开始使用 Grid 非常简单，你只需要通过<code>display: grid</code>来定义一个容器元素作为网格，再通过<code>grid-template-columns</code>和<code>grid-templaet-rows</code>设置列和行的大小，然后通过<code>grid-column</code>和<code>grid-row</code>来设置网格的子元素，grid 元素的顺序对其实现的效果没有任何影响。你的 CSS 可以任意调节它们的顺序，这可以让你很方便地在媒体查询中重新编排你的网格。想象一下在你的整个页面中定义了一个布局，然后通过几行 CSS 代码就可以重新编排出另外一个布局来适应另外一个屏幕，所以说 Grid 是有史以来最强大一个的 CSS 模块。</p>

<p><strong>理解 Grid 最重要的一件事情是现在还不能把它用在生产环境。</strong>它现在还只是一个 W3C 的在制品草稿，还没有任何浏览器默认是支持它的。IE10 和 11 可以支持它，但它们是用过时的语法做的一个老旧的实现。最好地使用 Grid 的方式是设置 Chrome，Opera 或者 Firefox 的特殊标志来启用它。在 Chrome 中，在地址栏输入<code>chrome://flags</code>然后将<code>experimental web platform features</code>选项设置为<code>enable</code>，这个方法同样适用于 Opera(<code>opera://flags</code>)，在 Firefox 中，将<code>layout.css.grid</code>选项设置为可用。</p>

<p>这是一个支持的浏览器表格，我将及时更新它：</p>

<table class="browser-support-table">
<thead>
<tr>
<th class="chrome"><span>Chrome</span></th>
<th class="safari"><span>Safari</span></th>
<th class="firefox"><span>Firefox</span></th>
<th class="opera"><span>Opera</span></th>
<th class="ie"><span>IE</span></th>
<th class="android"><span>Android</span></th>
<th class="iOS"><span>iOS</span></th>
</tr>
</thead>
<tbody>
<tr>
<td class="yep" data-browser-name="Chrome">29+ (Behind flag)</td>
<td class="nope" data-browser-name="Safari">Not supported</td>
<td class="yep" data-browser-name="Firefox">40+ (Behind flag)</td>
<td class="yep" data-browser-name="Opera">28+ (Behind flag)</td>
<td class="yep" data-browser-name="IE">10+ (Old syntax)</td>
<td class="nope" data-browser-name="Android">Not supported</td>
<td class="nope" data-browser-name="iOS">Not supported</td>
</tr>
</tbody>
</table>


<p>除了微软，其他浏览器好像不想太早实现 Grid 直到规范完全成熟为止，这是一件好事，这意味着我们不用担心以后使用 Grid 要使用多种语法。
在生产环境使用 Grid 只是时间上的问题，但现在是时候可以学习它了。</p>

<h3>重要的术语</h3>

<p>在开始了解 Grid 的概念之前先理解其相关的术语是很重要的，因为这里涉及的概念都有点相似，所以如果你不记住它们在规范中的定义的话会很容易被搞混，但请不用担心，这里的术语并不多。</p>

<h4>网格容器</h4>

<p>网格容器是指这个元素使用了<code>display: grid</code>，它是所有网格元素的直接父级，在这个例子<code>container</code>的元素就是网格容器。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item item-1&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item item-2&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item item-3&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>网格子项</h4>

<p>网格子项是指网格容器的子元素（比如其后代），在下面的例子中<code>item</code>的元素是网格子项，但<code>sub-item</code>的元素不是。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;sub-item&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;item&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>网格线</h4>

<p>分隔的线组成了网格的结构。它们可以是垂直的（“列网格线”）或者水平的（“行网格线”），也可以在行或列的任一边。下面的例子中黄色的线是一个列网格线的例子。</p>

<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-line.png"></p>

<h4>网格轨迹</h4>

<p>网格轨迹是指两根毗邻线中间的位置，你可以认为是网格的行或者列，下面例子的中网格轨迹是第二和第三行网格线中间的位置。</p>

<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-track.png"></p>

<h4>网格单元</h4>

<p>网格单元是指两根毗邻的行网格线和列网格线中间的位置，它是一个单独的网格“单元”，下面的例子中网格单元是指第 1 和 2 根行网格线和第 2 和 3 根列网格线中间的位置。</p>

<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-cell.png"></p>

<h4>网格区域</h4>

<p>网格区域是指 4 根网格线包围的空间，一个网格空间可能由任意数量的网格单元构成。下面的例子中网格区域是指在第 1 和 3 的行网格线和第 1 和 3 列网格线中间的位置。</p>

<p><img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-area.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发人员的业余项目]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/12/11/develpers-side-project-zh-cn/"/>
    <updated>2016-12-11T23:07:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/12/11/develpers-side-project-zh-cn</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/12/side-project.png" width="400" height="350"></p>

<p>看到Joel大神最近的一篇不错的博文，忍不住翻译了一下，水平有限翻译不好的地方请大家见谅。</p>

<p>看完博文想到了美剧《硅谷》里面的一个情节：男主角因为业余项目被原来的老板控告，结果虽然是老板因为一些低级错误而败诉了，但就业余项目这个事情上男主角是败诉了的（因为用了一次公司的电脑……）。所以在业余项目上作为员工其实并不占优势，但也不应该放弃写业余项目，我想如果是开明的公司，只要不和公司的利益有冲突，都会鼓励员工做业余项目的。</p>

<p>原文地址见这里：<a href="https://www.joelonsoftware.com/2016/12/09/developers-side-projects/">Developer&rsquo;s side project</a>。</p>

<!--more-->


<p></p>

<h2>开发人员的业余项目</h2>

<p>几乎100%的开发人员在为其他人工作时最终都会签署一种类似叫“专利发明协议”的东西，但几乎所有的开发人员都不太明白这份协议有什么作用。大部分开发人员认为在工作时间所作的工作属于他们的雇主，但其他时间在家里做的东西应该属于他们自己。这个想法错了，而且错的有点危险。</p>

<p>所以让我们思考一下这个问题：如果你是一家软件公司工作的开发人员，公司拥有你在业余时间做的东西吗？</p>

<p>在我开始讲之前我先说一下，在网上查询和获取法律咨询之前要小心，因为我看到的错误信息多得足以让你惹上麻烦。非美国的读者也应该注意自己国家的法律和法律事务可能与此完全不同。</p>

<p>这里有三段信息你需要先了解，然后才能回答这个问题：</p>

<p>1、你在哪个州（或国家）被雇佣？<br/>
州法律在州与州之间是不同的，可能会覆盖特定的合同。</p>

<p>2、你的雇主和合同怎么说？<br/>
在美国，一般来讲，法院对让人们签署任何他们想要的合同都会非常宽容，但有时候州法律会明确地说“即使你签署了这样和那样的一份合同，法律还是有权利覆盖它”。</p>

<p>3、你是一个合同工还是一个雇员？在美国这是两种不同的雇佣方式，法律对这两种情况也会有所区分。</p>

<p>但在我开始解释这些问题之前，我们先将其分解一下。</p>

<p>想象一下你创建了一个软件公司，你需要一个开发人员，所以你从街对面雇了Sarah并以每小时20美元的薪水和她达成了协议，然后她将为你的软件产品写代码。她写代码，你付给她20美元一个小时，事情很顺利，对吧？</p>

<p>顺利……可能吧，在美国，如果你以合同工的方式雇佣Sarah，她仍然拥有工作的版权。这有点奇怪，因为你可能会说，“好吧，我已经付薪水给她了”。虽然听起来很奇怪，但这是版权工作的默认方式。实际上，如果你请了一个摄影师为你的婚礼拍照片，你可以拿到照片和照片的所有备份，但摄影师仍然拥有照片的版权并且可以合法地复制更多照片的备份。是不是很惊喜？代码也是一样的。</p>

<p>每个软件公司都想拥有雇员编写的代码的版权，所以没有一家软件公司可以接收法律的“默认”方式。这就是为什么所有管理比较好的软件公司都会要求所有开发人员至少要签署这样一份协议：</p>

<ul>
<li>以接受薪水作为交换</li>
<li>开发人员同意将版权“赋予”（给）公司</li>
</ul>


<p>这份协议会出现在雇佣合同或单独的一份“发明专利协议”合同里面。这种方式经常理解为使用法律形式让雇佣生效，意味着“我们决定版权属于公司而不是员工”。</p>

<p>现在，我们仍然没有讲任何关于空闲时间工作的事情。假设你现在有一家小游戏公司，不是开发软件，而是你需要每几个月制作三到四个好玩的游戏作为公司的拳头产品。你自己不会制作游戏，所以你出去找了一个游戏设计师来制作游戏。你将付给游戏设计师一个月6000美元来制作新游戏。那些游戏是聪明和新奇的，并且它们可以申请专利，公司拥有游戏的专利这点非常重要。</p>

<p>你的游戏设计师工作了一年并制作了7款游戏，在年末的时候她起诉了你，声明她拥有全部游戏中的4个，因为那些特定的游戏是她在下午5点到上午9点的时间开发的，这段时间不是上班时间。</p>

<p>糟糕，这不是你想要的，你想要支付她所有发明的游戏，然后你意识到需要支付的实际发明过程可能发生在任何时间：节假日，周末，在公司，在卧室，在家，在洗澡，在假期攀岩。</p>

<p>所以在你雇佣开发人员之前，你要达成协议，“嘿听着，我知道任何时候都可以制作游戏，而且不可能证明你坐在卧室椅子上开发的东西就是我需要支持的，我不只是想要购买你在9:00-5:00间的发明，我想要全部，并且我将付给你一个让你满意的薪资来得到全部”，然后她同意了，所以现在你想要签署一些关于她在雇佣期间所有发明都属于公司的协议。</p>

<p>这就是默认方式，这是开发人员、发明者，研究人员的标准雇佣合同。</p>

<p>即使一个公司决定，“天哪，我们不想拥有5:00-9:00间的发明”，他们不久也会陷入困境。为什么呢？因为他们可能需要引入一些投资，然后投资人会说，“请给我证明一下你们不会被一些有怨念的前雇员起诉，说在你卖的东西里面他们有发明权”。这个公司可能会拿出一份包括当前和之前的雇员名单，指出每一份说明了将发明授权给公司的合同。这个预计会成为每一次高新技术融资，合并和收购尽职调查的一部分，所以软件公司如果在取得授权这方面不小心的话，将无法得到融资，或合并，或被收购。从1998年开始，一个人以前没有签署协议然后现在又想签署协议将被认为是一个真正的混蛋，因为他知道他个人持有350000000美元的收购，所以他可以在签字时要求很多钱。</p>

<p>所以，每个软件公司都尝试拥有它所有员工做的东西（他们不会强制拥有不相关的业务项目，但通过纸质协议他们可以要求这些）。</p>

<p>作为软件开发人员听到这个消息会比较沮丧，他们一直想象他们可以晚上在自己的房间里在自己电脑上写自己的代码，然后拥有这些东西的版权和专利。所以在州立委会，在某些州（比如加州）但不包括其他州（比如不包括纽约），这些州立委会一般会通过以下这些法律：</p>

<blockquote><p>任何在你的时间, 通过你的设备做的事情，这个事情跟你老板的工作无关，那这个东西是属于你自己的，即使你签署了相关的合同也没有关系。</p></blockquote>


<p>因为这是加州的法律，这个特殊条款被写入了标准的免责合同和加州律师事务所给他们的软件公司客户的大部分标准合同中，所以全国各地的程序员可以很好地在自己的合同中拥有他们，即使所在州没有要求这个东西。</p>

<p>让我们逐条分析一下。</p>

<p><strong>在你自己的时间里</strong>，我猜很容易理解。</p>

<p><strong>通过你自己的设备</strong>，这一条也不难理解。</p>

<p><strong>这个事情跟你老板的工作无关</strong>，额……等一下，无关的定义是什么？如果我的雇主是Google，他们什么都做，他们以前还搞了一个在该死的热气球上放网络路由器的事情，那么热气球是相关的吗？明显的，搜索引擎，邮件，网络应用和广告都和Google的工作相关，嗯……</p>

<p>好吧，如果我的雇主是一家给法律行业写软件的小公司，那么为会计行业写软件是“相关”的吗？</p>

<p>我不知道，这里的二义性大到你可以在中间开辆大卡车，这可能只有看法官或陪审团怎么决定了。</p>

<p>法官（或陪审团）对贫穷的雇员可能会比对大坏蛋Google更加友善，但你不能把赌注都压在这个上面。</p>

<p>二义性意味着在员工他们可以做任何事情的业余时间上产生了足够大的震慑效果，并且达到了老板想要的目的：员工不会被某天可以商业化的业余项目所打扰，然后老板可以看到每个员工早上漂亮、精神抖擞地来上班，即使员工昨天晚上看了一晚上的电视。</p>

<p>所以……来回答这个问题，在美国各个公司当程序员或适用的法律其实不大可能有特别大的差异，他们都需要握紧你的版权和专利而无需证明那是否在“上班时间”产生的，所以所有公司都会尝试做这个（译注：指签署协议），除非这家公司疏忽大意没有在适当的地方准备好合适的合同，这种情况下，这家公司可能缺乏管理并且这是一个不值得去那上班的理由。</p>

<p>唯一的不同是在管理的态度上，公司会对合同上的权利保持多强硬的态度，这可以有很多种不同：</p>

<ul>
<li>我们喜欢业余项目，玩得开心！</li>
<li>我们不是真正的喜欢业余项目，你应该为我们想想。</li>
<li>我们喜欢业余项目，我们太爱它们以致我们想拥有和出售它们！</li>
<li>我们其实不太关心，但如果你让我们不好受，我们会有很多方法让你更痛苦。如果你离开并开了一个和我们竞争的公司，或者是一个和我们半竞争的公司，我们将使用合同让你掉眼泪。但是，如果你没有让我们不好受，并且很忠诚地为我们服务，我们会在你的IPhone应用达到每月盈利40000美金时寻找一种合适的方式。</li>
</ul>


<p>这些都可能会变化，取决于跟你谈话的人，这个人在任何特定时间内都有强大的权利，或者取决于你是否跟你老板睡过觉。你能够获得独立的唯一方法就是自己独立。作为一个做智能产品的高技术公司员工，意味着你已经决定要出售自己的智力输出，这可能是好的，也可能是不好的，但这是一个自由的选择。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信小程序之槽点一二三]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/09/28/some-complain-about-weixin-mini-app/"/>
    <updated>2016-09-28T11:02:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/09/28/some-complain-about-weixin-mini-app</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/09/wechat.jpg"></p>

<p>微信小程序最近火爆IT界，抱着尝鲜的心理我也下载了<strong>微信web开发者工具</strong>并撸了一个Demo小程序，撸完之后发现微信小程序就开发过程而言，就像背影很美正面像鬼的女子，远没有外界所说的那么好，在实际开发过程中有各种不爽，下面我就来一一说下。</p>

<!--more-->


<p></p>

<h2>不能npm install</h2>

<p>微信小程序最大的一个痛点是不能使用第三方包，只能用原生的JavaScript的功能，虽然可以支持ES6了，但是像Lodash这种工具包要是能用的话，可以少写很多代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 用原生的JavaScript</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">todos</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">todo</span> <span class="o">=</span> <span class="nx">todos</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">Number</span><span class="p">(</span><span class="nx">todoId</span><span class="p">)</span> <span class="o">===</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">todo</span><span class="p">.</span><span class="nx">completed</span> <span class="o">=</span> <span class="o">!</span><span class="nx">todo</span><span class="p">.</span><span class="nx">completed</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">todos</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">todo</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setData</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">todos</span><span class="o">:</span> <span class="nx">todos</span><span class="p">,</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 使用了lodash</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">todos</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">(</span><span class="nx">x</span> <span class="o">=&gt;</span> <span class="nx">todoId</span><span class="o">===</span> <span class="nx">x</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'><span class="nx">_</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">todos</span><span class="p">,</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">index</span><span class="p">}.</span><span class="nx">completed</span><span class="err">`</span><span class="p">,</span> <span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">todos</span><span class="p">,</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">index</span><span class="p">}.</span><span class="nx">completed</span><span class="err">`</span><span class="p">));</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">setData</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">todos</span><span class="o">:</span> <span class="nx">todos</span><span class="p">,</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>不能使用第三方包的最大坏处是不能复用代码，想象一下我在一个项目有几个组件写的非常好，可以在提供给其他项目使用，但由于小程序不能使用第三方包，就只能把原来的代码拷贝到新项目里面去。这样导致的结果就是每个小程序项目充斥着重复的代码，一旦公共代码要改动会要牵扯到很多个地方的修改。</p>

<h2>css调试器不能自动补全</h2>

<p><img class="right" src="http://zhaozhiming.github.io/images/post/2016/09/chrome_css.png" width="400" height="300"></p>

<p>我们在调试页面样式时，很多时候会借助Chrome浏览器的开发者工具，在里面对某个元素添加样式非常方便，而且在输入css属性和值时工具会有自动补全的提示，这一点非常有用，即使你忘记了一些css也可以完成调试样式的工作。</p>

<p><img class="right" src="http://zhaozhiming.github.io/images/post/2016/09/wechat_css.png" width="400" height="300"></p>

<p>但是在微信开发者工具里面就不是这样了，工具不会自动补全css属性和值，作为开发者不可能记住每个css的属性，没有了自动补全让开发效率低了很多。</p>

<h2>UI组件不好用</h2>

<p>微信开发者工具提供了很多UI组件，基本上可以满足大部分的开发场景，但还是不得不吐槽里面一些组件的缺点。</p>

<h4><code>checkbox</code>不能单独使用</h4>

<p>开放的<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/component/checkbox.html?t=1474974357075"><code>checkbox</code></a>组件需要包含在<code>checkbox-group</code>里面才能使用，如果直接使用<code>checkbox</code>组件，一个是不能监听change事件，二个是通过tap事件不能获取到check值。</p>

<p>所以只能结合<code>checkbox-group</code>一起使用，而多个<code>checkbox</code>的场景又比较少，所以感觉这个UI组件很鸡肋。</p>

<h4>icon 太少</h4>

<p>还有要吐槽的一个组件是<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/component/icon.html?t=1475052051701">icon</a>，里面提供的icon非常非常的少，只有可怜的15个。可以预想到以后随着小程序逐渐复杂，开发者需要开发自己的icon组件，但开发出来的组件又不能复用（参见上面第一条），所以小程序项目会到处充斥着重复的代码。</p>

<h2>刷新没用，每次都要重新编译</h2>

<p>微信开发者工具的动作菜单有<code>项目重建</code>和<code>刷新</code>两个子菜单，把这两个菜单放在一起很容易给人这样一种错觉，<code>项目重建</code>是重新编译项目，而<code>刷新</code>是不重新编译项目只刷新页面。<code>项目重建</code>没有什么问题，但是<code>刷新</code>菜单就不知道有什么用了，按了之后页面有进度条加载，但是并没有发生变化，而且大部分时候会导致console报错，真心不知道这个菜单有什么鸟用。</p>

<h2>不能写测试</h2>

<p>测试是项目质量的保障，但在小程序里面没有示例代码和文档来指导你如何写测试代码，其实根本没法让你写单元测试。微信团队你们难道指望每个小程序都是靠手工测试来保证质量吗？我猜测微信开发者工具的开发团队（可能是腾讯的前端团队）平时也很少甚至不写单元测试，所以在开发者工具中就没有关于单元测试的考虑👎。</p>

<h2>总结</h2>

<p>微信小程序刚推出不久，有一些缺点毛病是正常的，但如果腾讯希望小程序以后能掀起一股开发热潮，就请在开发者工具上加强开发体验，让开发者开发爽了，才能做出让用户爽的小程序来。</p>

<p>最后附上我练手的小玩意儿，项目地址是：<a href="https://github.com/zhaozhiming/wechat-todolist">https://github.com/zhaozhiming/wechat-todolist</a></p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/09/wechat-todo.gif"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 GitHub Page 来发布属于你自己的网站]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/08/20/use-gitpage-to-publis-your-site-with-custom-domain/"/>
    <updated>2016-08-20T14:51:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/08/20/use-gitpage-to-publis-your-site-with-custom-domain</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/08/github-pages.jpg"></p>

<p>GitHub Page 是一个由 Github 公司推出的一个静态网站托管服务，可以结合 GitHub 中的用户或者项目来发布相关的静态网站，适用于发布项目 Demo，个人博客，产品介绍等，下面介绍一下 GitHub Page 的使用方法，并介绍如何绑定自定义域名，包括如何在 <a href="https://www.namesilo.com/">namesilo</a> 上购买域名，以及如何配置 DNS 解析服务等操作。</p>

<!--more-->


<h2>GitHub Page 的使用</h2>

<p>Github Page 的使用非常简单，在官网的首页里面就有图文并茂的操作介绍，<a href="https://pages.github.com/">官网请看这里</a>。创建静态网站有 2 种方式，一种是为用户或者组织创建网站，有些框架甚至集成了从编写博客到发布 GitHub Page 的功能，比如 <a href="http://octopress.org/">Octopress</a>；另外一种是为项目创建网站，下面着重介绍项目网站，其实跟用户网站差不多。</p>

<h3>创建网站的 2 种方法</h3>

<ul>
<li>通过 setting 配置</li>
</ul>


<p>为项目创建网站可以参照官网首页上面的那种方式，直接在项目 setting 里面进行配置（具体操作请看官网），但这种方式的缺点是只能添加一个 Markdown 的页面，虽然有网站模板可以选择，但自定义的功能还是十分有限。</p>

<ul>
<li>通过命令行方式</li>
</ul>


<p>创建网站的另外一种方法跟 GitHub Page 的个人网站比较类似，通过命令行的操作，包括创建分支，添加网站内容等来发布你的网站，这种方式可以定制的功能就比较多了，甚至可以制作出一些内容非常丰富的网站。具体操作如下：</p>

<pre><code>* 首先新建一个叫 gh-pages 的 git 分支，并且这个分支跟其他分支没有任何关系，`git checkout --orphan gh-pages`
* 在这个分支下面将原有的内容都去掉，`git rm -rf .`
* 添加网站内容比如 index.html，然后`git commit &amp;&amp; git push`
* 在 GitHbu 项目的 setting 中选择 GitHub Page 通过 gh-pages 分支来发布
* 在浏览器中访问你的网站，`http(s)://&lt;username&gt;.github.io/&lt;projectname&gt;`
</code></pre>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/gh-pages.png" width="200" height="300"></p>

<h3>发布的 3 种方式</h3>

<p>上面介绍的通过<code>gh-pages</code>分支来发布网站是老的发布方式，GitHub Page 最近推出新发布方式，可以通过<code>master</code>分支和 master 分支里面的<code>docs</code>文件夹来发布网站。</p>

<ul>
<li><p>通过 master 分支来发布跟之前介绍的通过 gh-pages 分支发布差不多，区别是不需要单独创建一个分支，直接在 master 分支里面添加网站内容即可，然后在项目 setting 里面选择通过 master 分支来发布。</p></li>
<li><p>通过 master 分支的 docs 文件夹发布，首先需要在 master 分支下面新建一个 docs 文件夹，然后在文件夹中添加网站内容，这样在项目 setting 里面就可以看到<code>master branch/docs folder</code>这个选项了。这种方式的好处是可以在项目中同时放置项目源码和生产代码，将打包后的生产文件放到 docs 里面就可以发布网站了。</p></li>
</ul>


<h2>自定义域名</h2>

<p>使用 GitHub Page 创建的网站域名一般是<code>http(s)://&lt;username&gt;.github.io/&lt;projectname&gt;</code>，但可以配置自己的域名，当然，首先你需要有一个自己的域名。</p>

<h3>namesilo</h3>

<p>之前准备使用 <a href="https://www.godaddy.com/">Godaddy</a> 这个域名注册商，但看了一下 Godaddy 的续费价格比较贵，而且网站不知道为什么老是卡在提交支付方式这一环节上，所以就放弃了。namesilo 是另外一个口碑较好的域名注册商，服务质量与 Godaddy 比有过之而不及，而且续费不加价，虽然界面丑了点但是不影响使用。</p>

<h3>折扣网站</h3>

<p>在购买域名之前，可以先到这个域名折扣网站 <a href="https://www.domcomp.com/">DomComp</a>看看，在上面可以看到各个域名注册商的最新优惠码，而且可以通过分享链接得到购买域名的返利。</p>

<p>比如下面这个截图是 DomComp 网站上的一个 namesilo 的优惠码信息，上面的是优惠码，下面的是有效截止时间。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/domcomp.png" width="300" height="300"></p>

<p>PS: 网站上面有很多<code>1&amp;1</code>这个域名注册商的优惠码，他们的域名价格比较便宜，但是口碑不是很好，图便宜的同学请谨慎考虑。</p>

<p>关于 DomComp 的返利功能可以看下知乎的<a href="://www.zhihu.com/question/19551906/answer/31986656">这个回答</a>，这里面的介绍比较详细，我也是从这个答案了解到相关信息的。</p>

<h2>GitHub Page 配置自定义域名</h2>

<p>购买完域名后，就可以配置到 GitHub 的项目中了。</p>

<h3>项目 setting 配置</h3>

<p>首先在项目的 setting 中，GitHub Pages 那一栏的 Custom domain 填写自己的域名，填写完成后因为域名的 DNS 信息还没有配置，所以会出现黄色的警告信息。</p>

<h3>namesilo DNS 配置</h3>

<p>登陆 namesilo 进到域名管理的界面，点击域名那一栏后面那个蓝色图标。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/namesilo_dns1.png" width="250" height="100"></p>

<p>下面有很多网站的 DNS 配置模板供你选择，我们选择 Github 这个模板。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/namesilo_dns2.png"></p>

<p>模板会为你添加一个类型为<code>A</code>，地址为<code>192.30.252.153</code>的记录和类型为 CNAME 的子域名记录，子域名那一行的地址要填上自己的 github 用户域名<code>&lt;username&gt;.github.io</code>。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/namesilo_dns3.png"></p>

<p>配置成功后，一般要等几个小时后才能生效，生效后 GitHub 项目 setting 里面的提示信息会变成绿色。</p>

<h2>国内 DNS 解析加速</h2>

<p>namesilo 是国外的域名注册商，国内访问速度会比较慢，这个时候可以加个 DNS 解析来提高域名的访问速度。这里当然要首选 <a href="https://www.dnspod.cn">DNSPod</a> 这个免费的 DNS 解析服务商，对于一些个人博客等非盈利的网站是免费使用的。</p>

<p>配置非常简单，还是进到 namesilo 的域名管理界面，选中域名那一栏最前面的勾选框，然后上面一排灰色的图标会显示出颜色，选择其中的<code>Change Namesevers</code>图标。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/namesilo_ns1.png"></p>

<p>在<code>NameServer1</code>和<code>NameServer2</code>中填写 DNSPod 的 nameserver 地址<code>f1g1ns1.dnspod.net</code>，<code>f1g1ns2.dnspod.net</code>。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/08/namesilo_ns2.png" width="300" height="100"></p>

<p>配置完成后网站的访问速度绝对是一个质的飞跃！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让你的 SQL 脚本自动升级]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/07/17/make-your-sql-script-auto-upgrade/"/>
    <updated>2016-07-17T17:12:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/07/17/make-your-sql-script-auto-upgrade</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/07/sql_upgrade.png" width="400" height="300"></p>

<p>以前的公司在部署 SQL 脚本的时候比较麻烦，需要写一份部署文档，上面写了这次部署需要执行的 SQL 脚本，然后由部署人员人工来执行这些脚本。现在发现一种比较简便的方法，可以让系统自己检查要执行哪些 SQL 脚本然后执行，减少了人力成本并提高了效率。</p>

<!--more-->


<h2>背景</h2>

<p>项目使用 <a href="https://www.sqlite.org/">sqlite</a> 来存储数据，因为还没上生产环境，开发人员在升级数据表结构时都是删掉数据库文件然后重新生成，这种方法一旦在生产环境执行的话就会将生产数据全部清除，所以需要使用增量升级数据库的方法来维护数据库。</p>

<h2>设计</h2>

<p>因为程序员都比较懒，加上又没有专职的部署人员，所以我们决定写个程序来让我们的数据库自动增量更新。大概的思路是这样的：</p>

<p><strong>在数据库中和系统文件中各记录一个版本号，系统启动时对比这 2 个版本号，如果数据库版本号小于等于系统文件版本号，则循环执行<code>数据库版本号 + 1</code>的脚本，每循环一次数据库版本号递增 1，直到数据库版本号大于系统文件版本号</strong></p>

<h2>步骤</h2>

<p>上面是概要设计，下面是具体的步骤：</p>

<ul>
<li>在数据库中记录一个版本号，然后在系统文件（比如<code>package.json</code>）也记录一个版本号</li>
<li>数据库版本号初始值为 0，系统文件版本号为部署 SQL 脚本的次数，比如还没执行过任何 SQL 脚本值为 0，执行了 1 次值为 1</li>
<li>系统启动时对比这 2 个版本号，如果数据库版本号小于等于系统文件版本号，则开始循环执行 SQL 脚本</li>
<li>每一次循环根据不同的版本号执行不同的 SQL 脚本，然后将数据库版本号值加 1</li>
<li>当数据库版本号大于系统文件版本号时，退出循环</li>
</ul>


<h2>流程</h2>

<p><img src="http://zhaozhiming.github.io/images/post/2016/07/flow_chart.png"></p>

<h2>结论</h2>

<p>这样实现后，以后如果有新的 SQL 脚本改动，只需要修改相应循环里面代码，增加新版本的 SQL 脚本的 if 分支，然后把系统文件版本加 1 即可，系统启动就会自动执行了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发团队里是否需要测试人员？]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/06/12/do-we-need-tester-in-our-team/"/>
    <updated>2016-06-12T20:06:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/06/12/do-we-need-tester-in-our-team</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/06/qa.png" width="400" height="300"></p>

<p>最近在看“<a href="https://book.douban.com/subject/4163938">软件随想录</a>”，里面有个非常有名的“<a href="http://www.joelonsoftware.com/articles/fog0000000043.html">乔尔测试</a>”，其中有一个问题是“你的团队里面是否有测试人员”，如果有的话就加分，表明团队对产品质量比较重视。</p>

<p>但是在现在的软件开发团队中是否真的需要测试人员呢？</p>

<!--more-->


<p></p>

<h2>如何替代测试人员的工作</h2>

<p>我们先来看一下测试人员的工作是什么？测试人员的工作是尽可能的找出bug，然后提交给开发人员进行修复。如果团队里面没有测试人员，开发人员要如何找bug呢？</p>

<p>首先我们来看测试人员做的最多的测试——功能测试，对于功能测试我们有什么办法可以来替代呢？</p>

<h4>单元测试</h4>

<p>单元测试是开发人员找出代码中潜在bug的自我救赎行为，相比手工测试功能，开发人员一般更倾向于写代码来测试功能代码，即所谓的单元测试。只要能想到相应的测试案例，就能写出单元测试，可以测试包括正常，异常，分支，边界等情况下的问题。</p>

<h4>集成测试</h4>

<p>单元测试虽然可以找到一些bug，但还不能完全替代测试人员的工作，单元测试只能测试细粒度级别的功能，比如某个方法的功能，如果需要对几个功能点一起测试的话，单元测试就满足不了了。但没有关系，开发同样可以用代码来写测试，这种粒度稍大的测试就是集成测试，比如测试一个后端的api，验证输入参数和输出结果，这个api的真正功能可能是后端调用数据库等一系列的操作，你一个测试方法就可以把这个api的各个功能点串起来一起验证。</p>

<h4>UI测试</h4>

<p>还有粒度更大的测试，一个页面上的按钮的点击可以看成是UI测试，相对于集成测试，这个测试的范围涉及了前端和后端，测试包括验证前端的页面是否正确，到点击按钮后触发的后端功能是否正确。现在市面上有很多端到端的测试框架，涵盖各种语言和浏览器。</p>

<h4>性能测试</h4>

<p>除了功能测试，测试人员还会做一些性能测试，同样地，开发可以通过代码或者脚本来调用性能测试工具来对系统进行性能测试。</p>

<h4>持续集成</h4>

<p>如果不想像测试人员一样每天做重复性的劳动，就可以将以上那些测试代码放到持续集成上面，让机器帮你运行，想象一下，几百上千个测试，如果手工跑的话可能要花不止一天的时间，而通过持续集成，可能在一天就能跑完好几轮所有测试。</p>

<h2>不能替代的测试工作</h2>

<p>如果我们做到了以上这些，是否就可以完全代替测试人员了呢？其实有些测试是机器无法测试的，比如网页的样式，机器只能判断是否有显示，但无法判断显示的是否好看。还有一些交互效果，也只有通过人工才能识别效果是否正确，还有其他各个领域的测试，目前是不能通过代码或者机器来替代的。</p>

<h2>高级测试工程师</h2>

<p>可能有人会说上面提到的用代码来执行测试的工作，高级测试工程师也能做。其实我觉得软件开发和软件测试到了越高的位置，技能重合的领域就越大，两者都同时会写代码，做测试，可能还会部署，会运维，这个时候我觉得不如就叫高级工程师好了，或者全栈工程师。</p>

<h2>结论</h2>

<p>说了这么多，所以结论是什么呢？</p>

<p>具体情况要具体分析，不能一概而论说完全不需要测试人员，团队不需要测试人员的条件是：</p>

<ul>
<li>团队的开发人员可以写的单元测试，集成测试和UI测试</li>
<li>没有太多需要人工测试的功能，比如团队开发的是常规的web系统或者纯后端应用等</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何写好办公室邮件]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/05/31/how-to-write-email-in-office/"/>
    <updated>2016-05-31T08:12:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/05/31/how-to-write-email-in-office</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/05/email.jpg" width="400" height="300"></p>

<p>一封电子邮件可以让人看出你的职业素养和专业水平，以前我在平安科技公司工作，在那里沟通主要是通过电子邮件的方式来进行，所以我也学到了一些关于电子邮件的规范和注意事项，在这里分享给大家。</p>

<!--more-->


<p></p>

<h2>收件人</h2>

<p>可能大家觉得收件人这一块没什么好注意的，把邮件地址放到收件人栏里不就可以了吗？我只能说：<code>图样图森破</code>。</p>

<h4>收件人的顺序很重要</h4>

<p>如果收件人中有本部门的同事和领导，应该先将领导的名字放在前面，其他同事的名字后面放在后面，已显示对领导的尊重。请注意，这不是拍马屁，而是一种职场礼仪，而且是每个行业都会有的规则，比如VIP总会被优先接待。</p>

<p>如果收件人中有本部门和其他部门的人，先将其他部门的人放在前面，后面才放本部门的人。不管其他部门的人职位高低，其顺序总是先于本部门的人，同一部门的人按照领导前同事后的顺序排列。</p>

<h3>抄送人 !== 收件人</h3>

<p>有些人发送邮件喜欢把邮件地址一股脑都放到收件人那一栏中，而没有真正想过收件人和抄送人的区别。收件人是你发邮件的主要接收方，而抄送人并不是，发邮件给抄送人起到的是一个知会的目的，将抄送人的邮件地址放到收件人里会给抄送人带来困扰。</p>

<h2>标题</h2>

<p>标题要体现邮件的主题和重点，有几点需要注意：</p>

<ul>
<li>如果要引起别人注意，可以用中括号<code>【】</code>或<code>[]</code>把主题括起来，比如：<code>【 XX 活动通知】</code></li>
<li>如果需要别人帮助或者反馈，可以在标题中加上<code>求助</code>或<code>请反馈</code>的字样，比如：<code>【请反馈】上周例会待办事项进展</code></li>
<li>如果是会议邀请，可以在标题上写上时间和地点等信息，比如：<code>【会议邀请】部门例会(本周二下午2点)</code></li>
</ul>


<h2>正文</h2>

<h3>开门见山</h3>

<p>邮件内容建议开门见山，直述主题，同时言简意赅，以免浪费大家的时间。在以邮件为主要沟通手段的公司里，每人每天可能要处理几十上百封邮件，如果你发的邮件又臭又长，那收件人会很快失去耐心。</p>

<h3>套用模板</h3>

<p>邮件内容建议分成3个部分：称呼，正文，结尾，比如：XXX 您好，正文&hellip;，谢谢。不管你的邮件内容有多少，即使只有一句话，也请按照这种方式发送邮件，这样会让人觉得你发的邮件更加正式和专业。</p>

<h3>善用分段</h3>

<p>如果你看到一封邮件里面有很长的一段文字，那么你有很大的可能不会读完整封邮件。要如何避免这种情况呢？其实最好的办法就是将一大段文字拆成几个小段，建议一段文字不要超过一行，这样阅读者会非常容易读懂你的邮件，并有耐心看完全部内容。</p>

<h3>吸引眼球</h3>

<p>如果邮件内容比较长，需要收件人了解的内容又比较多怎么办呢？这个时候可以适当地将一段文字标成<code>红色</code>或者将其<code>加粗字号加大</code>，这样阅读者在读邮件的时候就会被<code>重点</code>标注的地方所吸引了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『我』的产品说明书]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/05/17/use-my-product-manual-to-introduce-team/"/>
    <updated>2016-05-17T07:54:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/05/17/use-my-product-manual-to-introduce-team</id>
    <content type="html"><![CDATA[<p><img src="http://zhaozhiming.github.io/images/post/2016/05/product_manual.png" width="400" height="300"></p>

<p>最近使用引导者方法——<code>我</code>的产品说明书，为团队做了一次沟通交流，让大家彼此加深了了解，同时从中得到了团队成员的喜好、特长等信息，大家觉得这种方式挺有意思，所以今天在这里分享一下。</p>

<!--more-->


<p></p>

<h2>什么是<code>我</code>的产品说明书</h2>

<p>产品说明书大家应该都知道，比如家电的使用说明，软件的说明文档等，说明书主要介绍了产品的使用范围，注意事项，功能说明，保养事宜等。而<code>我</code>的产品说明书的方式呢，就是让团队每个人以产品说明书的方式来介绍自己，把自己当成一件很牛B的产品，说出自己的想法，比如自己有什么特长，使用<code>我</code>的时候有什么注意事项等，通过这样的一种方式介绍自己，会让人有种耳目一新的感觉。</p>

<p>下面是<code>我</code>的产品说明书的内容清单：</p>

<ul>
<li>规格： 专长，值得记录的经验，强项，卖点等</li>
<li>用途： 特别建议在 OO 时候 或 XX 场合 使用</li>
<li>我喜欢被委托的事与被委托的方式</li>
<li>会让我觉得开心的称赞或激发干劲的环境</li>
<li>偏爱的指正、斥责的方式</li>
<li>周围的人不能说的“禁忌字眼”和不能做的“NG行为”</li>
<li>状态不佳时，会有以下症状&hellip;&hellip;（症状、原因、处理方法）</li>
<li>周遭的人若能这样做，那就太好了</li>
<li>自己做得到的事</li>
</ul>


<h2>流程步骤</h2>

<p>作为一种会议引导方式，我们有必要了解会议的流程和步骤。</p>

<ul>
<li>首先为团队介绍会议的目的和流程，目的可能是为了让新团队成员互相了解，或者是改变团队现有的状态。</li>
<li>然后让团队成员填写一份产品说明书表格（右面有模板可以参考），时间大概为20~30分钟。</li>
<li>大家填写完后，让每个人逐一分享自己的说明书，如果人数比较多，可以分成几个小组，每个小组派代表发言</li>
<li>在成员分享的过程中，注意要引导分享者讲一些实际的例子，或者引导其讲出真正的原因，同时注意气氛的调节，保持轻松幽默的氛围可以更好地吸引其他成员倾听。每个人的分享大概控制在10分钟内为宜。</li>
<li>全部介绍完后，让大家总结一下今天的收获，感想等。</li>
</ul>


<h2>心得体会</h2>

<p>团队通过这次分享，我觉得有以下收获：</p>

<ul>
<li>加深彼此了解——平时大家上班沟通都比较少（不在同一个项目组），通过这次机会能更好的了解彼此。</li>
<li>搜集成员信息——除了表格中的信息外，还包括一些平时不为人知的<code>秘密</code>，比如有些人的特长还有<code>撩妹</code>这一项技能，让人颇感意外：）</li>
<li>创造发言环境——其实无论哪种引导方式，目的就是为了让大家能畅所欲言，说出心中的想法，通过这种特殊的方式，大家更愿意说出心理话。</li>
</ul>


<h2>说明书表格</h2>

<p>最后附上<code>我</code>的产品说明书模板，大家也可以在团队中尝试做一下哈。</p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/05/my_product_manual_1.png"></p>

<p><img src="http://zhaozhiming.github.io/images/post/2016/05/my_product_manual_2.png"></p>
]]></content>
  </entry>
  
</feed>
