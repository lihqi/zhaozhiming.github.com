<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2018-04-29T16:48:16+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[基于 React 的 CMS 框架对比：Docusaurus vs. Gatsby]]></title>
    <link href="http://zhaozhiming.github.io/blog/2018/01/30/docusaurus-vs-gatsby/"/>
    <updated>2018-01-30T20:01:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2018/01/30/docusaurus-vs-gatsby</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2018/01/vs.jpg" width="400" height="350"></p>

<p>最近 Facebook 推出了一个文档工具 <a href="http://docusaurus.io/">Docusaurus</a>，既可以用来做产品网站，也可以用来写博客，还提供很多很有用的功能，最重要的是它是基于 React 实现的。</p>

<p>同样基于 React 技术的静态网站生成工具 <a href="https://www.gatsbyjs.org/">Gatsby</a>，也具备了类似的功能，而且它提供了非常丰富的插件。</p>

<p>可见两者各有千秋，那我们应该选择呢？或者说我们应该基于什么场景来使用它们呢？</p>

<!--more-->


<h2>CMS</h2>

<p>首先我们先了解一下什么是 CMS，下面是维基百科的定义：</p>

<p><blockquote><p>内容管理系统（英语：content management system，缩写为 CMS）是指在一个合作模式下，用于管理工作流程的一套制度。该系统可应用于手工操作中，也可以应用到电脑或网络里。作为一种中央储存器（central repository），内容管理系统可将相关内容集中储存并具有群组管理、版本控制等功能。版本控制是内容管理系统的一个主要优势。</p><footer><strong>维基百科</strong></footer></blockquote></p>

<p>看完是不是对什么是 CMS 更懵了？没关系，我们接着往下看。</p>

<p>那什么样的网站属于 CMS 呢？其实大部分网站都可以归属于 CMS，但更多时候是指下面这些类型的网站：</p>

<ul>
<li>博客类网站，以个人博客类居多</li>
<li>公司类网站，例如<a href="https://www.knownsec.com">知道创宇的网站</a></li>
<li>产品类网站，比如 <a href="https://reactjs.org">Reactjs 的网站</a></li>
</ul>


<p>总的来说就是指由静态化的页面组成的网站。</p>

<p>一直以来都有很多工具来制作或生成 CMS 网站，下面是几个比较出名的 CMS 框架。</p>

<ul>
<li>Wordpress: 老牌的 CMS 框架，以超多插件功能强大而著称，也以多安全漏洞而受广大黑客喜爱。</li>
<li>Gitbook: 是一个支持 Markdown 格式的文档编写工具，可以很方便地和 github 进行集成。</li>
<li>Hexo: 是用 Nodejs 编写的博客框架，支持多种博客主题，同样支持 Markdown 格式。</li>
</ul>


<p>但在现代化的 web 开发体系中，这些框架在前端技术上显得有些落后，目前 React 是全球范围内最受欢迎的前端框架（没有之一），我们当然希望可以有一个基于 React 技术的静态网站开发工具。</p>

<h2>Gatsby 和 Docusaurus</h2>

<p>其实基于 React 技术的静态网站生成工具也有很多，但是比较出名的要数<code>Gatsby</code>了，一个是因为它出来的时间比较早，另一个是因为它一直在迭代完善，从而让很多开发者都喜欢它。</p>

<p><code>Docusaurus</code>是 Facebook 公司最近刚开源出来的一个建站工具，当然它也是基于 React 的。相比<code>Gatsby</code>，它更多是为产品类网站而服务，集成了很多产品类网站所需要的功能，包括：版本化、国际化、站内检索等。</p>

<h2>Gatsby vs. Docusaurus</h2>

<p>虽然两者都是基于 React 的静态网站工具，但是在很多方面还是不一样的，下面通过几个方面介绍两者的不同之处，希望大家看完之后可以根据自己的需求做出正确的选择。</p>

<h3>入门容易度</h3>

<p>在入门容易度方面，<code>Docusaurus</code>要完胜<code>Gatsby</code>，<code>Docusaurus</code>的文档简单易懂，花半个小时基本上就可以看完了，然后再花个 5 分钟就可以搭建出一个静态网站，用户只需要通过 markdown 来编写文档就可以了。</p>

<p><code>Docusaurus</code>留给用户自定义配置的地方并不多，基本上都集中在<code>siteConfig.js</code>这个文件里面，所以用户要关心的东西并不多。</p>

<p><code>Gatsby</code>虽然也有官方文档，但因为涉及的点比较多所以文档也很长，比如你可能需要了解<code>GraphQL</code>（后台通过它来获取博客文章和站点信息），还需要知道有哪些<code>starter</code>（可以理解为项目模板，里面不仅包含了网站的样式，还包含了网站的配置）可以选择，还需要知道有哪些插件可以使用（包括官方和第三方的很多插件），光看完这些文档就要费不少时间。</p>

<p>看完文档之后你可能还需要去参考其他<code>starter</code>，选择其中一个来作为网站的模板，在其基础上进行修改，如果是用最基本的<code>starter</code>来搭建网站的话，那要做的东西就太多了，所以一般是选择一个适合自己的<code>starter</code>来创建项目会比较好。</p>

<h3>页面定制</h3>

<p><code>Docusaurus</code>是集成度比较高的一个产品，所以用户可扩展的东西并不多，比如首页和博客文章页面的布局用户是无法进行大幅度改动的，但可以进行一些小范围的修改。比如在<code>siteConfig.js</code>里面有个属性是<code>colors</code>，里面可以让用户自定义网站的<code>主颜色</code>和<code>次要颜色</code>。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="err">/&lt;em&gt; colors for website &lt;/em&gt;/</span>
</span><span class='line'>  <span class="nx">colors</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">primaryColor</span><span class="o">:</span> <span class="s1">&#39;#2E8555&#39;</span><span class="p">,</span>
</span><span class='line'><span class="nx">secondaryColor</span><span class="o">:</span> <span class="s1">&#39;#205C3B&#39;</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>另外<code>Docusaurus</code>提供了一个<code>custom.css</code>文件，让用户可以在里面通过覆盖原来的 class 来达到改变样式的目的。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">/&lt;</span><span class="nt">em</span><span class="o">&gt;</span> <span class="nt">your</span> <span class="nt">custom</span> <span class="nt">css</span> <span class="o">&lt;/</span><span class="nt">em</span><span class="o">&gt;/&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-device-width</span><span class="o">:</span> <span class="nt">360px</span><span class="o">)</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-device-width</span><span class="o">:</span> <span class="nt">736px</span><span class="o">)</span> <span class="p">{}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">1024px</span><span class="o">)</span> <span class="p">{}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-width</span><span class="o">:</span> <span class="nt">1023px</span><span class="o">)</span> <span class="p">{}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">1400px</span><span class="o">)</span> <span class="p">{}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="k">@media</span> <span class="nt">only</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">1500px</span><span class="o">)</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>Gatsby</code>在这一点上比<code>Docusaurus</code>要好很多，因为<code>Gatsyb</code>上所有页面文件用户都可以随意修改，包括页面的内容和样式。</p>

<p><code>Gatsby</code>的 src 目录结构如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>.
</span><span class='line'>├── components
</span><span class='line'>│   ├── Bio.js
</span><span class='line'>│   └── profile-pic.jpg
</span><span class='line'>├── layouts
</span><span class='line'>│   └── index.js
</span><span class='line'>├── pages
</span><span class='line'>│   ├── hello-world
</span><span class='line'>│   │   ├── index.md
</span><span class='line'>│   │   └── salty_egg.jpg
</span><span class='line'>│   ├── index.js
</span><span class='line'>│   └── my-second-post
</span><span class='line'>│       └── index.md
</span><span class='line'>└── templates
</span><span class='line'>    └── blog-post.js
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>layouts/index.js: 这是网站页面整体布局的文件，可以在这里定义页面头部，底部和侧边栏，然后通过<code>this.props.children</code>来渲染子页面。有 2 种子页面，一种是网站首页页面，另一种是博客文章的页面。</li>
<li>pages/index.js: 这个文件是网站首页的页面文件，在这里可以定义首页页面的内容。</li>
<li>templates/blog-post.js: 这个文件是博客文章的页面文件，在这里可以定义一篇博客文章要如何展示信息，比如标题是什么样式，作者是什么样式等。</li>
</ul>


<p>如果你的网站不需要博客文章，你甚至可以在<code>layout/index.js</code>中去掉<code>this.props.children</code>部分，直接换成你需要的页面内容，这样你也就不需要去编辑<code>pages/index.js</code>文件了。</p>

<p>总之，<code>Gatsby</code>的页面扩展性是非常好的，可以随时将页面修改成你需要的网站样式；而<code>Docusaurus</code> 则只能在其定制好的页面框架下进行一些小修改。</p>

<h3>页面自适应</h3>

<p><code>Docusaurus</code>本身已经做好了页面自适应，用户可以不关心这方面的问题，只要是用<code>Docusaurus</code>搭建出来的网站都是页面自适应的。</p>

<p><code>Gatsby</code>本身是不具备页面自适应功能的，但一些<code>starter</code>会具有页面自适应的能力，只要通过这些<code>starter</code>搭建出来的网站也是页面自适应的，但这种情况相当是受限在这个<code>starter</code>的页面框架里面，如果需要做一些页面样式上的调整，就要检查是否会破坏原来的自适应功能。</p>

<h3>文档检索</h3>

<p><code>Docusaurus</code>本身集成了 <a href="https://www.algolia.com/">algolia</a> 来做站内文档检索功能，用户只需要在<code>siteConfig.js</code>中配置好<code>algolia</code>的选项就好了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">algolia</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">apiKey</span><span class="o">:</span>
</span><span class='line'>  <span class="s2">&quot;your api key&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">indexName</span><span class="o">:</span> <span class="s2">&quot;your index name&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这是集成了<code>algolia</code>检索功能的截图：</p>

<p><img src="/images/post/2018/01/algolia.png"></p>

<p><code>Gatsby</code>本身不具备站内检索功能，但它可以通过<code>GraphQL</code>进行文章查询，所以我觉得可以通过<code>GraphQL</code>来实现站内检索的功能，但这个需要用户自己去实现了。</p>

<p>其实<code>Gatsby</code>也可以集成<code>algolia</code>，大家可以看 <a href="https://reactjs.org/">React</a> 的官方网站，它就是用<code>Gatsby</code>做的，里面集成<code>algolia</code>站内检索功能，感兴趣的可以去看下他们网站关于<code>docsearch</code>这一块的<a href="https://github.com/reactjs/reactjs.org/search?utf8=%E2%9C%93&amp;q=docsearch&amp;type=">源码</a>。</p>

<h3>版本化和国际化</h3>

<p>在一些产品中，文档的版本管理是一个比较常见的需求：文档可以根据不同的版本号进行不同的内容展示，这样可以让老版本用户看到相关文档，老文档不会被新版本的文档所覆盖。</p>

<p>同样的，国际化也是一些跨国产品的强需求，可以通过切换不同的语言来展示不同语言的文档，这样可以吸引更多国家的人来使用产品。</p>

<p><code>Docusaurus</code>本身已经集成了这 2 个功能，这也是它的卖点之一，你可以通过命令行来添加新的版本号。每个版本号都是一个文件夹，在里面存放了这个版本的相关文档。</p>

<p>国际化的功能也是类似的操作。</p>

<p><code>Gatsby</code>本身则不具备这些功能，需要用户自己开发。</p>

<h3>编辑分离</h3>

<p>什么是编辑分离呢？假设我们的网站有成千上百个文档，这些文档如果是让搭建网站的程序员来维护的话可能力不从心，而且文档的专业性也得不到保证，但是专业的文档编辑人员又不懂 markdown 语法，那要让他们怎么进行文档编辑呢？这个时候就需要将编辑功能从网站上分离出去了，比如说网站的外部提供了所见即所得的富文本编辑器，让文档编辑人员进行文档编写，然后将编写完的内容同步到网站。</p>

<p><a href="https://www.contentful.com/"><code>contentful</code></a> 是一个专门做文档编辑功能的产品，可以在上面进行文档编辑，并通过 API 获取到文档内容。</p>

<p>而之前我们说了，<code>Gatsby</code>是一个拥有丰富插件的框架，它就提供了这样一个<a href="https://www.gatsbyjs.org/packages/gatsby-source-contentful/">插件</a> 来让网站和 <code>contentful</code>进行集成，配置内容如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// In your gatsby-config.js</span>
</span><span class='line'><span class="nx">plugins</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">resolve</span><span class="o">:</span> <span class="err">`</span><span class="nx">gatsby</span><span class="o">-</span><span class="nx">source</span><span class="o">-</span><span class="nx">contentful</span><span class="err">`</span><span class="p">,</span>
</span><span class='line'><span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">spaceId</span><span class="o">:</span> <span class="err">`</span><span class="nx">your_space_id</span><span class="err">`</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">accessToken</span><span class="o">:</span> <span class="err">`</span><span class="nx">your_access_token</span><span class="err">`</span><span class="p">,</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span>
</span><span class='line'><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>而<code>Docusaurus</code>不具备这方面的功能。</p>

<h2>总结</h2>

<p>下面的表格总结上面列的点：</p>

<table>
<thead>
<tr>
<th align="left"> </th>
<th align="center"> Docusaurus </th>
<th align="center"> Gatsby</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">入门难度 </td>
<td align="center"> ⭐️⭐️⭐️ </td>
<td align="center"> ⭐️</td>
</tr>
<tr>
<td align="left">页面定制 </td>
<td align="center"> ⭐️ </td>
<td align="center"> ⭐️⭐️⭐️</td>
</tr>
<tr>
<td align="left">页面自适应 </td>
<td align="center"> ⭐️⭐️⭐️  </td>
<td align="center"> ⭐️⭐️</td>
</tr>
<tr>
<td align="left">文档检索 </td>
<td align="center"> ⭐️⭐️⭐️ </td>
<td align="center"> ⭐️⭐️</td>
</tr>
<tr>
<td align="left">版本化和国际化 </td>
<td align="center"> ⭐️⭐️⭐️ </td>
<td align="center"> ⭐️</td>
</tr>
<tr>
<td align="left">编辑分离 </td>
<td align="center"> ⭐️ </td>
<td align="center"> ⭐️⭐️⭐️</td>
</tr>
</tbody>
</table>


<p>总的来说，<code>Docusaurus</code>是一个为产品类网站量身定做的建站工具，具备了大部分产品类网站所需的功能，包括国际化、版本化和站内检索等；而<code>Gatsby</code>更像一个框架，你甚至可以使用<code>Gatsby</code>来制作一个类似<code>Docusaurus</code>一样的产品，如果你的网站有自己的样式要求，或者只是想搭建一个自己的博客，那么你可以选择<code>Gatsby</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何扩展 Create React App 的 webpack 配置]]></title>
    <link href="http://zhaozhiming.github.io/blog/2018/01/08/create-react-app-override-webpack-config/"/>
    <updated>2018-01-08T20:04:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2018/01/08/create-react-app-override-webpack-config</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2018/01/cra.png" width="400" height="300"></p>

<p><a href="https://github.com/facebookincubator/create-react-app">Create React App</a>（以下简称 CRA）是创建 React 应用的一个脚手架，它与其他脚手架不同的一个地方就是将一些复杂工具（比如 webpack）的配置封装了起来，让使用者不用关心这些工具的具体配置，从而降低了工具的使用难度。</p>

<p>但是对于一些熟悉 webpack 的开发者来说，他们可能想对 webpack 配置做一些修改，这个时候应该怎么办呢？</p>

<!--more-->


<p>其实我们可以通过以下几种方式来修改 webpack 的配置：</p>

<ul>
<li>项目 eject</li>
<li>替换 react-scripts 包</li>
<li>使用 react-app-rewired</li>
<li>scripts 包 + override 组合</li>
</ul>


<p>下面对这几种方式分别进行介绍。</p>

<h2>项目 eject</h2>

<p>使用 CRA 创建完项目以后，项目在<code>package.json</code>里面提供了这样一个命令：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">&amp;hellip;</span>
</span><span class='line'>  <span class="err">&amp;ldquo;scripts&amp;rdquo;:</span> <span class="err">{&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;pre&gt;&lt;code&gt;</span><span class="nt">&quot;eject&quot;</span><span class="p">:</span> <span class="s2">&quot;react-scripts eject&quot;</span>
</span><span class='line'><span class="err">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>  <span class="p">}</span><span class="err">,</span>
</span><span class='line'>  <span class="err">&amp;hellip;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>执行完这个命令——<code>yarn run eject</code>后会将封装在 CRA 中的配置全部<code>反编译</code>到当前项目，这样用户就可以完全取得 webpack 文件的控制权，想怎么修改就怎么修改了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;eject 后项目根目录下会出现 config 文件夹，里面就包含了 webpack 配置&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;config
</span><span class='line'>├── env.js
</span><span class='line'>├── jest
</span><span class='line'>│   ├── cssTransform.js
</span><span class='line'>│   └── fileTransform.js
</span><span class='line'>├── paths.js
</span><span class='line'>├── polyfills.js
</span><span class='line'>├── webpack.config.dev.js // 开发环境配置
</span><span class='line'>├── webpack.config.prod.js // 生产环境配置
</span><span class='line'>└── webpackDevServer.config.js
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>CRA 与其他脚手架不同的另一个地方，就是可以通过升级其中的<code>react-scripts</code>包来升级 CRA 的特性。比如用老版本 CRA 创建了一个项目，这个项目不具备 <a href="https://developers.google.com/web/progressive-web-apps/">PWA</a> 功能，但只要项目升级了<code>react-scripts</code>包的版本就可以具备 PWA 的功能，项目本身的代码不需要做任何修改。</p>

<p>但如果我们使用了<code>eject</code>命令，就再也享受不到 CRA 升级带来的好处了，因为<code>react-scripts</code>已经是以文件的形式存在于你的项目，而不是以包的形式，所以无法对其升级。</p>

<h2>替换 react-scripts 包</h2>

<p><a href="https://github.com/facebookincubator/create-react-app/tree/8cae659ec5a066eff8ea270346dc8c1ef064f9aa/packages/react-scripts">react-scripts</a> 是 CRA 的一个核心包，一些脚本和工具的默认配置都集成在里面，使用 CRA 创建项目默认就是使用这个包，但是 CRA 还提供了另外一种方式来创建 CRA 项目，即使用自定义 scripts 包的方式。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;默认方式&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>create-react-app foo&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;自定义 scripts 包方式&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>create-react-app foo &amp;mdash;scripts-version 自定义包
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>自定义包</code>可以是下面几种形式：</p>

<ul>
<li><code>react-scripts</code>包的版本号，比如<code>0.8.2</code>，这种形式可以用来安装低版本的<code>react-scripts</code>包。</li>
<li>一个已经发布到 npm 仓库上的包的名字，比如<code>your-scripts</code>，里面包含了修改过的 webpack 配置。</li>
<li>一个 tgz 格式的压缩文件，比如<code>/your/local/scripts.tgz</code>，通常是未发布到 npm 仓库的自定义 scripts 包，可以用 <code>npm pack</code> 命令生成。</li>
</ul>


<p>这种方式相对于之前的<code>eject</code>是一种更灵活地修改 webpack 配置的方式，而且可以做到和 CRA 一样，通过升级 scrips 包来升级项目特性。</p>

<p>自定义 scripts 包的结构可以参照<code>react-scripts</code>包的结构，只要修改对应的 webpack 配置文件，并安装上所需的 webpack loader 或 plugin 包就可以了。</p>

<h2>使用 react-app-rewired</h2>

<p>虽然有这两种方式可以扩展 webpack 配置，但是很多开发者还是觉得太麻烦，有没有一种方式可以既不用<code>eject</code>项目又不用创建自己的 scripts 包呢？答案是肯定的，<a href="https://github.com/timarney/react-app-rewired">react-app-rewired</a> 是 react 社区开源的一个修改 CRA 配置的工具。</p>

<p>在 CRA 创建的项目中安装了<code>react-app-rewired</code>后，可以通过创建一个<code>config-overrides.js</code> 文件来对 webpack 配置进行扩展。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="err">/&lt;em&gt; config-overrides.js &lt;/em&gt;/&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">override</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//do stuff with the webpack config&amp;hellip;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">config</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>override</code>方法的第一个参数<code>config</code>就是 webpack 的配置，在这个方法里面，我们可以对 <code>config</code> 进行扩展，比如安装其他 loader 或者 plugins，最后再将这个 <code>config</code> 对象返回回去。</p>

<p>最后再修改<code>package.json</code>中的脚本命令，修改内容请见<a href="https://github.com/timarney/react-app-rewired#3-flip-the-existing-calls-to-react-scripts-in-npm-scripts">这里</a>。</p>

<h2>scripts 包 + override 组合</h2>

<p>虽然<code>react-app-rewired</code>的方式已经可以很方便地修改 webpack 的配置了，但其实我们也可以在自定义的 script 包中实现类似的功能。</p>

<p>在<code>react-app-rewired</code>的源码中可以看到它核心的包也叫 <a href="https://github.com/timarney/react-app-rewired/tree/4954531eaab6da14c4e3c943cb2038b46d5f9125/packages/react-app-rewired">react-app-rewired</a>，里面重新覆盖了<code>react-scripts</code>中的几个脚本文件，包括<code>build.js</code>、<code>start.js</code>和<code>test.js</code>。</p>

<p>具体过程是怎样的呢？以<code>build.js</code>为例：</p>

<ul>
<li>先获取 webpack 的基本配置，然后再调用<code>config-overrides.js</code>（就是在根目录中新增的那个文件）中的<code>override</code>方法，将原先的 webpack 对象作为参数传入，</li>
<li>再取得经过修改后的 webpack 配置对象</li>
<li>最后再调用<code>react-scripts</code>中的<code>build.js</code>脚本，传入修改后的 webpack 对象来执行命令，</li>
</ul>


<p>具体源码如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">overrides</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;..</span><span class="o">/</span><span class="nx">config</span><span class="o">-</span><span class="nx">overrides</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">webpackConfigPath</span> <span class="o">=</span> <span class="nx">paths</span><span class="p">.</span><span class="nx">scriptVersion</span> <span class="o">+</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="err">/config/webpack.config.prod&amp;rdquo;;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">// load original config</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">webpackConfig</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="nx">webpackConfigPath</span><span class="p">);</span>
</span><span class='line'><span class="c1">// override config in memory</span>
</span><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">cache</span><span class="p">[</span><span class="nx">require</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">webpackConfigPath</span><span class="p">)].</span><span class="nx">exports</span> <span class="o">=</span>
</span><span class='line'>  <span class="nx">overrides</span><span class="p">.</span><span class="nx">webpack</span><span class="p">(</span><span class="nx">webpackConfig</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span><span class="p">);</span>
</span><span class='line'><span class="c1">// run original script</span>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="nx">paths</span><span class="p">.</span><span class="nx">scriptVersion</span> <span class="o">+</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="err">/scripts/build&amp;rsquo;);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>知道了原理之后，我们也可以修改自定义 scripts 包的脚本文件，还是以<code>build.js</code>为例，在获取基本 webpack 配置对象和使用 webpack 对象之间加入以下代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// override config</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">override</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="nx">paths</span><span class="p">.</span><span class="nx">configOverrides</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">overrideFn</span> <span class="o">=</span> <span class="nx">override</span> <span class="o">||</span> <span class="p">((</span><span class="nx">config</span><span class="p">,</span> <span class="nx">env</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">config</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">overrideConfig</span> <span class="o">=</span> <span class="nx">overrideFn</span><span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>overrideConfig</code>就是修改后的 webpack 对象，最后修改调用了 webpack 对象的代码，将原来的 webpack 对象替换成修改后的 webpack 对象。</p>

<h2>总结</h2>

<p>CRA 是一个非常棒的 React 脚手架工具，但你如果不满足于它的 webpack 默认配置，你可以通过上述几种方式来扩展自己项目的 webpack 配置，这几种方式各有优缺点，可以结合具体的使用场景来选择合适自己的方式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何处理 Echarts 中的地图散列点点击事件]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/10/27/how-to-handle-map-scatter-click-event-in-echarts/"/>
    <updated>2017-10-27T14:33:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/10/27/how-to-handle-map-scatter-click-event-in-echarts</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2017/10/echarts.png" width="400" height="300"></p>

<p>Echarts 是百度比较成功的一个开源图形库，现在国内很多公司和项目都使用它。今天介绍一下基于 Echarts 3.0，如何处理地图散列点的点击事件。</p>

<!--more-->


<h2>问题介绍</h2>

<p><img src="/images/post/2017/10/echarts_map.png"></p>

<p>我们想在地图上处理散列点（图中红点）的点击事件，比如点击某个点的时候弹出一个 Modal 框，或者跳转一个新页面什么的。但是 Echarts 提供给我们的事件 API 非常有限，就只有一个比较笼统的<code>click</code>事件 API，我们如何通过这个 API 来实现我们需要的效果呢？</p>

<h2>地图散列点效果</h2>

<p>首先我们来看下实现该图形的核心代码，如下所示：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">series</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;map&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">geoIndex</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">data</span><span class="o">:</span> <span class="p">[</span><span class="cm">/* 地图相关数据 */</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">zlevel</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;effectScatter&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">animation</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">data</span><span class="o">:</span> <span class="p">[</span><span class="cm">/* 散列点数据 */</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">coordinateSystem</span><span class="o">:</span> <span class="s1">&#39;geo&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">showEffectOn</span><span class="o">:</span> <span class="s1">&#39;render&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">rippleEffect</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">scale</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">brushType</span><span class="o">:</span> <span class="s1">&#39;fill&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">itemStyle</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">normal</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">shadowBlur</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">shadowColor</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">zlevel</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">],</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里主要列出 Echarts 里面的 options 参数，对 Echarts 开发比较熟悉的同学应该会知道，options 是每个 Echarts 图形的配置对象。</p>

<p>上面代码显示了中国地图各个省份的指数分布，另外还显示了一些地图上的散列点，所以这里面有 2 种不同类型的数据。</p>

<p>可以看到 options 里面 series 属性包含了 2 种对象，一种 type 是<code>map</code>的对象，表示地图各个省份的指数分布；另外一种对象的 type 是<code>effectScatter</code>，表示的是地图上面的散列点。</p>

<h2>Echarts 的点击事件</h2>

<p>然后我们再来看 Echarts 的点击事件，官方代码如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">myChart</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">click</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 点击事件操作</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>对，就只有一个<code>click</code>事件，没有针对不同类型图形的点击事件。</p>

<p>我们可以试用一下这个点击事件，看看里面的<code>params</code>参数能不能对我们有所帮助？下面是一个点击全国地图某省份事件的<code>params</code>参数：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">params</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">componentSubType</span><span class="o">:</span> <span class="s2">&quot;map&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">componentType</span><span class="o">:</span><span class="s2">&quot;series&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">data</span><span class="o">:</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;西藏&quot;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="mi">75</span><span class="p">},</span>
</span><span class='line'><span class="nx">dataIndex</span><span class="o">:</span><span class="mi">27</span><span class="p">,</span>
</span><span class='line'><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;西藏&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">seriesId</span><span class="o">:</span> <span class="s2">&quot;0&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">seriesIndex</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="nx">seriesName</span><span class="o">:</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">seriesType</span><span class="o">:</span><span class="s2">&quot;map&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">value</span><span class="o">:</span> <span class="mi">75</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>可以看到这个对象里面包含了很多属性，有类型、数据对象，系列名称、值等，但这里面看不出有什么是我们需要的。</p>

<p>那我们再来看下点击了某个散列点后的参数，看看有什么不同。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">params</span><span class="o">:</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">componentSubType</span><span class="err"> </span><span class="o">:</span><span class="err"> </span><span class="s2">&quot;effectScatter&quot;</span><span class="p">,</span><span class="err"> </span>
</span><span class='line'><span class="nx">componentType</span><span class="err"> </span><span class="o">:</span><span class="err"> </span><span class="s2">&quot;series&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">data</span><span class="err"> </span><span class="o">:</span><span class="err"> </span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="err"> </span><span class="s2">&quot;point1&quot;</span><span class="p">,</span><span class="err"> </span><span class="nx">value</span><span class="o">:</span><span class="err"> </span><span class="nb">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">)},</span><span class="err"> </span>
</span><span class='line'><span class="nx">dataIndex</span><span class="err"> </span><span class="o">:</span><span class="err"> </span><span class="mi">0</span><span class="p">,</span><span class="err"> </span>
</span><span class='line'><span class="nx">name</span><span class="err"> </span><span class="o">:</span><span class="err"> </span><span class="s2">&quot;point1&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nx">seriesId</span><span class="err"> </span><span class="o">:</span><span class="err"> </span><span class="s2">&quot;-0&quot;</span><span class="p">,</span><span class="err"> </span>
</span><span class='line'><span class="nx">seriesIndex</span><span class="err"> </span><span class="o">:</span><span class="err"> </span><span class="mi">1</span><span class="p">,</span><span class="err"> </span>
</span><span class='line'><span class="nx">seriesName</span><span class="err"> </span><span class="o">:</span><span class="err"> </span><span class="s2">&quot;-&quot;</span><span class="p">,</span><span class="err"> </span>
</span><span class='line'><span class="nx">seriesType</span><span class="err"> </span><span class="o">:</span><span class="err"> </span><span class="s2">&quot;effectScatter&quot;</span><span class="p">,</span><span class="err"> </span>
</span><span class='line'><span class="nx">type</span><span class="o">:</span><span class="err"> </span><span class="s2">&quot;click&quot;</span><span class="p">,</span><span class="err"> </span>
</span><span class='line'><span class="nx">value</span><span class="o">:</span><span class="p">[</span><span class="mf">125.03</span><span class="p">,</span><span class="err"> </span><span class="mf">46.58</span><span class="p">,</span><span class="err"> </span><span class="mi">20</span><span class="p">],</span><span class="err"> </span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>对比发现，我们可以通过<code>seriesType</code>知道是哪种类型数据的点击事件，或者通过<code>seriesIndex</code>也可以知道。</p>

<p>然后通过<code>dataIndex</code>我们可以得到数据在原始数组中的位置，或者直接通过<code>data</code>和<code>value</code>来直接获取点的相关数据。</p>

<h2>根据参数判断是哪种图形的点击事件</h2>

<p>其实饶了这么一大圈就是想让大家知道，我们可以在<code>click</code>事件中，通过这些参数来判断哪种图形的点击事件是我们想要处理的，如果不是我们需要处理的点击事件，我们直接跳出函数就可以了。示例代码如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">myChart</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">click</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="p">{</span> <span class="nx">seriesIndex</span><span class="p">,</span> <span class="nx">seriesType</span><span class="err"> </span><span class="p">}</span> <span class="o">=</span> <span class="nx">params</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// 方法一：通过 seriesIndex 来判断，map 类型的 seriesIndex 为 0</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">seriesIndex</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// 方法二：通过 seriesType 来判断</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">seriesType</span> <span class="o">===</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">map</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span> <span class="k">return</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="c1">// 通过上面判断逻辑走到这里的就是散列点的事件了</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>缺点分析</h2>

<p>虽然这个方法可以解决问题，但是有个不好的地方需要指出，就是点击散列点的时候，鼠标点击的位置必须非常准确，要点击散列点的中心位置才能捕获到该类型事件，否则看起来就像点击没有效果一样。</p>

<h2>Echarts 的地图数据</h2>

<p>另外在这里提示一下，很多同学可能以为 Echarts 的地图数据不能下载了，因为 <a href="http://ecomfe.github.io/echarts-map-tool/">Echarts 的官方网站</a> 上也是这么写的，但是 Echarts 的 github 项目中并没有删除这些数据 (<a href="https://github.com/ecomfe/echarts/tree/master/map">见这里</a>)，所以大家不要被 Echarts 忽悠了😄。</p>

<p>这些数据包括<code>js</code>和<code>json</code>两种格式的，内容包括中国地图及各省份的地图。</p>

<h2>总结</h2>

<p>文章介绍了处理 Echarts 地图散列点事件的方法，如果大家有更好的方法，希望留言一起讨论，最后附上文章相关的在线 Demo 例子。<a href="https://codesandbox.io/s/lxljr76vp7">本文的 Demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 CSS 显示元素的四个角边框]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/10/21/how-to-add-4-corner-border-with-css/"/>
    <updated>2017-10-21T08:25:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/10/21/how-to-add-4-corner-border-with-css</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2017/10/css_corner.png" width="400" height="300"></p>

<p>为元素加上边框很简单，但是要单独给每个角加上边框就有点难了，下面介绍下实现该效果的两种方法，以及这两种方法优缺点的总结。</p>

<!--more-->


<h2>伪元素边框法</h2>

<p>在看 CSS 代码之前，让我们先看看 html 的结构。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;outter&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里使用了内外 2 层 div，因为单独使用 1 个 div 来实现 4 个角边框不好实现，所以要用 2 个 div，每个 div 实现 2 个角边框的效果。</p>

<p>咱们再来看看 CSS 代码。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.outter</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;//</span> <span class="err">外层右上有左下</span> <span class="nt">2</span> <span class="err">个角</span>
</span><span class='line'><span class="nc">.outter</span><span class="o">:</span><span class="nd">:before</span><span class="o">,</span>
</span><span class='line'><span class="nc">.outter</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">content</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.outter</span><span class="o">:</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">right</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-right</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-top</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.outter</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">bottom</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-left</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-bottom</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;//</span> <span class="err">内层左上和右下</span> <span class="nt">2</span> <span class="err">个角</span>
</span><span class='line'><span class="nc">.content</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.content</span><span class="o">:</span><span class="nd">:before</span><span class="o">,</span>
</span><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">content</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.content</span><span class="o">:</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">-5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">-5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-left</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-top</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.content</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">right</span><span class="o">:</span> <span class="m">-5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">bottom</span><span class="o">:</span> <span class="m">-5px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-right</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-bottom</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里主要使用了伪元素来实现角边框，我们知道<code>::before</code> 和 <code>::after</code> 这 2 个伪元素可以添加显示内容，所以我们就用<code>::before</code>来实现其中一个角边框，<code>::after</code>实现另外一个。</p>

<p>但每个元素的<code>::before</code> 和 <code>::after</code>只能出现一次，所以我们需要 2 个 div 来分别实现 4 个角边框的效果。</p>

<p>在实现每个角边框的时候，我们可以通过绝对定位的方式来设置每个角边框的位置，比如外层 div <code>outter</code>的<code>::before</code>伪元素，我们设置其位置为<code>top: 0; right: 0;</code>，它的位置就是右上角。</p>

<p>这里要注意的是，如果内层和外层 div 不是完全重叠的话，内层伪元素的位置就要有所偏移，比如内层 div <code>content</code>的<code>::before</code>伪元素，我们设置其位置为<code>top: -5px; left: -5px;</code>，这是因为外层和内层 div 因为<code>padding</code>而偏移了<code>5px</code>的位置，所以这里的绝对定位就不是<code>top: 0; left: 0;</code>了。</p>

<h3>效果图</h3>

<p><img src="/images/post/2017/10/border-sloved1.png" width="400" height="300"></p>

<h3>优缺点</h3>

<ul>
<li>优点：灵活性高。</li>
<li>缺点：CSS 代码比较多，html 结构也比较复杂，需要 2 个 div 来实现。</li>
</ul>


<h2>伪元素遮盖法</h2>

<p>我们接着来看第二种方法，还是来先看下 html 的结构，这种方法的 html 结构相对比较简单。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;your/image/path&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里的<code>img</code>是我们要用角边框包括起来的内容，所以实际上我们只用到了 1 层 div。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.content</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">2px</span> <span class="k">solid</span> <span class="m">#ca1c1e</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">25px</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">25px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.content</span> <span class="nt">img</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">z-index</span><span class="o">:</span> <span class="m">5</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.content</span><span class="o">:</span><span class="nd">:before</span><span class="o">,</span>
</span><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">content</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="m">#fff78e</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.content</span><span class="o">:</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">100</span><span class="o">%</span> <span class="o">+</span> <span class="m">50px</span> <span class="o">+</span> <span class="m">4px</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="m">120px</span><span class="p">);</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">100</span><span class="o">%</span> <span class="o">+</span> <span class="m">4px</span><span class="p">);</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">-2px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">50</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">translateX</span><span class="p">(</span><span class="m">-50</span><span class="o">%</span><span class="p">);</span>
</span><span class='line'>  <span class="k">z-index</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="nt">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nt">p</span><span class="o">&gt;</span><span class="nc">.content</span><span class="o">:</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">100</span><span class="o">%</span> <span class="o">+</span> <span class="m">50px</span> <span class="o">+</span> <span class="m">4px</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="m">120px</span><span class="p">);</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">100</span><span class="o">%</span> <span class="o">+</span> <span class="m">4px</span><span class="p">);</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">-2px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">50</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">translateY</span><span class="p">(</span><span class="m">-50</span><span class="o">%</span><span class="p">);</span>
</span><span class='line'>  <span class="k">z-index</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这种方法同样是利用了伪元素，但不是用伪元素来实现边框，而是用来遮盖边框。</p>

<p>我们看到最外层的<code>div</code>设置了一个边框<code>border: 2px solid #ca1c1e</code>，这个就是我们最终会看到的角边框的边框，但是其中一些部分会被遮盖掉。</p>

<p>以<code>::before</code>伪元素的代码来讲解：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.content</span><span class="o">:</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">100</span><span class="o">%</span> <span class="o">+</span> <span class="m">50px</span> <span class="o">+</span> <span class="m">4px</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="m">120px</span><span class="p">);</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="n">calc</span><span class="p">(</span><span class="m">100</span><span class="o">%</span> <span class="o">+</span> <span class="m">4px</span><span class="p">);</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">-2px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">left</span><span class="o">:</span> <span class="m">50</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="n">transform</span><span class="o">:</span> <span class="n">translateX</span><span class="p">(</span><span class="m">-50</span><span class="o">%</span><span class="p">);</span>
</span><span class='line'>  <span class="k">z-index</span><span class="o">:</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>使用伪元素<code>::before</code>遮盖掉了上下两边框的中间部分，可以看到其宽度设置为<code>width: calc(100% + 50px + 4px - 120px)</code>，我们来解读一下这些数字的含义。</p>

<ul>
<li><code>50px</code>是左右<code>padding</code>的宽度</li>
<li><code>4px</code>是<code>border</code>的宽度</li>
<li><code>120px</code>是最后我们想显示的角边框的总宽度，首先它必须大于<code>50px + 4px</code>，不然会把边框完全挡掉，这里设置成<code>120px</code>，那么相当于角边框的宽度就是<code>120 - 50 - 4 = 66</code>，所以每个角边框的宽度就是<code>33px</code>。</li>
</ul>


<p><code>height: calc(100% + 4px)</code>: 高度就是总高度再加上<code>border</code>的宽度。</p>

<p><code>top: -2px</code>: 从边框的上面开始定位，是为了把上边的边框挡住。</p>

<p><code>left: 50%;transform: translateX(-50%);</code>: 水平居中。</p>

<p><code>z-index: 1;</code>: 让伪元素可以挡住外层的 div。</p>

<p><code>::after</code>伪元素原理和<code>::before</code>大致相同，只是把水平和垂直方向调换一下。</p>

<h3>效果图</h3>

<p><img src="/images/post/2017/10/border-sloved2.png" width="400" height="300"></p>

<h3>优缺点</h3>

<ul>
<li>优点：一层 div 就可以搞定，结构相对简单。</li>
<li>缺点：如果背景色需要透明的话则不适用。</li>
</ul>


<h2>总结</h2>

<p>这就是实现元素角边框的两种方法，其实还有一种方法，就是使用 CSS 的<code>clip-path</code>来实现，但代码相对比较<code>hard code</code>，而且这个特性还是实验性的，所以具体怎么实现这里就不介绍了，感兴趣的同学可以看下这个 <a href="https://codepen.io/bennettfeely/pen/NdVyvR">code pen</a>。</p>

<p>如果还有其他更好的实现方法欢迎留言，大家一起学习进步，谢谢！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[研发面试官的面试指南（三）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part3/"/>
    <updated>2017-09-23T19:33:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/09/23/some-tips-of-employers-interview-part3</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2017/09/interview3.jpeg" width="400" height="300"></p>

<p>之前讲了面试流程和技术面试环节，最后讲一下技术面试中的注意事项，可以提高面试的效率和准确率。</p>

<!--more-->


<h2>注意事项</h2>

<h3>提前准备</h3>

<p>一般 HR 会在面试之前给你发送一份应聘者的简历，如果有笔试环节的话，会附带一份笔试题答题结果，这个时候需要提前对应聘者有所了解。</p>

<p>通过简历可以了解应聘者的技术背景，提前想好面试时要重点问哪一方面的问题。有笔试题的话可以通过笔试结果对应聘者掌握的知识点和代码规范有一定了解。</p>

<p>准备时间建议不超过 15 分钟，不要让应聘者等待太久。</p>

<h3>结对（组队）面试</h3>

<p>尽量避免一个人去面试，每个人的知识点都有盲区，一个人的主观因素会比较大，容易造成判断失误。</p>

<p>建议是两个人一起面试，面试完后沟通各自观点，如果面试官中有一个人觉得应聘者不合适，则不建议录用，要选择同时让两位面试官都满意的人。</p>

<p>如果对是否录用应聘者感到纠结的话，建议是按不录用来处理，宁可漏招一个牛人，也不错招一个不合适的人。</p>

<h3>提前结束</h3>

<p>如果在考察过程中发现应聘者不是合适的人，或者技能上有所欠缺，建议提前结束面试，以提高面试的效率，也为了节省双方的时间。</p>

<p>但不建议面试不到5分钟就停止面试，要站在应聘者的角度上考虑问题，可能应聘者费了很大的劲才过来面试，结果面试不到5分钟就结束了，这样对应聘者的体验是相当不好的。</p>

<p>建议多问几个不同方面的问题来考察应聘者，可能应聘者某个方面存在知识盲点，但其他方面却能力突出呢。</p>

<h3>控制时间</h3>

<p>有时候应聘者讲起话来会滔滔不绝，如果每问一个问题都要等10分钟的话，那整个面试过程要么很长，要么不能有效地从全方面了解应聘者。</p>

<p>这时候要注意控制时间，可以适当地打断应聘者，让其讲重点内容。</p>

<p>整个面试过程建议是不要超过 1 个小时。</p>

<h2>总结</h2>

<p>以上就是作为面试官的一些经验和总结，希望可以帮助到正在做面试官的同行，也希望大家可以招到自己满意和合适的人。</p>
]]></content>
  </entry>
  
</feed>
