<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2013-08-24T09:10:37+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[利用Sonar定制自定义JS扫描规则（三）——SSLR JavaScript Toolkit 使用说明]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/05/20/use-sonar-create-customer-js-verify-rule-part-3/"/>
    <updated>2013-05-20T11:20:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/05/20/use-sonar-create-customer-js-verify-rule-part-3</id>
    <content type="html"><![CDATA[<p>在上一篇blog中讲了在sonar中如何新增自定义的JS规则，这里面比较难的地方是XPath语句的编写，而要编写正确的XPath语句，首先要拿到语法的AST，下面我们就来介绍如何使用SSLR JavaScript Toolkit 工具来得到源代码的语法树。</p>

<p>首先通过在<a href="http://repository.codehaus.org/org/codehaus/sonar-plugins/javascript/sslr-javascript-toolkit/1.3/sslr-javascript-toolkit-1.3.jar">这里</a>下载SSLR JavaScript Toolkit 工具，下载下来是一个jar包，在cmd窗口使用java -jar sslr-javascript-toolkit-1.3.jar打开这个工具，操作界面如下：<br/>
{% img  /images/02073536-58b547f5394041cdb795a717087eca35.png %}</p>

<p>左上方的窗口是用来输入你的源代码，右上方的窗口是来显示你的AST，最下面的窗口是来输入你的XPath规则。</p>

<p>我们现在左上方输入一些简单的javascript代码，然后点击 Parse Source Code按钮，可以得到源代码的语法树：</p>

<p>{% img  /images/02074124-ca30984af1704101962348b52d4a5f34.png %}</p>

<p>得到语法树后，我们也可以点击右边窗口的XML页面，得到的是语法树的XML文档。有了XML文档，就可以通过XPath轻松得到你想要的语句了。</p>

<p>举个例子：比如我想得到本地变量名，即var关键字后面的变量名，可以通过XPath的语法来查询。</p>

<p>在最下方的窗口输入XPath语法规则，点击Evaluate XPath按钮，如果语法正确，就会出现返回结果，并高亮选中你想要查询的代码，如下：</p>

<p>{% img  /images/02074943-45053229678b4effbec60cf2c363b076.png %}</p>

<p>如果语法错误，右边的窗口会给出提示，如果查询语句不正确，任何源代码都不会被选中。更多的XPath语法可以参考<a href="http://www.w3schools.com/xpath/">http://www.w3schools.com/xpath/</a>。<br/>
总结：sonar其实很早就支持了对JS的代码校验，但是你如果想自己定制校验规则，最简单的方式就是通过sonar的web接口增加XPath规则，这个需要在XPath语法上多花点力气，如果写出来的查询语法不正确，可以多试几遍，用SSLR JavaScript Toolkit 可以很方便的调试。最后祝大家都可以在sonar上配置自己的自定义规则。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用Sonar定制自定义JS扫描规则（二）——自定义JS扫描规则]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/05/19/use-sonar-create-customer-js-verify-rule-part-2/"/>
    <updated>2013-05-19T11:20:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/05/19/use-sonar-create-customer-js-verify-rule-part-2</id>
    <content type="html"><![CDATA[<p>在上一篇blog中，我们将sonar几个需要的环境都搭建好了，包括sonar的服务器，sonar runner，sonar的javascript插件。现在我们就来讲如何自定义JS扫描规则。</p>

<p>实际上有3种方法可以自定义代码的校验规则：</p>

<ul>
<li>直接在sonar的web接口中增加XPath规则；</li>
<li>通过插件的功能来增加自定义规则，比如checkstyle，pmd等插件是允许自定义规则的；</li>
<li>通过新增一个代码分析器来实现自定义规则；</li>
</ul>


<p>sonar官方推荐的方式是使用最简单的XPath方式来增加自定义规则，如果语言太复杂或者XPath无法查询其结构的，再使用自定义插件的方式，所以我们这里重点介绍的是使用XPath的方式。</p>

<h3>使用XPath增加自定义JS规则</h3>

<p>sonar为大部分流行的语言（C, C#, C++, Cobol, Flex, JavaScript, PL/I, PL/SQL, Python and VB.NET）提供了一个简洁的方式来增加代码规则。这些新增规则必须使用<a href="http://en.wikipedia.org/wiki/XPath">XPath</a>来实现，这样的话语言的每一部分都可以映射到<a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree">Abstract Syntax Tree</a>（AST）。对于每一种语言，SSLR Toolkit 工具提供了代码转AST的功能，该工具具体的使用在下面会介绍，这里是<a href="http://repository.codehaus.org/org/codehaus/sonar-plugins/javascript/sslr-javascript-toolkit/1.3/sslr-javascript-toolkit-1.3.jar">SSLR Javascript Toolkit</a>工具的下载。如果对XPath不熟悉，可以参考这里看一下例子<a href="http://www.w3schools.com/xpath/">http://www.w3schools.com/xpath/</a>。<br/>
1、首先使用管理员的角色登录sonar，然后去到Settings > Quality Profile页面，选择Js规则（如下图所示）。</p>

<p>{% img  /images/02070803-9bce5fab1bf543059071fafff2ae37d8.png %}</p>

<p>2、接着在Coding rules页面输入查询条件，找到XPath规则：</p>

<p>{% img  /images/02070943-c9a5b7732ea6478fba266555c308fc29.png %}</p>

<p>3、查询结果出来后，点击Copy rule连接来新增规则：</p>

<p>{% img  /images/02071054-da90a48498234fc19d34aff75c84a104.png %}</p>

<p>4、按照XPath的语法编写自己的规则：</p>

<p>{% img  /images/02071436-15c170e9f4eb4f6684d95df76fe6e628.png %}</p>

<p>如果对XPath不熟悉，建议先学习一些XPath的语法，下面给出3个javascript xpath的规则：</p>

<h5>不要使用document.write:</h5>

<p>{% codeblock lang:text %}
//callExpression/memberExpression[count(*) = 3 and primaryExpression[@tokenValue = &ldquo;document&rdquo;] and identifierName[@tokenValue = &ldquo;write&rdquo;]]
{% endcodeblock %}</p>

<h5>if/else语句后面必须接大括号：</h5>

<p>{% codeblock lang:text %}
//ifStatement/statement[not(block)]
{% endcodeblock %}</p>

<h5>本地变量名以XX开头：</h5>

<p>{% codeblock lang:text %}
//functionBody//variableDeclaration/IDENTIFIER[not(starts-with(@tokenValue,&lsquo;zzm&rsquo;))]
{% endcodeblock %}</p>

<p>5、创建好规则之后，把规则设置为active，将规则的级别调高一些就会自动变为active，然后重新跑一下规则分析，这样新增的规则就生效了。</p>

<p>{% img  /images/02072520-4308a5a558d04ded998bb54f452c71f7.png %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用Sonar定制自定义JS扫描规则（一）——sonar环境搭建]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/05/19/use-sonar-create-customer-js-verify-rule-part-1/"/>
    <updated>2013-05-19T11:20:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/05/19/use-sonar-create-customer-js-verify-rule-part-1</id>
    <content type="html"><![CDATA[<p>接触sonar已经有段时间了，最早是在一个项目组里面听到这个框架，后来在公司持续集成活动的推动下，也逐渐学习了sonar的具体功能。sonar集成了findbugs，pmd，checkstyle各种静态代码检查工具的功能，并且可以将各种扫描结果组合成一张张漂亮的报告，功能很是强大。下面介绍一下如何使用sonar来自定义javascrpit的扫描规则。</p>

<p>虽然使用过很多次sonar，但都是在别人搭好的环境上使用的，自己还没有真正搭建过，这里首先介绍一下sonar环境的搭建。</p>

<h3>sonar环境搭建</h3>

<p>首先到sonar官网上下载其最新版本，我下的是3.5.1。下下来是一个zip包，直接将其解压到你想要安装的目录就好了。</p>

<h4>使用H2内存数据库</h4>

<p>sonar服务的启动是要有数据库来支持的，sonar本身自带了H2内存数据库，可以直接使用。在解压目录下的conf目录下，有一个sonar.properties的配置文件是来保存sonar的配置，如果你使用的是H2数据库的话，将配置文件中的下面部分代码注释去掉即可。</p>

<p>{% codeblock sonar.properties lang:properties %}</p>

<h1>sonar.jdbc.url:                            jdbc:h2:tcp://localhost:9092/sonar</h1>

<h1>sonar.jdbc.driverClassName:                org.h2.Driver</h1>

<p>{% endcodeblock %}</p>

<p>在解压目录下的extras\database\mysql目录，有2个mysql的sql文件，其中1个是创建sonar数据库和用户的脚本，可以参照这个脚本来创建H2的sonar相关数据库和用户。</p>

<h4>使用外部数据库（以mysql为例）</h4>

<p>sonar官网强烈建议，如果你的产品只是学习或者练习用的demo，可以使用内存数据库，否则请使用外部数据库。sonar支持大部分主流的数据库，比如mysql，oracle，postgresql，Microsoft SQLServer。</p>

<p>我们以mysql为例，首先安装mysql（安装mysql的过程就不再详细描述，网上有很多），这里要注意将数据库的字符集设置为UTF-8。安装完成之后，同样修改conf目录下的sonar.properties文件，将mysql部分的配置项打开。然后在mysql中将上面提到的那个创建sonar数据库和用户脚本施行一遍。</p>

<p>{% codeblock sonar.properties lang:properties %}</p>

<h1>&mdash;&mdash;&ndash; MySQL 5.x</h1>

<h1>Comment the embedded database and uncomment the following line to use MySQL</h1>

<h1>sonar.jdbc.url:                            jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true</h1>

<p>{% endcodeblock %}</p>

<h4>启动服务</h4>

<p>数据库配置完成之后，就可以来启动web服务了，去到解压目录下的bin目录，找到自己相关系统的目录，以64位windows系统为例，目录为：bin\windows-x86-64，运行该目录下的Startsonar.bat文件，如果启动没有报错的话，就可以在浏览器中输入：<code>http://localhost:9000</code>，查看sonar的主界面了。</p>

<h3>安装Sonar Runner</h3>

<p>上面搭建的只是sonar的服务平台，如果想用sonar来分析自己项目代码的话，可以有多种方式，比如ant、maven等，而sonar官网上推荐的是使用Sonar Runner来执行分析项目的操作。</p>

<p>首先去到sonar官网下载Sonar Runner的压缩包，和sonar的压缩包一样，先解压到你要安装的目录。然后增加SONAR_RUNNER_HOME这个环境变量，变量值为你runner的解压目录，然后将$SONAR_RUNNER_HOME$/bin的加到PATH变量后面（配置过java环境变量的同学都懂的）。这样就安装完成了，打开cmd验证一下，打出sonar-runner -h，如果出现下面的提示信息，即表示你的runner安装成功了。</p>

<p>{% codeblock lang:sh %}
usage: sonar-runner [options]</p>

<p>Options:
 -h,&mdash;help             Display help information
 -X,&mdash;debug            Produce execution debug output
 -D,&mdash;define <arg>     Define property
{% endcodeblock %}</p>

<p>安装完runner以后，在你的项目根目录下，增加sonar-project.properties文件，内容如下：</p>

<p>{% codeblock sonar.properties lang:properties %}</p>

<h1>required metadata</h1>

<p>sonar.projectKey=my:project
sonar.projectName=My project
sonar.projectVersion=1.0</p>

<h1>optional description</h1>

<p>sonar.projectDescription=Fake description</p>

<h1>path to source directories (required)</h1>

<p>sonar.sources=srcDir1,srcDir2</p>

<h1>path to test source directories (optional)</h1>

<p>sonar.tests=testDir1,testDir2</p>

<h1>path to project binaries (optional), for example directory of Java bytecode</h1>

<p>sonar.binaries=binDir</p>

<h1>optional comma-separated list of paths to libraries. Only path to JAR file is supported.</h1>

<p>sonar.libraries=path/to/library/<em>.jar,path/to/specific/library/myLibrary.jar,parent/</em>/*.jar</p>

<h1>The value of the property must be the key of the language.</h1>

<p>sonar.language=java</p>

<h1>Additional parameters</h1>

<p>sonar.my.property=value
{% endcodeblock %}</p>

<p>上面的配置项根据名字和说明大概知道是做什么用的了，填上自己项目中对应的值即可。然后打开cmd窗口，去到你的项目根目录下，执行sonar-runner命令，这样sonar就开始分析你的项目代码了，分析完成之后，在浏览器中刚才那个9000端口地址的网页中就可以看到你的项目了。</p>

<h3>安装Javascript插件</h3>

<p>使用管理员的角色登录sonar，根据这个路径进入更新中心：Settings > System > Update Center。在Available Plugins窗口找到javascript插件，点击其中的install按钮进行安装（如下图所示）。安装完后重启sonar服务器即可。</p>

<p>{% img /images/01202231-c4477ac31ac3411686f1a4b98ae3ece1.png %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jenkins插件开发（四）-- 插件发布]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/02/04/jenkins-plugins-develop-part-4/"/>
    <updated>2013-02-04T20:47:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/02/04/jenkins-plugins-develop-part-4</id>
    <content type="html"><![CDATA[<p>上一篇blog介绍了插件开发中要注意的一些问题， 我们再来介绍插件开发完成后，如何上传到jenkins的插件中心（这里假设你的代码是放在github上的，使用svn或其他版本管理工具的请参考其他文章）。</p>

<h3>组织授权</h3>

<p>首先去到google group（被伟大的GFW和谐了，只能翻墙访问，如何翻墙不在这里讨论）的jenkins开发列表（jenkinsci-dev@googlegroups.com）里发帖告诉组织者，你开发的插件id是什么，插件功能是做什么的，还有你的github用户名是什么。组织者如果觉得没问题，就会在jenkins 的github上给你创建一个以你插件名称命名的代码库，然后在github上将你拉入jenkins的组织，这样就可以在这个代码库上添加你的插件代码了。如果你在github上已经有了自己插件的代码库，也可以将地址告诉组织者，这样他会fork你的代码库，如果是这样的话你需要在更新了你原仓库的代码后，再将jenkins仓库上的代码同步。</p>

<h3>修改POM文件</h3>

<p>再来是修改项目的pom文件，需要增加一些信息，这样发布的时候才可以正确显示你的插件内容。首先是你的源码控制管理配置，增加配置如下：</p>

<p>{% codeblock pom.xml lang:xml %}
  <scm></p>

<pre><code>&lt;connection&gt;scm:git:ssh://github.com/jenkinsci/MYPLLUGINNAME.git&lt;/connection&gt;
&lt;developerConnection&gt;scm:git:ssh://git@github.com/jenkinsci/MYPLUGINNAME.git&lt;/developerConnection&gt;
&lt;url&gt;https://github.com/jenkinsci/MYPLUGINNAME&lt;/url&gt;
</code></pre>

<p>  </scm>
{% endcodeblock %}</p>

<p>插件的WIKI页面（后面会说明如何添加WIKI）：</p>

<p>{% codeblock pom.xml lang:xml %}
<project>
  &hellip;
  <url><a href="http://wiki.jenkins-ci.org/display/JENKINS/My+Plugin">http://wiki.jenkins-ci.org/display/JENKINS/My+Plugin</a></url>
</project>
{% endcodeblock %}</p>

<p>还有维护人员信息：</p>

<p>{% codeblock pom.xml lang:xml %}
<project>
  &hellip;
  <developers></p>

<pre><code>&lt;developer&gt;
  &lt;id&gt;devguy&lt;/id&gt;
  &lt;name&gt;Developer Guy&lt;/name&gt;
  &lt;email&gt;devguy@developerguy.blah&lt;/email&gt;
&lt;/developer&gt;
</code></pre>

<p>  </developers>
</project>
{% endcodeblock %}</p>

<h3>发布插件</h3>

<p>最简单的方式就是执行以下命令：</p>

<p>{% codeblock lang:sh %}
 mvn release:prepare release:perform
{% endcodeblock %}</p>

<p>如果发布成功（窗口提示BUILD SUCCESS 字样）就表示你的插件已经发布到jenkins的更新中心了，不过一般要等个一到半天更新中心才会更新。</p>

<p>一般第一次发布都会有一些问题，没有那么容易成功，这里再介绍一下发布过程中容易出现的问题。</p>

<p><strong>插件版本没有以-SNAPSHOT 结尾。</strong>可能有些同学会将-SNAPSHOT结尾的版本号给改成一个正式的版本号，比如1.0，如果是这样的话，发布的时候就会报错。因为jenkins 插件发布的过程中会将你的预设版本号（比如 1.0-SNAPSHOT）改成一个正式的版本号 1.0，然后提交到代码仓库，在检查插件版本号的时候，如果发现不是预设版本号（以-SNAPSHOT结尾）就会报错，所以大家不用担心自己的插件版本号命名问题，在插件发布的时候，会自动帮你修正为正式版本号的。</p>

<p><strong>发布出错回滚。</strong>如果在插件发布的过程中出错，重新再执行上面的命令是不行的，会报版本已存在的错误，需要先执行一下下面的命令来清除出错的发布信息。</p>

<p>{% codeblock lang:sh %}
 mvn release:clean
{% endcodeblock %}</p>

<p><strong>Github 无法push。</strong>发布的过程中会使用git将你的代码push到github上，有时候会报权限不允许的问题（Permission denied），那可能是你的github配置有问题，可以参考<a href="https://help.github.com/articles/generating-ssh-keys">这里</a>来设置你的SSH或者<a href="https://help.github.com/articles/error-permission-denied-publickey">这里</a>看看是否其他问题。</p>

<h3>WIKI页面</h3>

<p>发布好了你的插件之后呢，我们需要在jenkins的官网上添加关于你插件的WIKI，以便让使用你插件的用户知道插件的信息。</p>

<p>首先要在jenkins官网上申请一个帐号，申请成功之后你就可以在插件主页上添加你的插件页面了。去到插件主页面（<a href="https://wiki.jenkins-ci.org/display/JENKINS/Plugins">https://wiki.jenkins-ci.org/display/JENKINS/Plugins</a>），点击右上角的Add链接，选择page选项，就可以进入页面编写了。<br/>
在WIKI页面中写上你的插件名称，内容要加上下面的语句：</p>

<p>{% codeblock lang:html %}
 {jenkins-plugin-info:pluginId=your-artifact}
{excerpt}  your plugin description  {excerpt}
{% endcodeblock %}</p>

<p>your-artifact要写你的插件id，这样页面就会自动去加载插件的相关信息。excerpt里面的是你插件描述，会显示在插件主页上。</p>

<p>最后是在WIKI label上加上插件的分类，比如是UI相关的插件就写plugin-UI，报告类相关的就写plugin-report，这样在插件主页上会将你的插件归到某类插件下。</p>

<p>这里介绍编写WIKI的一个小窍门，可以先进入其他插件页面，然后点击右上角的Edit链接，这样就进入了页面的编辑页面，在这里就可以看到其他插件是如何编写的，参考一下再来编写自己的WIKI页面吧。</p>

<h3>持续集成</h3>

<p>在上传你插件代码的时候，可能你会想使用持续集成来跑你的测试案例，看看上传的代码是否有破坏原有的功能。没有问题，可以使用BuildHive@CloudBees来为你Github上的代码做持续集成。</p>

<p>使用很简单，先进入这个网址<a href="https://wiki.jenkins-ci.org/display/JENKINS/Plugins">https://buildhive.cloudbees.com/job/jenkinsci/</a>，然后使用你的github帐号登录，接着勾选你想要做持续集成的github项目。这样该项目每次提交代码之后，BuildHive@CloudBees就会为你做持续集成，如果有问题的话会发邮件通知你。  <br/>
到这里，jenkins插件开发的所有介绍已经全部结束了，之前做插件开发的时候查到一些中文资料，都是一些比较入门的内容，所以自己就想写一个比较全面的介绍，希望这一系列的文章可以帮到你，谢谢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jenkins插件开发（三）-- 插件编写]]></title>
    <link href="http://zhaozhiming.github.io/blog/2013/02/03/jenkins-plugins-develop-part-3/"/>
    <updated>2013-02-03T20:18:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2013/02/03/jenkins-plugins-develop-part-3</id>
    <content type="html"><![CDATA[<p>在上一篇blog 中我们介绍了如何创建我们第一个jenkins插件，在这一篇blog继续介绍在开发我们的插件过程中需要注意的一些问题。</p>

<h3>扩展点选择</h3>

<p>Jenkings插件是基于扩展点来实现的，比如基于Builder这个扩展点，那这个插件的功能就是一个构建插件，类似ant-builder（使用ant来执行构建脚本）。Jenkins插件的扩展点有很多，具体可以查询<a href="https://wiki.jenkins-ci.org/display/JENKINS/Action+and+its+family+of+subtypes">这里</a>。该网页列出了Jenkins所有的扩展点，点击每个扩展点下面Implementations，会列出该扩展点对应的实现类。找到实现类的源码就可以知道具体怎么使用该扩展点了，大部分的代码在github上都可以找到。在前面创建的HelloWorld插件是一个基于Builder扩展点的插件，可以在job 配置页面的Build 中增加该插件，以后每次Job每次构建的时候就会去调用该插件了。</p>

<h3>Action介绍</h3>

<p>Action是插件用来在Job或Build页面增加功能的一种主要方式，是Jenkins最常用的一个扩展点。从下图中可以看出什么是Action，就是页面左边菜单栏的一个菜单项，还可以在右边的主页面显示相应的功能。</p>

<p>{% img <a href="https://wiki.jenkins-ci.org/download/thumbnails/58001011/actions.png">https://wiki.jenkins-ci.org/download/thumbnails/58001011/actions.png</a> %}</p>

<p>每个继承了Action这个扩展点的插件都要实现3个方法，方法如下：</p>

<p>{% codeblock Action.java lang:java %}
public interface Action extends hudson.model.ModelObject {</p>

<pre><code>java.lang.String getIconFileName();

java.lang.String getDisplayName();

java.lang.String getUrlName();
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>第一个是菜单项图片，第二个是菜单名称，第三个是菜单链接。</p>

<p>Action分瞬时和持久2种，这里主要介绍的是瞬时的Action。瞬时的Action可以随时废弃，让另外一个新的Action来取代，适合一些每次构建都要执行操作的插件，但不适合需要保存持久数据的插件。</p>

<p>在Jenkins官网的插件开发指南中，推荐使用Transient***ActionFactory系列的继承点， 有TransientViewActionFactory，TransientProjectActionFactory，TransientBuildActionFactory等，使用该系列的继承点，只需要简单的覆写父类的 createFor方法，就可以实现创建瞬时Action的目的，可以根据不同的需要创建Job，Build，View的Action。</p>

<p>更多内容可以参考<a href="https://wiki.jenkins-ci.org/display/JENKINS/Action+and+its+family+of+subtypes">这里</a>。</p>

<h3>Jelly页面</h3>

<p>Jenkins插件开发中涉及到页面的开发，比如Job的配置页面，相关插件需要加上相关的配置开关，配置参数时，就需要有一个配置页面来做相应的显示。插件开发中用到的页面是Jelly页面，在第一篇blog中介绍了IDEA中关于jelly的插件，使用该插件可以更加方便 Jelly页面的编写。</p>

<p>Jelly页面的简单例子就不介绍了，官网上都有，这里简单介绍一下Jelly页面相关的一些标签。与JSTL类似，Jelly也有自己的一些标签，如下：</p>

<p>{% codeblock lang:html %}
&lt;j:jelly
   xmlns:j=&ldquo;jelly:core&rdquo;
   xmlns:st=&ldquo;jelly:stapler&rdquo;
   xmlns:d=&ldquo;jelly:define&rdquo;
   xmlns:l=&ldquo;/lib/layout&rdquo;
   xmlns:t=&ldquo;/lib/hudson&rdquo;
   xmlns:f=&ldquo;/lib/form&rdquo;
   xmlns:i=&ldquo;jelly:fmt&rdquo;
   xmlns:p=&ldquo;/lib/hudson/project&rdquo;>
{% endcodeblock %}</p>

<p>比如想使用jelly:core标签，就可以在页面中直接使用 j:XX来调用标签的相关功能，其他标签同样按照这个方式来使用。其中jelly:core是常用的功能，比如设置变量，循环，判断等功能。jelly:layout是分层相关的标签，/lib/hudson是jenkins相关的功能，比如设置Job页面图标，Build页面图标等。更多标签相关的内容可以参考<a href="https://jenkins-ci.org/maven-site/jenkins-core/jelly-taglib-ref.html">这里</a>。</p>

<h3>配置文件</h3>

<p>Jenkins插件开发中还涉及到一类文件，就是配置文件。配置文件不仅可以在Jelly页面中使用，而且可以在Java文件中使用，不过在Java文件中使用的话需要先将配置文件编译成对应的Java文件。</p>

<p><strong>如何在Jelly页面中使用配置文件？</strong>首先要在Jelly页面所在的文件夹中放置配置文件，比如 页面在这里dir/myAction.jelly，那么页面对应的配置文件就应该在dir/myAction.properties。注意，配置文件名字需要和页面名字相同，这样页面才可以找到对应的配置文件。比如有个Jelly页面如下：</p>

<p>{% codeblock demo.jelly lang:html %}</p>

<pre><code>&lt;?jelly escape-by-default='true'?&gt;
&lt;j:jelly xmlns:j="jelly:core"&gt;
    &lt;th&gt;${\%allBuildsColumnHeader}&lt;/th&gt;
&lt;/j:jelly&gt;
</code></pre>

<p>{% endcodeblock %}</p>

<p>其对应的配置文件内容如下：</p>

<p>{% codeblock lang:properties %}
allBuildsColumnHeader=mean time to repair for all history
{% endcodeblock %}</p>

<p>这样配置了以后，展示Jelly 页面时就可以自动调用配置文件里面的内容了。</p>

<p><strong>如何在Java文件中使用配置文件？</strong>一般插件所用的Java配置文件名称都叫做Messages.properties，文件保存在resources目录下。比如我们的插件包结构是jenkins.plugins.myplugin，那么Messages.properties文件就保存在 resources/jenkins/plugins/myplugin/目录下。</p>

<p>如果Java 文件中想要使用配置文件里面的值，需要先执行mvn pacakge命令，执行之后，以上面的例子为例，在target目录下会产生generated-sources/localizer/jenkins/plugins/myplugin/Messages.java这个Java文件，如果配置文件里面有这样的一个配置项：</p>

<p>{% codeblock lang:properties %}
allBuildsColumnHeader=mean time to repair for all history
{% endcodeblock %}</p>

<p>那么Messages.java里面就会产生这样的2个方法：</p>

<p>{% codeblock Message.java lang:java %}
   /**</p>

<pre><code> * mean time to repair for all history
 * 
 */
public static String allBuildsColumnHeader() {
    return holder.format("allBuildsColumnHeader");
}

/**
 * mean time to repair for all history
 * 
 */
public static Localizable _allBuildsColumnHeader() {
    return new Localizable(holder, "allBuildsColumnHeader");
}
</code></pre>

<p>{% endcodeblock %}</p>

<p>这样在Java文件中就可以直接调用这2个方法了，一般是调用第一个方法。</p>

<p><strong>多语言配置。</strong>配置文件的文件名如果不带后缀就是内容是英语的配置文件，比如Messages.properties。如果想让你的插件可以在不同的国家语言下都显示正常的话，就需要将你的配置文件复制多份，在名字后面加上不同的后缀，然后内容换上相关语言的内容。</p>

<p>比如，以上面例子为例，中文的配置文件名称就是Messages_zh_CN.properties，配置文件的页面也要换上相应的中文ASCII编码，这样就可以在中文系统环境下显示中文内容了。如何将中文转ASCII码？可以直接使用Java Home里面的native2ascii命令。</p>

<h3>开发经验</h3>

<p>在开发Jenkins插件的过程中自己摸索了一些方法，在这里介绍一下，以免让其他同学走弯路。<br/>
首先是去到Jenkins的<a href="https://wiki.jenkins-ci.org/display/JENKINS/Extend+Jenkins">官网WIKI</a>。这里介绍了如何创建你的插件工程，插件扩展点，插件编码和页面如何编写等，内容比较多，但你只需要关注你需要的内容就可以了。<br/>
光看Jenkins的WIKI是不够的，有一些页面和类的用法上面没有直接给出，那肿么办呢？很简单：看源码。在github上download下jenkins的源码（<a href="https://github.com/jenkinsci/jenkins">这里</a>），在IDE里面打开Jenkins工程，比如想要查看某个jelly页面的用法，就可以在工程中搜索所有jelly页面，看看源码中的页面是怎么写的，我们再拿过来改一下就可以了。类和扩展点不知道如何写，也可以参照这个方法，通过源码了解其他扩展点子类是如何写的，然后再写出自己的插件。<br/>
可能在jenkins的源码中还是找不到扩展点的用法，那怎么办呢？这个时候可能就需要去参考其他插件是如何写的了，幸运的是，大部分插件的代码现在都放在了github上，我们可以通过了解其他插件来写出自己的插件。</p>
]]></content>
  </entry>
  
</feed>
