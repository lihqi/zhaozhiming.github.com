<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2014-08-31T16:05:02+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[让你的安卓开发更容易(一)——Intellij IDEA]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/08/31/make-your-android-dev-life-easy-part-1/"/>
    <updated>2014-08-31T10:59:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/08/31/make-your-android-dev-life-easy-part-1</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2014-8/intellijidea_android.gif"></p>

<p><blockquote><p>工欲善其事，必先利其器</p><footer><strong>孔子 ——《春秋》</strong></footer></blockquote></p>

<p>介绍一下安卓开发的一些好用工具，可以让你的开发事半功倍。如果你是一个安卓新手，那么准备一套高效率的开发工具，会让你从一开始就养成使用好工具的习惯，从开始就比别人更快；如果你是一名安卓开发高手，也可以看看这些工具，说不定你已经在使用其中的一些工具了。</p>

<!--more-->


<h2>Intellij IDEA</h2>

<p>虽然IntelliJ IDEA是一款收费的软件，但收费有它收费的道理，跟eclipse相比，它多了更多重构，代码错误提示，与更多工具集成的功能。IntelliJ IDEA被认为是当前Java开发效率最快的IDE工具，它集成了开发过程中实用的众多功能，几乎可以不用鼠标可以方便的完成你要做的任何事情，最大程度的加快开发的速度。简单而又功能强大。</p>

<p>从版本10开始，IntelliJ IDEA就集成了Android的开发功能，发展到现在版本13，不仅具备了流畅开发Android项目的能力，而且还集成了最新的构建工具Gradle，Android lint等工具。</p>

<h3>Android Hello World</h3>

<p>现在我们使用IntelliJ IDEA来创建一个使用Gradle构建的Android项目。</p>

<ul>
<li>首先点击创建新工程，在左边的项目类型栏中选择<code>Android</code>，可以看到右边有4个选项可以选，我们选择<code>Gradle: Android Mondule</code>，然后点击下面的Next;</li>
</ul>


<p><img src="/images/post/2014-8/idea-android-project-1.png"></p>

<ul>
<li>进入项目信息配置页面，可以看到有如下的选项，填写后点击Next；

<ul>
<li>Application name: 应用名</li>
<li>Module name: 模块名</li>
<li>Package name: 包名</li>
<li>Minimum required SDK: 可支持的最小Android SDK版本</li>
<li>Target SDK: 可支持的最大Android SDK版本</li>
<li>Compile with: 用哪个Android SDK版本编译</li>
<li>Theme: app主题，全黑，全白，半黑半百，是否要GridLayou，是否要action bar等</li>
</ul>
</li>
</ul>


<p><img src="/images/post/2014-8/idea-android-project-2.png"></p>

<ul>
<li>选择main_activity的样式，有9种可以选择，样式的效果在右边可以预览，我们可以选择最简单的<code>Blank Activity</code>，选择好了Next；</li>
</ul>


<p><img src="/images/post/2014-8/idea-android-project-3.png"></p>

<ul>
<li>填写Activity名字和对应的展示层layout名字，填完Next；</li>
</ul>


<p><img src="/images/post/2014-8/idea-android-project-4.png"></p>

<ul>
<li>填写工程名和选择工程文件路径，注意最下面的<code>Project format</code>，有2种格式，一种是<code>.idea</code>文件夹，一个是ipr文件，选择ipr文件的方式可以减少很多文件的生成，最后Finish；</li>
</ul>


<p><img src="/images/post/2014-8/idea-android-project-5.png"></p>

<p>生成的代码如下:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MainActivity.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">ActionBarActivity</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onCreateOptionsMenu</span><span class="o">(</span><span class="n">Menu</span> <span class="n">menu</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Inflate the menu; this adds items to the action bar if it is present.</span>
</span><span class='line'>    <span class="n">getMenuInflater</span><span class="o">().</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">menu</span><span class="o">.</span><span class="na">main</span><span class="o">,</span> <span class="n">menu</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onOptionsItemSelected</span><span class="o">(</span><span class="n">MenuItem</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Handle action bar item clicks here. The action bar will</span>
</span><span class='line'>    <span class="c1">// automatically handle clicks on the Home/Up button, so long</span>
</span><span class='line'>    <span class="c1">// as you specify a parent activity in AndroidManifest.xml.</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="na">getItemId</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">id</span> <span class="o">==</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">action_settings</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onOptionsItemSelected</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>activity_main.xml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="ni">&amp;lt;</span>RelativeLayout xmlns:android=<span class="ni">&amp;ldquo;</span><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span><span class="nt">&gt;</span>http://schemas.android.com/apk/res/android<span class="nt">&lt;/a&gt;</span><span class="ni">&amp;rdquo;</span><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>xmlns:tools=&quot;http://schemas.android.com/tools&quot;
</span><span class='line'>android:layout_width=&quot;match_parent&quot;
</span><span class='line'>android:layout_height=&quot;match_parent&quot;
</span><span class='line'>android:paddingLeft=&quot;@dimen/activity_horizontal_margin&quot;
</span><span class='line'>android:paddingRight=&quot;@dimen/activity_horizontal_margin&quot;
</span><span class='line'>android:paddingTop=&quot;@dimen/activity_vertical_margin&quot;
</span><span class='line'>android:paddingBottom=&quot;@dimen/activity_vertical_margin&quot;
</span><span class='line'>tools:context=&quot;com.github.zzm.myapplication1.app.MainActivity&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="ni">&amp;lt;</span>TextView
</span><span class='line'>    android:text=&quot;@string/hello_world&quot;
</span><span class='line'>    android:layout_width=&quot;wrap_content&quot;
</span><span class='line'>    android:layout_height=&quot;wrap_content&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>运行的效果如下:</p>

<p><img src="/images/post/2014-8/idea-android-project-6.png" width="250" height="350"></p>

<h3>Gradle脚本</h3>

<p>可以看到工程目录下有2个build.gradle脚本，一个是根目录的构建文件(如下)，如果想提高构建速度，可以将脚本中的mavenCentral()改为<code>maven {url "http://maven.oschina.net/content/groups/public/"}</code>，就是将maven的国外镜像库改成国内的库。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>root/build.gradle </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="c1">// Top-level build file where you can add configuration options common to all sub-projects/modules.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">buildscript</span> <span class="o">{&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;repositories {</span>
</span><span class='line'><span class="s">    mavenCentral()</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">dependencies {</span>
</span><span class='line'><span class="s">    classpath &#39;com.android.tools.build:gradle:0.9.+&#39;</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="s">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">allprojects</span> <span class="o">{&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;repositories {</span>
</span><span class='line'><span class="s">    mavenCentral()</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>另外一个是app目录下的构建文件，可以看到指定了sdk的最小最大版本，需要的依赖包等。<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/build.gradle </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;repositories {</span>
</span><span class='line'><span class="s">    mavenCentral()</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">dependencies {</span>
</span><span class='line'><span class="s">    classpath &#39;com.android.tools.build:gradle:0.9.+&#39;</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="s">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;}</span>
</span><span class='line'><span class="s">apply plugin: &amp;lsquo;android&amp;rsquo;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">repositories</span> <span class="o">{&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;mavenCentral()</span>
</span><span class='line'><span class="s">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="s">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">android</span> <span class="o">{&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;compileSdkVersion 20</span>
</span><span class='line'><span class="s">buildToolsVersion &quot;20.0.0&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s">defaultConfig {</span>
</span><span class='line'><span class="s">    minSdkVersion 8</span>
</span><span class='line'><span class="s">    targetSdkVersion 20</span>
</span><span class='line'><span class="s">    versionCode 1</span>
</span><span class='line'><span class="s">    versionName &quot;1.0&quot;</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">buildTypes {</span>
</span><span class='line'><span class="s">    release {</span>
</span><span class='line'><span class="s">        runProguard false</span>
</span><span class='line'><span class="s">        proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.txt&#39;</span>
</span><span class='line'><span class="s">    }</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="s">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">dependencies</span> <span class="o">{&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])</span>
</span><span class='line'><span class="s">compile &#39;com.android.support:appcompat-v7:20.0.0&#39;</span>
</span><span class='line'><span class="s">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="s">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让路由飞越长城(二)]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/08/30/let-the-router-cross-great-wall-part-2/"/>
    <updated>2014-08-30T19:30:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/08/30/let-the-router-cross-great-wall-part-2</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2014-8/greatefw.jpg"></p>

<p>配置好了高级的路由器，安装了dd-wrt版本的固件，现在还不忙着让路由器翻墙，先在一台机器上测试能通过新路由器能正常上网和翻墙，可以了之后我们再来配置路由器的翻墙功能。</p>

<!--more-->


<h3>VPN</h3>

<p>翻墙基本是两种方式:SSH和VPN。SSH是在浏览器上连接国外的服务器从而可以浏览被和谐的网站，而VPN是让整个设备的网络都连上国外的服务器，包括浏览器和其他任何软件。VPN的好处是可以让其他软件更快速地连接国外服务器，比如要下载android的sdk，国内网络经常半天没有反应，翻墙后下载速度就快多了，但缺点也比较明显，就是访问国内网站的时候会比较慢，使用国内软件比如QQ的时候时不时会掉线。</p>

<p>这里有个比较好的VPN推荐一下<a href="http://www.strongvpn.com/">Strong VPN</a>(需要翻墙才能访问)，这个是一个美国比较好的VPN，连接稳定，访问快速，24小时技术支持，价格也比较合适，有个55美刀/年的套餐，支持PPTP,L2TP和SSTP连接。国内的VPN和SSH我用了几个都不大满意，不是有些网站不能上，就是经常掉线连不上。如果有米的话，还可以去租VPS(虚拟专用服务器)，自己搭VPN服务，那速度绝对比直接买的VPN快，甚至还可以自己卖VPN账号。</p>

<p>不管怎样，我们需要一个VPN账号，而且可以支持PPTP连接的，下面会用到。</p>

<p><img src="/images/post/2014-8/strong-vpn.png"></p>

<h3><a href="https://code.google.com/p/autoddvpn/">autoddvpn</a>(需要翻墙才能访问)</h3>

<p>autoddvpn是一个解决方案，主要有下面几大功能:</p>

<ul>
<li>让你的dd-wrt路由器可以自由翻墙，路由下的所有设备仿佛在墙外一样，完全感觉不到墙的存在；</li>
<li>智能路由，可以自动判断访问的网站是墙内还是墙外的，如果是墙内的就不走VPN，如果是墙外的走VPN；</li>
<li>守护进程，监控你的VPN服务是否正常，如果VPN断了可以随时重连。</li>
</ul>


<p>autoddvpn有2种设置模式:传统模式(classicMode)和优雅模式(graceMode)，这里我们主要介绍<a href="https://code.google.com/p/autoddvpn/wiki/graceMode">graceMode</a>。在gracemode中，我们主要看PPTP这一块的内容，因为我们的VPN账号只支持PPTP，不支持OpenVPN(Strong VPN支持PPTP,L2TP,SSTP连接，但dd-wrt不支持L2TP和SSTP)。</p>

<ul>
<li>首先开启路由器的<a href="https://code.google.com/p/autoddvpn/wiki/jffs">JFFS</a>，这样可以将我们的脚本放到jffs里面(jffs我理解是一块可以挂载的小硬盘)；</li>
<li>接着按照文档设置DNS(<a href="https://code.google.com/p/autoddvpn/wiki/graceMode#%E8%A8%AD%E7%BD%AE%E6%96%B9%E5%BC%8F(%E4%BB%A5PPTP%E7%82%BA%E4%BE%8B)">PPTP设置</a>)；</li>
<li>ssh或telnet到你的路由器，登录名和密码是你刷了dd-wrt版本后进入web页面设置的用户名和密码；</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>telnet 192.168.11.1
</span><span class='line'>Trying 192.168.11.1&amp;hellip;
</span><span class='line'>Connected to 192.168.1.1.
</span><span class='line'>Escape character is &amp;lsquo;^<span class="o">]</span>&amp;rsquo;.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;DD-WRT v24-sp2 std &amp;copy; 2014 NewMedia-NET GmbH
</span><span class='line'>Release: 06/23/14 <span class="o">(</span>SVN revision: 24461<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;DD-WRT login: root&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Password: &lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; | _ <span class="se">\|</span> _ <span class="se">\ </span>  <span class="se">\ \ </span>     / /  _ _   &lt;em&gt;| __   &lt;/em&gt;|&lt;em&gt;&lt;strong&gt; <span class="se">\|</span> <span class="o">||</span> |
</span><span class='line'> <span class="o">||</span> | <span class="o">||</span> <span class="o">||</span>&lt;/strong&gt;__<span class="se">\ \ </span>/<span class="se">\ </span>/ /| |&lt;/em&gt;<span class="o">)</span> <span class="o">||</span> |   <span class="se">\ \ </span>/ / &lt;strong&gt;<span class="o">)</span> | <span class="o">||</span> |&lt;em&gt;
</span><span class='line'> <span class="o">||</span>&lt;/em&gt;| <span class="o">||</span>&lt;em&gt;||&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;<span class="se">\ </span>V  V / |  _ &amp;lt; | |    <span class="se">\ </span>V / / &lt;/strong&gt;/|&lt;strong&gt;   &lt;em&gt;|
</span><span class='line'> |&lt;/em&gt;&lt;/strong&gt;/|&lt;strong&gt;&lt;em&gt;/      _/_/  |&lt;/em&gt;| _<span class="se">\|</span>&lt;em&gt;|     _/ |&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;_|  |&lt;/em&gt;|&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                   DD-WRT v24-sp2
</span><span class='line'>               http://www.dd-wrt.com
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">==========================================================</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;BusyBox v1.22.1 <span class="o">(</span>2014-06-23 03:23:41 CEST<span class="o">)</span> built-in shell <span class="o">(</span>ash<span class="o">)</span>
</span><span class='line'>Enter &amp;lsquo;help&amp;rsquo; <span class="k">for </span>a list of built-in commands.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;root@DD-WRT:~#
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>登陆后执行下面的命令；</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;mkdir /jffs/pptp&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;cd /jffs/pptp&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;wget &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://autoddvpn.googlecode.com/svn/trunk/grace.d/vpnup.sh&quot;</span>&gt;http://autoddvpn.googlecode.com/svn/trunk/grace.d/vpnup.sh&lt;/a&gt;&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;wget &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://autoddvpn.googlecode.com/svn/trunk/grace.d/vpndown.sh&quot;</span>&gt;http://autoddvpn.googlecode.com/svn/trunk/grace.d/vpndown.sh&lt;/a&gt;&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;wget &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://autoddvpn.googlecode.com/svn/trunk/pptp/jffs/run.sh&quot;</span>&gt;http://autoddvpn.googlecode.com/svn/trunk/pptp/jffs/run.sh&lt;/a&gt;&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;chmod a+x *.sh&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;nvram <span class="nb">set </span><span class="nv">rc_startup</span><span class="o">=</span>&amp;lsquo;/jffs/pptp/run.sh&amp;rsquo;&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;nvram commit&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>一般执行上面的wget命令都是不行的，因为autoddvpn网站要翻墙才能访问，所以可以在pptp目录下创建那3个脚本文件，然后将网站上脚本的内容copy到脚本文件里面，命令更新如下。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;mkdir /jffs/pptp&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;cd /jffs/pptp&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;touch vpnup.sh&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;touch vpndown.sh&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;touch run.sh&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;&amp;hellip;直接从网站上复制脚本内容，再拷贝到文件里面&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;chmod a+x *.sh&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;nvram <span class="nb">set </span><span class="nv">rc_startup</span><span class="o">=</span>&amp;lsquo;/jffs/pptp/run.sh&amp;rsquo;&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;nvram commit&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>参考<a href="https://code.google.com/p/autoddvpn/wiki/HOWTO#%E8%A8%AD%E7%BD%AEPPTP_client">文档</a>的<code>设置PPTP client</code>部分进行dd-wrt的PPTP客户端设置;</li>
<li>重启dd-wrt路由器，启动后会产生一个Log文件<code>/tmp/autoddvpn.log 這是autoddvpn的log</code>;</li>
<li>最后关于守护进程的脚本，autoddvpn没有提供，其实就是定时检查一下PPTP连接是否通的，不通的话就重连，下面给一个openvpn的检查脚本，pptp的上网自己查一下；</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/jffs/pptp/openvpnDaemon.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/sh&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ISRUN<span class="o">=</span>&lt;code&gt;ps|grep <span class="s2">&quot;openvpn&quot;</span>|wc -l&lt;/code&gt;
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$ISRUN</span> -lt 4 <span class="o">]]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="nb">echo</span> &amp;ldquo;Not running, start!&amp;rdquo;
</span><span class='line'>openvpn &amp;mdash;config /jffs/openvpn/openvpn.conf &amp;mdash;daemon
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="nb">echo</span> &amp;ldquo;Openvpn is already running.&amp;rdquo;
</span><span class='line'><span class="nb">exit</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后在dd-wrt的web界面的“管理”->“管理”下启用Cron，并且在附加任务中输入：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>*/2 * * * * /jffs/openvpn/openvpnDaemon.sh
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>悬而未决的问题——PPTP无法连接</h3>

<p>可能有的人使用VPN进行PPTP连接时会发现连接不上，在windows下是报一个<code>806</code>的异常，这种可能是你的ISP(网络服务提供商——电信或联通)没有提供这个服务，这种情况下还不知道怎么解决。在网上查过不少资料，说什么设置路由器的PPTP穿透功能，配置1723端口开启等，这些都没有什么效果，希望有高手告知这种情况要怎么解决。谢谢</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让路由飞越长城(一)]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/08/29/let-the-router-cross-great-wall-part-1/"/>
    <updated>2014-08-29T21:13:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/08/29/let-the-router-cross-great-wall-part-1</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2014-8/greatefw.jpeg"></p>

<p>最近GFW貌似升级了，现在连Google也无法访问，开发用百度实在搜不到什么东西，用bing也各种不爽(用了几天自己都快病了)。虽说可以用SSH，VPN翻墙，但家里的电子设备如果比较多，要一个一个设置起来就会比较麻烦，如果能在路由器上翻墙就好了，这样只要设备只需要接入路由器的WIFI就可以自动翻墙，无需任何设置。</p>

<!--more-->


<h3>可以刷固件的路由器</h3>

<p>要实现路由器翻墙，首先需要一个高级的路由器，这种路由器可以刷一些路由器固件（固件我理解就是路由器的操作系统，一般是基于Linux的），我们后面需要在固件上通过脚本配置实现翻墙。我是基于DD-WRT这个固件进行路由翻墙的，所以我选择可以刷DD-WRT固件的路由器，这里有<a href="http://www.dd-wrt.com/wiki/index.php/Supported_Devices">网页</a>可以参考.</p>

<p>我在网上参考了一些资料，觉得Buffalo(巴法洛)的路由器比较好，大部分实现了路由器翻墙的介绍文章都是使用Buffalo的，所以向大家也推荐这个牌子，我用的型号是WZR-HP-G300NH2，淘宝上卖400多。</p>

<p>使用了Buffalo的路由器后，感觉要比以前用的那些路由快很多，同样是打开百度（百度最大的功能，测网络联通）速度明显感觉不一样。</p>

<p><img src="/images/post/2014-8/WZR-HP-G300NH2.jpg"></p>

<h3><a href="http://www.dd-wrt.com">DD-WRT</a></h3>

<p>路由器的固件其实不只dd-wrt一种，还有<a href="http://www.polarcloud.com/tomato">Tomato</a>也是一种比较流行的路由器固件，两种固件各有优劣，网上有很多它们的比较，这里就不说了。</p>

<p>dd-wrt对应不同品牌的路由器有不同的固件版本，每个品牌的不同型号也会对应不同的固件版本，要在这么多版本中查找到自己想要的固件版本，需要登录到dd-wrt的官网进行选择。</p>

<p>进入官网首页后，点击Router Database模块，然后在输入框中输入路由器型号，就可以看到对应的dd-wrt版本记录。</p>

<p><img src="/images/post/2014-8/dd-wrt-1.png"></p>

<p>点击查询出来的版本记录，会出现固件版本的详细说明和下载链接。</p>

<p><img src="/images/post/2014-8/dd-wrt-2.png"></p>

<p>这里有2个固件可供选择(不同型号的固件名称会有不同，这里是以我的路由器型号举例):</p>

<ul>
<li>buffalo_to_ddwrt_webflash-MULTI.bin是指你的路由器固件不是dd-wrt的，需要把固件升级成dd-wrt。</li>
<li>wzr-hp-g300nh2-dd-wrt-webupgrade-MULTI.bin是说你的固件已经是dd-wrt了，但固件版本太老了要升级。</li>
</ul>


<p>用上面的方法查出来的固件版本其实不是最新的，这里有个dd-wrt版本的<a href="ftp://ftp.dd-wrt.com/betas/">ftp链接</a>，打开连接后，可以看到不同年份的目录，进入某个目录后可以看到不同品牌的路由器的目录，比如<code>ftp://ftp.dd-wrt.com/betas/2014/06-23-2014-r24461/buffalo_wzr-hp-g300nh2/</code>，这里就是最新的固件版本了。</p>

<h3>升级路由器固件</h3>

<p>其实Buffalo也有自己官方的dd-wrt版本，但看网上介绍buffalo官方的dd-wrt版本功能不行，所以建议还是刷正式的dd-wrt版本。在dd-wrt官网上可以看到路由器固件的<a href="http://www.dd-wrt.com/wiki/index.php/Installation">安装介绍</a>(这里是WZR-HP-G300NH2的<a href="http://dd-wrt.com/wiki/index.php/Buffalo_WZR-HP-G300NH">安装介绍</a>），但个人感觉里面的说明太复杂，什么30/30/30硬复位大法，TFTP刷新法等看不大明白，同时也怕太复杂导致失误操作让路由器变砖头。</p>

<p>最简单的方式是在你的路由器的web管理页面直接升级（我只试过Buffalo的，其他的路由器我没试过）:</p>

<ul>
<li>打开浏览器进入<code>192.168.1.1</code>，如果你的路由器是连接电信路由器网口的，可能ip地址不是这个；</li>
<li>输入用户名密码后，进入管理配置页面，点击其中的更新，选择dd-wrt的固件文件打开。</li>
<li>点击<strong>更新固件</strong>按钮，然后大概等个5~6分钟，等看到100%完成，路由器会自动重启；</li>
<li>重新进入<code>192.168.1.1</code>，可以看到变成dd-wrt的管理页面了，首次登陆需要输入用户名和密码。</li>
</ul>


<p><img src="/images/post/2014-8/dd-wrt-3.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Robot Framework结合Spring进行uat测试]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/06/19/robot-framework-uat-test-with-spring/"/>
    <updated>2014-06-19T21:50:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/06/19/robot-framework-uat-test-with-spring</id>
    <content type="html"><![CDATA[<p>在做项目过程中，单元测试是大家经常接触的也是了解的比较多的，但单元测试有时候为了更快的运行，会mock掉数据库或者关联系统来执行测试，这样的话整体的功能就得不到验证，另外单元测试也无法进行页面比如html的测试，这个时候就需要进行UAT自动化测试了。</p>

<!--more-->


<p></p>

<p><a href="http://baike.baidu.com/view/1330235.htm?fromTaglist">UAT</a>，(User Acceptance Test),用户接受度测试，即验收测试，这种一般是手工测试，当然重复进行手动测试是一种选择，但如果手工测试很多的话每次执行就比较浪费时间和精力，而且也容易遗漏和出错，所以我们需要将手工测试进行自动化。</p>

<h2><a href="http://robotframework.org/">Robot Framework</a></h2>

<p>Robot是一个自动化测试框架，其可以使用的Lib很多，简单地安装即可使用，也可以自己通过Python和Java来开发自己需要的Lib包，不过现在robot的Lib已经比较多了，可以满足大部分的使用场景。</p>

<h4>安装</h4>

<p>Robot安装十分简单，但首先要安装Python环境（Python安装这里不介绍了，请自行google了解），然后执行以下语句进行安装。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo pip install robotframework
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>安装完成后验证是否安装成功。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>pybot &amp;mdash;version
</span><span class='line'>Robot Framework 2.8.5 <span class="o">(</span>Python 2.7.3 on linux2<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>如果需要安装其他Lib包，同样是通过pip进行安装，下面以安装Selenium2Library为例。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo pip install robotframework_Selenium2Library
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Robot脚本</h4>

<p>Robot安装完成后，就可以开始编写测试脚本了，下面是测试脚本和Resource文件的例子:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>create_recipient.robot</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='robotframework'><span class='line'><span class="c">&lt;strong&gt;&lt;em&gt; Settings &lt;/em&gt;&lt;/strong&gt;</span><span class="p"></span>
</span><span class='line'><span class="c">Library</span><span class="p">    </span><span class="c">Selenium2Library</span><span class="p"></span>
</span><span class='line'><span class="c">Library</span><span class="p">    </span><span class="c">DatabaseLibrary</span><span class="p"></span>
</span><span class='line'><span class="c">Resource</span><span class="p">   </span><span class="c">resource.robot</span><span class="p"></span>
</span><span class='line'><span class="c">Test Setup</span><span class="p">      </span><span class="c">Open Browser</span><span class="p">  </span><span class="c">${baseurl}/#/recipients</span><span class="p">  </span><span class="c">${browser}</span><span class="p"></span>
</span><span class='line'><span class="c">Test Teardown</span><span class="p">   </span><span class="c">Close Browser&lt;/p&gt;</span><span class="p"></span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;p&gt;&lt;strong&gt;&lt;em&gt; TestCases &lt;/em&gt;&lt;/strong&gt;</span><span class="p"></span>
</span><span class='line'><span class="c">create new recipient&lt;/p&gt;</span><span class="p"></span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;pre&gt;&lt;code&gt;Given execute sql</span><span class="p">  </span><span class="c">delete from recipients where email=&#39;zhaozhiming003@gmail.com&#39;</span><span class="p"></span>
</span><span class='line'><span class="c">When create recipient</span><span class="p"></span>
</span><span class='line'><span class="c">Then verify create recipient</span><span class="p">  </span><span class="c">添加用户成功</span><span class="p"></span>
</span><span class='line'><span class="c">&lt;/code&gt;&lt;/pre&gt;</span><span class="p"></span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;p&gt;create exist recipient&lt;/p&gt;</span><span class="p"></span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;pre&gt;&lt;code&gt;Given execute sql</span><span class="p">  </span><span class="c">delete from recipients where email=&#39;zhaozhiming003@gmail.com&#39;</span><span class="p"></span>
</span><span class='line'><span class="c">Given execute sql</span><span class="p">  </span><span class="c">insert into recipients(username,email) values(&#39;zhaozhiming&#39;,&#39;zhaozhiming003@gmail.com&#39;)</span><span class="p"></span>
</span><span class='line'><span class="c">When create recipient</span><span class="p"></span>
</span><span class='line'><span class="c">Then verify create recipient</span><span class="p">  </span><span class="c">添加用户失败</span><span class="p"></span>
</span><span class='line'><span class="c">&lt;/code&gt;&lt;/pre&gt;</span><span class="p"></span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;p&gt;&lt;strong&gt;&lt;em&gt; Keywords &lt;/em&gt;&lt;/strong&gt;</span><span class="p"></span>
</span><span class='line'><span class="c">execute sql&lt;/p&gt;</span><span class="p"></span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;pre&gt;&lt;code&gt;[Arguments]</span><span class="p">  </span><span class="c">${sql}</span><span class="p"></span>
</span><span class='line'><span class="c">Connect To Database Using Custom Params</span><span class="p">      </span><span class="c">cymysql</span><span class="p">    </span><span class="c">db=&#39;${dbname}&#39;,user=&#39;${dbuser}&#39;,passwd=&#39;${dbpassword}&#39;, host=&#39;${dbhost}&#39;,port=${dbport}</span><span class="p"></span>
</span><span class='line'><span class="c">Execute Sql String</span><span class="p">    </span><span class="c">${sql}</span><span class="p"></span>
</span><span class='line'><span class="c">Disconnect from database</span><span class="p"></span>
</span><span class='line'><span class="c">&lt;/code&gt;&lt;/pre&gt;</span><span class="p"></span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;p&gt;create recipient&lt;/p&gt;</span><span class="p"></span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;pre&gt;&lt;code&gt;Input text</span><span class="p">    </span><span class="c">username</span><span class="p">    </span><span class="c">zhaozhiming</span><span class="p"></span>
</span><span class='line'><span class="c">Input text</span><span class="p">    </span><span class="c">email</span><span class="p">    </span><span class="c">zhaozhiming003@gmail.com</span><span class="p"></span>
</span><span class='line'><span class="c">click element</span><span class="p">  </span><span class="c">css=.submit</span><span class="p"></span>
</span><span class='line'><span class="c">&lt;/code&gt;&lt;/pre&gt;</span><span class="p"></span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;p&gt;verify create recipient&lt;/p&gt;</span><span class="p"></span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;pre&gt;&lt;code&gt;[Arguments]</span><span class="p">  </span><span class="c">${expectContent}</span><span class="p"></span>
</span><span class='line'><span class="c">sleep</span><span class="p">   </span><span class="c">2s</span><span class="p"></span>
</span><span class='line'><span class="c">page should contain</span><span class="p">  </span><span class="c">${expectContent}</span><span class="p"></span>
</span><span class='line'><span class="c">&lt;/code&gt;&lt;/pre&gt;</span><span class="p"></span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;p&gt;</span><span class="p"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>resource.robot</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='robotframework'><span class='line'><span class="c">&lt;strong&gt;&lt;em&gt; Variables &lt;/em&gt;&lt;/strong&gt;</span><span class="p"></span>
</span><span class='line'><span class="c">${baseurl}</span><span class="p">  </span><span class="c">&lt;a href=&quot;http://localhost:9898/oddemail&quot;&gt;http://localhost:9898/oddemail&lt;/a&gt;</span><span class="p"></span>
</span><span class='line'><span class="c">${dbhost}</span><span class="p">  </span><span class="c">localhost</span><span class="p"></span>
</span><span class='line'><span class="c">${dbport}</span><span class="p">  </span><span class="c">3306</span><span class="p"></span>
</span><span class='line'><span class="c">${dbname}</span><span class="p">  </span><span class="c">oms</span><span class="p"></span>
</span><span class='line'><span class="c">${dbuser}</span><span class="p">  </span><span class="c">root</span><span class="p"></span>
</span><span class='line'><span class="c">${dbpassword}</span><span class="p">  </span><span class="c">root</span><span class="p"></span>
</span><span class='line'><span class="c">${browser}</span><span class="p">  </span><span class="c">chrome</span><span class="p"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><p>Settings下面是测试脚本需要引用的Lib包名，Resource文件，Setup和Teardown方法。</p>

<ul>
<li>Resource文件可以用来存放一些可以复用的变量，当然也可以将这一部分放到测试脚本中。</li>
<li>Setup和Teardow跟单元测试一样，是在跑每个Test Case之前和之后会做的事情。注意上面例子里面打开url指定了浏览器Chrome，如果不指定浏览器的话会默认用Firefox打开，如果想使用Chrome来进行web自动化测试的话，则需要下载Chrome驱动<a href="https://code.google.com/p/selenium/wiki/ChromeDriver">chromedriver</a>，下载完后将其解压并设置到PATH路径。</li>
</ul>
</li>
<li><p>TestCases设置了脚本里的测试案例，每个测试案例可以由Given，When，Then组成，每一行除开这几个关键字就是测试案例的步骤，在robot里面叫关键字，关键字可以带参数，可以把关键字理解为程序里面的方法。</p></li>
<li><p>Keywords就是在Test Case里面定义的关键字了，里面有是每个关键字具体的执行内容。</p>

<ul>
<li><code>execute sql</code>这个关键字的内容是连接数据库，执行sql，关闭数据库连接。</li>
<li><code>create recipient</code>这个关键字的内容是在页面输入用户名，输入邮箱地址，点击提交按钮。注意这里的页面元素是通过class来查找的，也可以通过id，tag或其他。</li>
<li><code>verify create recipient</code>这个关键字的内容是等待2秒，验证页面是否包含期望的内容。</li>
</ul>
</li>
</ul>


<p>可以看到Keyword的每个内容描述都很简单易懂，甚至还可以写中文，让不懂开发的人也知道你的测试案例是做什么的。</p>

<h4>执行脚本</h4>

<p>因为这个测试案例是对web页面进行测试，所以在执行测试案例之前需要先将应用服务启起来，服务启起来后，执行下面的 语句:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>pybot /your/robot/scripts/path/create_recipient.robot
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>执行完后会看到系统自动打开浏览器，输入url，自动填写输入框，并验证是否正确，最后会产生几个报告文件，如果测试案例失败，还会自动将失败的页面截图存成文件。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Output:  /home/kingzzm/projects/odde-mail-server/output.xml
</span><span class='line'>Log:     /home/kingzzm/projects/odde-mail-server/log.html
</span><span class='line'>Report:  /home/kingzzm/projects/odde-mail-server/report.html
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>另外建议脚本存放到test目录下，建议目录结构如下:</p>

<p><img src="/images/post/2014-6/robot_script_local.png"></p>

<h4>与Gradle集成</h4>

<p>每次跑robot测试都需要手动启一个web服务比较麻烦，可以考虑在Gradle中通过任务的方式来执行robot测试，在跑测试之前先通过gradle启一个本地应用，然后开始跑robot测试，跑完测试后通过Gradle停掉本地服务。<br/>
因为Gradle自带jetty容器，所以这一步实现起来也比较简单:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">[</span><span class="n">jettyRun</span><span class="o">,</span> <span class="n">jettyStop</span><span class="o">]&lt;</span><span class="n">em</span><span class="o">&gt;.</span><span class="na">stopPort</span> <span class="o">=</span> <span class="mi">7654</span>
</span><span class='line'><span class="o">[</span><span class="n">jettyRun</span><span class="o">,</span> <span class="n">jettyStop</span><span class="o">]&lt;</span><span class="s">/em&gt;.stopKey = &amp;lsquo;oddemail&amp;rsquo;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">task</span> <span class="n">uat</span><span class="o">(</span><span class="nl">type:</span><span class="n">Exec</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="n">jettyRun</span><span class="o">)</span> <span class="o">{&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;commandLine &#39;/</span><span class="n">usr</span><span class="s">/local/</span><span class="n">bin</span><span class="s">/pybot&#39;, &#39;src/</span><span class="n">test</span><span class="s">/uat/</span><span class="n">testcase</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">doLast</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">jettyStop</span><span class="o">.</span><span class="na">execute</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>以后需要跑uat测试就执行<code>gradle uat</code>这个命令就可以了，这样还可以结合jenkins进行uat自动化测试。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于Spring MVC做单元测试（二）——使用JMockit]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/06/17/spring-mvc-unit-test-part-2/"/>
    <updated>2014-06-17T12:24:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/06/17/spring-mvc-unit-test-part-2</id>
    <content type="html"><![CDATA[<p>上一篇Post讲了如何使用Spring的Test框架来进行单元测试，但在运行单元测试的时候有一个问题，就是每次跑单元测试都需要加载一下配置文件，或者启动web容器，这样的单元测试跑起来就不能达到快的目的。下面再介绍一下通过JMockit这个Java Mock工具来进行spring的单元测试，其特点是不需指定spring的配置文件，任何对象都可以mock出来并进行关联。</p>

<!--more-->


<p></p>

<h2>Controller</h2>

<p>首先我们还是来看一下使用了JMockit的Controller单元测试是怎么写的，Controller的功能代码可以查看上一篇post。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.model.Result</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.service.MailService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mockit.Expectations</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mockit.Injectable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mockit.Tested</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mockit.integration.junit4.JMockit</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">CoreMatchers</span><span class="o">.</span><span class="na">is</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@RunWith</span><span class="o">(</span><span class="n">JMockit</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MailControllerTest</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Tested</span>
</span><span class='line'><span class="n">MailController</span> <span class="n">mailController</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Injectable</span>
</span><span class='line'><span class="kd">private</span> <span class="n">MailService</span> <span class="n">mailService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_return_status_success_when_send_mail_success</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Expectations</span><span class="o">()</span> <span class="o">{</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mailService</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">&quot;test@test.com&quot;</span><span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Result</span><span class="o">(</span><span class="s">&quot;成功&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mailController</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="s">&quot;test@test.com&quot;</span><span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">,</span> <span class="s">&quot;test&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;{\&quot;status\&quot;:\&quot;成功\&quot;}&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>@RunWith(JMockit.class): 指定单元测试的执行类为JMockit.class;</li>
<li>@Tested: 这个Annotate是指被测试类，在这个测试案例中我们要测试的是MailController，所以我们给其打上这个标签;</li>
<li>@Injectable: 这个Annotate可以将对象进行mock并自动关联到被测试类，而不需要通过其他文件类似spring的配置文件等来进行关联;</li>
<li>@Expectations: mock对象mailService的send方法，让其返回一个Result对象;</li>
</ul>


<p>做完上面这些基本就可以了，后面的被测方法调用和验证都跟原来的一样。这样看起来是不是比原来的单元测试代码少了一些，也更简洁了一些，最重要的一点是这样的单元测试不依赖spring的bean定义文件，不需要启动web服务，执行起来速度很快。</p>

<h2>Service</h2>

<p>再来看一下Service的单元测试要怎么改写，同样Service的功能代码可以看上一篇Post。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.model.Recipient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.model.Result</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.odde.mail.repo.RecipientRepository</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mockit.Injectable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mockit.NonStrictExpectations</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mockit.Tested</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mockit.integration.junit4.JMockit</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">Is</span><span class="o">.</span><span class="na">is</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@RunWith</span><span class="o">(</span><span class="n">JMockit</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RecipientServiceTest</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Tested</span>
</span><span class='line'><span class="kd">private</span> <span class="n">RecipientService</span> <span class="n">recipientService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Injectable</span>
</span><span class='line'><span class="kd">private</span> <span class="n">RecipientRepository</span> <span class="n">recipientRepository</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_return_success_when_add_recipient_not_exist</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Result</span> <span class="n">result</span> <span class="o">=</span> <span class="n">recipientService</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;Tom&quot;</span><span class="o">,</span> <span class="s">&quot;test@test.com&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">getStatus</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;成功&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>相对Controller Test这里少了一步对recipientRepository对象findByEmail方法的mock，因为如果不通过Expectations进行方法mock的话，方法会默认返回null，而我们要测试的场景正是需要findByEmail方法返回null，所以mock方法这一步我们也省了。<br/>
改写后的整体代码也比原来的少了很多，而且速度更快。</p>

<h2>适当使用Mock框架</h2>

<p>JMockit功能非常强大，不仅可以轻松处理上面的这些测试场景，还可以对static,final,private等方法进行mock，可以让你的单元测试毫无阻碍的进行。<br/>
但是如果过度的使用Mock框架，会让功能代码的坏味道被掩盖。本来单元测试的设计可以让你发现功能代码上的一些设计是否合理，比如有没有紧耦合等，但使用JMockit可以让你在设计不合理的代码上也可以轻松地进行单元测试，这样你就很难发现功能代码上的问题了。<br/>
所以建议JMockit等类似的mock框架还是要谨慎使用，首先要保证功能代码设计合理，满足面向对象设计的要求，再来考虑提高单元测试效率的问题。</p>
]]></content>
  </entry>
  
</feed>
