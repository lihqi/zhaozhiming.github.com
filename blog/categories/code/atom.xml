<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2014-05-31T12:06:20+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[最近小项目的一些记录（二）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/05/31/some-tips-in-my-recent-project-2/"/>
    <updated>2014-05-31T10:40:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/05/31/some-tips-in-my-recent-project-2</id>
    <content type="html"><![CDATA[<p><a href="http://zhaozhiming.github.io/blog/2014/05/31/some-tips-in-my-recent-project/">前一篇post</a>主要记录了Spring JPA和Hibernate的问题，接着记录其他一些工具遇到的问题。</p>

<!--more-->


<p></p>

<h2>Jsoup</h2>

<p><a href="https://github.com/jhy/jsoup">Jsoup</a>是一个比较火的Java解析Html工具，简单易用，功能强大，在github上有不少星星。</p>

<h3>使用Jsoup连接url时报403</h3>

<p>一般使用Jsoup连接url都不会有什么问题，正常的写法如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Jsoup</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>但有些网站会获取用户的浏览器信息，而上面的写法是没有浏览器信息的，这个时候就会报403的错误，需要在连接时加上userAngent。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Jsoup</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="na">userAgent</span><span class="o">(</span><span class="s">&quot;Mozilla&quot;</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Css Selector</h3>

<p>使用Jsoup来抓取网页信息，最简单的一种方式就是通过Css selector，这样可以让你少写很多代码。比如下面的一段html:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>div id=&quot;main&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>div class=&quot;header&quot;<span class="ni">&amp;gt;&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>使用css selector可以这样简单的获得。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">doc</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="s">&quot;#main div.header&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Velocity</h2>

<p>项目用到了Velocity来定制邮件模板，这样可以方便的修改邮件格式。在网上可以搜到很多关于Spring和Velocity集成的文章，但大部分是讲如何使用Velocity来生成页面的，而如何生成其他文件的说明比较少，下面我们就来看一下如何配置的。</p>

<ul>
<li><p>先配置velocityConfigurer的bean，这里定义了模板文件的路径，属性和编码等信息。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;velocityConfigurer&quot;</span>
</span><span class='line'>        <span class="na">class=</span><span class="s">&quot;org.springframework.web.servlet.view.velocity.VelocityConfigurer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;resourceLoaderPath&quot;</span> <span class="na">value=</span><span class="s">&quot;WEB-INF/velocity&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;velocityProperties&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;props&gt;</span>
</span><span class='line'>              <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;directive.foreach.counter.name&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                  loopCounter
</span><span class='line'>              <span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>              <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;directive.foreach.counter.initial.value&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                  0
</span><span class='line'>              <span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>              <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;input.encoding&quot;</span><span class="nt">&gt;</span>UTF-8<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>              <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&quot;output.encoding&quot;</span><span class="nt">&gt;</span>UTF-8<span class="nt">&lt;/prop&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/props&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>在需要使用的Sevice里面引入，这样就可以在service里面使用到Velocity的配置信息了。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Service</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MailService</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Resource</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">velocityConfigurer</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">VelocityConfigurer</span> <span class="n">velocityConfigurer</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span> <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>使用Velocity的工具类来得到生成的文件信息。</p>

<ul>
<li>temple是模板文件的名称。</li>
<li>model是生成文件所需的参数。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">content</span> <span class="o">=</span> <span class="n">VelocityEngineUtils</span><span class="o">.</span><span class="na">mergeTemplateIntoString</span><span class="o">(</span>
</span><span class='line'>          <span class="n">velocityConfigurer</span><span class="o">.</span><span class="na">getVelocityEngine</span><span class="o">(),</span> <span class="n">temple</span><span class="o">,</span>
</span><span class='line'>          <span class="n">MAIL_ENCODING</span><span class="o">,</span> <span class="n">model</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ul>
</li>
</ul>


<h3>Angularjs</h3>

<p>Angularjs功能比较强大，使用它之后基本可以不用使用JQuery了，这里记录一下使用遇到的一个比较奇怪的问题。</p>

<ul>
<li>问题: 使用Angularjs发起一个post请求，带了几个请求的参数，后台接收请求时获取不到参数。开始的写法如下：</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">queryData</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;depGroup&quot;</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#dep_group&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;website&quot;</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#website&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;startDate&quot;</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#start_date&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;endDate&quot;</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#end_date&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="o">||</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;api/search&#39;</span><span class="p">,</span> <span class="nx">queryData</span><span class="p">).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">$scope</span><span class="p">.</span><span class="nx">blogs</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>接收不到参数的原因是angularjs把参数转成了json导致后台接收不到，需要在发起请求时将参数转换一下，修改后的代码如下：</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">postConfig</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span> <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;application/x-www-form-urlencoded; charset=UTF-8&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="nx">transformRequest</span><span class="o">:</span> <span class="nx">transform</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;api/search&#39;</span><span class="p">,</span> <span class="nx">queryData</span><span class="err">，</span><span class="nx">postConfig</span><span class="p">).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">$scope</span><span class="p">.</span><span class="nx">blogs</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Semantic-ui</h3>

<p>这个是我比较喜欢的一个css框架，这里要注意的地方是有些功能和Angularjs结合起来会发现不起作用，如果不起作用可以尝试使用<a href="https://github.com/caitp/angular-semantic">angular-semantic</a>这个工具看看能否解决问题。</p>

<ul>
<li>semantic-ui的表单规则和行为设置，简单的示例如下，需要设置规则(rules)和配置(setting即校验通过后的行为)。</li>
</ul>


<p>js代码:<br/>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">rules</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">searchKeyword</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">identifier</span><span class="o">:</span> <span class="s1">&#39;searchKeyword&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">rules</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;empty&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">prompt</span><span class="o">:</span> <span class="s1">&#39;请输入查询关键字&#39;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">setting</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">onSuccess</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 发http请求</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#searchForm&#39;</span><span class="p">).</span><span class="nx">form</span><span class="p">(</span><span class="nx">rules</span><span class="p">,</span> <span class="nx">setting</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>html代码:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>div id=&quot;searchForm&quot; class=&quot;ui form&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>div class=&quot;two fields&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>div class=&quot;field&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>div class=&quot;ui icon input&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>input id=&quot;searchKeyword&quot; type=&quot;text&quot; name=&quot;searchKeyword&quot; placeholder=&quot;请输入查询关键字...&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>                <span class="ni">&amp;lt;</span>i class=&quot;search icon&quot;<span class="ni">&amp;gt;&amp;lt;</span>/i<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="ni">&amp;lt;</span>div class=&quot;field&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'>            <span class="ni">&amp;lt;</span>div id=&quot;searchBtn&quot; class=&quot;ui blue submit button&quot;<span class="ni">&amp;gt;</span>查询<span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'>        <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>div class=&quot;ui error message&quot;<span class="ni">&amp;gt;&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/div<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近小项目的一些记录（一）]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/05/31/some-tips-in-my-recent-project/"/>
    <updated>2014-05-31T09:09:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/05/31/some-tips-in-my-recent-project</id>
    <content type="html"><![CDATA[<p>最近花了2个星期的时间做了一个小网站，用来统计部门同事发布的博客情况。需求比较简单，做这个项目的时候就顺便把以前学到的东西整合到了一起，从前端到后台，从编码到部署（“全栈工程师”？呵呵），虽然事情比较琐碎但也学到了不少东西，下面就记录一下开发过程中遇到的一些问题。</p>

<!--more-->


<p></p>

<h2>技术栈</h2>

<p>这里先列举一下项目用到的一些技术，其实这些东西就是自己的工具箱，要慢慢丰富，要及时更新，这样才能做出来好东西。</p>

<ul>
<li>Spring4 MVC</li>
<li>Hibernate orm</li>
<li>Spring Data JPA</li>
<li>AngularJS(Javascript MVW Framework)</li>
<li>Semantic UI(CSS Framework)</li>
<li>Velocity(for mail)</li>
<li>Gradle</li>
<li>SAE(Sina App Engine)</li>
</ul>


<h2>Spring JPA</h2>

<p>项目遇到不少的问题都来自JPA，也有一部分原因是由于SAE的MySql数据库是读写分离的两个库，所以要配置多个数据源才能在上面正常读写数据。<br/>
JPA有个好处就是操作数据库时不用写太多代码，不用像以前一样写一个接口再写一个实现，只需要一个接口就可以完成基本的操作了，如果有特殊的操作则可以通过标签的方式来写sql。</p>

<h3>Spring JPA配置多个persistence-unit(或多个数据源）</h3>

<ul>
<li><p>首先增加JPA的多persistence-unit的管理Bean。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;persistenceUnitManager&quot;</span>
</span><span class='line'>        <span class="na">class=</span><span class="s">&quot;org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;persistenceXmlLocation&quot;</span> <span class="na">value=</span><span class="s">&quot;classpath:META-INF/persistence.xml&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="c">&lt;!--  comment dataSourceLooup to use jndi --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;dataSourceLookup&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.jdbc.datasource.lookup.BeanFactoryDataSourceLookup&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>然后配置多套DataSource，EntityManagerFactory，TransactionManger和jpa:repository，这里要重点注意jps:repository的配置也要有多套，否则启动就会报<code>No unique bean of type [javax.persistence.EntityManagerFactory] is defined: expected single bean but found 2</code>的错误。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="c">&lt;!--write persistence unit config--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;writeJpaVendor&quot;</span>
</span><span class='line'>        <span class="na">class=</span><span class="s">&quot;org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;showSql&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;generateDdl&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/bean&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;writeDataSource&quot;</span> <span class="na">class=</span><span class="s">&quot;com.mchange.v2.c3p0.ComboPooledDataSource &quot;</span> <span class="na">destroy-method=</span><span class="s">&quot;close&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;driverClass&quot;</span> <span class="na">value=</span><span class="s">&quot;com.mysql.jdbc.Driver&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;jdbcUrl&quot;</span> <span class="na">value=</span><span class="s">&quot;jdbc:mysql://localhost:3306/deblog&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;user&quot;</span> <span class="na">value=</span><span class="s">&quot;root&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">value=</span><span class="s">&quot;root&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;acquireIncrement&quot;</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;initialPoolSize&quot;</span> <span class="na">value=</span><span class="s">&quot;5&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxPoolSize&quot;</span> <span class="na">value=</span><span class="s">&quot;20&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;minPoolSize&quot;</span> <span class="na">value=</span><span class="s">&quot;5&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxStatements&quot;</span> <span class="na">value=</span><span class="s">&quot;100&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;testConnectionOnCheckout&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/bean&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;writeEntityManagerFactory&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;persistenceUnitManager&quot;</span> <span class="na">ref=</span><span class="s">&quot;persistenceUnitManager&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;persistenceUnitName&quot;</span> <span class="na">value=</span><span class="s">&quot;mainPersistenceUnit&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;jpaVendorAdapter&quot;</span> <span class="na">ref=</span><span class="s">&quot;writeJpaVendor&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;loadTimeWeaver&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;jpaDialect&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.orm.jpa.vendor.HibernateJpaDialect&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/bean&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;writeTransactionManager&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.orm.jpa.JpaTransactionManager&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;entityManagerFactory&quot;</span> <span class="na">ref=</span><span class="s">&quot;writeEntityManagerFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;qualifier</span> <span class="na">value=</span><span class="s">&quot;writeEm&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;jpaDialect&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;org.springframework.orm.jpa.vendor.HibernateJpaDialect&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/bean&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="ni">&amp;lt;</span>jpa:repositories base-package=<span class="ni">&amp;ldquo;</span>com.github.dba.repo.write<span class="ni">&amp;rdquo;</span>
</span><span class='line'>                    entity-manager-factory-ref=<span class="ni">&amp;ldquo;</span>writeEntityManagerFactory<span class="ni">&amp;rdquo;</span>
</span><span class='line'>                    transaction-manager-ref=<span class="ni">&amp;ldquo;</span>writeTransactionManager<span class="ni">&amp;rdquo;</span> /&gt;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="ni">&amp;lt;</span>tx:annotation-driven transaction-manager=<span class="ni">&amp;ldquo;</span>writeTransactionManager<span class="ni">&amp;rdquo;</span>/&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>在persistence.xml文件中增加多个unit,这里以一个unit为例，多个的话只要persistence-unit的name不一样就可以了。下面的例子引用了之前的datasource的配置，可以不需要再配置一次jdbc信息。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="ni">&amp;lt;</span>persistence-unit name=<span class="ni">&amp;ldquo;</span>mainPersistenceUnit<span class="ni">&amp;rdquo;</span> transaction-type=<span class="ni">&amp;ldquo;</span>RESOURCE_LOCAL<span class="ni">&amp;rdquo;</span>&gt;
</span><span class='line'>      <span class="nt">&lt;provider&gt;</span>org.hibernate.ejb.HibernatePersistence<span class="nt">&lt;/provider&gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>non-jta-data-source&gt;writeDataSource<span class="ni">&amp;lt;</span>/non-jta-data-source&gt;
</span><span class='line'>      <span class="nt">&lt;class&gt;</span>com.github.dba.model.Blog<span class="nt">&lt;/class&gt;</span>
</span><span class='line'>      <span class="nt">&lt;class&gt;</span>com.github.dba.model.DepGroup<span class="nt">&lt;/class&gt;</span>
</span><span class='line'>      <span class="nt">&lt;class&gt;</span>com.github.dba.model.DepMember<span class="nt">&lt;/class&gt;</span>
</span><span class='line'>      <span class="nt">&lt;class&gt;</span>com.github.dba.model.BlogView<span class="nt">&lt;/class&gt;</span>
</span><span class='line'>      <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>          <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;javax.persistence.jdbc.driver&quot;</span> <span class="na">value=</span><span class="s">&quot;com.mysql.jdbc.Driver&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;javax.persistence.jdbc.url&quot;</span> <span class="na">value=</span><span class="s">&quot;jdbc:mysql://localhost:3306/deblog&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;javax.persistence.jdbc.user&quot;</span> <span class="na">value=</span><span class="s">&quot;root&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;javax.persistence.jdbc.password&quot;</span> <span class="na">value=</span><span class="s">&quot;root&quot;</span> <span class="nt">/&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>      <span class="ni">&amp;lt;</span>property name=&quot;hibernate.dialect&quot; value=&quot;org.hibernate.dialect.MySQLDialect&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>property name=&quot;hibernate.show_sql&quot; value=&quot;true&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'>      <span class="ni">&amp;lt;</span>property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;update&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>/properties<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="ni">&amp;lt;</span>/persistence-unit&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>


<h3>Spring JPA动态查询</h3>

<ul>
<li>首先在model类中增加一个静态方法，用来生成本次查询的动态条件。

<ul>
<li>下面的例子假设depGroup, website, startDate, endDate都可能有值。</li>
<li>where中的"=&ldquo;,&rdquo;&lt;&ldquo;,&rdquo;>&ldquo;可以在CriteriaBuilder中找到相应的方法，还有比如like等。</li>
<li>如果是嵌套对象的话，比如Blog对象包含Author对象，要对比Author对象的值，则可以用这种方式来取值: <code>root.&lt;Author&gt;get("author").&lt;String&gt;get("groupName")</code>。</li>
</ul>
</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="n">Specification</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Blog</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">querySpecification</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">depGroup</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">website</span><span class="o">,</span>
</span><span class='line'>                                                     <span class="kd">final</span> <span class="n">String</span> <span class="n">startDate</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">endDate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Specifications</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="k">new</span> <span class="n">Specification</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Blog</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Predicate</span> <span class="nf">toPredicate</span><span class="o">(</span><span class="n">Root</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Blog</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">root</span><span class="o">,</span> <span class="n">CriteriaQuery</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;?&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">query</span><span class="o">,</span> <span class="n">CriteriaBuilder</span> <span class="n">cb</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Predicate</span> <span class="n">predicate</span> <span class="o">=</span> <span class="n">cb</span><span class="o">.</span><span class="na">conjunction</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">Strings</span><span class="o">.</span><span class="na">isNullOrEmpty</span><span class="o">(</span><span class="n">depGroup</span><span class="o">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="o">!</span><span class="s">&quot;*&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">depGroup</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">predicate</span><span class="o">.</span><span class="na">getExpressions</span><span class="o">().</span><span class="na">add</span><span class="o">(</span>
</span><span class='line'>                        <span class="n">cb</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">root</span><span class="o">.&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Author</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;author&quot;</span><span class="o">).&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;groupName&quot;</span><span class="o">),</span> <span class="n">depGroup</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">Strings</span><span class="o">.</span><span class="na">isNullOrEmpty</span><span class="o">(</span><span class="n">website</span><span class="o">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="o">!</span><span class="s">&quot;*&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">website</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">predicate</span><span class="o">.</span><span class="na">getExpressions</span><span class="o">().</span><span class="na">add</span><span class="o">(</span>
</span><span class='line'>                        <span class="n">cb</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">root</span><span class="o">.&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;website&quot;</span><span class="o">),</span> <span class="n">website</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">Strings</span><span class="o">.</span><span class="na">isNullOrEmpty</span><span class="o">(</span><span class="n">startDate</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="kt">long</span> <span class="n">time</span> <span class="o">=</span> <span class="n">DbaUtil</span><span class="o">.</span><span class="na">parseTimeStringToLong</span><span class="o">(</span><span class="n">startDate</span><span class="o">,</span> <span class="n">PAGE_DATE_FORMAT</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">predicate</span><span class="o">.</span><span class="na">getExpressions</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">cb</span><span class="o">.</span><span class="na">ge</span><span class="o">(</span><span class="n">root</span><span class="o">.&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Long</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;time&quot;</span><span class="o">),</span> <span class="n">time</span><span class="o">));</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ParseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="s">&quot;%s parse to date error:&quot;</span><span class="o">,</span> <span class="n">startDate</span><span class="o">));</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">Strings</span><span class="o">.</span><span class="na">isNullOrEmpty</span><span class="o">(</span><span class="n">endDate</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="kt">long</span> <span class="n">time</span> <span class="o">=</span> <span class="n">DbaUtil</span><span class="o">.</span><span class="na">parseTimeStringToLong</span><span class="o">(</span><span class="n">endDate</span><span class="o">,</span> <span class="n">PAGE_DATE_FORMAT</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">predicate</span><span class="o">.</span><span class="na">getExpressions</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">cb</span><span class="o">.</span><span class="na">le</span><span class="o">(</span><span class="n">root</span><span class="o">.&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Long</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;time&quot;</span><span class="o">),</span> <span class="n">time</span><span class="o">));</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ParseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="s">&quot;%s parse to date error:&quot;</span><span class="o">,</span> <span class="n">endDate</span><span class="o">));</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="n">predicate</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>写好了动态查询条件后，就要把它放到查询语句里面了，比如要查询所有数据，示例如下，例子还加了一个对时间的排序条件。<br/>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Blog</span><span class="o">&gt;</span> <span class="n">blogs</span> <span class="o">=</span> <span class="n">blogReadRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">(</span>
</span><span class='line'>              <span class="n">Blog</span><span class="o">.</span><span class="na">querySpecification</span><span class="o">(</span><span class="n">depGroup</span><span class="o">,</span> <span class="n">website</span><span class="o">,</span> <span class="n">startDate</span><span class="o">,</span> <span class="n">endDate</span><span class="o">),</span>
</span><span class='line'>              <span class="k">new</span> <span class="nf">Sort</span><span class="o">(</span><span class="n">Sort</span><span class="o">.</span><span class="na">Direction</span><span class="o">.</span><span class="na">DESC</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">time</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ul>


<h3>嵌套对象</h3>

<p>这个可能跟JPA没有多大关系，更多是跟Hibernate有关，但都属于db层面的，就写在一起了。</p>

<p>比如有张表是Blog，这样用Hibernate-orm对应到程序就有一个Blog类，如果Blog属性比较多的话，后续就会变成了一个大类。我们想在数据库只对应一张表的情况下，可以对应到程序的多个类，比如Blog类下面有个Author的类，要怎么做呢？可以用<code>@Embedded</code>标签来解决这个问题。<br/>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Entity</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">blogs</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Blog</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Id</span>
</span><span class='line'><span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="n">GenerationType</span><span class="o">.</span><span class="na">AUTO</span><span class="o">)</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Embedded</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Author</span> <span class="n">author</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@Embeddable</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Author</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Basic</span>
</span><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
分离成多个对象的话，有个好处就是可以在不同的model添加不同的逻辑计算，避免把所有逻辑都放在一个类里面，这也是面向对象设计时要考虑的一个问题。但数据库始终只对应一张表，操作简单。</p>

<p>下一篇: <a href="http://zhaozhiming.github.io/blog/2014/05/31/some-tips-in-my-recent-project-2/">最近小项目的一些记录（二）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis集群环境安装指南]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/05/11/redis-cluster-env-create/"/>
    <updated>2014-05-11T20:50:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/05/11/redis-cluster-env-create</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2014-5/redis-cluster.jpg"></p>

<h3>环境</h3>

<p>RHLinux-6.4-64-EN, 红帽6.4 64位，英文正式发布版。</p>

<!--more-->


<p></p>

<h3>Redis3.0.0</h3>

<ul>
<li>redis2.x版本还不支持集群，3.0版本将会支持，现在3.0版本还在开发中，现在是beta-3版本(截止2014-5-8)，但功能是可用的。</li>
<li>下载Redis3.0.0 beta-3版本，点击<a href="https://github.com/antirez/redis/archive/3.0.0-beta3.tar.gz">这里</a>下载。</li>
<li>Redis3的安装可以参照之前的<a href="http://10.42.173.13/zhaozhiming003/redis-poc/blob/master/doc/redis_install.md">单机安装指南</a>操作。</li>
</ul>


<h3>创建Redis集群实例</h3>

<ul>
<li>创建集群节点的文件夹，先创建cluster-test文件夹，再以端口为名称创建子文件夹。这里我们要创建6个Redis实例，3个作为master，3个作为slave。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir cluster-test
</span><span class='line'><span class="nb">cd </span>cluster-test
</span><span class='line'>mkdir 7000 7001 7002 7003 7004 7005
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>在每个文件夹下面创建创建Redis配置文件，注意根据不同实例的端口号修改下面的配置文件，nodes.conf文件为Redis实例启动时自动生成。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>port 7000
</span><span class='line'>cluster-enabled yes
</span><span class='line'>cluster-config-file nodes.conf
</span><span class='line'>cluster-node-timeout 5000
</span><span class='line'>appendonly yes
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>开6个terminal窗口，分别启动这6个Redis实例。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>7000
</span><span class='line'>../redis-server ./redis.conf
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>当成功启动后，能看到每个terminal出现下面的字样，是因为node.conf文件不存在，所以给每个实例分配了一个新的ID。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>82462<span class="o">]</span> 26 Nov 11:56:55.329 * No cluster configuration found, I&amp;rsquo;m 97a3a64667477371c4479320d683e4c8db5858b1
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>创建集群</h3>

<ul>
<li>现在Redis的6个实例都已经启动了，现在来开始创建集群。创建集群用到了一个ruby文件，放在redis3目录的src子目录下，找到后执行以下命令。这里的<code>-replicas 1</code>表示每个master配备1个slave，后面的参数就是6个实例的ip加端口，以空格隔开。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>redis-3.0.0-beta3/src
</span><span class='line'>./redis-trib.rb create &amp;mdash;replicas 1 127.0.0.1:7000 127.0.0.1:7001 <span class="se">\</span>
</span><span class='line'>127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>执行命令后会提示你是否接受提示的配置信息，默认的是前3台作为master机器，后3台作为slave机器，输入<code>yes</code>，出现最后的信息表示集群已经创建好了。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Creating cluster
</span><span class='line'>Connecting to node 127.0.0.1:7000: OK
</span><span class='line'>Connecting to node 127.0.0.1:7001: OK
</span><span class='line'>Connecting to node 127.0.0.1:7002: OK
</span><span class='line'>Connecting to node 127.0.0.1:7003: OK
</span><span class='line'>Connecting to node 127.0.0.1:7004: OK
</span><span class='line'>Connecting to node 127.0.0.1:7005: OK &gt;&gt;&gt;
</span><span class='line'>Performing <span class="nb">hash </span>slots allocation on 6 nodes&amp;hellip;
</span><span class='line'>Using 3 masters: 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002
</span><span class='line'>127.0.0.1:7000 replica <span class="c">#1 is 127.0.0.1:7003</span>
</span><span class='line'>127.0.0.1:7001 replica <span class="c">#1 is 127.0.0.1:7004</span>
</span><span class='line'>127.0.0.1:7002 replica <span class="c">#1 is 127.0.0.1:7005</span>
</span><span class='line'>M: 9991306f0e50640a5684f1958fd754b38fa034c9 127.0.0.1:7000 slots:0-5460 <span class="o">(</span>5461 slots<span class="o">)</span> master
</span><span class='line'>M: e68e52cee0550f558b03b342f2f0354d2b8a083b 127.0.0.1:7001 slots:5461-10921 <span class="o">(</span>5461 slots<span class="o">)</span> master
</span><span class='line'>M: 393c6df5eb4b4cec323f0e4ca961c8b256e3460a 127.0.0.1:7002 slots:10922-16383 <span class="o">(</span>5462 slots<span class="o">)</span> master
</span><span class='line'>S: 48b728dbcedff6bf056231eb44990b7d1c35c3e0 127.0.0.1:7003
</span><span class='line'>S: 345ede084ac784a5c030a0387f8aaa9edfc59af3 127.0.0.1:7004
</span><span class='line'>S: 3375be2ccc321932e8853234ffa87ee9fde973ff 127.0.0.1:7005
</span><span class='line'>Can I <span class="nb">set </span>the above configuration? <span class="o">(</span><span class="nb">type</span> &amp;lsquo;yes&amp;rsquo; to accept<span class="o">)</span>: yes&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Nodes configuration updated &gt;&gt;&gt;
</span><span class='line'>Sending CLUSTER MEET messages to join the cluster Waiting <span class="k">for </span>the cluster to join&amp;hellip; &gt;&gt;&gt;
</span><span class='line'>Performing Cluster Check <span class="o">(</span>using node 127.0.0.1:7000<span class="o">)</span>
</span><span class='line'>M: ebbb890e899244e4a2a6303826a29543ebf9885d 127.0.0.1:7000
</span><span class='line'>   slots:0-5460 <span class="o">(</span>5461 slots<span class="o">)</span> master
</span><span class='line'>M: ebbb890e899244e4a2a6303826a29543ebf9885d 127.0.0.1:7001
</span><span class='line'>   slots:5461-10922 <span class="o">(</span>5462 slots<span class="o">)</span> master
</span><span class='line'>M: 73c22198cd1d0782ec24e3c9b03378030891c9a3 127.0.0.1:7002
</span><span class='line'>   slots:10923-16383 <span class="o">(</span>5461 slots<span class="o">)</span> master
</span><span class='line'>M: c785d85b95d7bdc28ec90384ab8a5885b289542c 127.0.0.1:7003
</span><span class='line'>   slots: <span class="o">(</span>0 slots<span class="o">)</span> master
</span><span class='line'>   replicates b949ea2d9c822ff069521a354b4ed48855ac6203
</span><span class='line'>M: 570c472fe553ba3c9d0fb3ba16fcdb8579b4fc86 127.0.0.1:7004
</span><span class='line'>   slots: <span class="o">(</span>0 slots<span class="o">)</span> master
</span><span class='line'>   replicates ebbb890e899244e4a2a6303826a29543ebf9885d
</span><span class='line'>M: f86667ec42cff41a5666162a912713173f5306d7 127.0.0.1:7005
</span><span class='line'>   slots: <span class="o">(</span>0 slots<span class="o">)</span> master
</span><span class='line'>   replicates 73c22198cd1d0782ec24e3c9b03378030891c9a3
</span><span class='line'><span class="o">[</span>OK<span class="o">]</span> All nodes agree about slots configuration.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;blockquote&gt;&lt;blockquote&gt;&lt;blockquote&gt;&lt;p&gt;Check <span class="k">for </span>open slots&amp;hellip;
</span><span class='line'>Check slots coverage&amp;hellip;
</span><span class='line'><span class="o">[</span>OK<span class="o">]</span> All 16384 slots covered.
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote></blockquote></blockquote>

<p>PS: 安装过程还发现RedHat系统上没有安装ruby，需要先安装ruby，而且公司机器还不能上网下载安装，只能通过离线的方式安装ruby，这里有离线安装的文档可以参考一下:<a href="https://rvm.io/rvm/offline">https://rvm.io/rvm/offline</a>。</p>

<h3>验证</h3>

<p>可以使用Redis3.0的redis-cli客户端进行验证，需要加上<code>-c</code>参数，表示集群的意思。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>redis-cli -c -p 7000
</span><span class='line'>redis 127.0.0.1:7000&gt; <span class="nb">set </span>foo bar
</span><span class='line'>&amp;ndash;&gt; Redirected to slot <span class="o">[</span>12182<span class="o">]</span> located at 127.0.0.1:7002
</span><span class='line'>OK
</span><span class='line'>redis 127.0.0.1:7002&gt; <span class="nb">set </span>hello world
</span><span class='line'>&amp;ndash;&gt; Redirected to slot <span class="o">[</span>866<span class="o">]</span> located at 127.0.0.1:7000
</span><span class='line'>OK
</span><span class='line'>redis 127.0.0.1:7000&gt; get foo
</span><span class='line'>&amp;ndash;&gt; Redirected to slot <span class="o">[</span>12182<span class="o">]</span> located at 127.0.0.1:7002
</span><span class='line'>&amp;ldquo;bar&amp;rdquo;
</span><span class='line'>redis 127.0.0.1:7000&gt; get hello
</span><span class='line'>&amp;ndash;&gt; Redirected to slot <span class="o">[</span>866<span class="o">]</span> located at 127.0.0.1:7000
</span><span class='line'>&amp;ldquo;world&amp;rdquo;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>更多的资料可以参考这里：<a href="http://redis.io/topics/cluster-tutorial">http://redis.io/topics/cluster-tutorial</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Red Hat系统安装Redis]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/05/07/redis-install-guide-in-redhat/"/>
    <updated>2014-05-07T19:53:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/05/07/redis-install-guide-in-redhat</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2014-5/redis.jpg"></p>

<!--more-->


<p></p>

<h2>环境</h2>

<p>RHLinux-6.4-64-EN, 红帽6.4 64位，英文正式发布版</p>

<h2>安装</h2>

<p>安装很简单，先下载redis的压缩包，下载地址见<a href="http://redis.io/download">这里</a>，然后拷贝到你的linux机器，接着执行下面的命令。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tar xzf redis-2.6.14.tar.gz
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>redis-2.6.14
</span><span class='line'><span class="nv">$ </span>make
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>启动</h2>

<p>编译完后增加了src目录，执行src下面的redis-server脚本即可启动redis服务。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>src/redis-server
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>调试</h2>

<p>执行src目录下的redis-cli脚本，这个是redis的客户端。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>src/redis-cli
</span><span class='line'>redis&gt; <span class="nb">set </span>foo bar
</span><span class='line'>OK
</span><span class='line'>redis&gt; get foo
</span><span class='line'>&amp;ldquo;bar&amp;rdquo;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>java调用</h2>

<ol>
<li>Redis比较出名的java客户端是jedis，先下载jedis的jar包，可以去maven库搜下jedis就可以下载到，源码是放在github上：<a href="https://github.com/xetorthio/jedis">https://github.com/xetorthio/jedis</a>。</li>
<li>简单写个main方法就可以调用。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Jedis</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="mf">10.20</span><span class="o">.</span><span class="mf">8.39</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span> <span class="c1">//redis服务器的ip，端口默认6379</span>
</span><span class='line'>     <span class="n">jedis</span><span class="o">.</span><span class="na">set</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">foo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">bar</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'>     <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">jedis</span><span class="o">.</span><span class="na">get</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">foo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;);</span>
</span><span class='line'>     <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ol>


<h2>后台进程</h2>

<p>之前的启动方式不是后台进程方式的，终端关了服务也就停了，可以使用下面的命令将Redis作为后台进程启动，并添加到系统启动命名中。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>redis-2.6.14/utils
</span><span class='line'><span class="nv">$.</span>/install_server
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>执行命令后，会提示你回答几个问题，可以一路回车过去，选择默认设置。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Please <span class="k">select </span>the redis port <span class="k">for </span>this instance: <span class="o">[</span>6379<span class="o">]</span>
</span><span class='line'>Selecting default: 6379
</span><span class='line'>Please <span class="k">select </span>the redis config file name <span class="o">[</span>/etc/redis/6379.conf<span class="o">]</span>
</span><span class='line'>Selected default &amp;ndash; /etc/redis/6379.conf
</span><span class='line'>Please <span class="k">select </span>the redis log file name <span class="o">[</span>/var/log/redis_6379.log<span class="o">]</span>
</span><span class='line'>Selected default &amp;ndash; /var/log/redis_6379.log
</span><span class='line'>Please <span class="k">select </span>the data directory <span class="k">for </span>this instance <span class="o">[</span>/var/lib/redis/6379<span class="o">]</span>
</span><span class='line'>Selected default &amp;ndash; /var/lib/redis/6379
</span><span class='line'>Please <span class="k">select </span>the redis executable path <span class="o">[</span>/usr/local/bin/redis-server<span class="o">]</span>
</span><span class='line'>&amp;hellip;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>后续可以通过下面的方式启停服务。<br/>
1. /etc/init.d/redis_6379 start &mdash;启动<br/>
2. /etc/init.d/redis_6379 stop &mdash;服务<br/>
当然也可在/usr/local/bin目录下使用redis-server来启动。</p>

<p><strong>PS: 我在执行install_server脚本后，发现服务启动不起来，查看/etc/init.d/redis_6379这个文件发现里面的换行符号被替换成了<code>/n</code>符号，手动将这些符号替换成换行就可以了。</strong></p>

<h2>更多资料</h2>

<p>更多资料可以看这里：<a href="http://redis.io/">http://redis.io/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[swift源码详解（三）——proxy/controllers/base.py]]></title>
    <link href="http://zhaozhiming.github.io/blog/2014/05/04/swift-code-explain-3-proxy-controllers-base/"/>
    <updated>2014-05-04T21:36:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2014/05/04/swift-code-explain-3-proxy-controllers-base</id>
    <content type="html"><![CDATA[<h2><a href="http://zhaozhiming.github.io/blog/2014/04/19/swift-code-explain-total/">回swift代码结构目录</a></h2>

<h3>update_headers</h3>

<!--more-->


<p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">update_headers</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="n">headers</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Helper function to update headers in the response.</span>
</span><span class='line'>
</span><span class='line'><span class="s">:param response: swob.Response object</span>
</span><span class='line'><span class="s">:param headers: dictionary headers</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="s">&#39;items&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="n">headers</span> <span class="o">=</span> <span class="n">headers</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
</span><span class='line'><span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="s">&#39;etag&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;&quot;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;date&#39;</span><span class="p">,</span> <span class="s">&#39;content-length&#39;</span><span class="p">,</span> <span class="s">&#39;content-type&#39;</span><span class="p">,</span>
</span><span class='line'>                      <span class="s">&#39;connection&#39;</span><span class="p">,</span> <span class="s">&#39;x-put-timestamp&#39;</span><span class="p">,</span> <span class="s">&#39;x-delete-after&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 更新response的header。
* 查看headers中是否'items'属性，有的话给headers赋值。
* 遍历headers中的每个header,如果是'etag'，则去除值中的双引号，并写到response的header中，如果header不是特殊的header，则写到response的header中。</p>

<h3>source_key</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">source_key</span><span class="p">(</span><span class="n">resp</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Provide the timestamp of the swift http response as a floating</span>
</span><span class='line'><span class="s">point value.  Used as a sort key.</span>
</span><span class='line'>
</span><span class='line'><span class="s">:param resp: bufferedhttp response object</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="k">return</span> <span class="nb">float</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;x-put-timestamp&#39;</span><span class="p">)</span> <span class="ow">or</span>
</span><span class='line'>             <span class="n">resp</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;x-timestamp&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 依次获取response中的header'x-put-timestamp'和'x-timestamp'的值，如果有值则返回，没有则返回0。</p>

<h3>delay_denial</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">delay_denial</span><span class="p">(</span><span class="n">func</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Decorator to declare which methods should have any swift.authorize call</span>
</span><span class='line'><span class="s">delayed. This is so the method can load the Request object up with</span>
</span><span class='line'><span class="s">additional information that may be needed by the authorization system.</span>
</span><span class='line'>
</span><span class='line'><span class="s">:param func: function for which authorization will be delayed</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">func</span><span class="o">.</span><span class="n">delay_denial</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@functools.wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">wrapped</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="n">wrapped</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 方法标签，标识了该标签的方法表示与swift.authorize有关，会延迟认证。</p>

<h3>get_account_memcache_key</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_account_memcache_key</span><span class="p">(</span><span class="n">account</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">cache_key</span><span class="p">,</span> <span class="n">env_key</span> <span class="o">=</span> <span class="n">_get_cache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="n">cache_key</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 获取account的缓存key。</p>

<h3>get_container_memcache_key</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_container_memcache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="ow">not</span> <span class="n">container</span><span class="p">:</span>
</span><span class='line'>    <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;container not provided&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">cache_key</span><span class="p">,</span> <span class="n">env_key</span> <span class="o">=</span> <span class="n">_get_cache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="n">cache_key</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 获取container的缓存key。</p>

<h3>_prep_headers_to_info</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_prep_headers_to_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="n">server_type</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Helper method that iterates once over a dict of headers,</span>
</span><span class='line'><span class="s">converting all keys to lower case and separating</span>
</span><span class='line'><span class="s">into subsets containing user metadata, system metadata</span>
</span><span class='line'><span class="s">and other headers.</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">meta</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">sysmeta</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">other</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="nb">dict</span><span class="p">(</span><span class="n">headers</span><span class="p">)</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'>    <span class="n">lkey</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">is_user_meta</span><span class="p">(</span><span class="n">server_type</span><span class="p">,</span> <span class="n">lkey</span><span class="p">):</span>
</span><span class='line'>        <span class="n">meta</span><span class="p">[</span><span class="n">strip_user_meta_prefix</span><span class="p">(</span><span class="n">server_type</span><span class="p">,</span> <span class="n">lkey</span><span class="p">)]</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">is_sys_meta</span><span class="p">(</span><span class="n">server_type</span><span class="p">,</span> <span class="n">lkey</span><span class="p">):</span>
</span><span class='line'>        <span class="n">sysmeta</span><span class="p">[</span><span class="n">strip_sys_meta_prefix</span><span class="p">(</span><span class="n">server_type</span><span class="p">,</span> <span class="n">lkey</span><span class="p">)]</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">other</span><span class="p">[</span><span class="n">lkey</span><span class="p">]</span> <span class="o">=</span> <span class="n">val</span>
</span><span class='line'><span class="k">return</span> <span class="n">other</span><span class="p">,</span> <span class="n">meta</span><span class="p">,</span> <span class="n">sysmeta</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 将header根据server_type进行分类，以x-<em>-meta开头的为用户信息类，以x-</em>-sysmeta开头的为系统信息类，其他的为other类。</p>

<h3>headers_to_account_info</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">headers_to_account_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="n">status_int</span><span class="o">=</span><span class="n">HTTP_OK</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Construct a cacheable dict of account info based on response headers.</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">headers</span><span class="p">,</span> <span class="n">meta</span><span class="p">,</span> <span class="n">sysmeta</span> <span class="o">=</span> <span class="n">_prep_headers_to_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="s">&#39;account&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="n">status_int</span><span class="p">,</span>
</span><span class='line'>    <span class="c"># &#39;container_count&#39; anomaly:</span>
</span><span class='line'>    <span class="c"># Previous code sometimes expects an int sometimes a string</span>
</span><span class='line'>    <span class="c"># Current code aligns to str and None, yet translates to int in</span>
</span><span class='line'>    <span class="c"># deprecated functions as needed</span>
</span><span class='line'>    <span class="s">&#39;container_count&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-account-container-count&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s">&#39;total_object_count&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-account-object-count&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s">&#39;bytes&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-account-bytes-used&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s">&#39;meta&#39;</span><span class="p">:</span> <span class="n">meta</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;sysmeta&#39;</span><span class="p">:</span> <span class="n">sysmeta</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 将account的header进行分类，返回包含account信息的字典。</p>

<h3>headers_to_container_info</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">headers_to_container_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="n">status_int</span><span class="o">=</span><span class="n">HTTP_OK</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Construct a cacheable dict of container info based on response headers.</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">headers</span><span class="p">,</span> <span class="n">meta</span><span class="p">,</span> <span class="n">sysmeta</span> <span class="o">=</span> <span class="n">_prep_headers_to_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="s">&#39;container&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="n">status_int</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;read_acl&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-container-read&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s">&#39;write_acl&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-container-write&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s">&#39;sync_key&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-container-sync-key&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s">&#39;object_count&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-container-object-count&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s">&#39;bytes&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-container-bytes-used&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s">&#39;versions&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-versions-location&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s">&#39;cors&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;allow_origin&#39;</span><span class="p">:</span> <span class="n">meta</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;access-control-allow-origin&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;expose_headers&#39;</span><span class="p">:</span> <span class="n">meta</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;access-control-expose-headers&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;max_age&#39;</span><span class="p">:</span> <span class="n">meta</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;access-control-max-age&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&#39;meta&#39;</span><span class="p">:</span> <span class="n">meta</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;sysmeta&#39;</span><span class="p">:</span> <span class="n">sysmeta</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 将container的header进行分类，返回包含container信息的字典。</p>

<h3>headers_to_object_info</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">headers_to_object_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="n">status_int</span><span class="o">=</span><span class="n">HTTP_OK</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Construct a cacheable dict of object info based on response headers.</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">headers</span><span class="p">,</span> <span class="n">meta</span><span class="p">,</span> <span class="n">sysmeta</span> <span class="o">=</span> <span class="n">_prep_headers_to_info</span><span class="p">(</span><span class="n">headers</span><span class="p">,</span> <span class="s">&#39;object&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">info</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="n">status_int</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;length&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;content-length&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;content-type&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;etag&#39;</span><span class="p">:</span> <span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;etag&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;meta&#39;</span><span class="p">:</span> <span class="n">meta</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">info</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 将object的header进行分类，返回包含object信息的字典。</p>

<h3>cors_validation</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">cors_validation</span><span class="p">(</span><span class="n">func</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Decorator to check if the request is a CORS request and if so, if it&#39;s</span>
</span><span class='line'><span class="s">valid.</span>
</span><span class='line'>
</span><span class='line'><span class="s">:param func: function to check</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="nd">@functools.wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">wrapped</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
</span><span class='line'>    <span class="n">controller</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">req</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># The logic here was interpreted from</span>
</span><span class='line'>    <span class="c">#    http://www.w3.org/TR/cors/#resource-requests</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Is this a CORS request?</span>
</span><span class='line'>    <span class="n">req_origin</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;Origin&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">req_origin</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># Yes, this is a CORS request so test if the origin is allowed</span>
</span><span class='line'>        <span class="n">container_info</span> <span class="o">=</span> \
</span><span class='line'>            <span class="n">controller</span><span class="o">.</span><span class="n">container_info</span><span class="p">(</span><span class="n">controller</span><span class="o">.</span><span class="n">account_name</span><span class="p">,</span>
</span><span class='line'>                                      <span class="n">controller</span><span class="o">.</span><span class="n">container_name</span><span class="p">,</span> <span class="n">req</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cors_info</span> <span class="o">=</span> <span class="n">container_info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;cors&#39;</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Call through to the decorated method</span>
</span><span class='line'>        <span class="n">resp</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">controller</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">strict_cors_mode</span> <span class="ow">and</span> \
</span><span class='line'>                <span class="ow">not</span> <span class="n">controller</span><span class="o">.</span><span class="n">is_origin_allowed</span><span class="p">(</span><span class="n">cors_info</span><span class="p">,</span> <span class="n">req_origin</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">resp</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 方法标签，对CORS请求进行验证。
* 先判断该请求是否是一个跨域资源共享（CORS）请求，是的话先获取container的信息，再根据container信息获取cors信息。
* 如果controller的cors mode存在就判断原请求是否被允许，允许的话返回response。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="c"># Expose,</span>
</span><span class='line'>        <span class="c">#  - simple response headers,</span>
</span><span class='line'>        <span class="c">#    http://www.w3.org/TR/cors/#simple-response-header</span>
</span><span class='line'>        <span class="c">#  - swift specific: etag, x-timestamp, x-trans-id</span>
</span><span class='line'>        <span class="c">#  - user metadata headers</span>
</span><span class='line'>        <span class="c">#  - headers provided by the user in</span>
</span><span class='line'>        <span class="c">#    x-container-meta-access-control-expose-headers</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;Access-Control-Expose-Headers&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">:</span>
</span><span class='line'>            <span class="n">expose_headers</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>                <span class="s">&#39;cache-control&#39;</span><span class="p">,</span> <span class="s">&#39;content-language&#39;</span><span class="p">,</span> <span class="s">&#39;content-type&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&#39;expires&#39;</span><span class="p">,</span> <span class="s">&#39;last-modified&#39;</span><span class="p">,</span> <span class="s">&#39;pragma&#39;</span><span class="p">,</span> <span class="s">&#39;etag&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&#39;x-timestamp&#39;</span><span class="p">,</span> <span class="s">&#39;x-trans-id&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">header</span> <span class="ow">in</span> <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">header</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;X-Container-Meta&#39;</span><span class="p">)</span> <span class="ow">or</span> \
</span><span class='line'>                        <span class="n">header</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;X-Object-Meta&#39;</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">expose_headers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">header</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">cors_info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;expose_headers&#39;</span><span class="p">):</span>
</span><span class='line'>                <span class="n">expose_headers</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span>
</span><span class='line'>                    <span class="p">[</span><span class="n">header_line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>                     <span class="k">for</span> <span class="n">header_line</span> <span class="ow">in</span>
</span><span class='line'>                     <span class="n">cors_info</span><span class="p">[</span><span class="s">&#39;expose_headers&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>                     <span class="k">if</span> <span class="n">header_line</span><span class="o">.</span><span class="n">strip</span><span class="p">()])</span>
</span><span class='line'>            <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;Access-Control-Expose-Headers&#39;</span><span class="p">]</span> <span class="o">=</span> \
</span><span class='line'>                <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">expose_headers</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 方法标签，对CORS请求进行验证。
* 先判断该请求是否是一个跨域资源共享（CORS）请求，是的话先获取container的信息，再根据container信息获取cors信息。
* 根据controller的cors mode判断cors请求是否被允许，是的话返回response。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="c"># The user agent won&#39;t process the response if the Allow-Origin</span>
</span><span class='line'>        <span class="c"># header isn&#39;t included</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;Access-Control-Allow-Origin&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">cors_info</span><span class="p">[</span><span class="s">&#39;allow_origin&#39;</span><span class="p">]</span> <span class="ow">and</span> \
</span><span class='line'>                    <span class="n">cors_info</span><span class="p">[</span><span class="s">&#39;allow_origin&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="o">==</span> <span class="s">&#39;*&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;Access-Control-Allow-Origin&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;*&#39;</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;Access-Control-Allow-Origin&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">req_origin</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span>  <span class="n">resp</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># Not a CORS request so make the call as normal</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">wrapped</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 如果response里面不包含'Access-Control-Allow-Origin' header，则加上该header。</p>

<h3>get_object_info</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_object_info</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">app</span><span class="p">,</span> <span class="n">path</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">swift_source</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Get the info structure for an object, based on env and app.</span>
</span><span class='line'><span class="s">This is useful to middlewares.</span>
</span><span class='line'>
</span><span class='line'><span class="s">.. note::</span>
</span><span class='line'>
</span><span class='line'><span class="s">    This call bypasses auth. Success does not imply that the request has</span>
</span><span class='line'><span class="s">    authorization to the object.</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="p">(</span><span class="n">version</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span> <span class="o">=</span> \
</span><span class='line'>    <span class="n">split_path</span><span class="p">(</span><span class="n">path</span> <span class="ow">or</span> <span class="n">env</span><span class="p">[</span><span class="s">&#39;PATH_INFO&#39;</span><span class="p">],</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">info</span> <span class="o">=</span> <span class="n">_get_object_info</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">swift_source</span><span class="o">=</span><span class="n">swift_source</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="ow">not</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_object_info</span><span class="p">({},</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="n">info</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 根据env和app获取object的结构信息。</p>

<h3>get_container_info</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_container_info</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">app</span><span class="p">,</span> <span class="n">swift_source</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Get the info structure for a container, based on env and app.</span>
</span><span class='line'><span class="s">This is useful to middlewares.</span>
</span><span class='line'>
</span><span class='line'><span class="s">.. note::</span>
</span><span class='line'>
</span><span class='line'><span class="s">    This call bypasses auth. Success does not imply that the request has</span>
</span><span class='line'><span class="s">    authorization to the container.</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="p">(</span><span class="n">version</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">unused</span><span class="p">)</span> <span class="o">=</span> \
</span><span class='line'>    <span class="n">split_path</span><span class="p">(</span><span class="n">env</span><span class="p">[</span><span class="s">&#39;PATH_INFO&#39;</span><span class="p">],</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">info</span> <span class="o">=</span> <span class="n">get_info</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">ret_not_found</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
</span><span class='line'>                <span class="n">swift_source</span><span class="o">=</span><span class="n">swift_source</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="ow">not</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_container_info</span><span class="p">({},</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="n">info</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 根据env和app获取container的结构信息。</p>

<h3>get_account_info</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_account_info</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">app</span><span class="p">,</span> <span class="n">swift_source</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Get the info structure for an account, based on env and app.</span>
</span><span class='line'><span class="s">This is useful to middlewares.</span>
</span><span class='line'>
</span><span class='line'><span class="s">.. note::</span>
</span><span class='line'>
</span><span class='line'><span class="s">    This call bypasses auth. Success does not imply that the request has</span>
</span><span class='line'><span class="s">    authorization to the account.</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="p">(</span><span class="n">version</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">_junk</span><span class="p">,</span> <span class="n">_junk</span><span class="p">)</span> <span class="o">=</span> \
</span><span class='line'>    <span class="n">split_path</span><span class="p">(</span><span class="n">env</span><span class="p">[</span><span class="s">&#39;PATH_INFO&#39;</span><span class="p">],</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">info</span> <span class="o">=</span> <span class="n">get_info</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">ret_not_found</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
</span><span class='line'>                <span class="n">swift_source</span><span class="o">=</span><span class="n">swift_source</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="ow">not</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_account_info</span><span class="p">({},</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;container_count&#39;</span><span class="p">)</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>    <span class="n">info</span><span class="p">[</span><span class="s">&#39;container_count&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">info</span><span class="p">[</span><span class="s">&#39;container_count&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="s">&#39;container_count&#39;</span><span class="p">])</span>
</span><span class='line'><span class="k">return</span> <span class="n">info</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 根据env和app获取account的结构信息。</p>

<h3>_get_cache_key</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_get_cache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Get the keys for both memcache (cache_key) and env (env_key)</span>
</span><span class='line'><span class="s">where info about accounts and containers is cached</span>
</span><span class='line'><span class="s">:param   account: The name of the account</span>
</span><span class='line'><span class="s">:param container: The name of the container (or None if account)</span>
</span><span class='line'><span class="s">:returns a tuple of (cache_key, env_key)</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">container</span><span class="p">:</span>
</span><span class='line'>    <span class="n">cache_key</span> <span class="o">=</span> <span class="s">&#39;container/</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">cache_key</span> <span class="o">=</span> <span class="s">&#39;account/</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">account</span>
</span><span class='line'><span class="c"># Use a unique environment cache key per account and one container.</span>
</span><span class='line'><span class="c"># This allows caching both account and container and ensures that when we</span>
</span><span class='line'><span class="c"># copy this env to form a new request, it won&#39;t accidentally reuse the</span>
</span><span class='line'><span class="c"># old container or account info</span>
</span><span class='line'><span class="n">env_key</span> <span class="o">=</span> <span class="s">&#39;swift.</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">cache_key</span>
</span><span class='line'><span class="k">return</span> <span class="n">cache_key</span><span class="p">,</span> <span class="n">env_key</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 获取account和container的缓存key，account是'account/account名'，container是'container/account名/container名'，还有env_key，值为'swift.缓存key'。</p>

<h3>get_object_env_key</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_object_env_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Get the keys for env (env_key) where info about object is cached</span>
</span><span class='line'><span class="s">:param   account: The name of the account</span>
</span><span class='line'><span class="s">:param container: The name of the container</span>
</span><span class='line'><span class="s">:param obj: The name of the object</span>
</span><span class='line'><span class="s">:returns a string env_key</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">env_key</span> <span class="o">=</span> <span class="s">&#39;swift.object/</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">account</span><span class="p">,</span>
</span><span class='line'>                                     <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="n">env_key</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 得到object的env_key，值为'swift.object/account名/container名/object名。</p>

<h3>set_info_cache</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_set_info_cache</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">resp</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Cache info in both memcache and env.</span>
</span><span class='line'>
</span><span class='line'><span class="s">Caching is used to avoid unnecessary calls to account &amp;amp; container servers.</span>
</span><span class='line'><span class="s">This is a private function that is being called by GETorHEAD_base and</span>
</span><span class='line'><span class="s">by clear_info_cache.</span>
</span><span class='line'><span class="s">Any attempt to GET or HEAD from the container/account server should use</span>
</span><span class='line'><span class="s">the GETorHEAD_base interface which would than set the cache.</span>
</span><span class='line'>
</span><span class='line'><span class="s">:param  app: the application object</span>
</span><span class='line'><span class="s">:param  account: the unquoted account name</span>
</span><span class='line'><span class="s">:param  container: the unquoted container name or None</span>
</span><span class='line'><span class="s">:param resp: the response received or None if info cache should be cleared</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">container</span><span class="p">:</span>
</span><span class='line'>    <span class="n">cache_time</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">recheck_container_existence</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">cache_time</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">recheck_account_existence</span>
</span><span class='line'><span class="n">cache_key</span><span class="p">,</span> <span class="n">env_key</span> <span class="o">=</span> <span class="n">_get_cache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">resp</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_int</span> <span class="o">==</span> <span class="n">HTTP_NOT_FOUND</span><span class="p">:</span>
</span><span class='line'>        <span class="n">cache_time</span> <span class="o">*=</span> <span class="mf">0.1</span>
</span><span class='line'>    <span class="k">elif</span> <span class="ow">not</span> <span class="n">is_success</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">status_int</span><span class="p">):</span>
</span><span class='line'>        <span class="n">cache_time</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">cache_time</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Next actually set both memcache and the env chache</span>
</span><span class='line'><span class="n">memcache</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="s">&#39;memcache&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span> <span class="n">env</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;swift.cache&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="ow">not</span> <span class="n">cache_time</span><span class="p">:</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">env_key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">memcache</span><span class="p">:</span>
</span><span class='line'>        <span class="n">memcache</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">cache_key</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">container</span><span class="p">:</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_container_info</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_int</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_account_info</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_int</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">memcache</span><span class="p">:</span>
</span><span class='line'>    <span class="n">memcache</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">cache_key</span><span class="p">,</span> <span class="n">info</span><span class="p">,</span> <span class="n">time</span><span class="o">=</span><span class="n">cache_time</span><span class="p">)</span>
</span><span class='line'><span class="n">env</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">info</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 信息在缓存和env都各存一份，缓存一般用来避免对account和container没必要的调用，这是一个私有方法，主要被GETorHEAD_base和clear_info_cache方法调用。如果想通过HEAD和GET获取container/account信息，建议使用GETorHEAD_base方法，因为该方法会设置缓存信息。
* 检查container和account是否存在，再通过account和container获取缓存key。
* 根据response状态码设置缓存时间，如果缓存时间设置为None，则在env和缓存中移除cache_key缓存信息。
* 最后在缓存和env中设置container或account的info信息。</p>

<h3>_set_object_info_cache</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_set_object_info_cache</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">resp</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Cache object info env. Do not cache object informations in</span>
</span><span class='line'><span class="s">memcache. This is an intentional omission as it would lead</span>
</span><span class='line'><span class="s">to cache pressure. This is a per-request cache.</span>
</span><span class='line'>
</span><span class='line'><span class="s">Caching is used to avoid unnecessary calls to object servers.</span>
</span><span class='line'><span class="s">This is a private function that is being called by GETorHEAD_base.</span>
</span><span class='line'><span class="s">Any attempt to GET or HEAD from the object server should use</span>
</span><span class='line'><span class="s">the GETorHEAD_base interface which would then set the cache.</span>
</span><span class='line'>
</span><span class='line'><span class="s">:param  app: the application object</span>
</span><span class='line'><span class="s">:param  account: the unquoted account name</span>
</span><span class='line'><span class="s">:param  container: the unquoted container name or None</span>
</span><span class='line'><span class="s">:param  object: the unquoted object name or None</span>
</span><span class='line'><span class="s">:param resp: the response received or None if info cache should be cleared</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">env_key</span> <span class="o">=</span> <span class="n">get_object_env_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="ow">not</span> <span class="n">resp</span><span class="p">:</span>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">env_key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_object_info</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_int</span><span class="p">)</span>
</span><span class='line'><span class="n">env</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">info</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* object的信息只缓存在env中，没有缓存在memcache中是因为缓存起来的话会对缓存造成压力，这是前一次请求的缓存。缓存为了避免那些对object没必要的调用，这是一个私有方法，主要被GETorHEAD_base和clear_info_cache方法调用。如果想通过HEAD和GET获取container/account信息，建议使用GETorHEAD_base方法，因为该方法会设置缓存信息。
* 先获取object的env_key，如果response没有则在env中移除env_key的信息，最后在env中添加object的info信息。</p>

<h3>clear_info_cache</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">clear_info_cache</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Clear the cached info in both memcache and env</span>
</span><span class='line'>
</span><span class='line'><span class="s">:param  app: the application object</span>
</span><span class='line'><span class="s">:param  account: the account name</span>
</span><span class='line'><span class="s">:param  container: the containr name or None if setting info for containers</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">_set_info_cache</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 在memcache和env中清除account或container的缓存信息。</p>

<h3>_get_info_cache</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_get_info_cache</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Get the cached info from env or memcache (if used) in that order</span>
</span><span class='line'><span class="s">Used for both account and container info</span>
</span><span class='line'><span class="s">A private function used by get_info</span>
</span><span class='line'>
</span><span class='line'><span class="s">:param  app: the application object</span>
</span><span class='line'><span class="s">:param  env: the environment used by the current request</span>
</span><span class='line'><span class="s">:returns the cached info or None if not cached</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cache_key</span><span class="p">,</span> <span class="n">env_key</span> <span class="o">=</span> <span class="n">_get_cache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">env_key</span> <span class="ow">in</span> <span class="n">env</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">env</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span>
</span><span class='line'><span class="n">memcache</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="s">&#39;memcache&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span> <span class="n">env</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;swift.cache&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">memcache</span><span class="p">:</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">memcache</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">cache_key</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="n">key</span><span class="p">],</span> <span class="nb">unicode</span><span class="p">):</span>
</span><span class='line'>                <span class="n">info</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">info</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;utf-8&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">env</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">info</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">info</span>
</span><span class='line'><span class="k">return</span> <span class="n">Noner</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 私有方法，被get_info调用，在env和memcache中获取account和container信息，顺序是先env再memcache。
* 获取env_key和cache_keyi，如果env_key在env中存在，则返回env中的值。
* 如果env中没有，再从memcache中获取信息，将获取到的信息放到env中。</p>

<h3>_prepare_pre_auth_info_request</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_prepare_pre_auth_info_request</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">swift_source</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Prepares a pre authed request to obtain info using a HEAD.</span>
</span><span class='line'>
</span><span class='line'><span class="s">:param env: the environment used by the current request</span>
</span><span class='line'><span class="s">:param path: The unquoted request path</span>
</span><span class='line'><span class="s">:param swift_source: value for swift.source in WSGI environment</span>
</span><span class='line'><span class="s">:returns: the pre authed request</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="c"># Set the env for the pre_authed call without a query string</span>
</span><span class='line'><span class="n">newenv</span> <span class="o">=</span> <span class="n">make_pre_authed_env</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="s">&#39;HEAD&#39;</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">agent</span><span class="o">=</span><span class="s">&#39;Swift&#39;</span><span class="p">,</span>
</span><span class='line'>                             <span class="n">query_string</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">swift_source</span><span class="o">=</span><span class="n">swift_source</span><span class="p">)</span>
</span><span class='line'><span class="c"># This is a sub request for container metadata- drop the Origin header from</span>
</span><span class='line'><span class="c"># the request so the it is not treated as a CORS request.</span>
</span><span class='line'><span class="n">newenv</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s">&#39;HTTP_ORIGIN&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="c"># Note that Request.blank expects quoted path</span>
</span><span class='line'><span class="k">return</span> <span class="n">Request</span><span class="o">.</span><span class="n">blank</span><span class="p">(</span><span class="n">quote</span><span class="p">(</span><span class="n">path</span><span class="p">),</span> <span class="n">environ</span><span class="o">=</span><span class="n">newenv</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 准备一个做过认证的HEAD请求来获取信息。</p>

<h3>get_info</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_info</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">ret_not_found</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>         <span class="n">swift_source</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">Get the info about accounts or containers</span>
</span><span class='line'>
</span><span class='line'><span class="sd">Note: This call bypasses auth. Success does not imply that the</span>
</span><span class='line'><span class="sd">      request has authorization to the info.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">:param app: the application object</span>
</span><span class='line'><span class="sd">:param env: the environment used by the current request</span>
</span><span class='line'><span class="sd">:param account: The unquoted name of the account</span>
</span><span class='line'><span class="sd">:param container: The unquoted name of the container (or None if account)</span>
</span><span class='line'><span class="sd">:returns: the cached info or None if cannot be retrieved</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">info</span> <span class="o">=</span> <span class="n">_get_info_cache</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">ret_not_found</span> <span class="ow">or</span> <span class="n">is_success</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="s">&#39;status&#39;</span><span class="p">]):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">info</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'><span class="c"># Not in cache, let&#39;s try the account servers</span>
</span><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="s">&#39;/v1/</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">account</span>
</span><span class='line'><span class="k">if</span> <span class="n">container</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># Stop and check if we have an account?</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">get_info</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>    <span class="n">path</span> <span class="o">+=</span> <span class="s">&#39;/&#39;</span> <span class="o">+</span> <span class="n">container</span>
</span><span class='line'>
</span><span class='line'><span class="n">req</span> <span class="o">=</span> <span class="n">_prepare_pre_auth_info_request</span><span class="p">(</span>
</span><span class='line'>    <span class="n">env</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="p">(</span><span class="n">swift_source</span> <span class="ow">or</span> <span class="s">&#39;GET_INFO&#39;</span><span class="p">))</span>
</span><span class='line'><span class="c"># Whenever we do a GET/HEAD, the GETorHEAD_base will set the info in</span>
</span><span class='line'><span class="c"># the environment under environ[env_key] and in memcache. We will</span>
</span><span class='line'><span class="c"># pick the one from environ[env_key] and use it to set the caller env</span>
</span><span class='line'><span class="n">resp</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'><span class="n">cache_key</span><span class="p">,</span> <span class="n">env_key</span> <span class="o">=</span> <span class="n">_get_cache_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span>
</span><span class='line'>    <span class="n">env</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">info</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">ret_not_found</span> <span class="ow">or</span> <span class="n">is_success</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="s">&#39;status&#39;</span><span class="p">]):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">info</span>
</span><span class='line'><span class="k">except</span> <span class="p">(</span><span class="ne">KeyError</span><span class="p">,</span> <span class="ne">AttributeError</span><span class="p">):</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'><span class="k">return</span> <span class="bp">None</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 从缓存中获取info信息，如果缓存中有且状态是success，则返回info。如果缓存没有，则发起1个不用认证的请求获取account和container的info信息。</p>

<h3>_get_object_info</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_get_object_info</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">swift_source</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Get the info about object</span>
</span><span class='line'>
</span><span class='line'><span class="s">Note: This call bypasses auth. Success does not imply that the</span>
</span><span class='line'><span class="s">      request has authorization to the info.</span>
</span><span class='line'>
</span><span class='line'><span class="s">:param app: the application object</span>
</span><span class='line'><span class="s">:param env: the environment used by the current request</span>
</span><span class='line'><span class="s">:param account: The unquoted name of the account</span>
</span><span class='line'><span class="s">:param container: The unquoted name of the container</span>
</span><span class='line'><span class="s">:param obj: The unquoted name of the object</span>
</span><span class='line'><span class="s">:returns: the cached info or None if cannot be retrieved</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">env_key</span> <span class="o">=</span> <span class="n">get_object_env_key</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'><span class="n">info</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">env_key</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">info</span>
</span><span class='line'><span class="c"># Not in cached, let&#39;s try the object servers</span>
</span><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="s">&#39;/v1/</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">/</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span>
</span><span class='line'><span class="n">req</span> <span class="o">=</span> <span class="n">_prepare_pre_auth_info_request</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">swift_source</span><span class="p">)</span>
</span><span class='line'><span class="c"># Whenever we do a GET/HEAD, the GETorHEAD_base will set the info in</span>
</span><span class='line'><span class="c"># the environment under environ[env_key]. We will</span>
</span><span class='line'><span class="c"># pick the one from environ[env_key] and use it to set the caller env</span>
</span><span class='line'><span class="n">resp</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span>
</span><span class='line'>    <span class="n">env</span><span class="p">[</span><span class="n">env_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">info</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">info</span>
</span><span class='line'><span class="k">except</span> <span class="p">(</span><span class="ne">KeyError</span><span class="p">,</span> <span class="ne">AttributeError</span><span class="p">):</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'><span class="k">return</span> <span class="bp">None</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 先从env中获取object的info信息，如果没有则发起请求不认证的请求重新获取。</p>

<h3>close_swift_conn</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">close_swift_conn</span><span class="p">(</span><span class="n">src</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Force close the http connection to the backend.</span>
</span><span class='line'>
</span><span class='line'><span class="s">:param src: the response from the backend</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># Since the backends set &quot;Connection: close&quot; in their response</span>
</span><span class='line'>    <span class="c"># headers, the response object (src) is solely responsible for the</span>
</span><span class='line'>    <span class="c"># socket. The connection object (src.swift_conn) has no references</span>
</span><span class='line'>    <span class="c"># to the socket, so calling its close() method does nothing, and</span>
</span><span class='line'>    <span class="c"># therefore we don&#39;t do it.</span>
</span><span class='line'>    <span class="c">#</span>
</span><span class='line'>    <span class="c"># Also, since calling the response&#39;s close() method might not</span>
</span><span class='line'>    <span class="c"># close the underlying socket but only decrement some</span>
</span><span class='line'>    <span class="c"># reference-counter, we have a special method here that really,</span>
</span><span class='line'>    <span class="c"># really kills the underlying socket with a close() syscall.</span>
</span><span class='line'>    <span class="n">src</span><span class="o">.</span><span class="n">nuke_from_orbit</span><span class="p">()</span>  <span class="c"># it&#39;s the only way to be sure</span>
</span><span class='line'><span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 关闭swift连接，用了很底层的一个关闭socket连接的方法。</p>

<h2>GetOrHeadHandler类</h2>

<h3>init方法</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">app</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">server_type</span><span class="p">,</span> <span class="n">ring</span><span class="p">,</span> <span class="n">partition</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span>
</span><span class='line'>             <span class="n">backend_headers</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">ring</span> <span class="o">=</span> <span class="n">ring</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span> <span class="o">=</span> <span class="n">server_type</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">partition</span> <span class="o">=</span> <span class="n">partition</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">backend_headers</span> <span class="o">=</span> <span class="n">backend_headers</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">used_nodes</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">used_source_etag</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># stuff from request</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">req_method</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">method</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">req_path</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">path</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">req_query_string</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">query_string</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">newest</span> <span class="o">=</span> <span class="n">config_true_value</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;x-newest&#39;</span><span class="p">,</span> <span class="s">&#39;f&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># populated when finding source</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">statuses</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">reasons</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">source_headers</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* GetOrHeadHandler类的初始化方法。</p>

<h3>fast_forward</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">fast_forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num_bytes</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Will skip num_bytes into the current ranges.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :params num_bytes: the number of bytes that have already been read on</span>
</span><span class='line'><span class="sd">                       this request. This will change the Range header</span>
</span><span class='line'><span class="sd">                       so that the next req will start where it left off.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :raises NotImplementedError: if this is a multirange request</span>
</span><span class='line'><span class="sd">    :raises ValueError: if invalid range header</span>
</span><span class='line'><span class="sd">    :raises HTTPRequestedRangeNotSatisfiable: if begin + num_bytes</span>
</span><span class='line'><span class="sd">                                              &amp;gt; end of range</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;Range&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">backend_headers</span><span class="p">:</span>
</span><span class='line'>        <span class="n">req_range</span> <span class="o">=</span> <span class="n">Range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">backend_headers</span><span class="p">[</span><span class="s">&#39;Range&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">req_range</span><span class="o">.</span><span class="n">ranges</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">NotImplementedError</span><span class="p">()</span>
</span><span class='line'>        <span class="n">begin</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="n">req_range</span><span class="o">.</span><span class="n">ranges</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">begin</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># this is a -50 range req (last 50 bytes of file)</span>
</span><span class='line'>            <span class="n">end</span> <span class="o">-=</span> <span class="n">num_bytes</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">begin</span> <span class="o">+=</span> <span class="n">num_bytes</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">end</span> <span class="ow">and</span> <span class="n">begin</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">end</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="n">HTTPRequestedRangeNotSatisfiable</span><span class="p">()</span>
</span><span class='line'>        <span class="n">req_range</span><span class="o">.</span><span class="n">ranges</span> <span class="o">=</span> <span class="p">[(</span><span class="n">begin</span><span class="p">,</span> <span class="n">end</span><span class="p">)]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">backend_headers</span><span class="p">[</span><span class="s">&#39;Range&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">req_range</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">backend_headers</span><span class="p">[</span><span class="s">&#39;Range&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;bytes=</span><span class="si">%d</span><span class="s">-&#39;</span> <span class="o">%</span> <span class="n">num_bytes</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 先判断Range是否在后台进程的header中，如果没有，则在后台进程header中增加Range，值为'bytes=&lsquo;加num_bytes。<br/>
* 如果有，先创建一个Range对象，判断如果Range对象的ranges如果大于1,则报NotImplementedError的异常。<br/>
* 从rangs中取到开始和结束字节数，先检查两个字节数是否正确，不正确抛异常，正确的话将其重新放入到后台进程header中。</p>

<h3>is_good_source</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">is_good_source</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">src</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Indicates whether or not the request made to the backend found</span>
</span><span class='line'><span class="sd">    what it was looking for.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param src: the response from the backend</span>
</span><span class='line'><span class="sd">    :returns: True if found, False if not</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span> <span class="o">==</span> <span class="s">&#39;Object&#39;</span> <span class="ow">and</span> <span class="n">src</span><span class="o">.</span><span class="n">status</span> <span class="o">==</span> <span class="mi">416</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">is_success</span><span class="p">(</span><span class="n">src</span><span class="o">.</span><span class="n">status</span><span class="p">)</span> <span class="ow">or</span> <span class="n">is_redirection</span><span class="p">(</span><span class="n">src</span><span class="o">.</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 如果是一个Object请求，并且返回状态码是416，则返回True，否则返回状态码是否200～399。</p>

<h3>_make_app_iter</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">_make_app_iter</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">source</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Returns an iterator over the contents of the source (via its read</span>
</span><span class='line'><span class="sd">    func).  There is also quite a bit of cleanup to ensure garbage</span>
</span><span class='line'><span class="sd">    collection works and the underlying socket of the source is closed.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param req: incoming request object</span>
</span><span class='line'><span class="sd">    :param source: The httplib.Response object this iterator should read</span>
</span><span class='line'><span class="sd">                   from.</span>
</span><span class='line'><span class="sd">    :param node: The node the source is reading from, for logging purposes.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">nchunks</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">bytes_read_from_source</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">node_timeout</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">node_timeout</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span> <span class="o">==</span> <span class="s">&#39;Object&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="n">node_timeout</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">recoverable_node_timeout</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 初始化本地变量，如果是object请求，则将节点超时时间设置为object的recoverable_node_timeout。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>            <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                <span class="k">with</span> <span class="n">ChunkReadTimeout</span><span class="p">(</span><span class="n">node_timeout</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">chunk</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">object_chunk_size</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">nchunks</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="n">bytes_read_from_source</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
</span><span class='line'>            <span class="k">except</span> <span class="n">ChunkReadTimeout</span><span class="p">:</span>
</span><span class='line'>                <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_value</span><span class="p">,</span> <span class="n">exc_traceback</span> <span class="o">=</span> <span class="n">exc_info</span><span class="p">()</span>
</span><span class='line'>                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">newest</span> <span class="ow">or</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span> <span class="o">!=</span> <span class="s">&#39;Object&#39;</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_value</span><span class="p">,</span> <span class="n">exc_traceback</span>
</span><span class='line'>                <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">fast_forward</span><span class="p">(</span><span class="n">bytes_read_from_source</span><span class="p">)</span>
</span><span class='line'>                <span class="k">except</span> <span class="p">(</span><span class="ne">NotImplementedError</span><span class="p">,</span> <span class="n">HTTPException</span><span class="p">,</span> <span class="ne">ValueError</span><span class="p">):</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_value</span><span class="p">,</span> <span class="n">exc_traceback</span>
</span><span class='line'>                <span class="n">new_source</span><span class="p">,</span> <span class="n">new_node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get_source_and_node</span><span class="p">()</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">new_source</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">exception_occurred</span><span class="p">(</span>
</span><span class='line'>                        <span class="n">node</span><span class="p">,</span> <span class="n">_</span><span class="p">(</span><span class="s">&#39;Object&#39;</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">_</span><span class="p">(</span><span class="s">&#39;Trying to read during GET (retrying)&#39;</span><span class="p">))</span>
</span><span class='line'>                    <span class="c"># Close-out the connection as best as possible.</span>
</span><span class='line'>                    <span class="k">if</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="s">&#39;swift_conn&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
</span><span class='line'>                        <span class="n">close_swift_conn</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">source</span> <span class="o">=</span> <span class="n">new_source</span>
</span><span class='line'>                    <span class="n">node</span> <span class="o">=</span> <span class="n">new_node</span>
</span><span class='line'>                    <span class="n">bytes_read_from_source</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>                    <span class="k">continue</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_value</span><span class="p">,</span> <span class="n">exc_traceback</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="n">chunk</span><span class="p">:</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>            <span class="k">with</span> <span class="n">ChunkWriteTimeout</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">client_timeout</span><span class="p">):</span>
</span><span class='line'>                <span class="k">yield</span> <span class="n">chunk</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 通过一个无限循环，不断读取response的数据，累加读取的块数大小和字节总长度。
* 如果读取数据超时，则处理异常，如果请求不是Object则抛出最近的异常信息。
* 记录已读的字节范围，错误抛异常。
* 获取新的source和节点，如果source存在的话，则创建一个异常并关闭连接重新初始化，否则抛出异常。
* 如果读取不到数据，则跳出循环。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>            <span class="c"># This is for fairness; if the network is outpacing the CPU,</span>
</span><span class='line'>            <span class="c"># we&#39;ll always be able to read and write data without</span>
</span><span class='line'>            <span class="c"># encountering an EWOULDBLOCK, and so eventlet will not switch</span>
</span><span class='line'>            <span class="c"># greenthreads on its own. We do it manually so that clients</span>
</span><span class='line'>            <span class="c"># don&#39;t starve.</span>
</span><span class='line'>            <span class="c">#</span>
</span><span class='line'>            <span class="c"># The number 5 here was chosen by making stuff up. It&#39;s not</span>
</span><span class='line'>            <span class="c"># every single chunk, but it&#39;s not too big either, so it seemed</span>
</span><span class='line'>            <span class="c"># like it would probably be an okay choice.</span>
</span><span class='line'>            <span class="c">#</span>
</span><span class='line'>            <span class="c"># Note that we may trampoline to other greenthreads more often</span>
</span><span class='line'>            <span class="c"># than once every 5 chunks, depending on how blocking our</span>
</span><span class='line'>            <span class="c"># network IO is; the explicit sleep here simply provides a</span>
</span><span class='line'>            <span class="c"># lower bound on the rate of trampolining.</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">nchunks</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="n">sleep</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">except</span> <span class="n">ChunkReadTimeout</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">exception_occurred</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">_</span><span class="p">(</span><span class="s">&#39;Object&#39;</span><span class="p">),</span>
</span><span class='line'>                                    <span class="n">_</span><span class="p">(</span><span class="s">&#39;Trying to read during GET&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="k">raise</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">ChunkWriteTimeout</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span>
</span><span class='line'>            <span class="n">_</span><span class="p">(</span><span class="s">&#39;Client did not read from proxy within </span><span class="si">%s</span><span class="s">s&#39;</span><span class="p">)</span> <span class="o">%</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">client_timeout</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">increment</span><span class="p">(</span><span class="s">&#39;client_timeouts&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">GeneratorExit</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;swift.non_client_disconnect&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="n">_</span><span class="p">(</span><span class="s">&#39;Client disconnected on read&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="n">_</span><span class="p">(</span><span class="s">&#39;Trying to send to client&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="k">raise</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># Close-out the connection as best as possible.</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="s">&#39;swift_conn&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
</span><span class='line'>            <span class="n">close_swift_conn</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 每读取5个字节块，休眠一次。
* 读取数据超时抛异常。
* 写入数据超时记日志。
* 抛出各种异常后关闭连接。</p>

<h3>_get_source_and_node</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">_get_source_and_node</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">statuses</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">reasons</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">source_headers</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">sources</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">node_timeout</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">node_timeout</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span> <span class="o">==</span> <span class="s">&#39;Object&#39;</span> <span class="ow">and</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">newest</span><span class="p">:</span>
</span><span class='line'>        <span class="n">node_timeout</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">recoverable_node_timeout</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 初始化本地变量，设置node_timeout时间。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">iter_nodes</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ring</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">partition</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">node</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">used_nodes</span><span class="p">:</span>
</span><span class='line'>            <span class="k">continue</span>
</span><span class='line'>        <span class="n">start_node_timing</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="k">with</span> <span class="n">ConnectionTimeout</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">conn_timeout</span><span class="p">):</span>
</span><span class='line'>                <span class="n">conn</span> <span class="o">=</span> <span class="n">http_connect</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">node</span><span class="p">[</span><span class="s">&#39;ip&#39;</span><span class="p">],</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;port&#39;</span><span class="p">],</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;device&#39;</span><span class="p">],</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">partition</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">req_method</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">headers</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">backend_headers</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">query_string</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">req_query_string</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">set_node_timing</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_node_timing</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">with</span> <span class="n">Timeout</span><span class="p">(</span><span class="n">node_timeout</span><span class="p">):</span>
</span><span class='line'>                <span class="n">possible_source</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span>
</span><span class='line'>                <span class="c"># See NOTE: swift_conn at top of file about this.</span>
</span><span class='line'>                <span class="n">possible_source</span><span class="o">.</span><span class="n">swift_conn</span> <span class="o">=</span> <span class="n">conn</span>
</span><span class='line'>        <span class="k">except</span> <span class="p">(</span><span class="ne">Exception</span><span class="p">,</span> <span class="n">Timeout</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">exception_occurred</span><span class="p">(</span>
</span><span class='line'>                <span class="n">node</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span><span class="p">,</span>
</span><span class='line'>                <span class="n">_</span><span class="p">(</span><span class="s">&#39;Trying to </span><span class="si">%(method)s</span><span class="s"> </span><span class="si">%(path)s</span><span class="s">&#39;</span><span class="p">)</span> <span class="o">%</span>
</span><span class='line'>                <span class="p">{</span><span class="s">&#39;method&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">req_method</span><span class="p">,</span> <span class="s">&#39;path&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">req_path</span><span class="p">})</span>
</span><span class='line'>            <span class="k">continue</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 循环取节点，如果节点已经被使用了，则跳过该节点，否则封装http连接，设置节点时间。
* 获取请求结果，如果超时，则抛异常，跳出此次循环。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_good_source</span><span class="p">(</span><span class="n">possible_source</span><span class="p">):</span>
</span><span class='line'>            <span class="c"># 404 if we know we don&#39;t have a synced copy</span>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="nb">float</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;X-PUT-Timestamp&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)):</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">HTTP_NOT_FOUND</span><span class="p">)</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">reasons</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">source_headers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">close_swift_conn</span><span class="p">(</span><span class="n">possible_source</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">used_source_etag</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">src_headers</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>                        <span class="p">(</span><span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">(),</span> <span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span>
</span><span class='line'>                        <span class="n">possible_source</span><span class="o">.</span><span class="n">getheaders</span><span class="p">())</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">src_headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;etag&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;&quot;&#39;</span><span class="p">)</span> <span class="o">!=</span> \
</span><span class='line'>                            <span class="bp">self</span><span class="o">.</span><span class="n">used_source_etag</span><span class="p">:</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">HTTP_NOT_FOUND</span><span class="p">)</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">reasons</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">source_headers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">continue</span>
</span><span class='line'>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">reasons</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">reason</span><span class="p">)</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">source_headers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">sources</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">possible_source</span><span class="p">,</span> <span class="n">node</span><span class="p">))</span>
</span><span class='line'>                <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">newest</span><span class="p">:</span>  <span class="c"># one good source is enough</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 如果返回结果合理，则判断返回结果中的PUT时间是否存在，不存在证明还没有同步，则返回404并关闭连接。
* 如果时间存在，则继续判断已用etag是否存在，存在的话从返回结果中取出etag值与之比较，不相等就返回404并关闭连接。
* 已用etag不存在，则将返回结果设置到自身属性中，并判断是否最新，是则跳出循环，取一个good source就足够了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">reasons</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">reason</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">source_headers</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">getheaders</span><span class="p">())</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">possible_source</span><span class="o">.</span><span class="n">status</span> <span class="o">==</span> <span class="n">HTTP_INSUFFICIENT_STORAGE</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">error_limit</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">_</span><span class="p">(</span><span class="s">&#39;ERROR Insufficient Storage&#39;</span><span class="p">))</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">is_server_error</span><span class="p">(</span><span class="n">possible_source</span><span class="o">.</span><span class="n">status</span><span class="p">):</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">error_occurred</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">node</span><span class="p">,</span> <span class="n">_</span><span class="p">(</span><span class="s">&#39;ERROR </span><span class="si">%(status)d</span><span class="s"> </span><span class="si">%(body)s</span><span class="s"> &#39;</span>
</span><span class='line'>                            <span class="s">&#39;From </span><span class="si">%(type)s</span><span class="s"> Server&#39;</span><span class="p">)</span> <span class="o">%</span>
</span><span class='line'>                    <span class="p">{</span><span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="n">possible_source</span><span class="o">.</span><span class="n">status</span><span class="p">,</span>
</span><span class='line'>                     <span class="s">&#39;body&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">bodies</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][:</span><span class="mi">1024</span><span class="p">],</span>
</span><span class='line'>                     <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">sources</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sources</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="n">source_key</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>        <span class="n">source</span><span class="p">,</span> <span class="n">node</span> <span class="o">=</span> <span class="n">sources</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">src</span><span class="p">,</span> <span class="n">_junk</span> <span class="ow">in</span> <span class="n">sources</span><span class="p">:</span>
</span><span class='line'>            <span class="n">close_swift_conn</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">used_nodes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>        <span class="n">src_headers</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>            <span class="p">(</span><span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">(),</span> <span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span>
</span><span class='line'>            <span class="n">possible_source</span><span class="o">.</span><span class="n">getheaders</span><span class="p">())</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">used_source_etag</span> <span class="o">=</span> <span class="n">src_headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;etag&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;&quot;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">source</span><span class="p">,</span> <span class="n">node</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 如果返回结果不是一个good source，则将返回结果信息设置到自身属性，如果返回状态是507,则将节点加入到错误列表，如果返回状态是其他500以上的数字，则抛出异常。
* 循环结束后，如果取到了source，则先将sources进行排序然后取第一个，接着关闭剩下的source。
* 添加节点到已用节点，设置易用etag，返回结果，如果取不到source，则返回空。</p>

<h3>get_working_response</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">get_working_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
</span><span class='line'>    <span class="n">source</span><span class="p">,</span> <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get_source_and_node</span><span class="p">()</span>
</span><span class='line'>    <span class="n">res</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">source</span><span class="p">:</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">=</span> <span class="n">Response</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">req</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;GET&#39;</span> <span class="ow">and</span> \
</span><span class='line'>                <span class="n">source</span><span class="o">.</span><span class="n">status</span> <span class="ow">in</span> <span class="p">(</span><span class="n">HTTP_OK</span><span class="p">,</span> <span class="n">HTTP_PARTIAL_CONTENT</span><span class="p">):</span>
</span><span class='line'>            <span class="n">res</span><span class="o">.</span><span class="n">app_iter</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_make_app_iter</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">source</span><span class="p">)</span>
</span><span class='line'>            <span class="c"># See NOTE: swift_conn at top of file about this.</span>
</span><span class='line'>            <span class="n">res</span><span class="o">.</span><span class="n">swift_conn</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="n">swift_conn</span>
</span><span class='line'>        <span class="n">res</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="n">status</span>
</span><span class='line'>        <span class="n">update_headers</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">source</span><span class="o">.</span><span class="n">getheaders</span><span class="p">())</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">res</span><span class="o">.</span><span class="n">environ</span><span class="p">:</span>
</span><span class='line'>            <span class="n">res</span><span class="o">.</span><span class="n">environ</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="n">res</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;swift_x_timestamp&#39;</span><span class="p">]</span> <span class="o">=</span> \
</span><span class='line'>            <span class="n">source</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;x-timestamp&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">res</span><span class="o">.</span><span class="n">accept_ranges</span> <span class="o">=</span> <span class="s">&#39;bytes&#39;</span>
</span><span class='line'>        <span class="n">res</span><span class="o">.</span><span class="n">content_length</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;Content-Length&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">source</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;Content-Type&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="n">res</span><span class="o">.</span><span class="n">charset</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>            <span class="n">res</span><span class="o">.</span><span class="n">content_type</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="n">getheader</span><span class="p">(</span><span class="s">&#39;Content-Type&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">res</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
* 先获取source和node，如果有的话，则根据req参数封装response，如果请求是'GET'并且source的状态是200或206,则设置response的app_iter和conn。
* 将source的状态码和header设置进response，再分别根据source的内容设置返回的response的值。</p>

<h2>Controller类</h2>

<h3>init方法</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;&quot;&quot;Base WSGI controller class for the proxy&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">server_type</span> <span class="o">=</span> <span class="s">&#39;Base&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Ensure these are all lowercase</span>
</span><span class='line'><span class="n">pass_through_headers</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">app</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Creates a controller attached to an application instance</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param app: the application instance</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">account_name</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">trans_id</span> <span class="o">=</span> <span class="s">&#39;-&#39;</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">_allowed_methods</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 设置类型为base，初始化方法，创建controller时使用。</p>

<h3>allowed_methods</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@property</span>
</span><span class='line'><span class="k">def</span> <span class="nf">allowed_methods</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_allowed_methods</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_allowed_methods</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'>        <span class="n">all_methods</span> <span class="o">=</span> <span class="n">inspect</span><span class="o">.</span><span class="n">getmembers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">predicate</span><span class="o">=</span><span class="n">inspect</span><span class="o">.</span><span class="n">ismethod</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">all_methods</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="s">&#39;publicly_accessible&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">):</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">_allowed_methods</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_allowed_methods</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 类属性变量allowed_methods的初始化方法。</p>

<h3>transfer_headers</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">transfer_headers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">src_headers</span><span class="p">,</span> <span class="n">dst_headers</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Transfer legal headers from an original client request to dictionary</span>
</span><span class='line'><span class="sd">    that will be used as headers by the backend request</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param src_headers: A dictionary of the original client request headers</span>
</span><span class='line'><span class="sd">    :param dst_headers: A dictionary of the backend request headers</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">st</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">x_remove</span> <span class="o">=</span> <span class="s">&#39;x-remove-</span><span class="si">%s</span><span class="s">-meta-&#39;</span> <span class="o">%</span> <span class="n">st</span>
</span><span class='line'>    <span class="n">dst_headers</span><span class="o">.</span><span class="n">update</span><span class="p">((</span><span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;-remove&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>                       <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">src_headers</span>
</span><span class='line'>                       <span class="k">if</span> <span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="n">x_remove</span><span class="p">)</span> <span class="ow">or</span>
</span><span class='line'>                       <span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_x_remove_headers</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dst_headers</span><span class="o">.</span><span class="n">update</span><span class="p">((</span><span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">(),</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'>                       <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">src_headers</span><span class="o">.</span><span class="n">iteritems</span><span class="p">()</span>
</span><span class='line'>                       <span class="k">if</span> <span class="n">k</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">pass_through_headers</span> <span class="ow">or</span>
</span><span class='line'>                       <span class="n">is_sys_or_user_meta</span><span class="p">(</span><span class="n">st</span><span class="p">,</span> <span class="n">k</span><span class="p">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 将一个原始客户端请求的遗留header转换为新的header，给后台进程使用。</p>

<h3>transfer_headers</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">generate_request_headers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">orig_req</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">additional</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
</span><span class='line'>                             <span class="n">transfer</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Create a list of headers to be used in backend requets</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param orig_req: the original request sent by the client to the proxy</span>
</span><span class='line'><span class="sd">    :param additional: additional headers to send to the backend</span>
</span><span class='line'><span class="sd">    :param transfer: If True, transfer headers from original client request</span>
</span><span class='line'><span class="sd">    :returns: a dictionary of headers</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="c"># Use the additional headers first so they don&#39;t overwrite the headers</span>
</span><span class='line'>    <span class="c"># we require.</span>
</span><span class='line'>    <span class="n">headers</span> <span class="o">=</span> <span class="n">HeaderKeyDict</span><span class="p">(</span><span class="n">additional</span><span class="p">)</span> <span class="k">if</span> <span class="n">additional</span> <span class="k">else</span> <span class="n">HeaderKeyDict</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">transfer</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">transfer_headers</span><span class="p">(</span><span class="n">orig_req</span><span class="o">.</span><span class="n">headers</span><span class="p">,</span> <span class="n">headers</span><span class="p">)</span>
</span><span class='line'>    <span class="n">headers</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="s">&#39;x-timestamp&#39;</span><span class="p">,</span> <span class="n">normalize_timestamp</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()))</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">orig_req</span><span class="p">:</span>
</span><span class='line'>        <span class="n">referer</span> <span class="o">=</span> <span class="n">orig_req</span><span class="o">.</span><span class="n">as_referer</span><span class="p">()</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">referer</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>    <span class="n">headers</span><span class="p">[</span><span class="s">&#39;x-trans-id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">trans_id</span>
</span><span class='line'>    <span class="n">headers</span><span class="p">[</span><span class="s">&#39;connection&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;close&#39;</span>
</span><span class='line'>    <span class="n">headers</span><span class="p">[</span><span class="s">&#39;user-agent&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;proxy-server </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">()</span>
</span><span class='line'>    <span class="n">headers</span><span class="p">[</span><span class="s">&#39;referer&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">referer</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">headers</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 生成一组headers为后台进程使用。</p>

<h3>account_info</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">account_info</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">req</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Get account information, and also verify that the account exists.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param account: name of the account to get the info for</span>
</span><span class='line'><span class="sd">    :param req: caller&#39;s HTTP request context object (optional)</span>
</span><span class='line'><span class="sd">    :returns: tuple of (account partition, account nodes, container_count)</span>
</span><span class='line'><span class="sd">              or (None, None, None) if it does not exist</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">partition</span><span class="p">,</span> <span class="n">nodes</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">account_ring</span><span class="o">.</span><span class="n">get_nodes</span><span class="p">(</span><span class="n">account</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">req</span><span class="p">:</span>
</span><span class='line'>        <span class="n">env</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="s">&#39;environ&#39;</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">env</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">get_info</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;container_count&#39;</span><span class="p">)</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">container_count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">container_count</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="s">&#39;container_count&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">partition</span><span class="p">,</span> <span class="n">nodes</span><span class="p">,</span> <span class="n">container_count</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 获取account信息，正常返回分区号，节点和容器数量，获取不到返回3个None。</p>

<h3>account_info</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">container_info</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">req</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Get container information and thusly verify container existence.</span>
</span><span class='line'><span class="sd">    This will also verify account existence.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param account: account name for the container</span>
</span><span class='line'><span class="sd">    :param container: container name to look up</span>
</span><span class='line'><span class="sd">    :param req: caller&#39;s HTTP request context object (optional)</span>
</span><span class='line'><span class="sd">    :returns: dict containing at least container partition (&#39;partition&#39;),</span>
</span><span class='line'><span class="sd">              container nodes (&#39;containers&#39;), container read</span>
</span><span class='line'><span class="sd">              acl (&#39;read_acl&#39;), container write acl (&#39;write_acl&#39;),</span>
</span><span class='line'><span class="sd">              and container sync key (&#39;sync_key&#39;).</span>
</span><span class='line'><span class="sd">              Values are set to None if the container does not exist.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">part</span><span class="p">,</span> <span class="n">nodes</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">container_ring</span><span class="o">.</span><span class="n">get_nodes</span><span class="p">(</span><span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">req</span><span class="p">:</span>
</span><span class='line'>        <span class="n">env</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="s">&#39;environ&#39;</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">env</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="n">get_info</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">info</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span> <span class="o">=</span> <span class="n">headers_to_container_info</span><span class="p">({},</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">info</span><span class="p">[</span><span class="s">&#39;partition&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="n">info</span><span class="p">[</span><span class="s">&#39;nodes&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">info</span><span class="p">[</span><span class="s">&#39;partition&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">part</span>
</span><span class='line'>        <span class="n">info</span><span class="p">[</span><span class="s">&#39;nodes&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">nodes</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">info</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 获取container信息，会顺便校验container是否存在，也会校验account是否存在。</p>

<h3>make_request(私有方法)</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">_make_request</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nodes</span><span class="p">,</span> <span class="n">part</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">query</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">logger_thread_locals</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Iterates over the given node iterator, sending an HTTP request to one</span>
</span><span class='line'><span class="sd">    node at a time.  The first non-informational, non-server-error</span>
</span><span class='line'><span class="sd">    response is returned.  If no non-informational, non-server-error</span>
</span><span class='line'><span class="sd">    response is received from any of the nodes, returns None.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param nodes: an iterator of the backend server and handoff servers</span>
</span><span class='line'><span class="sd">    :param part: the partition number</span>
</span><span class='line'><span class="sd">    :param method: the method to send to the backend</span>
</span><span class='line'><span class="sd">    :param path: the path to send to the backend</span>
</span><span class='line'><span class="sd">                 (full path ends up being /&amp;lt;$device&amp;gt;/&amp;lt;$part&amp;gt;/&amp;lt;$path&amp;gt;)</span>
</span><span class='line'><span class="sd">    :param headers: a list of dicts, where each dict represents one</span>
</span><span class='line'><span class="sd">                    backend request that should be made.</span>
</span><span class='line'><span class="sd">    :param query: query string to send to the backend.</span>
</span><span class='line'><span class="sd">    :param logger_thread_locals: The thread local values to be set on the</span>
</span><span class='line'><span class="sd">                                 self.app.logger to retain transaction</span>
</span><span class='line'><span class="sd">                                 logging information.</span>
</span><span class='line'><span class="sd">    :returns: a swob.Response object, or None if no responses were received</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">thread_locals</span> <span class="o">=</span> <span class="n">logger_thread_locals</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">nodes</span><span class="p">:</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">start_node_timing</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'>            <span class="k">with</span> <span class="n">ConnectionTimeout</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">conn_timeout</span><span class="p">):</span>
</span><span class='line'>                <span class="n">conn</span> <span class="o">=</span> <span class="n">http_connect</span><span class="p">(</span><span class="n">node</span><span class="p">[</span><span class="s">&#39;ip&#39;</span><span class="p">],</span> <span class="n">node</span><span class="p">[</span><span class="s">&#39;port&#39;</span><span class="p">],</span>
</span><span class='line'>                                    <span class="n">node</span><span class="p">[</span><span class="s">&#39;device&#39;</span><span class="p">],</span> <span class="n">part</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span>
</span><span class='line'>                                    <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">query_string</span><span class="o">=</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>                <span class="n">conn</span><span class="o">.</span><span class="n">node</span> <span class="o">=</span> <span class="n">node</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">set_node_timing</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_node_timing</span><span class="p">)</span>
</span><span class='line'>            <span class="k">with</span> <span class="n">Timeout</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">node_timeout</span><span class="p">):</span>
</span><span class='line'>                <span class="n">resp</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">getresponse</span><span class="p">()</span>
</span><span class='line'>                <span class="k">if</span> <span class="ow">not</span> <span class="n">is_informational</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">status</span><span class="p">)</span> <span class="ow">and</span> \
</span><span class='line'>                        <span class="ow">not</span> <span class="n">is_server_error</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">status</span><span class="p">):</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">resp</span><span class="o">.</span><span class="n">status</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">reason</span><span class="p">,</span> <span class="n">resp</span><span class="o">.</span><span class="n">getheaders</span><span class="p">(),</span> \
</span><span class='line'>                        <span class="n">resp</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>                <span class="k">elif</span> <span class="n">resp</span><span class="o">.</span><span class="n">status</span> <span class="o">==</span> <span class="n">HTTP_INSUFFICIENT_STORAGE</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">error_limit</span><span class="p">(</span><span class="n">node</span><span class="p">,</span>
</span><span class='line'>                                         <span class="n">_</span><span class="p">(</span><span class="s">&#39;ERROR Insufficient Storage&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="k">except</span> <span class="p">(</span><span class="ne">Exception</span><span class="p">,</span> <span class="n">Timeout</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">exception_occurred</span><span class="p">(</span>
</span><span class='line'>                <span class="n">node</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span><span class="p">,</span>
</span><span class='line'>                <span class="n">_</span><span class="p">(</span><span class="s">&#39;Trying to </span><span class="si">%(method)s</span><span class="s"> </span><span class="si">%(path)s</span><span class="s">&#39;</span><span class="p">)</span> <span class="o">%</span>
</span><span class='line'>                <span class="p">{</span><span class="s">&#39;method&#39;</span><span class="p">:</span> <span class="n">method</span><span class="p">,</span> <span class="s">&#39;path&#39;</span><span class="p">:</span> <span class="n">path</span><span class="p">})</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 遍历每个节点，根据节点信息发起请求，如果请求不是100+和500+，则返回请求结果。
* 如果请求状态码为507，则加入node到异常node列表。
* 其他异常抛出异常信息。</p>

<h3>make_requests</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">make_requests</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">ring</span><span class="p">,</span> <span class="n">part</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">query_string</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Sends an HTTP request to multiple nodes and aggregates the results.</span>
</span><span class='line'><span class="sd">    It attempts the primary nodes concurrently, then iterates over the</span>
</span><span class='line'><span class="sd">    handoff nodes as needed.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param req: a request sent by the client</span>
</span><span class='line'><span class="sd">    :param ring: the ring used for finding backend servers</span>
</span><span class='line'><span class="sd">    :param part: the partition number</span>
</span><span class='line'><span class="sd">    :param method: the method to send to the backend</span>
</span><span class='line'><span class="sd">    :param path: the path to send to the backend</span>
</span><span class='line'><span class="sd">                 (full path ends up being  /&amp;lt;$device&amp;gt;/&amp;lt;$part&amp;gt;/&amp;lt;$path&amp;gt;)</span>
</span><span class='line'><span class="sd">    :param headers: a list of dicts, where each dict represents one</span>
</span><span class='line'><span class="sd">                    backend request that should be made.</span>
</span><span class='line'><span class="sd">    :param query_string: optional query string to send to the backend</span>
</span><span class='line'><span class="sd">    :returns: a swob.Response object</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">start_nodes</span> <span class="o">=</span> <span class="n">ring</span><span class="o">.</span><span class="n">get_part_nodes</span><span class="p">(</span><span class="n">part</span><span class="p">)</span>
</span><span class='line'>    <span class="n">nodes</span> <span class="o">=</span> <span class="n">GreenthreadSafeIterator</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">iter_nodes</span><span class="p">(</span><span class="n">ring</span><span class="p">,</span> <span class="n">part</span><span class="p">))</span>
</span><span class='line'>    <span class="n">pile</span> <span class="o">=</span> <span class="n">GreenAsyncPile</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">start_nodes</span><span class="p">))</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">head</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">:</span>
</span><span class='line'>        <span class="n">pile</span><span class="o">.</span><span class="n">spawn</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_make_request</span><span class="p">,</span> <span class="n">nodes</span><span class="p">,</span> <span class="n">part</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">head</span><span class="p">,</span> <span class="n">query_string</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">thread_locals</span><span class="p">)</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">statuses</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">resp</span> <span class="ow">in</span> <span class="n">pile</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">resp</span><span class="p">:</span>
</span><span class='line'>            <span class="k">continue</span>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">resp</span><span class="p">)</span>
</span><span class='line'>        <span class="n">statuses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">resp</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">have_quorum</span><span class="p">(</span><span class="n">statuses</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">start_nodes</span><span class="p">)):</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>    <span class="c"># give any pending requests *some* chance to finish</span>
</span><span class='line'>    <span class="n">pile</span><span class="o">.</span><span class="n">waitall</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">post_quorum_timeout</span><span class="p">)</span>
</span><span class='line'>    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="nb">len</span><span class="p">(</span><span class="n">start_nodes</span><span class="p">):</span>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">HTTP_SERVICE_UNAVAILABLE</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">statuses</span><span class="p">,</span> <span class="n">reasons</span><span class="p">,</span> <span class="n">resp_headers</span><span class="p">,</span> <span class="n">bodies</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">best_response</span><span class="p">(</span><span class="n">req</span><span class="p">,</span> <span class="n">statuses</span><span class="p">,</span> <span class="n">reasons</span><span class="p">,</span> <span class="n">bodies</span><span class="p">,</span>
</span><span class='line'>                              <span class="s">&#39;</span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">server_type</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">method</span><span class="p">),</span>
</span><span class='line'>                              <span class="n">headers</span><span class="o">=</span><span class="n">resp_headers</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 先通过partition获取node节点，再根据节点个数创建线程发起每个节点请求。
* 获取每个线程的返回结果，将状态码和响应结果记录保存到列表中，如果状态码列表个数超过节点的一半，则跳出循环。
* 将剩下的response设置为503，最后通过best_response方法获取response。</p>

<h3>have_quorum</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">have_quorum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">statuses</span><span class="p">,</span> <span class="n">node_count</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Given a list of statuses from several requests, determine if</span>
</span><span class='line'><span class="sd">    a quorum response can already be decided.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param statuses: list of statuses returned</span>
</span><span class='line'><span class="sd">    :param node_count: number of nodes being queried (basically ring count)</span>
</span><span class='line'><span class="sd">    :returns: True or False, depending on if quorum is established</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">quorum</span> <span class="o">=</span> <span class="n">quorum_size</span><span class="p">(</span><span class="n">node_count</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">statuses</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">quorum</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">hundred</span> <span class="ow">in</span> <span class="p">(</span><span class="n">HTTP_OK</span><span class="p">,</span> <span class="n">HTTP_MULTIPLE_CHOICES</span><span class="p">,</span> <span class="n">HTTP_BAD_REQUEST</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">sum</span><span class="p">(</span><span class="mi">1</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">statuses</span>
</span><span class='line'>                   <span class="k">if</span> <span class="n">hundred</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">s</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">hundred</span> <span class="o">+</span> <span class="mi">100</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">quorum</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 通过节点个数和一组状态码判断响应是否已经满足限额。</p>

<h3>best_response</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">best_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">statuses</span><span class="p">,</span> <span class="n">reasons</span><span class="p">,</span> <span class="n">bodies</span><span class="p">,</span> <span class="n">server_type</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">etag</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Given a list of responses from several servers, choose the best to</span>
</span><span class='line'><span class="sd">    return to the API.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param req: swob.Request object</span>
</span><span class='line'><span class="sd">    :param statuses: list of statuses returned</span>
</span><span class='line'><span class="sd">    :param reasons: list of reasons for each status</span>
</span><span class='line'><span class="sd">    :param bodies: bodies of each response</span>
</span><span class='line'><span class="sd">    :param server_type: type of server the responses came from</span>
</span><span class='line'><span class="sd">    :param etag: etag</span>
</span><span class='line'><span class="sd">    :param headers: headers of each response</span>
</span><span class='line'><span class="sd">    :returns: swob.Response object with the correct status, body, etc. set</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">resp</span> <span class="o">=</span> <span class="n">Response</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">statuses</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">hundred</span> <span class="ow">in</span> <span class="p">(</span><span class="n">HTTP_OK</span><span class="p">,</span> <span class="n">HTTP_MULTIPLE_CHOICES</span><span class="p">,</span> <span class="n">HTTP_BAD_REQUEST</span><span class="p">):</span>
</span><span class='line'>            <span class="n">hstatuses</span> <span class="o">=</span> \
</span><span class='line'>                <span class="p">[</span><span class="n">s</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">statuses</span> <span class="k">if</span> <span class="n">hundred</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">s</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">hundred</span> <span class="o">+</span> <span class="mi">100</span><span class="p">]</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">hstatuses</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">quorum_size</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">statuses</span><span class="p">)):</span>
</span><span class='line'>                <span class="n">status</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">hstatuses</span><span class="p">)</span>
</span><span class='line'>                <span class="n">status_index</span> <span class="o">=</span> <span class="n">statuses</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>                <span class="n">resp</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">reasons</span><span class="p">[</span><span class="n">status_index</span><span class="p">])</span>
</span><span class='line'>                <span class="n">resp</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">bodies</span><span class="p">[</span><span class="n">status_index</span><span class="p">]</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">headers</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">update_headers</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="n">headers</span><span class="p">[</span><span class="n">status_index</span><span class="p">])</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">etag</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;etag&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">etag</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;&quot;&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">resp</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="n">_</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%(type)s</span><span class="s"> returning 503 for </span><span class="si">%(statuses)s</span><span class="s">&#39;</span><span class="p">),</span>
</span><span class='line'>                          <span class="p">{</span><span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="n">server_type</span><span class="p">,</span> <span class="s">&#39;statuses&#39;</span><span class="p">:</span> <span class="n">statuses</span><span class="p">})</span>
</span><span class='line'>    <span class="n">resp</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">&#39;503 Internal Server Error&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">resp</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 给定一组response，返回最佳的response。
* 比如副本数是3,response列表是[201,201,503],则返回201。</p>

<h3>autocreate_account</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">autocreate_account</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Autocreate an account</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param env: the environment of the request leading to this autocreate</span>
</span><span class='line'><span class="sd">    :param account: the unquoted account name</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">partition</span><span class="p">,</span> <span class="n">nodes</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">account_ring</span><span class="o">.</span><span class="n">get_nodes</span><span class="p">(</span><span class="n">account</span><span class="p">)</span>
</span><span class='line'>    <span class="n">path</span> <span class="o">=</span> <span class="s">&#39;/</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">account</span>
</span><span class='line'>    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;X-Timestamp&#39;</span><span class="p">:</span> <span class="n">normalize_timestamp</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()),</span>
</span><span class='line'>               <span class="s">&#39;X-Trans-Id&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">trans_id</span><span class="p">,</span>
</span><span class='line'>               <span class="s">&#39;Connection&#39;</span><span class="p">:</span> <span class="s">&#39;close&#39;</span><span class="p">}</span>
</span><span class='line'>    <span class="n">resp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">make_requests</span><span class="p">(</span><span class="n">Request</span><span class="o">.</span><span class="n">blank</span><span class="p">(</span><span class="s">&#39;/v1&#39;</span> <span class="o">+</span> <span class="n">path</span><span class="p">),</span>
</span><span class='line'>                              <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">account_ring</span><span class="p">,</span> <span class="n">partition</span><span class="p">,</span> <span class="s">&#39;PUT&#39;</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">path</span><span class="p">,</span> <span class="p">[</span><span class="n">headers</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">nodes</span><span class="p">))</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">is_success</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">status_int</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;autocreate account </span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'>        <span class="n">clear_info_cache</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">,</span> <span class="n">env</span><span class="p">,</span> <span class="n">account</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s">&#39;Could not autocreate account </span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 发起一个PUT请求自动创建account，创建失败记录警告信息。</p>

<h3>GETorHEAD_base</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">GETorHEAD_base</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">server_type</span><span class="p">,</span> <span class="n">ring</span><span class="p">,</span> <span class="n">partition</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Base handler for HTTP GET or HEAD requests.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param req: swob.Request object</span>
</span><span class='line'><span class="sd">    :param server_type: server type used in logging</span>
</span><span class='line'><span class="sd">    :param ring: the ring to obtain nodes from</span>
</span><span class='line'><span class="sd">    :param partition: partition</span>
</span><span class='line'><span class="sd">    :param path: path for the request</span>
</span><span class='line'><span class="sd">    :returns: swob.Response object</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">backend_headers</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">generate_request_headers</span><span class="p">(</span>
</span><span class='line'>        <span class="n">req</span><span class="p">,</span> <span class="n">additional</span><span class="o">=</span><span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">handler</span> <span class="o">=</span> <span class="n">GetOrHeadHandler</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">server_type</span><span class="p">,</span> <span class="n">ring</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">partition</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">backend_headers</span><span class="p">)</span>
</span><span class='line'>    <span class="n">res</span> <span class="o">=</span> <span class="n">handler</span><span class="o">.</span><span class="n">get_working_response</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">res</span><span class="p">:</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">best_response</span><span class="p">(</span>
</span><span class='line'>            <span class="n">req</span><span class="p">,</span> <span class="n">handler</span><span class="o">.</span><span class="n">statuses</span><span class="p">,</span> <span class="n">handler</span><span class="o">.</span><span class="n">reasons</span><span class="p">,</span> <span class="n">handler</span><span class="o">.</span><span class="n">bodies</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;</span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">server_type</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">method</span><span class="p">),</span>
</span><span class='line'>            <span class="n">headers</span><span class="o">=</span><span class="n">handler</span><span class="o">.</span><span class="n">source_headers</span><span class="p">)</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="p">(</span><span class="n">vrs</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">)</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">split_path</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>        <span class="n">_set_info_cache</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="p">(</span><span class="n">vrs</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">)</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">split_path</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="n">_set_object_info_cache</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">container</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">res</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 基类controller的get或head请求处理方法，首先构造header和handler发起一个http请求。
* 如果请求没有响应，则调用best_response方法取到response。
* 如果请求有响应，则根据request分割出account、container和object信息，设置到缓存中，最后返回response。</p>

<h3>is_origin_allowed</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">is_origin_allowed</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cors_info</span><span class="p">,</span> <span class="n">origin</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Is the given Origin allowed to make requests to this resource</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param cors_info: the resource&#39;s CORS related metadata headers</span>
</span><span class='line'><span class="sd">    :param origin: the origin making the request</span>
</span><span class='line'><span class="sd">    :return: True or False</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">allowed_origins</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">cors_info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;allow_origin&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">allowed_origins</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>
</span><span class='line'>            <span class="p">[</span><span class="n">a</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>             <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">cors_info</span><span class="p">[</span><span class="s">&#39;allow_origin&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>             <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">strip</span><span class="p">()])</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">cors_allow_origin</span><span class="p">:</span>
</span><span class='line'>        <span class="n">allowed_origins</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">cors_allow_origin</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">origin</span> <span class="ow">in</span> <span class="n">allowed_origins</span> <span class="ow">or</span> <span class="s">&#39;*&#39;</span> <span class="ow">in</span> <span class="n">allowed_origins</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 判断该请求方法是否允许发起请求，先从header中获取'allow_origin'的值，如果有的花，更新允许访问列表。
* 如果原请求方法在允许访问列表中，或者允许访问列表中有'*&lsquo;，则返回True。</p>

<h3>OPTIONS</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@public</span>
</span><span class='line'><span class="k">def</span> <span class="nf">OPTIONS</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Base handler for OPTIONS requests</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    :param req: swob.Request object</span>
</span><span class='line'><span class="sd">    :returns: swob.Response object</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="c"># Prepare the default response</span>
</span><span class='line'>    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;Allow&#39;</span><span class="p">:</span> <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">allowed_methods</span><span class="p">)}</span>
</span><span class='line'>    <span class="n">resp</span> <span class="o">=</span> <span class="n">Response</span><span class="p">(</span><span class="n">status</span><span class="o">=</span><span class="mi">200</span><span class="p">,</span> <span class="n">request</span><span class="o">=</span><span class="n">req</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># If this isn&#39;t a CORS pre-flight request then return now</span>
</span><span class='line'>    <span class="n">req_origin_value</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;Origin&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">req_origin_value</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resp</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* options请求的基本handler，准备一个默认的response，如果不是一个CORS请求，则返回默认的response。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="c"># This is a CORS preflight request so check it&#39;s allowed</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">container_info</span> <span class="o">=</span> \
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">container_info</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">account_name</span><span class="p">,</span>
</span><span class='line'>                                <span class="bp">self</span><span class="o">.</span><span class="n">container_name</span><span class="p">,</span> <span class="n">req</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">AttributeError</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># This should only happen for requests to the Account. A future</span>
</span><span class='line'>        <span class="c"># change could allow CORS requests to the Account level as well.</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resp</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cors</span> <span class="o">=</span> <span class="n">container_info</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;cors&#39;</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># If the CORS origin isn&#39;t allowed return a 401</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_origin_allowed</span><span class="p">(</span><span class="n">cors</span><span class="p">,</span> <span class="n">req_origin_value</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span>
</span><span class='line'>            <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;Access-Control-Request-Method&#39;</span><span class="p">)</span> <span class="ow">not</span> <span class="ow">in</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">allowed_methods</span><span class="p">):</span>
</span><span class='line'>        <span class="n">resp</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">HTTP_UNAUTHORIZED</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resp</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 如果对account进行操作的CORS请求，则返回默认reponse，否则获取container信息。
* 如果CORS请求不允许，则返回401。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="c"># Allow all headers requested in the request. The CORS</span>
</span><span class='line'>    <span class="c"># specification does leave the door open for this, as mentioned in</span>
</span><span class='line'>    <span class="c"># http://www.w3.org/TR/cors/#resource-preflight-requests</span>
</span><span class='line'>    <span class="c"># Note: Since the list of headers can be unbounded</span>
</span><span class='line'>    <span class="c"># simply returning headers can be enough.</span>
</span><span class='line'>    <span class="n">allow_headers</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;Access-Control-Request-Headers&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">allow_headers</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>
</span><span class='line'>            <span class="n">list_from_csv</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">&#39;Access-Control-Request-Headers&#39;</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Populate the response with the CORS preflight headers</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">cors</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;allow_origin&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="o">==</span> <span class="s">&#39;*&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">headers</span><span class="p">[</span><span class="s">&#39;access-control-allow-origin&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;*&#39;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">headers</span><span class="p">[</span><span class="s">&#39;access-control-allow-origin&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">req_origin_value</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">cors</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;max_age&#39;</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">headers</span><span class="p">[</span><span class="s">&#39;access-control-max-age&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cors</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;max_age&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">headers</span><span class="p">[</span><span class="s">&#39;access-control-allow-methods&#39;</span><span class="p">]</span> <span class="o">=</span> \
</span><span class='line'>        <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">allowed_methods</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">allow_headers</span><span class="p">:</span>
</span><span class='line'>        <span class="n">headers</span><span class="p">[</span><span class="s">&#39;access-control-allow-headers&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">allow_headers</span><span class="p">)</span>
</span><span class='line'>    <span class="n">resp</span><span class="o">.</span><span class="n">headers</span> <span class="o">=</span> <span class="n">headers</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">resp</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
* 在response的header中增加相关header，分别有'access-control-allow-origin',&lsquo;access-control-max-age&rsquo;,&lsquo;access-control-allow-methods'和'access-control-allow-headers'。</p>
]]></content>
  </entry>
  
</feed>
