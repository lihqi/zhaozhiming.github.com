<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2016-06-15T11:12:36+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[开发团队里是否需要测试人员？]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/06/12/do-we-need-tester-in-our-team/"/>
    <updated>2016-06-12T20:06:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/06/12/do-we-need-tester-in-our-team</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2016/06/qa.png" width="400" height="300"></p>

<p>最近在看“<a href="https://book.douban.com/subject/4163938">软件随想录</a>”，里面有个非常有名的“<a href="http://www.joelonsoftware.com/articles/fog0000000043.html">乔尔测试</a>”，其中有一个问题是“你的团队里面是否有测试人员”，如果有的话就加分，表明团队对产品质量比较重视。</p>

<p>但是在现在的软件开发团队中是否真的需要测试人员呢？</p>

<!--more-->


<p></p>

<h2>如何替代测试人员的工作</h2>

<p>我们先来看一下测试人员的工作是什么？测试人员的工作是尽可能的找出bug，然后提交给开发人员进行修复。如果团队里面没有测试人员，开发人员要如何找bug呢？</p>

<p>首先我们来看测试人员做的最多的测试——功能测试，对于功能测试我们有什么办法可以来替代呢？</p>

<h4>单元测试</h4>

<p>单元测试是开发人员找出代码中潜在bug的自我救赎行为，相比手工测试功能，开发人员一般更倾向于写代码来测试功能代码，即所谓的单元测试。只要能想到相应的测试案例，就能写出单元测试，可以测试包括正常，异常，分支，边界等情况下的问题。</p>

<h4>集成测试</h4>

<p>单元测试虽然可以找到一些bug，但还不能完全替代测试人员的工作，单元测试只能测试细粒度级别的功能，比如某个方法的功能，如果需要对几个功能点一起测试的话，单元测试就满足不了了。但没有关系，开发同样可以用代码来写测试，这种粒度稍大的测试就是集成测试，比如测试一个后端的api，验证输入参数和输出结果，这个api的真正功能可能是后端调用数据库等一系列的操作，你一个测试方法就可以把这个api的各个功能点串起来一起验证。</p>

<h4>UI测试</h4>

<p>还有粒度更大的测试，一个页面上的按钮的点击可以看成是UI测试，相对于集成测试，这个测试的范围涉及了前端和后端，测试包括验证前端的页面是否正确，到点击按钮后触发的后端功能是否正确。现在市面上有很多端到端的测试框架，涵盖各种语言和浏览器。</p>

<h4>性能测试</h4>

<p>除了功能测试，测试人员还会做一些性能测试，同样地，开发可以通过代码或者脚本来调用性能测试工具来对系统进行性能测试。</p>

<h4>持续集成</h4>

<p>如果不想像测试人员一样每天做重复性的劳动，就可以将以上那些测试代码放到持续集成上面，让机器帮你运行，想象一下，几百上千个测试，如果手工跑的话可能要花不止一天的时间，而通过持续集成，可能在一天就能跑完好几轮所有测试。</p>

<h2>不能替代的测试工作</h2>

<p>如果我们做到了以上这些，是否就可以完全代替测试人员了呢？其实有些测试是机器无法测试的，比如网页的样式，机器只能判断是否有显示，但无法判断显示的是否好看。还有一些交互效果，也只有通过人工才能识别效果是否正确，还有其他各个领域的测试，目前是不能通过代码或者机器来替代的。</p>

<h2>高级测试工程师</h2>

<p>可能有人会说上面提到的用代码来执行测试的工作，高级测试工程师也能做。其实我觉得软件开发和软件测试到了越高的位置，技能重合的领域就越大，两者都同时会写代码，做测试，可能还会部署，会运维，这个时候我觉得不如就叫高级工程师好了，或者全栈工程师。</p>

<h2>结论</h2>

<p>说了这么多，所以结论是什么呢？</p>

<p>具体情况要具体分析，不能一概而论说完全不需要测试人员，团队不需要测试人员的条件是：</p>

<ul>
<li>团队的开发人员可以写的单元测试，集成测试和UI测试</li>
<li>没有太多需要人工测试的功能，比如团队开发的是常规的web系统或者纯后端应用等</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何写好办公室邮件]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/05/31/how-to-write-email-in-office/"/>
    <updated>2016-05-31T08:12:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/05/31/how-to-write-email-in-office</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2016/05/email.jpg" width="400" height="300"></p>

<p>一封电子邮件可以让人看出你的职业素养和专业水平，以前我在平安科技公司工作，在那里沟通主要是通过电子邮件的方式来进行，所以我也学到了一些关于电子邮件的规范和注意事项，在这里分享给大家。</p>

<!--more-->


<p></p>

<h2>收件人</h2>

<p>可能大家觉得收件人这一块没什么好注意的，把邮件地址放到收件人栏里不就可以了吗？我只能说：<code>图样图森破</code>。</p>

<h4>收件人的顺序很重要</h4>

<p>如果收件人中有本部门的同事和领导，应该先将领导的名字放在前面，其他同事的名字后面放在后面，已显示对领导的尊重。请注意，这不是拍马屁，而是一种职场礼仪，而且是每个行业都会有的规则，比如VIP总会被优先接待。</p>

<p>如果收件人中有本部门和其他部门的人，先将其他部门的人放在前面，后面才放本部门的人。不管其他部门的人职位高低，其顺序总是先于本部门的人，同一部门的人按照领导前同事后的顺序排列。</p>

<h3>抄送人 !== 收件人</h3>

<p>有些人发送邮件喜欢把邮件地址一股脑都放到收件人那一栏中，而没有真正想过收件人和抄送人的区别。收件人是你发邮件的主要接收方，而抄送人并不是，发邮件给抄送人起到的是一个知会的目的，将抄送人的邮件地址放到收件人里会给抄送人带来困扰。</p>

<h2>标题</h2>

<p>标题要体现邮件的主题和重点，有几点需要注意：</p>

<ul>
<li>如果要引起别人注意，可以用中括号<code>【】</code>或<code>[]</code>把主题括起来，比如：<code>【 XX 活动通知】</code></li>
<li>如果需要别人帮助或者反馈，可以在标题中加上<code>求助</code>或<code>请反馈</code>的字样，比如：<code>【请反馈】上周例会待办事项进展</code></li>
<li>如果是会议邀请，可以在标题上写上时间和地点等信息，比如：<code>【会议邀请】部门例会(本周二下午2点)</code></li>
</ul>


<h2>正文</h2>

<h3>开门见山</h3>

<p>邮件内容建议开门见山，直述主题，同时言简意赅，以免浪费大家的时间。在以邮件为主要沟通手段的公司里，每人每天可能要处理几十上百封邮件，如果你发的邮件又臭又长，那收件人会很快失去耐心。</p>

<h3>套用模板</h3>

<p>邮件内容建议分成3个部分：称呼，正文，结尾，比如：XXX 您好，正文&hellip;，谢谢。不管你的邮件内容有多少，即使只有一句话，也请按照这种方式发送邮件，这样会让人觉得你发的邮件更加正式和专业。</p>

<h3>善用分段</h3>

<p>如果你看到一封邮件里面有很长的一段文字，那么你有很大的可能不会读完整封邮件。要如何避免这种情况呢？其实最好的办法就是将一大段文字拆成几个小段，建议一段文字不要超过一行，这样阅读者会非常容易读懂你的邮件，并有耐心看完全部内容。</p>

<h3>吸引眼球</h3>

<p>如果邮件内容比较长，需要收件人了解的内容又比较多怎么办呢？这个时候可以适当地将一段文字标成<code>红色</code>或者将其<code>加粗字号加大</code>，这样阅读者在读邮件的时候就会被<code>重点</code>标注的地方所吸引了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何快速熟悉新系统]]></title>
    <link href="http://zhaozhiming.github.io/blog/2016/02/28/how-to-know-well-new-project-quickly/"/>
    <updated>2016-02-28T17:05:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2016/02/28/how-to-know-well-new-project-quickly</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2016/02/new_guy.jpg"></p>

<p>很多工程师都会遇到这样一种情况：被指派到另外一个项目参与开发工作，这个项目已经开发了一段时间了，代码还比较多，作为一个项目的新人，要如何尽快地熟悉项目融入团队呢？</p>

<!--more-->


<p></p>

<h2>对系统进行测试</h2>

<p>作为一名新系统的小白，首先当然是要熟悉系统的功能，还有操作流程。</p>

<ul>
<li>如果有相关的系统说明文档（帮助手册）的话先阅读这些资料，了解系统是如何工作的，有哪些功能点。</li>
<li>了解了系统如何操作以后，对系统的各个功能点进行功能测试，通过手动操作来加深对系统的了解，并帮助系统找到bug。</li>
<li>发现bug后将bug记录起来，比如github（gitlab）上项目里的issue区域，并提醒其他开发人员关注这些问题。</li>
</ul>


<h2>尝试修复bug</h2>

<p>操作了一段时间系统后，可能你对系统功能已经有了一个大概的了解，但实际的代码可能还了解不多，这个时候你可以通过修复一些小bug来达到了解系统的目的。</p>

<ul>
<li>首先找到bug对应的页面或者文件，设置断点，运行程序，查看是什么原因导致发生bug。</li>
<li>搞清楚bug发生的原因后，动手修复这个bug。</li>
<li>修复bug后，如果有测试案例要保证不破坏其他测试案例，如果有测试案例失败了，这可能表示你修复的代码破坏了其他正常的功能。</li>
<li>对其他相关模块进行测试，保证没有其他副作用。</li>
<li>如果可以的话，让其他资深的开发人员给你review一下代码，看看你有没有改出问题，或者是有没有其他更好的解决方案。</li>
</ul>


<h2>为系统添加测试案例</h2>

<p>除了修复bug，还可以为系统添加测试案例。这里的测试案例是指单元测试、集成测试或者一些自动化测试。</p>

<ul>
<li>如果是写单元测试的话，要先读懂对应的功能代码，知道功能代码的逻辑是怎样的，有多少个分支需要写多少个测试案例才能覆盖完整。然后编写测试案例，并保证测试案例运行通过。</li>
<li>如果是集成测试或者自动化测试，先了解要测试的功能的流程是怎样的，是要读取数据库数据做校验，还是可以直接在页面上面校验等。然后编写测试案例，因为自动化测试可能由于网络延迟等原因会让你的测试有时成功有时失败，请记住要避免这种情况，确保测试是百分之百运行成功的。</li>
</ul>


<h2>对代码进行重构</h2>

<p>有时候系统开发久了，就会不知不觉产生一些烂代码，如果没有及时修复，整个系统可能就会慢慢腐烂，然后崩溃，最后维护都维护不了只能重做。所以如果你有一些代码重构的经验的话，可以在熟悉系统的过程中，通过代码重构的方式了解系统的代码。</p>

<ul>
<li>要重构代码，就要先熟悉你要改动的那一块代码，读懂它们并确保你做的重构不会影响到其他功能。</li>
<li>如果要重构的代码之前有单元测试那是最好的，你可以边重构边运行测试，只要不破坏测试就可以了，但如果没有单元测试的话，你最好是先加上单元测试，以保证你的重构不会破坏原来的功能。</li>
<li>这里的重构不是指哪种伤筋动骨的大改动，而是一些代码上的小修改，以让你的代码更具可读性和可维护性，比如变量名或方法名的重命名，相同代码的提取，长方法的分解等。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发人员神秘的工具箱]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/09/21/the-mysterious-tools-of-developer/"/>
    <updated>2015-09-21T10:06:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/09/21/the-mysterious-tools-of-developer</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2015-9/toolbox.jpeg" width="400" height="300"></p>

<p>需求、时间和质量是项目管理的三个平衡点，如果需求多、开发时间短必将会导致项目质量下降，那开发人员有什么办法在短时间内交付大量的需求（虽然质量低）呢？其实每个开发人员都有一套“神秘”的工具箱，在万不得已的时候就会开始使用它（这部分内容是以前参加<a href="https://www.linkedin.com/in/dteng">Daniel</a>的CSM课程的时候听到的，觉得很有意思，想和大家分享一下）。</p>

<!--more-->


<p></p>

<p><blockquote><p>天下武功，唯快不破</p><footer><strong>火云邪神</strong></footer></blockquote></p>

<h2>复制粘贴</h2>

<p>最常见的就是复制粘贴了，天下文章一大抄，何况代码了，把以前可以工作的代码拷贝过来，改改就可以用了，甚至改都不改一下就直接上线也是可以的。别人敲了半天的代码我按2次按键就搞定了，这就是效率！</p>

<p>别跟我说神马重复代码导致改一处地方要变成改多处地方，修改还容易遗漏这些balbal，我们听多了，Who care，明天的事情明天再说，现在最要紧的是赶紧把功能做出来上线，不然奖金泡汤你负责啊？</p>

<h2>在网上搜索代码然后拷过来直接用</h2>

<p>每当我没有灵感的时候，我都会上网搜一下有没有实现我想要的功能的代码，发现了的话就拷贝粘贴到我的代码里面，呵呵我的工作就算完成了。</p>

<p>你说什么？！不弄清楚代码原理直接用危险大？别人的代码不一定适用于我的工程？拜托，我弄清楚那些代码原理的时间，我都可以自己写一个实现了好吗？跟你说了现在最要紧的是上线，别跟我扯这些没用的！另外我用百度搜代码，那速度杠杠的，谁用谁知道啊，现在谁还费那么大劲翻墙访问google啊？！</p>

<h2>功能变成Bug</h2>

<p>上面2招都不好使了肿么办，系统明天就要上线了，功能完不成老板又要找我麻烦了。。。机智的我还是想到了办法，我轻轻地在键盘上敲下了实现该功能的方法名，然后。。。就完了，我已经把功能实现了，可以上线了。</p>

<p>什么？上线后发现啥功能都没有？额。。。我看看。。。哦，这里有个<strong>BUG</strong>，等下个版本一起修复吧！懂了吗？现在这里不是一个未完成的功能，而是一个<strong>BUG</strong>了，呵呵这种办法还不是一般人能想的出来的。</p>

<h2>没有测试</h2>

<p>测试？现在连睡觉的时间都没有，还要我做测试？Are you kidding me？这些东西交给用户不就可以了吗？用户是什么，不就是我们的小白鼠嘛呵呵。</p>

<p>单元测试是什么鬼？用代码来测试代码？我看你吃撑了吧？我写了一堆的代码实现了功能，然后还要写同样多的一堆代码来测试我原来那堆代码，但老板并没有给我双倍工资来做这个事情啊，所以还是省省吧！</p>

<h2>没有代码评审</h2>

<p>让一大群人围观我的代码，还要在上面鸡蛋里挑骨头，想想我也是醉了，我的代码我做主，不想那么多人来judge我的代码。</p>

<p>我知道代码评审是保证质量的有利手段，也有知识传递、宣传团队规则的好处，但为了快速上线，这些活动能砍就砍掉吧。</p>

<h2>没有重构</h2>

<p>重构我有时候也是会做的，像以前我的变量名称都是拼音首字母来命名的，后来我把我系统里面的变量名称重构了一遍，在每个变量名加上了我的名字缩写前缀，像这样：<code>sb_xxx</code>，是不是很机智呢呵呵。</p>

<p>但是为了让项目赶紧上线，我还是别浪费太多时间在重构上面了，等以后有时间再来做吧，或者都后面维护的兄弟来重构吧，前提是他能看懂我的代码：）</p>

<h2>硬编码</h2>

<p>为了更快的提高我编码速度，遇到一些可以直接硬编码我一般都不定义变量，这样可以保证我的思路不被起变量名这种麻烦事情打断，反正这些以后都是改的，到时候再来修改代码就好了。</p>

<p>你看隔壁那个老王又写测试又重构的，还说什么这样以后方便维护，可以快速定位问题，但尼玛搞了2天才完成，而我才花了2个小时，这才是效率啊！什么？后面我花了2个月才修复1个Bug，你是怎么知道的？</p>

<h2>加班</h2>

<p>加班是我能力的重要证明啊，加班让我多了一倍时间来做项目，还怕完不成么？！</p>

<p>加班除了聊天吃饭打游戏外，最重要的是让BOSS知道我在加班，凌晨半夜发个邮件到整个公司邮箱是必须的，下班走的时候在朋友圈晒张"加班的夜晚真美"之类的照片也是极好的。让BOSS知道我就算没有功劳也有苦劳，到时候项目完不成也不要怪我，因为我已经加班了。</p>

<p><img src="/images/post/2015-9/sb1.jpeg" width="300" height="300"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过TDD聊软件开发]]></title>
    <link href="http://zhaozhiming.github.io/blog/2015/09/15/say-something-about-develop-by-tdd/"/>
    <updated>2015-09-15T14:35:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2015/09/15/say-something-about-develop-by-tdd</id>
    <content type="html"><![CDATA[<p><img src="/images/post/2015-9/tdd.png" width="400" height="300"></p>

<p>TDD是由<a href="https://en.wikipedia.org/wiki/Extreme_programming">极限编程</a>提出的一个编程实践，与通常的编程行为相反，TDD是先编写测试案例，然后再编写功能代码，重复这样的一个过程直到功能实现完成为止。</p>

<!--more-->


<p></p>

<h2>TDD</h2>

<p>大家可能听过“六顶思考帽子”，说的是一种思维训练方式或者是一个全面思考问题的模型，我们借鉴思考帽子来说明TDD，可以看到最上面的那个图，三顶帽子分别表示TDD的三个步骤。</p>

<ul>
<li>红帽子: 编写一个测试案例，然后运行它，得到失败的测试结果</li>
<li>绿帽子: 编写功能代码，让失败的测试案例跑通过</li>
<li>蓝帽子: 对功能代码和测试代码进行重构</li>
</ul>


<p>为什么红代表失败，绿代表通过呢？可以想象成交通灯，红灯停绿灯行，在最早的时候是<a href="https://en.wikipedia.org/wiki/Kent_Beck">Kent Beck</a>开发的Junit，用它来跑单元测试的时候，失败会出现一个红色的进度条，成功会变成绿色的，所以红代表失败，绿代表成功。</p>

<p>需要注意的几点:</p>

<ul>
<li>在完成绿帽子的过程中，只需要添加让失败测试案例跑通过的功能代码，不要过渡设计。把整个功能代码都写完了，再来补单元测试，这种不是TDD。</li>
<li>在蓝帽子阶段，不仅要对功能代码进行重构，对测试代码也要进行重构，因为测试代码也是以后维护工作的一部分，如果你不认真对待它，它以后也不会好好对待你，烂测试比没有测试更恼火。</li>
</ul>


<p>一直重复这3个步骤，直到你的功能开发完成，这就是TDD。</p>

<h2>软件质量</h2>

<p>先抛开TDD，我们来聊一下项目管理。项目管理三要素:功能，时间，质量，这3者遵守着质量守恒定律。想象一个面积不变的三角形，如果把其中任意2个点往中心点外面拉伸，那第三个点肯定会往中心点靠近。</p>

<p>在传统的项目管理中，功能和时间往往是不可妥协的，比如领导要在xx日之前完成oo功能，开发团队没办法在规定时间完成指定功能，那要怎么办呢？这时候往往就会降低软件质量来达到目的。</p>

<p>而在敏捷开发中，软件质量是不可妥协的点，在保证高质量的软件基础上对其他2个要素进行裁剪，如果你的时间是deadline，一旦改了会影响产品推广，那我们就保证完成核心功能，其他不是那么重要的功能放到下一个版本；如果功能全部都是必须的，那么请把交付时间延后。</p>

<h2>Which One</h2>

<p>在TDD三顶帽子中，你最喜欢哪一个呢？可能大部分人都喜欢绿帽子（你才喜欢绿帽子!!你全家都喜欢绿帽子!!!&hellip;&ndash;_&ndash;#），因为绿帽子表示你的测试通过了，功能完成了，系统可以上线了。但我觉得蓝帽子和红帽子更加重要，为什么呢？</p>

<p>重构在软件开发中不是一项单独的活动，有的开发人员会说等开发完了所有功能之后，再单独找时间做重构，其实这是不对的，重构不是一个很”大“的事情，而是一个个编写好代码的手法或者技巧，这是一项贯穿软件开发整个过程的一个活动，比如在开发功能的时候进行重构，抽取重复代码进行功能复用，又或者在修复Bug时对之前不合理的代码进行重构，使之更具可维护性，各个阶段我们都可以进行重构。</p>

<p>重构是提高软件质量的重要手段之一，在极限编程中有很多实践都是用于提高软件质量的，包括单元测试，持续集成，TDD，结对编程等，而重构是贯穿在这些实践中的一个活动。</p>

<p>红帽子也比较重要，TDD——测试驱动开发，要先写出测试案例和验收条件，而这需要先分析需求、提炼需求，将需求转化为测试用例，测试驱动开发实际上是需求驱动开发，所以能写出一个好的测试用例，实际上就等于已经对功能代码做好了设计。经历过结对编程的人就有这种感觉，一个人写好测试案例，再由另外一个人来写功能代码，第二个人基本上不用费什么劲就可以写出功能代码，为什么呢？因为思路已经在测试案例中体现出来了，你只要照着写就可以了。</p>

<p>要学习TDD网上有很多资料，甚至还有不少视频是演示怎么做TDD的，这里就不详细举例子了，大家可以自行在网上查阅。</p>
]]></content>
  </entry>
  
</feed>
