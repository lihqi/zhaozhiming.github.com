<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: frontend | Hacker and Geeker's Way]]></title>
  <link href="http://zhaozhiming.github.io/blog/categories/frontend/atom.xml" rel="self"/>
  <link href="http://zhaozhiming.github.io/"/>
  <updated>2018-02-13T09:24:19+08:00</updated>
  <id>http://zhaozhiming.github.io/</id>
  <author>
    <name><![CDATA[赵芝明]]></name>
    <email><![CDATA[kingzzm1982@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[超乎你想像的 styled-components]]></title>
    <link href="http://zhaozhiming.github.io/blog/2017/06/18/styled-component-beyond-the-expected/"/>
    <updated>2017-06-18T11:32:00+08:00</updated>
    <id>http://zhaozhiming.github.io/blog/2017/06/18/styled-component-beyond-the-expected</id>
    <content type="html"><![CDATA[<p>{% img /images/post/2017/06/styled-components.png 400 350 %}</p>

<p>Css 在 React 中的写法一直在持续改进，从原生的 Css 到 <a href="https://github.com/css-modules/css-modules">CSS Modules</a>，再到 Css In Js，目标是让开发者更高效地写组件的样式。</p>

<p><a href="https://www.styled-components.com/"><code>styled-components</code></a> 是基于 Css In Js 方式实现的一个库，刚开始看到这个库时，我简单地以为它只是使用了内联方式来实现 React 组件的样式，但试用了之后，才发现不仅它的实现不是内联的方式，而且因为样式是写在 JS 里面，所以它的强大远超过我的预期。</p>

<!--more-->


<h2>使用 ES6 的字符串模板</h2>

<p>使用过 React 的同学可能比较清楚，如果要在一个组件通过 JS 来定义 css 样式，就必须在 React 组件里面通过<code>style</code>属性来写。</p>

<p>{% raw %}
<code>js
const Home = () =&gt; &lt;div style={{ marginLeft: 10 }}&gt;Hello World&lt;/div&gt;;
</code>
{% endraw %}</p>

<p>这种方式有很多<code>缺点</code>：</p>

<ul>
<li>样式属性与原生 css 的写法不一致，样式名称必须用驼峰的命名方式来命令，而不是多个单词用<code>-</code>号分隔；单位的写法也不一致，百分比是用字符串形式，而<code>pixel</code>值是用数字型形式。</li>
<li>无法写伪元素，要实现<code>hover</code>的话就必须使用<code>onMouseOver</code>事件来实现，而且要写很多 JS 代码，像<code>before</code>和<code>after</code>这类伪元素则根本没法通过这种方式实现。</li>
</ul>


<p><code>styled-components</code> 最吸引开发者的是使用了 ES6 的字符串模板方式来定义 css 样式，这样使得 css 的写法与原生的 css 写法基本一致，克服了上述的缺点。</p>

<p>{% codeblock lang:js %}
const Button = styled.a`
  display: inline-block;
  border-radius: 3px;
  padding: 0.5rem 0;
  margin: 0.5rem 1rem;
  width: 11rem;
  background: transparent;
  color: white;
  border: 2px solid white;</p>

<p>  &amp; hover: {</p>

<pre><code>color: blue;
</code></pre>

<p>  }</p>

<p>  &amp; before: {</p>

<pre><code>...
</code></pre>

<p>  }
`
{% endcodeblock %}</p>

<p>那么 <code>styled-components</code> 的底层原理是什么？为什么通过 ES6 的字符串模板可以实现这种功能？感兴趣的同学可以看下下面<code>推荐阅读</code>的文章<code>styled-components-magic-explained</code>。</p>

<p>这里列举几个例子简单感受一下：</p>

<p>{% codeblock lang:js %}
// 我们有个方法来打印方法参数
const logArgs = (&hellip;args) => console.log(&hellip;args)</p>

<p>const favoriteFood = &lsquo;pizza&rsquo;
// 用正常的方法调用，输出结果跟预期一样，是一句完整的句子。
logArgs(<code>I like ${favoriteFood}.</code>) // &ndash;> I like pizza.
// 而用字符串模板的方式来调用方法，则会变成这样：句子会被变量分隔成 2 个字符串，变量值变成数组后面的参数。
logArgs<code>I like ${favoriteFood}.</code> // &ndash;> [&ldquo;I like &rdquo;, &ldquo;.&rdquo;] &ldquo;pizza&rdquo;
{% endcodeblock %}</p>

<h2>生成一个随机的 class 名称</h2>

<p>开始看到 <code>styled-components</code> 时我天真地以为它的样式是通过内联的方式放入到组件里面，其实不是，它的样式最终还是封装成一个 class 然后再放到组件里面。</p>

<p>{% img /images/post/2017/06/styled-components-class1.png %}
{% img /images/post/2017/06/styled-components-class2.png %}
{% img /images/post/2017/06/styled-components-class3.png %}</p>

<p>这样不仅避免了内联样式的局限性，而且class 的名称是一个随机的字符串，这样也完美解决了 Css 的一个大难题：样式名称重复的问题。</p>

<h2>Css In Js 的好处</h2>

<p>使用 JS 来写 css 的好处，就是可以利用 JS 的语法来封装 CSS 对象，比如可以使用<code>if</code>语句来判断需要使用哪个样式值。</p>

<p>{% codeblock lang:js %}
// 这里利用了 <code>styled-components</code> 的特性
const Button = styled.div<code>
  color: ${props =&gt; props.isActive ? 'blue': 'red'};
</code>;
{% endcodeblock %}</p>

<p>或者通过一个方法来返回一个样式对象，通过参数来动态定义样式。</p>

<p>{% codeblock lang:js %}
const Button = (color) => {
  return styled.div`</p>

<pre><code>color: ${color};
</code></pre>

<p>  `;
};
{% endcodeblock %}</p>

<p>这个是不是很眼熟？有点像<code>sass</code>等 css 预处理器中的方法？没错！通过 JS 的特性就可以让你在 JS 中做预处理器中做的事情。</p>

<h2><code>styled-components</code> 的预处理工具</h2>

<p>说到 CSS 的预处理器，其实 <code>styled-components</code> 也有一套用 JS 实现的预处理器工具库——<a href="https://github.com/styled-components/polished">polished</a>，其中包括一些常用的 CSS 方法，比如 clearfix、hsl、mix 等，让开发者可以完全不再使用 css 预处理器来写 css 了。</p>

<h2><code>theme</code> 特性</h2>

<p><code>styled-components</code> 里面还有一个比较特别的特性是<code>theme</code>，它利用了 React 的<code>context</code>特性来传递其中的参数，可以让样式对象直接从最上层的组件传递到最下层的组件。</p>

<p>{% codeblock lang:js %}
// 首先定义一个<code>theme</code>样式对象
const styleGuide = {
  cloudy: &lsquo;#F2F4F7&rsquo;,
  darkGray: &lsquo;#4A637C&rsquo;,
  gray: &lsquo;#7A8D9F&rsquo;,
  // &hellip;more colors or mixins
};</p>

<p>return (
  // 将<code>theme</code>对象传递给上层组件<code>ThemeProvider</code>（这也是 <code>styled-components</code> 的一个 API），这样下层组件就可以通过"props.theme.gray"来引用其中的样式了
  <ThemeProvider theme={styleGuide}></p>

<pre><code>&lt;App&gt;
  &lt;Switch&gt;
    &lt;AuthRoute auth={auth} exact path="/" component={DashboardView} /&gt;
    &lt;AuthRoute auth={auth} path="/profile" component={DashboardView} /&gt;
    &lt;Route path="/login" component={LoginView} /&gt;
    &lt;Route path="/logout" component={LogoutView} /&gt;
    {/* ...more routes */}
    &lt;Route component={NotFoundView} /&gt;
  &lt;/Switch&gt;
&lt;/App&gt;
</code></pre>

<p>  </ThemeProvider>
);</p>

<p>// Define our button, but with the use of props.theme this time
const Button = styled.button<code>
  font-size: 1em;
  margin: 1em;
  padding: 0.25em 1em;
  border-radius: 3px;
  /* Color the border and text with theme properties */
  color: ${props =&gt; props.theme.darkGray};
  border: 2px solid ${props =&gt; props.theme.darkGray};
</code>;
{% endcodeblock %}</p>

<h2>可以对样式对象下面的子元素进行样式定义</h2>

<p>在使用原生 css 的时候，经常会这样写样式。</p>

<p>{% codeblock lang:css %}
.foo h1 {
  font-size: 16px;
}</p>

<p>.foo h2 {
  color: red;
}
{% endcodeblock %}</p>

<p>很多 <code>styled-components</code> 新手（比如我）会为每个 h1 和 h2 定义一个样式对象，这样其实多写了很多代码，也没有必要，其实可以通过这种方式来定义子元素的样式。</p>

<p>{% codeblock lang:css %}
const FooDiv = styled.div`
  &amp; h1 {</p>

<pre><code>font-size: 16px;
</code></pre>

<p>  }</p>

<p>  &amp; h2 {</p>

<pre><code>color: red;
</code></pre>

<p>  }
`;
{% endcodeblock %}</p>

<h2>独立样式文件</h2>

<p>在一般的 React 组件中，样式和组件文件是分离的（比如 App.js 和 style.css），使用了 <code>styled-components</code> 后其实也可以沿用这种方式来组织文件，定义一个<code>style.js</code>文件来写样式对象，然后在组件文件中引入该样式文件。</p>

<p>{% codeblock lang:js %}
// style.js
import styled from &lsquo;styled-components&rsquo;;</p>

<p>export const AppDiv = styled.div<code>
  display: flex;
  justify-content: space-between;
</code>;</p>

<p>// App.js
import React from &lsquo;react&rsquo;;
import * as css from &lsquo;./style&rsquo;;</p>

<p>const App = () => &lt;css.AppDiv>Hello World&lt;/css.AppDiv>;
export default App;
{% endcodeblock %}</p>

<h2>缺点</h2>

<h3>不能用 stylelint 检查你的 Css 代码</h3>

<p>在使用 <code>styled-components</code> 的过程中也会遇到一些问题，比如我们的项目会用<code>stylelint</code>来做样式代码的检查，但是使用了 styled-compoents 后就没办法让<code>stylelint</code>的规则生效了。</p>

<h3>不能用 prettier 来格式化你的 Css 代码</h3>

<p>现在<code>prettier</code>不仅可以帮你格式化 JS 代码，还可以格式化 CSS 代码，但如果使用了<code>styled-components</code>的话，JS 中的字符串模板内容没有办法使用<code>prettier</code>来格式化，这个也比较尴尬。</p>

<h2>推荐阅读</h2>

<ul>
<li><a href="http://mxstbr.blog/2016/11/styled-components-magic-explained/">styled-components-magic-explained</a></li>
<li><a href="https://building.sentisis.com/embracing-the-power-of-styled-components-7b79a166c01b">embracing-the-power-of-styled-components</a></li>
<li><a href="https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660">a-unified-styling-language</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
